/*! jQuery v1.11.3 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.3",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b="length"in a&&a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;

return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function aa(){return!0}function ba(){return!1}function ca(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ca()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ca()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?aa:ba):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=aa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=aa,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=aa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=ba;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=ba),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function da(a){var b=ea.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var ea="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fa=/ jQuery\d+="(?:null|\d+)"/g,ga=new RegExp("<(?:"+ea+")[\\s/>]","i"),ha=/^\s+/,ia=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ja=/<([\w:]+)/,ka=/<tbody/i,la=/<|&#?\w+;/,ma=/<(?:script|style|link)/i,na=/checked\s*(?:[^=]|=\s*.checked.)/i,oa=/^$|\/(?:java|ecma)script/i,pa=/^true\/(.*)/,qa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ra={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sa=da(y),ta=sa.appendChild(y.createElement("div"));ra.optgroup=ra.option,ra.tbody=ra.tfoot=ra.colgroup=ra.caption=ra.thead,ra.th=ra.td;function ua(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ua(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function va(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wa(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xa(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function ya(a){var b=pa.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function za(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Aa(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Ba(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xa(b).text=a.text,ya(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!ga.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ta.innerHTML=a.outerHTML,ta.removeChild(f=ta.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ua(f),h=ua(a),g=0;null!=(e=h[g]);++g)d[g]&&Ba(e,d[g]);if(b)if(c)for(h=h||ua(a),d=d||ua(f),g=0;null!=(e=h[g]);g++)Aa(e,d[g]);else Aa(a,f);return d=ua(f,"script"),d.length>0&&za(d,!i&&ua(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=da(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(la.test(f)){h=h||o.appendChild(b.createElement("div")),i=(ja.exec(f)||["",""])[1].toLowerCase(),l=ra[i]||ra._default,h.innerHTML=l[1]+f.replace(ia,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&ha.test(f)&&p.push(b.createTextNode(ha.exec(f)[0])),!k.tbody){f="table"!==i||ka.test(f)?"<table>"!==l[1]||ka.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ua(p,"input"),va),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ua(o.appendChild(f),"script"),g&&za(h),c)){e=0;while(f=h[e++])oa.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wa(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ua(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&za(ua(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ua(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fa,""):void 0;if(!("string"!=typeof a||ma.test(a)||!k.htmlSerialize&&ga.test(a)||!k.leadingWhitespace&&ha.test(a)||ra[(ja.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ia,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ua(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ua(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&na.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ua(i,"script"),xa),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ua(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,ya),j=0;f>j;j++)d=g[j],oa.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qa,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Ca,Da={};function Ea(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fa(a){var b=y,c=Da[a];return c||(c=Ea(a,b),"none"!==c&&c||(Ca=(Ca||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ca[0].contentWindow||Ca[0].contentDocument).document,b.write(),b.close(),c=Ea(a,b),Ca.detach()),Da[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Ga=/^margin/,Ha=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ia,Ja,Ka=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ia=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)},Ja=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ia(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Ha.test(g)&&Ga.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ia=function(a){return a.currentStyle},Ja=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ia(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ha.test(g)&&!Ka.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function La(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight),b.removeChild(i)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Ma=/alpha\([^)]*\)/i,Na=/opacity\s*=\s*([^)]*)/,Oa=/^(none|table(?!-c[ea]).+)/,Pa=new RegExp("^("+S+")(.*)$","i"),Qa=new RegExp("^([+-])=("+S+")","i"),Ra={position:"absolute",visibility:"hidden",display:"block"},Sa={letterSpacing:"0",fontWeight:"400"},Ta=["Webkit","O","Moz","ms"];function Ua(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ta.length;while(e--)if(b=Ta[e]+c,b in a)return b;return d}function Va(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fa(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wa(a,b,c){var d=Pa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Ya(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ia(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Ja(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ha.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xa(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Ja(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ua(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qa.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ua(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Ja(a,b,d)),"normal"===f&&b in Sa&&(f=Sa[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Oa.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Ra,function(){return Ya(a,b,d)}):Ya(a,b,d):void 0},set:function(a,c,d){var e=d&&Ia(a);return Wa(a,c,d?Xa(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Na.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Ma,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Ma.test(f)?f.replace(Ma,e):f+" "+e)}}),m.cssHooks.marginRight=La(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Ja,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Ga.test(a)||(m.cssHooks[a+b].set=Wa)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ia(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Va(this,!0)},hide:function(){return Va(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Za(a,b,c,d,e){
return new Za.prototype.init(a,b,c,d,e)}m.Tween=Za,Za.prototype={constructor:Za,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")},cur:function(){var a=Za.propHooks[this.prop];return a&&a.get?a.get(this):Za.propHooks._default.get(this)},run:function(a){var b,c=Za.propHooks[this.prop];return this.options.duration?this.pos=b=m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Za.propHooks._default.set(this),this}},Za.prototype.init.prototype=Za.prototype,Za.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Za.propHooks.scrollTop=Za.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Za.prototype.init,m.fx.step={};var $a,_a,ab=/^(?:toggle|show|hide)$/,bb=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cb=/queueHooks$/,db=[ib],eb={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bb.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bb.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fb(){return setTimeout(function(){$a=void 0}),$a=m.now()}function gb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hb(a,b,c){for(var d,e=(eb[b]||[]).concat(eb["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ib(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fa(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fa(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ab.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fa(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hb(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jb(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kb(a,b,c){var d,e,f=0,g=db.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$a||fb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$a||fb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jb(k,j.opts.specialEasing);g>f;f++)if(d=db[f].call(j,a,k,j.opts))return d;return m.map(k,hb,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kb,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],eb[c]=eb[c]||[],eb[c].unshift(b)},prefilter:function(a,b){b?db.unshift(a):db.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kb(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gb(b,!0),a,d,e)}}),m.each({slideDown:gb("show"),slideUp:gb("hide"),slideToggle:gb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($a=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$a=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_a||(_a=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_a),_a=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lb=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lb,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mb,nb,ob=m.expr.attrHandle,pb=/^(?:checked|selected)$/i,qb=k.getSetAttribute,rb=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nb:mb)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rb&&qb||!pb.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qb?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nb={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rb&&qb||!pb.test(c)?a.setAttribute(!qb&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=ob[b]||m.find.attr;ob[b]=rb&&qb||!pb.test(b)?function(a,b,d){var e,f;return d||(f=ob[b],ob[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,ob[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rb&&qb||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mb&&mb.set(a,b,c)}}),qb||(mb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},ob.id=ob.name=ob.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mb.set},m.attrHooks.contenteditable={set:function(a,b,c){mb.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sb=/^(?:input|select|textarea|button|object)$/i,tb=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sb.test(a.nodeName)||tb.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var ub=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ub," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ub," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ub," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vb=m.now(),wb=/\?/,xb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yb,zb,Ab=/#.*$/,Bb=/([?&])_=[^&]*/,Cb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Db=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Eb=/^(?:GET|HEAD)$/,Fb=/^\/\//,Gb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hb={},Ib={},Jb="*/".concat("*");try{zb=location.href}catch(Kb){zb=y.createElement("a"),zb.href="",zb=zb.href}yb=Gb.exec(zb.toLowerCase())||[];function Lb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mb(a,b,c,d){var e={},f=a===Ib;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nb(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Ob(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zb,type:"GET",isLocal:Db.test(yb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nb(Nb(a,m.ajaxSettings),b):Nb(m.ajaxSettings,a)},ajaxPrefilter:Lb(Hb),ajaxTransport:Lb(Ib),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cb.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zb)+"").replace(Ab,"").replace(Fb,yb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gb.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yb[1]&&c[2]===yb[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yb[3]||("http:"===yb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mb(Hb,k,b,v),2===t)return v;h=m.event&&k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Eb.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wb.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bb.test(e)?e.replace(Bb,"$1_="+vb++):e+(wb.test(e)?"&":"?")+"_="+vb++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jb+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mb(Ib,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Ob(k,v,c)),u=Pb(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qb=/%20/g,Rb=/\[\]$/,Sb=/\r?\n/g,Tb=/^(?:submit|button|image|reset|file)$/i,Ub=/^(?:input|select|textarea|keygen)/i;function Vb(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rb.test(a)?d(a,e):Vb(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vb(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vb(c,a[c],b,e);return d.join("&").replace(Qb,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Ub.test(this.nodeName)&&!Tb.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sb,"\r\n")}}):{name:b.name,value:c.replace(Sb,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zb()||$b()}:Zb;var Wb=0,Xb={},Yb=m.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Xb)Xb[a](void 0,!0)}),k.cors=!!Yb&&"withCredentials"in Yb,Yb=k.ajax=!!Yb,Yb&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xb[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xb[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zb(){try{return new a.XMLHttpRequest}catch(b){}}function $b(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _b=[],ac=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_b.pop()||m.expando+"_"+vb++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ac.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ac.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ac,"$1"+e):b.jsonp!==!1&&(b.url+=(wb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_b.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bc=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bc)return bc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cc=a.document.documentElement;function dc(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cc;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cc})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=La(k.pixelPosition,function(a,c){return c?(c=Ja(a,b),Ha.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ec=a.jQuery,fc=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fc),b&&a.jQuery===m&&(a.jQuery=ec),m},typeof b===K&&(a.jQuery=a.$=m),m});

/*!
 * @author    Angelo Dini
 * @version   1.0
 * @copyright Distributed under the BSD License.
 */
(function(){var d="1.0";var c=window.Class;var b=window.Class=function(n){n=n||{};var m=function(){return(this.initialize)?this.initialize.apply(this,arguments):j};if(n.implement){var j=window===this?g(m.prototype):this;var l=n.implement;a(n,"implement");n=f(n,e(l))}m.prototype=g(n);m.constructor=m;m._parent=g(n);for(var k=0,h=["extend","implement","getOptions","setOptions"];k<h.length;k++){m[h[k]]=b[h[k]]}return m};b.extend=function(j){var h=this;if(j.implement){this.prototype=f(this.prototype,e(j.implement));a(j,"implement")}for(var i in j){j[i]=typeof j[i]==="function"&&/parent/.test(j[i].toString())?(function(l,k){return function(){this.parent=h._parent[k];return l.apply(this,arguments)}})(j[i],i):j[i]}this._parent=f(this._parent,j,true);this.prototype=f(this.prototype,j);return this};b.implement=function(h){return this.prototype=f(this.prototype,e(h))};b.getOptions=function(){return this.prototype.options||{}};b.setOptions=function(h){return this.prototype.options=f(this.prototype.options,h)};b.noConflict=function(){window.Class=c;return b};b.version=d;function g(i){var h=function(){};h.prototype=i.prototype||i;return new h()}function a(l,i,k){if(k){var h={};for(var j in l){if(j!==i){h[j]=l[j]}}}else{delete l[i]}return h||l}function f(h,i,k){if(!h||!i){return h||i||{}}h=g(h);i=g(i);for(var j in i){if(Object.prototype.toString.call(i[j])==="[object Object]"){f(h[j],i[j])}else{h[j]=(k&&h[j])?h[j]:i[j]}}return h}function e(l){var k={};for(var h=0;h<l.length;h++){if(typeof(l[h])==="function"){l[h]=l[h].prototype}var j=a(l[h],"initialize",true);if(j.implement){k=e(j.implement)}else{k=f(k,j)}}return k}})();
/*!
 * PEP v0.3.0 | https://github.com/jquery/PEP
 * Copyright jQuery Foundation and other contributors | http://jquery.org/license
 *
 * This file is modified for CMS. All `touch-action` attributes are now `data-touch-action`
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  global.PointerEventsPolyfill = factory()
}(this, function () { 'use strict';

  /**
   * This module implements an map of pointer states
   */
  var USE_MAP = window.Map && window.Map.prototype.forEach;
  var POINTERS_FN = function(){ return this.size; };
  function PointerMap() {
    if (USE_MAP) {
      var m = new Map();
      m.pointers = POINTERS_FN;
      return m;
    } else {
      this.keys = [];
      this.values = [];
    }
  }

  PointerMap.prototype = {
    set: function(inId, inEvent) {
      var i = this.keys.indexOf(inId);
      if (i > -1) {
        this.values[i] = inEvent;
      } else {
        this.keys.push(inId);
        this.values.push(inEvent);
      }
    },
    has: function(inId) {
      return this.keys.indexOf(inId) > -1;
    },
    'delete': function(inId) {
      var i = this.keys.indexOf(inId);
      if (i > -1) {
        this.keys.splice(i, 1);
        this.values.splice(i, 1);
      }
    },
    get: function(inId) {
      var i = this.keys.indexOf(inId);
      return this.values[i];
    },
    clear: function() {
      this.keys.length = 0;
      this.values.length = 0;
    },
    // return value, key, map
    forEach: function(callback, thisArg) {
      this.values.forEach(function(v, i) {
        callback.call(thisArg, v, this.keys[i], this);
      }, this);
    },
    pointers: function() {
      return this.keys.length;
    }
  };

  var _pointermap = PointerMap;

  var CLONE_PROPS = [
    // MouseEvent
    'bubbles',
    'cancelable',
    'view',
    'detail',
    'screenX',
    'screenY',
    'clientX',
    'clientY',
    'ctrlKey',
    'altKey',
    'shiftKey',
    'metaKey',
    'button',
    'relatedTarget',
    // DOM Level 3
    'buttons',
    // PointerEvent
    'pointerId',
    'width',
    'height',
    'pressure',
    'tiltX',
    'tiltY',
    'pointerType',
    'hwTimestamp',
    'isPrimary',
    // event instance
    'type',
    'target',
    'currentTarget',
    'which',
    'pageX',
    'pageY',
    'timeStamp'
  ];

  var CLONE_DEFAULTS = [
    // MouseEvent
    false,
    false,
    null,
    null,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    0,
    null,
    // DOM Level 3
    0,
    // PointerEvent
    0,
    0,
    0,
    0,
    0,
    0,
    '',
    0,
    false,
    // event instance
    '',
    null,
    null,
    0,
    0,
    0,
    0
  ];

  var HAS_SVG_INSTANCE = (typeof SVGElementInstance !== 'undefined');

  /**
   * This module is for normalizing events. Mouse and Touch events will be
   * collected here, and fire PointerEvents that have the same semantics, no
   * matter the source.
   * Events fired:
   *   - pointerdown: a pointing is added
   *   - pointerup: a pointer is removed
   *   - pointermove: a pointer is moved
   *   - pointerover: a pointer crosses into an element
   *   - pointerout: a pointer leaves an element
   *   - pointercancel: a pointer will no longer generate events
   */
  var dispatcher = {
    pointermap: new _pointermap(),
    eventMap: Object.create(null),
    captureInfo: Object.create(null),
    // Scope objects for native events.
    // This exists for ease of testing.
    eventSources: Object.create(null),
    eventSourceList: [],
    /**
     * Add a new event source that will generate pointer events.
     *
     * `inSource` must contain an array of event names named `events`, and
     * functions with the names specified in the `events` array.
     * @param {string} name A name for the event source
     * @param {Object} source A new source of platform events.
     */
    registerSource: function(name, source) {
      var s = source;
      var newEvents = s.events;
      if (newEvents) {
        newEvents.forEach(function(e) {
          if (s[e]) {
            this.eventMap[e] = s[e].bind(s);
          }
        }, this);
        this.eventSources[name] = s;
        this.eventSourceList.push(s);
      }
    },
    register: function(element) {
      var l = this.eventSourceList.length;
      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {
        // call eventsource register
        es.register.call(es, element);
      }
    },
    unregister: function(element) {
      var l = this.eventSourceList.length;
      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {
        // call eventsource register
        es.unregister.call(es, element);
      }
    },
    contains: /*scope.external.contains || */function(container, contained) {
      return container.contains(contained);
    },
    // EVENTS
    down: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerdown', inEvent);
    },
    move: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointermove', inEvent);
    },
    up: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerup', inEvent);
    },
    enter: function(inEvent) {
      inEvent.bubbles = false;
      this.fireEvent('pointerenter', inEvent);
    },
    leave: function(inEvent) {
      inEvent.bubbles = false;
      this.fireEvent('pointerleave', inEvent);
    },
    over: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerover', inEvent);
    },
    out: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerout', inEvent);
    },
    cancel: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointercancel', inEvent);
    },
    leaveOut: function(event) {
      this.out(event);
      if (!this.contains(event.target, event.relatedTarget)) {
        this.leave(event);
      }
    },
    enterOver: function(event) {
      this.over(event);
      if (!this.contains(event.target, event.relatedTarget)) {
        this.enter(event);
      }
    },
    // LISTENER LOGIC
    eventHandler: function(inEvent) {
      // This is used to prevent multiple dispatch of pointerevents from
      // platform events. This can happen when two elements in different scopes
      // are set up to create pointer events, which is relevant to Shadow DOM.
      if (inEvent._handledByPE) {
        return;
      }
      var type = inEvent.type;
      var fn = this.eventMap && this.eventMap[type];
      if (fn) {
        fn(inEvent);
      }
      inEvent._handledByPE = true;
    },
    // set up event listeners
    listen: function(target, events) {
      events.forEach(function(e) {
        this.addEvent(target, e);
      }, this);
    },
    // remove event listeners
    unlisten: function(target, events) {
      events.forEach(function(e) {
        this.removeEvent(target, e);
      }, this);
    },
    addEvent: /*scope.external.addEvent || */function(target, eventName) {
      target.addEventListener(eventName, this.boundHandler);
    },
    removeEvent: /*scope.external.removeEvent || */function(target, eventName) {
      target.removeEventListener(eventName, this.boundHandler);
    },
    // EVENT CREATION AND TRACKING
    /**
     * Creates a new Event of type `inType`, based on the information in
     * `inEvent`.
     *
     * @param {string} inType A string representing the type of event to create
     * @param {Event} inEvent A platform event with a target
     * @return {Event} A PointerEvent of type `inType`
     */
    makeEvent: function(inType, inEvent) {
      // relatedTarget must be null if pointer is captured
      if (this.captureInfo[inEvent.pointerId]) {
        inEvent.relatedTarget = null;
      }
      var e = new PointerEvent(inType, inEvent);
      if (inEvent.preventDefault) {
        e.preventDefault = inEvent.preventDefault;
      }
      e._target = e._target || inEvent.target;
      return e;
    },
    // make and dispatch an event in one call
    fireEvent: function(inType, inEvent) {
      var e = this.makeEvent(inType, inEvent);
      return this.dispatchEvent(e);
    },
    /**
     * Returns a snapshot of inEvent, with writable properties.
     *
     * @param {Event} inEvent An event that contains properties to copy.
     * @return {Object} An object containing shallow copies of `inEvent`'s
     *    properties.
     */
    cloneEvent: function(inEvent) {
      var eventCopy = Object.create(null), p;
      for (var i = 0; i < CLONE_PROPS.length; i++) {
        p = CLONE_PROPS[i];
        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i];
        // Work around SVGInstanceElement shadow tree
        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.
        // This is the behavior implemented by Firefox.
        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {
          if (eventCopy[p] instanceof SVGElementInstance) {
            eventCopy[p] = eventCopy[p].correspondingUseElement;
          }
        }
      }
      // keep the semantics of preventDefault
      if (inEvent.preventDefault) {
        eventCopy.preventDefault = function() {
          inEvent.preventDefault();
        };
      }
      return eventCopy;
    },
    getTarget: function(inEvent) {
      // if pointer capture is set, route all events for the specified pointerId
      // to the capture target
      return this.captureInfo[inEvent.pointerId] || inEvent._target;
    },
    setCapture: function(inPointerId, inTarget) {
      if (this.captureInfo[inPointerId]) {
        this.releaseCapture(inPointerId);
      }
      this.captureInfo[inPointerId] = inTarget;
      var e = document.createEvent('Event');
      e.initEvent('gotpointercapture', true, false);
      e.pointerId = inPointerId;
      this.implicitRelease = this.releaseCapture.bind(this, inPointerId);
      document.addEventListener('pointerup', this.implicitRelease);
      document.addEventListener('pointercancel', this.implicitRelease);
      e._target = inTarget;
      this.asyncDispatchEvent(e);
    },
    releaseCapture: function(inPointerId) {
      var t = this.captureInfo[inPointerId];
      if (t) {
        var e = document.createEvent('Event');
        e.initEvent('lostpointercapture', true, false);
        e.pointerId = inPointerId;
        this.captureInfo[inPointerId] = undefined;
        document.removeEventListener('pointerup', this.implicitRelease);
        document.removeEventListener('pointercancel', this.implicitRelease);
        e._target = t;
        this.asyncDispatchEvent(e);
      }
    },
    /**
     * Dispatches the event to its target.
     *
     * @param {Event} inEvent The event to be dispatched.
     * @return {Boolean} True if an event handler returns true, false otherwise.
     */
    dispatchEvent: /*scope.external.dispatchEvent || */function(inEvent) {
      var t = this.getTarget(inEvent);
      if (t) {
        return t.dispatchEvent(inEvent);
      }
    },
    asyncDispatchEvent: function(inEvent) {
      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));
    }
  };
  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);

  var _dispatcher = dispatcher;

  var targeting = {
    shadow: function(inEl) {
      if (inEl) {
        return inEl.shadowRoot || inEl.webkitShadowRoot;
      }
    },
    canTarget: function(shadow) {
      return shadow && Boolean(shadow.elementFromPoint);
    },
    targetingShadow: function(inEl) {
      var s = this.shadow(inEl);
      if (this.canTarget(s)) {
        return s;
      }
    },
    olderShadow: function(shadow) {
      var os = shadow.olderShadowRoot;
      if (!os) {
        var se = shadow.querySelector('shadow');
        if (se) {
          os = se.olderShadowRoot;
        }
      }
      return os;
    },
    allShadows: function(element) {
      var shadows = [], s = this.shadow(element);
      while(s) {
        shadows.push(s);
        s = this.olderShadow(s);
      }
      return shadows;
    },
    searchRoot: function(inRoot, x, y) {
      if (inRoot) {
        var t = inRoot.elementFromPoint(x, y);
        var st, sr, os;
        // is element a shadow host?
        sr = this.targetingShadow(t);
        while (sr) {
          // find the the element inside the shadow root
          st = sr.elementFromPoint(x, y);
          if (!st) {
            // check for older shadows
            sr = this.olderShadow(sr);
          } else {
            // shadowed element may contain a shadow root
            var ssr = this.targetingShadow(st);
            return this.searchRoot(ssr, x, y) || st;
          }
        }
        // light dom element is the target
        return t;
      }
    },
    owner: function(element) {
      var s = element;
      // walk up until you hit the shadow root or document
      while (s.parentNode) {
        s = s.parentNode;
      }
      // the owner element is expected to be a Document or ShadowRoot
      if (s.nodeType != Node.DOCUMENT_NODE && s.nodeType != Node.DOCUMENT_FRAGMENT_NODE) {
        s = document;
      }
      return s;
    },
    findTarget: function(inEvent) {
      var x = inEvent.clientX, y = inEvent.clientY;
      // if the listener is in the shadow root, it is much faster to start there
      var s = this.owner(inEvent.target);
      // if x, y is not in this root, fall back to document search
      if (!s.elementFromPoint(x, y)) {
        s = document;
      }
      return this.searchRoot(s, x, y);
    }
  };

  /**
   * This module uses Mutation Observers to dynamically adjust which nodes will
   * generate Pointer Events.
   *
   * All nodes that wish to generate Pointer Events must have the attribute
   * `data-touch-action` set to `none`.
   */
  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
  var map = Array.prototype.map.call.bind(Array.prototype.map);
  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);
  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);
  var MO = window.MutationObserver || window.WebKitMutationObserver;
  var SELECTOR = '[data-touch-action]';
  var OBSERVER_INIT = {
    subtree: true,
    childList: true,
    attributes: true,
    attributeOldValue: true,
    attributeFilter: ['data-touch-action']
  };

  function Installer(add, remove, changed, binder) {
    this.addCallback = add.bind(binder);
    this.removeCallback = remove.bind(binder);
    this.changedCallback = changed.bind(binder);
    if (MO) {
      this.observer = new MO(this.mutationWatcher.bind(this));
    }
  }

  Installer.prototype = {
    watchSubtree: function(target) {
      // Only watch scopes that can target find, as these are top-level.
      // Otherwise we can see duplicate additions and removals that add noise.
      //
      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see
      // a removal without an insertion when a node is redistributed among
      // shadows. Since it all ends up correct in the document, watching only
      // the document will yield the correct mutations to watch.
      if (targeting.canTarget(target)) {
        this.observer.observe(target, OBSERVER_INIT);
      }
    },
    enableOnSubtree: function(target) {
      this.watchSubtree(target);
      if (target === document && document.readyState !== 'complete') {
        this.installOnLoad();
      } else {
        this.installNewSubtree(target);
      }
    },
    installNewSubtree: function(target) {
      forEach(this.findElements(target), this.addElement, this);
    },
    findElements: function(target) {
      if (target.querySelectorAll) {
        return target.querySelectorAll(SELECTOR);
      }
      return [];
    },
    removeElement: function(el) {
      this.removeCallback(el);
    },
    addElement: function(el) {
      this.addCallback(el);
    },
    elementChanged: function(el, oldValue) {
      this.changedCallback(el, oldValue);
    },
    concatLists: function(accum, list) {
      return accum.concat(toArray(list));
    },
    // register all data-touch-action = none nodes on document load
    installOnLoad: function() {
      document.addEventListener('readystatechange', function() {
        if (document.readyState === 'complete') {
          this.installNewSubtree(document);
        }
      }.bind(this));
    },
    isElement: function(n) {
      return n.nodeType === Node.ELEMENT_NODE;
    },
    flattenMutationTree: function(inNodes) {
      // find children with data-touch-action
      var tree = map(inNodes, this.findElements, this);
      // make sure the added nodes are accounted for
      tree.push(filter(inNodes, this.isElement));
      // flatten the list
      return tree.reduce(this.concatLists, []);
    },
    mutationWatcher: function(mutations) {
      mutations.forEach(this.mutationHandler, this);
    },
    mutationHandler: function(m) {
      if (m.type === 'childList') {
        var added = this.flattenMutationTree(m.addedNodes);
        added.forEach(this.addElement, this);
        var removed = this.flattenMutationTree(m.removedNodes);
        removed.forEach(this.removeElement, this);
      } else if (m.type === 'attributes') {
        this.elementChanged(m.target, m.oldValue);
      }
    }
  };

  if (!MO) {
    Installer.prototype.watchSubtree = function(){
      console.warn('PointerEventsPolyfill: MutationObservers not found, data-touch-action will not be dynamically detected');
    };
  }

  var installer = Installer;

  /**
   * This is the constructor for new PointerEvents.
   *
   * New Pointer Events must be given a type, and an optional dictionary of
   * initialization properties.
   *
   * Due to certain platform requirements, events returned from the constructor
   * identify as MouseEvents.
   *
   * @constructor
   * @param {String} inType The type of the event to create.
   * @param {Object} [inDict] An optional dictionary of initial event properties.
   * @return {Event} A new PointerEvent of type `inType` and initialized with properties from `inDict`.
   */
  var MOUSE_PROPS = [
    'bubbles',
    'cancelable',
    'view',
    'detail',
    'screenX',
    'screenY',
    'clientX',
    'clientY',
    'ctrlKey',
    'altKey',
    'shiftKey',
    'metaKey',
    'button',
    'relatedTarget',
    'pageX',
    'pageY'
  ];

  var MOUSE_DEFAULTS = [
    false,
    false,
    null,
    null,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    0,
    null,
    0,
    0
  ];

  function _PointerEvent__PointerEvent(inType, inDict) {
    inDict = inDict || Object.create(null);

    var e = document.createEvent('Event');
    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);

    // define inherited MouseEvent properties
    // skip bubbles and cancelable since they're set above in initEvent()
    for(var i = 2, p; i < MOUSE_PROPS.length; i++) {
      p = MOUSE_PROPS[i];
      e[p] = inDict[p] || MOUSE_DEFAULTS[i];
    }
    e.buttons = inDict.buttons || 0;

    // Spec requires that pointers without pressure specified use 0.5 for down
    // state and 0 for up state.
    var pressure = 0;
    if (inDict.pressure) {
      pressure = inDict.pressure;
    } else {
      pressure = e.buttons ? 0.5 : 0;
    }

    // add x/y properties aliased to clientX/Y
    e.x = e.clientX;
    e.y = e.clientY;

    // define the properties of the PointerEvent interface
    e.pointerId = inDict.pointerId || 0;
    e.width = inDict.width || 0;
    e.height = inDict.height || 0;
    e.pressure = pressure;
    e.tiltX = inDict.tiltX || 0;
    e.tiltY = inDict.tiltY || 0;
    e.pointerType = inDict.pointerType || '';
    e.hwTimestamp = inDict.hwTimestamp || 0;
    e.isPrimary = inDict.isPrimary || false;
    return e;
  }

  var _PointerEvent = _PointerEvent__PointerEvent;

  function shadowSelector(v) {
    return 'body /shadow-deep/ ' + selector(v);
  }
  function selector(v) {
    return '[data-touch-action="' + v + '"]';
  }
  function rule(v) {
    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; touch-action-delay: none; }';
  }
  var attrib2css = [
    'none',
    'auto',
    'pan-x',
    'pan-y',
    {
      rule: 'pan-x pan-y',
      selectors: [
        'pan-x pan-y',
        'pan-y pan-x'
      ]
    }
  ];
  var styles = '';
  // only install stylesheet if the browser has touch action support
  var head = document.head;
  var hasNativePE = window.PointerEvent || window.MSPointerEvent;
  // only add shadow selectors if shadowdom is supported
  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;

  function applyAttributeStyles() {
    if (hasNativePE) {
      attrib2css.forEach(function(r) {
        if (String(r) === r) {
          styles += selector(r) + rule(r) + '\n';
          if (hasShadowRoot) {
            styles += shadowSelector(r) + rule(r) + '\n';
          }
        } else {
          styles += r.selectors.map(selector) + rule(r.rule) + '\n';
          if (hasShadowRoot) {
            styles += r.selectors.map(shadowSelector) + rule(r.rule) + '\n';
          }
        }
      });

      var el = document.createElement('style');
      el.textContent = styles;
      document.head.appendChild(el);
    }
  }

  var mouse__pointermap = _dispatcher.pointermap;
  // radius around touchend that swallows mouse events
  var DEDUP_DIST = 25;

  var WHICH_TO_BUTTONS = [0, 1, 4, 2];

  var HAS_BUTTONS = false;
  try {
    HAS_BUTTONS = new MouseEvent('test', {buttons: 1}).buttons === 1;
  } catch (e) {}

  // handler block for native mouse events
  var mouseEvents = {
    POINTER_ID: 1,
    POINTER_TYPE: 'mouse',
    events: [
      'mousedown',
      'mousemove',
      'mouseup',
      'mouseover',
      'mouseout'
    ],
    register: function(target) {
      _dispatcher.listen(target, this.events);
    },
    unregister: function(target) {
      _dispatcher.unlisten(target, this.events);
    },
    lastTouches: [],
    // collide with the global mouse listener
    isEventSimulatedFromTouch: function(inEvent) {
      var lts = this.lastTouches;
      var x = inEvent.clientX, y = inEvent.clientY;
      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {
        // simulated mouse events will be swallowed near a primary touchend
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
          return true;
        }
      }
    },
    prepareEvent: function(inEvent) {
      var e = _dispatcher.cloneEvent(inEvent);
      // forward mouse preventDefault
      var pd = e.preventDefault;
      e.preventDefault = function() {
        inEvent.preventDefault();
        pd();
      };
      e.pointerId = this.POINTER_ID;
      e.isPrimary = true;
      e.pointerType = this.POINTER_TYPE;
      if (!HAS_BUTTONS) {
        e.buttons = WHICH_TO_BUTTONS[e.which] || 0;
      }
      return e;
    },
    mousedown: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var p = mouse__pointermap.has(this.POINTER_ID);
        // TODO(dfreedman) workaround for some elements not sending mouseup
        // http://crbug/149091
        if (p) {
          this.cancel(inEvent);
        }
        var e = this.prepareEvent(inEvent);
        mouse__pointermap.set(this.POINTER_ID, inEvent);
        _dispatcher.down(e);
      }
    },
    mousemove: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        _dispatcher.move(e);
      }
    },
    mouseup: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var p = mouse__pointermap.get(this.POINTER_ID);
        if (p && p.button === inEvent.button) {
          var e = this.prepareEvent(inEvent);
          _dispatcher.up(e);
          this.cleanupMouse();
        }
      }
    },
    mouseover: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        _dispatcher.enterOver(e);
      }
    },
    mouseout: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        _dispatcher.leaveOut(e);
      }
    },
    cancel: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.cancel(e);
      this.cleanupMouse();
    },
    cleanupMouse: function() {
      mouse__pointermap['delete'](this.POINTER_ID);
    }
  };

  var mouse = mouseEvents;

  var captureInfo = _dispatcher.captureInfo;
  var findTarget = targeting.findTarget.bind(targeting);
  var allShadows = targeting.allShadows.bind(targeting);
  var touch__pointermap = _dispatcher.pointermap;
  var touchMap = Array.prototype.map.call.bind(Array.prototype.map);
  // This should be long enough to ignore compat mouse events made by touch
  var DEDUP_TIMEOUT = 2500;
  var CLICK_COUNT_TIMEOUT = 200;
  var ATTRIB = 'data-touch-action';
  var INSTALLER;
  // The presence of touch event handlers blocks scrolling, and so we must be careful to
  // avoid adding handlers unnecessarily.  Chrome plans to add a touch-action-delay property
  // (crbug.com/329559) to address this, and once we have that we can opt-in to a simpler
  // handler registration mechanism.  Rather than try to predict how exactly to opt-in to
  // that we'll just leave this disabled until there is a build of Chrome to test.
  var HAS_TOUCH_ACTION_DELAY = false;

  // handler block for native touch events
  var touchEvents = {
    events: [
      'touchstart',
      'touchmove',
      'touchend',
      'touchcancel'
    ],
    register: function(target) {
      if (HAS_TOUCH_ACTION_DELAY) {
        _dispatcher.listen(target, this.events);
      } else {
        INSTALLER.enableOnSubtree(target);
      }
    },
    unregister: function(target) {
      if (HAS_TOUCH_ACTION_DELAY) {
        _dispatcher.unlisten(target, this.events);
      } else {
        // TODO(dfreedman): is it worth it to disconnect the MO?
      }
    },
    elementAdded: function(el) {
      var a = el.getAttribute(ATTRIB);
      var st = this.touchActionToScrollType(a);
      if (st) {
        el._scrollType = st;
        _dispatcher.listen(el, this.events);
        // set data-touch-action on shadows as well
        allShadows(el).forEach(function(s) {
          s._scrollType = st;
          _dispatcher.listen(s, this.events);
        }, this);
      }
    },
    elementRemoved: function(el) {
      el._scrollType = undefined;
      _dispatcher.unlisten(el, this.events);
      // remove data-touch-action from shadow
      allShadows(el).forEach(function(s) {
        s._scrollType = undefined;
        _dispatcher.unlisten(s, this.events);
      }, this);
    },
    elementChanged: function(el, oldValue) {
      var a = el.getAttribute(ATTRIB);
      var st = this.touchActionToScrollType(a);
      var oldSt = this.touchActionToScrollType(oldValue);
      // simply update scrollType if listeners are already established
      if (st && oldSt) {
        el._scrollType = st;
        allShadows(el).forEach(function(s) {
          s._scrollType = st;
        }, this);
      } else if (oldSt) {
        this.elementRemoved(el);
      } else if (st) {
        this.elementAdded(el);
      }
    },
    scrollTypes: {
      EMITTER: 'none',
      XSCROLLER: 'pan-x',
      YSCROLLER: 'pan-y',
      SCROLLER: /^(?:pan-x pan-y)|(?:pan-y pan-x)|auto$/
    },
    touchActionToScrollType: function(touchAction) {
      var t = touchAction;
      var st = this.scrollTypes;
      if (t === 'none') {
        return 'none';
      } else if (t === st.XSCROLLER) {
        return 'X';
      } else if (t === st.YSCROLLER) {
        return 'Y';
      } else if (st.SCROLLER.exec(t)) {
        return 'XY';
      }
    },
    POINTER_TYPE: 'touch',
    firstTouch: null,
    isPrimaryTouch: function(inTouch) {
      return this.firstTouch === inTouch.identifier;
    },
    setPrimaryTouch: function(inTouch) {
      // set primary touch if there no pointers, or the only pointer is the mouse
      if (touch__pointermap.pointers() === 0 || (touch__pointermap.pointers() === 1 && touch__pointermap.has(1))) {
        this.firstTouch = inTouch.identifier;
        this.firstXY = {X: inTouch.clientX, Y: inTouch.clientY};
        this.scrolling = false;
        this.cancelResetClickCount();
      }
    },
    removePrimaryPointer: function(inPointer) {
      if (inPointer.isPrimary) {
        this.firstTouch = null;
        this.firstXY = null;
        this.resetClickCount();
      }
    },
    clickCount: 0,
    resetId: null,
    resetClickCount: function() {
      var fn = function() {
        this.clickCount = 0;
        this.resetId = null;
      }.bind(this);
      this.resetId = setTimeout(fn, CLICK_COUNT_TIMEOUT);
    },
    cancelResetClickCount: function() {
      if (this.resetId) {
        clearTimeout(this.resetId);
      }
    },
    typeToButtons: function(type) {
      var ret = 0;
      if (type === 'touchstart' || type === 'touchmove') {
        ret = 1;
      }
      return ret;
    },
    touchToPointer: function(inTouch) {
      var cte = this.currentTouchEvent;
      var e = _dispatcher.cloneEvent(inTouch);
      // Spec specifies that pointerId 1 is reserved for Mouse.
      // Touch identifiers can start at 0.
      // Add 2 to the touch identifier for compatibility.
      var id = e.pointerId = inTouch.identifier + 2;
      e.target = captureInfo[id] || findTarget(e);
      e.bubbles = true;
      e.cancelable = true;
      e.detail = this.clickCount;
      e.button = 0;
      e.buttons = this.typeToButtons(cte.type);
      e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;
      e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;
      e.pressure = inTouch.webkitForce || inTouch.force || 0.5;
      e.isPrimary = this.isPrimaryTouch(inTouch);
      e.pointerType = this.POINTER_TYPE;
      // forward touch preventDefaults
      var self = this;
      e.preventDefault = function() {
        self.scrolling = false;
        self.firstXY = null;
        cte.preventDefault();
      };
      return e;
    },
    processTouches: function(inEvent, inFunction) {
      var tl = inEvent.changedTouches;
      this.currentTouchEvent = inEvent;
      for (var i = 0, t; i < tl.length; i++) {
        t = tl[i];
        inFunction.call(this, this.touchToPointer(t));
      }
    },
    // For single axis scrollers, determines whether the element should emit
    // pointer events or behave as a scroller
    shouldScroll: function(inEvent) {
      if (this.firstXY) {
        var ret;
        var scrollAxis = inEvent.currentTarget._scrollType;
        if (scrollAxis === 'none') {
          // this element is a touch-action: none, should never scroll
          ret = false;
        } else if (scrollAxis === 'XY') {
          // this element should always scroll
          ret = true;
        } else {
          var t = inEvent.changedTouches[0];
          // check the intended scroll axis, and other axis
          var a = scrollAxis;
          var oa = scrollAxis === 'Y' ? 'X' : 'Y';
          var da = Math.abs(t['client' + a] - this.firstXY[a]);
          var doa = Math.abs(t['client' + oa] - this.firstXY[oa]);
          // if delta in the scroll axis > delta other axis, scroll instead of
          // making events
          ret = da >= doa;
        }
        this.firstXY = null;
        return ret;
      }
    },
    findTouch: function(inTL, inId) {
      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {
        if (t.identifier === inId) {
          return true;
        }
      }
    },
    // In some instances, a touchstart can happen without a touchend. This
    // leaves the pointermap in a broken state.
    // Therefore, on every touchstart, we remove the touches that did not fire a
    // touchend event.
    // To keep state globally consistent, we fire a
    // pointercancel for this "abandoned" touch
    vacuumTouches: function(inEvent) {
      var tl = inEvent.touches;
      // pointermap.pointers() should be < tl.length here, as the touchstart has not
      // been processed yet.
      if (touch__pointermap.pointers() >= tl.length) {
        var d = [];
        touch__pointermap.forEach(function(value, key) {
          // Never remove pointerId == 1, which is mouse.
          // Touch identifiers are 2 smaller than their pointerId, which is the
          // index in pointermap.
          if (key !== 1 && !this.findTouch(tl, key - 2)) {
            var p = value.out;
            d.push(p);
          }
        }, this);
        d.forEach(this.cancelOut, this);
      }
    },
    touchstart: function(inEvent) {
      this.vacuumTouches(inEvent);
      this.setPrimaryTouch(inEvent.changedTouches[0]);
      this.dedupSynthMouse(inEvent);
      if (!this.scrolling) {
        this.clickCount++;
        this.processTouches(inEvent, this.overDown);
      }
    },
    overDown: function(inPointer) {
      var p = touch__pointermap.set(inPointer.pointerId, {
        target: inPointer.target,
        out: inPointer,
        outTarget: inPointer.target
      });
      _dispatcher.over(inPointer);
      _dispatcher.enter(inPointer);
      _dispatcher.down(inPointer);
    },
    touchmove: function(inEvent) {
      if (!this.scrolling) {
        if (this.shouldScroll(inEvent)) {
          this.scrolling = true;
          this.touchcancel(inEvent);
        } else {
          inEvent.preventDefault();
          this.processTouches(inEvent, this.moveOverOut);
        }
      }
    },
    moveOverOut: function(inPointer) {
      var event = inPointer;
      var pointer = touch__pointermap.get(event.pointerId);
      // a finger drifted off the screen, ignore it
      if (!pointer) {
        return;
      }
      var outEvent = pointer.out;
      var outTarget = pointer.outTarget;
      _dispatcher.move(event);
      if (outEvent && outTarget !== event.target) {
        outEvent.relatedTarget = event.target;
        event.relatedTarget = outTarget;
        // recover from retargeting by shadow
        outEvent.target = outTarget;
        if (event.target) {
          _dispatcher.leaveOut(outEvent);
          _dispatcher.enterOver(event);
        } else {
          // clean up case when finger leaves the screen
          event.target = outTarget;
          event.relatedTarget = null;
          this.cancelOut(event);
        }
      }
      pointer.out = event;
      pointer.outTarget = event.target;
    },
    touchend: function(inEvent) {
      this.dedupSynthMouse(inEvent);
      this.processTouches(inEvent, this.upOut);
    },
    upOut: function(inPointer) {
      if (!this.scrolling) {
        _dispatcher.up(inPointer);
        _dispatcher.out(inPointer);
        _dispatcher.leave(inPointer);
      }
      this.cleanUpPointer(inPointer);
    },
    touchcancel: function(inEvent) {
      this.processTouches(inEvent, this.cancelOut);
    },
    cancelOut: function(inPointer) {
      _dispatcher.cancel(inPointer);
      _dispatcher.out(inPointer);
      _dispatcher.leave(inPointer);
      this.cleanUpPointer(inPointer);
    },
    cleanUpPointer: function(inPointer) {
      touch__pointermap['delete'](inPointer.pointerId);
      this.removePrimaryPointer(inPointer);
    },
    // prevent synth mouse events from creating pointer events
    dedupSynthMouse: function(inEvent) {
      var lts = mouse.lastTouches;
      var t = inEvent.changedTouches[0];
      // only the primary finger will synth mouse events
      if (this.isPrimaryTouch(t)) {
        // remember x/y of last touch
        var lt = {x: t.clientX, y: t.clientY};
        lts.push(lt);
        var fn = (function(lts, lt){
          var i = lts.indexOf(lt);
          if (i > -1) {
            lts.splice(i, 1);
          }
        }).bind(null, lts, lt);
        setTimeout(fn, DEDUP_TIMEOUT);
      }
    }
  };

  if (!HAS_TOUCH_ACTION_DELAY) {
    INSTALLER = new installer(touchEvents.elementAdded, touchEvents.elementRemoved, touchEvents.elementChanged, touchEvents);
  }

  var touch = touchEvents;

  var ms__pointermap = _dispatcher.pointermap;
  var HAS_BITMAP_TYPE = window.MSPointerEvent && typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';
  var msEvents = {
    events: [
      'MSPointerDown',
      'MSPointerMove',
      'MSPointerUp',
      'MSPointerOut',
      'MSPointerOver',
      'MSPointerCancel',
      'MSGotPointerCapture',
      'MSLostPointerCapture'
    ],
    register: function(target) {
      _dispatcher.listen(target, this.events);
    },
    unregister: function(target) {
      _dispatcher.unlisten(target, this.events);
    },
    POINTER_TYPES: [
      '',
      'unavailable',
      'touch',
      'pen',
      'mouse'
    ],
    prepareEvent: function(inEvent) {
      var e = inEvent;
      if (HAS_BITMAP_TYPE) {
        e = _dispatcher.cloneEvent(inEvent);
        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];
      }
      return e;
    },
    cleanup: function(id) {
      ms__pointermap['delete'](id);
    },
    MSPointerDown: function(inEvent) {
      ms__pointermap.set(inEvent.pointerId, inEvent);
      var e = this.prepareEvent(inEvent);
      _dispatcher.down(e);
    },
    MSPointerMove: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.move(e);
    },
    MSPointerUp: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.up(e);
      this.cleanup(inEvent.pointerId);
    },
    MSPointerOut: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.leaveOut(e);
    },
    MSPointerOver: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.enterOver(e);
    },
    MSPointerCancel: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.cancel(e);
      this.cleanup(inEvent.pointerId);
    },
    MSLostPointerCapture: function(inEvent) {
      var e = _dispatcher.makeEvent('lostpointercapture', inEvent);
      _dispatcher.dispatchEvent(e);
    },
    MSGotPointerCapture: function(inEvent) {
      var e = _dispatcher.makeEvent('gotpointercapture', inEvent);
      _dispatcher.dispatchEvent(e);
    }
  };

  var ms = msEvents;

  function platform_events__applyPolyfill() {
    // only activate if this platform does not have pointer events
    if (!window.PointerEvent) {
      window.PointerEvent = _PointerEvent;

      if (window.navigator.msPointerEnabled) {
        var tp = window.navigator.msMaxTouchPoints;
        Object.defineProperty(window.navigator, 'maxTouchPoints', {
          value: tp,
          enumerable: true
        });
        _dispatcher.registerSource('ms', ms);
      } else {
        _dispatcher.registerSource('mouse', mouse);
        if (window.ontouchstart !== undefined) {
          _dispatcher.registerSource('touch', touch);
        }
      }

      _dispatcher.register(document);
    }
  }

  var n = window.navigator;
  var s, r;
  function assertDown(id) {
    if (!_dispatcher.pointermap.has(id)) {
      throw new Error('InvalidPointerId');
    }
  }
  if (n.msPointerEnabled) {
    s = function(pointerId) {
      assertDown(pointerId);
      this.msSetPointerCapture(pointerId);
    };
    r = function(pointerId) {
      assertDown(pointerId);
      this.msReleasePointerCapture(pointerId);
    };
  } else {
    s = function setPointerCapture(pointerId) {
      assertDown(pointerId);
      _dispatcher.setCapture(pointerId, this);
    };
    r = function releasePointerCapture(pointerId) {
      assertDown(pointerId);
      _dispatcher.releaseCapture(pointerId, this);
    };
  }

  function capture__applyPolyfill() {
    if (window.Element && !Element.prototype.setPointerCapture) {
      Object.defineProperties(Element.prototype, {
        'setPointerCapture': {
          value: s
        },
        'releasePointerCapture': {
          value: r
        }
      });
    }
  }

  applyAttributeStyles();
  platform_events__applyPolyfill();
  capture__applyPolyfill();

  var pointerevents = {
    dispatcher: _dispatcher,
    Installer: installer,
    PointerEvent: _PointerEvent,
    PointerMap: _pointermap,
    targetFinding: targeting
  };

  return pointerevents;

}));

/*! jQuery UI - v1.11.4 - 2015-11-13
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, sortable.js, effect.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){function t(t,s){var n,a,o,r=t.nodeName.toLowerCase();return"area"===r?(n=t.parentNode,a=n.name,t.href&&a&&"map"===n.nodeName.toLowerCase()?(o=e("img[usemap='#"+a+"']")[0],!!o&&i(o)):!1):(/^(input|select|textarea|button|object)$/.test(r)?!t.disabled:"a"===r?t.href||s:s)&&i(t)}function i(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}e.ui=e.ui||{},e.extend(e.ui,{version:"1.11.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({scrollParent:function(t){var i=this.css("position"),s="absolute"===i,n=t?/(auto|scroll|hidden)/:/(auto|scroll)/,a=this.parents().filter(function(){var t=e(this);return s&&"static"===t.css("position")?!1:n.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))}).eq(0);return"fixed"!==i&&a.length?a:e(this[0].ownerDocument||document)},uniqueId:function(){var e=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++e)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(i){return t(i,!isNaN(e.attr(i,"tabindex")))},tabbable:function(i){var s=e.attr(i,"tabindex"),n=isNaN(s);return(n||s>=0)&&t(i,!n)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(t,i){function s(t,i,s,a){return e.each(n,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),a&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],a=i.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+i]=function(t){return void 0===t?o["inner"+i].call(this):this.each(function(){e(this).css(a,s(this,t)+"px")})},e.fn["outer"+i]=function(t,n){return"number"!=typeof t?o["outer"+i].call(this,t):this.each(function(){e(this).css(a,s(this,t,!0,n)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),disableSelection:function(){var e="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(e+".ui-disableSelection",function(e){e.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(t){if(void 0!==t)return this.css("zIndex",t);if(this.length)for(var i,s,n=e(this[0]);n.length&&n[0]!==document;){if(i=n.css("position"),("absolute"===i||"relative"===i||"fixed"===i)&&(s=parseInt(n.css("zIndex"),10),!isNaN(s)&&0!==s))return s;n=n.parent()}return 0}}),e.ui.plugin={add:function(t,i,s){var n,a=e.ui[t].prototype;for(n in s)a.plugins[n]=a.plugins[n]||[],a.plugins[n].push([i,s[n]])},call:function(e,t,i,s){var n,a=e.plugins[t];if(a&&(s||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(n=0;a.length>n;n++)e.options[a[n][0]]&&a[n][1].apply(e.element,i)}};var s=0,n=Array.prototype.slice;e.cleanData=function(t){return function(i){var s,n,a;for(a=0;null!=(n=i[a]);a++)try{s=e._data(n,"events"),s&&s.remove&&e(n).triggerHandler("remove")}catch(o){}t(i)}}(e.cleanData),e.widget=function(t,i,s){var n,a,o,r,h={},l=t.split(".")[0];return t=t.split(".")[1],n=l+"-"+t,s||(s=i,i=e.Widget),e.expr[":"][n.toLowerCase()]=function(t){return!!e.data(t,n)},e[l]=e[l]||{},a=e[l][t],o=e[l][t]=function(e,t){return this._createWidget?(arguments.length&&this._createWidget(e,t),void 0):new o(e,t)},e.extend(o,a,{version:s.version,_proto:e.extend({},s),_childConstructors:[]}),r=new i,r.options=e.widget.extend({},r.options),e.each(s,function(t,s){return e.isFunction(s)?(h[t]=function(){var e=function(){return i.prototype[t].apply(this,arguments)},n=function(e){return i.prototype[t].apply(this,e)};return function(){var t,i=this._super,a=this._superApply;return this._super=e,this._superApply=n,t=s.apply(this,arguments),this._super=i,this._superApply=a,t}}(),void 0):(h[t]=s,void 0)}),o.prototype=e.widget.extend(r,{widgetEventPrefix:a?r.widgetEventPrefix||t:t},h,{constructor:o,namespace:l,widgetName:t,widgetFullName:n}),a?(e.each(a._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete a._childConstructors):i._childConstructors.push(o),e.widget.bridge(t,o),o},e.widget.extend=function(t){for(var i,s,a=n.call(arguments,1),o=0,r=a.length;r>o;o++)for(i in a[o])s=a[o][i],a[o].hasOwnProperty(i)&&void 0!==s&&(t[i]=e.isPlainObject(s)?e.isPlainObject(t[i])?e.widget.extend({},t[i],s):e.widget.extend({},s):s);return t},e.widget.bridge=function(t,i){var s=i.prototype.widgetFullName||t;e.fn[t]=function(a){var o="string"==typeof a,r=n.call(arguments,1),h=this;return o?this.each(function(){var i,n=e.data(this,s);return"instance"===a?(h=n,!1):n?e.isFunction(n[a])&&"_"!==a.charAt(0)?(i=n[a].apply(n,r),i!==n&&void 0!==i?(h=i&&i.jquery?h.pushStack(i.get()):i,!1):void 0):e.error("no such method '"+a+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; "+"attempted to call method '"+a+"'")}):(r.length&&(a=e.widget.extend.apply(null,[a].concat(r))),this.each(function(){var t=e.data(this,s);t?(t.option(a||{}),t._init&&t._init()):e.data(this,s,new i(a,this))})),h}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=s++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(t,i){var s,n,a,o=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(o={},s=t.split("."),t=s.shift(),s.length){for(n=o[t]=e.widget.extend({},this.options[t]),a=0;s.length-1>a;a++)n[s[a]]=n[s[a]]||{},n=n[s[a]];if(t=s.pop(),1===arguments.length)return void 0===n[t]?null:n[t];n[t]=i}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];o[t]=i}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!t),t&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(t,i,s){var n,a=this;"boolean"!=typeof t&&(s=i,i=t,t=!1),s?(i=n=e(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),e.each(s,function(s,o){function r(){return t||a.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof o?a[o]:o).apply(a,arguments):void 0}"string"!=typeof o&&(r.guid=o.guid=o.guid||r.guid||e.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+a.eventNamespace,u=h[2];u?n.delegate(u,l,r):i.bind(l,r)})},_off:function(t,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(i).undelegate(i),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,o=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(o)&&o.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var o,r=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),o=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),o&&e.effects&&e.effects.effect[r]?s[t](n):r!==t&&s[r]?s[r](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}}),e.widget;var a=!1;e(document).mouseup(function(){a=!1}),e.widget("ui.mouse",{version:"1.11.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(!a){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var i=this,s=1===t.which,n="string"==typeof this.options.cancel&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(t)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(t)!==!1,!this._mouseStarted)?(t.preventDefault(),!0):(!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return i._mouseMove(e)},this._mouseUpDelegate=function(e){return i._mouseUp(e)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),a=!0,!0)):!0}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button)return this._mouseUp(t);if(!t.which)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),a=!1,!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),e.widget("ui.sortable",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,i){return e>=t&&t+i>e},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),e.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,i){var s=null,n=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(t),e(t.target).parents().each(function(){return e.data(this,a.widgetName+"-item")===a?(s=e(this),!1):void 0}),e.data(t.target,a.widgetName+"-item")===a&&(s=e(t.target)),s?!this.options.handle||i||(e(this.options.handle,s).find("*").addBack().each(function(){this===t.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(t,i,s){var n,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=e("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var i,s,n,a,o=this.options,r=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:t.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:t.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(t.pageY-this.document.scrollTop()<o.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-o.scrollSpeed):this.window.height()-(t.pageY-this.document.scrollTop())<o.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+o.scrollSpeed)),t.pageX-this.document.scrollLeft()<o.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-o.scrollSpeed):this.window.width()-(t.pageX-this.document.scrollLeft())<o.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+o.scrollSpeed))),r!==!1&&e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],a=this._intersectsWithPointer(s),a&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==n&&!e.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!e.contains(this.element[0],n):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(t,s),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,i){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var s=this,n=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){s._clear(t)})}else this._clear(t,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},e(i).each(function(){var i=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);i&&s.push((t.key||i[1]+"[]")+"="+(t.key&&t.expression?i[1]:i[2]))}),!s.length&&t.key&&s.push(t.key+"="),s.join("&")},toArray:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},i.each(function(){s.push(e(t.item||this).attr(t.attribute||"id")||"")}),s},_intersectsWith:function(e){var t=this.positionAbs.left,i=t+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=e.left,o=a+e.width,r=e.top,h=r+e.height,l=this.offset.click.top,u=this.offset.click.left,d="x"===this.options.axis||s+l>r&&h>s+l,c="y"===this.options.axis||t+u>a&&o>t+u,p=d&&c;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:t+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(e){var t="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width),s=t&&i,n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return s?this.floating?a&&"right"===a||"down"===n?2:1:n&&("down"===n?2:1):!1},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&t||"up"===s&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){function i(){r.push(this)}var s,n,a,o,r=[],h=[],l=this._connectWith();if(l&&t)for(s=l.length-1;s>=0;s--)for(a=e(l[s],this.document[0]),n=a.length-1;n>=0;n--)o=e.data(a[n],this.widgetFullName),o&&o!==this&&!o.options.disabled&&h.push([e.isFunction(o.options.items)?o.options.items.call(o.element):e(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(h.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return e(r)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var i=0;t.length>i;i++)if(t[i]===e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var i,s,n,a,o,r,h,l,u=this.items,d=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],c=this._connectWith();if(c&&this.ready)for(i=c.length-1;i>=0;i--)for(n=e(c[i],this.document[0]),s=n.length-1;s>=0;s--)a=e.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(d.push([e.isFunction(a.options.items)?a.options.items.call(a.element[0],t,{item:this.currentItem}):e(a.options.items,a.element),a]),this.containers.push(a));for(i=d.length-1;i>=0;i--)for(o=d[i][1],r=d[i][0],s=0,l=r.length;l>s;s++)h=e(r[s]),h.data(this.widgetName+"-item",o),u.push({item:h,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(t){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,a;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?e(this.options.toleranceElement,s.item):s.item,t||(s.width=n.outerWidth(),s.height=n.outerHeight()),a=n.offset(),s.left=a.left,s.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(t){t=t||this;var i,s=t.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=t.currentItem[0].nodeName.toLowerCase(),n=e("<"+s+">",t.document[0]).addClass(i||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tbody"===s?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(n)):"tr"===s?t._createTrPlaceholder(t.currentItem,n):"img"===s&&n.attr("src",t.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(e,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(s.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),s.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,i){var s=this;t.children().each(function(){e("<td>&#160;</td>",s.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(t){var i,s,n,a,o,r,h,l,u,d,c=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!e.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(c&&e.contains(this.containers[i].element[0],c.element[0]))continue;c=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",t,this._uiHash(this)),this.containers[i].containerCache.over=0);if(c)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,a=null,u=c.floating||this._isFloating(this.currentItem),o=u?"left":"top",r=u?"width":"height",d=u?"clientX":"clientY",s=this.items.length-1;s>=0;s--)e.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[o],l=!1,t[d]-h>this.items[s][r]/2&&(l=!0),n>Math.abs(t[d]-h)&&(n=Math.abs(t[d]-h),a=this.items[s],this.direction=l?"up":"down"));if(!a&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;a?this._rearrange(t,a,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||e("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.width():this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(t=e(n.containment)[0],i=e(n.containment).offset(),s="hidden"!==e(t).css("overflow"),this.containment=[i.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])
},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"===t?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(t){var i,s,n=this.options,a=t.pageX,o=t.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((a-this.originalPageX)/n.grid[0])*n.grid[0],a=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(e,t,i,s){i?i[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(e,t){function i(e,t,i){return function(s){i._trigger(e,s,t._uiHash(t))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!t&&n.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||n.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(n.push(function(e){this._trigger("remove",e,this._uiHash())}),n.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)t||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(s=0;n.length>s;s++)n[s].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var i=t||this;return{helper:i.helper,placeholder:i.placeholder||e([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:t?t.element:null}}});var o="ui-effects-",r=e;e.effects={effect:{}},function(e,t){function i(e,t,i){var s=d[t.type]||{};return null==e?i||!t.def?null:t.def:(e=s.floor?~~e:parseFloat(e),isNaN(e)?t.def:s.mod?(e+s.mod)%s.mod:0>e?0:e>s.max?s.max:e)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(e,a){var o,r=a.re.exec(i),h=r&&a.parse(r),l=a.space||"rgba";return h?(o=s[l](h),s[u[l].cache]=o[u[l].cache],n=s._rgba=o._rgba,!1):t}),n.length?("0,0,0,0"===n.join()&&e.extend(n,a.transparent),s):a[i]}function n(e,t,i){return i=(i+1)%1,1>6*i?e+6*(t-e)*i:1>2*i?t:2>3*i?e+6*(t-e)*(2/3-i):e}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],l=e.Color=function(t,i,s,n){return new e.Color.fn.parse(t,i,s,n)},u={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},d={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},c=l.support={},p=e("<p>")[0],f=e.each;p.style.cssText="background-color:rgba(1,1,1,.5)",c.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(u,function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}}),l.fn=e.extend(l.prototype,{parse:function(n,o,r,h){if(n===t)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=e(n).css(o),o=t);var d=this,c=e.type(n),p=this._rgba=[];return o!==t&&(n=[n,o,r,h],c="array"),"string"===c?this.parse(s(n)||a._default):"array"===c?(f(u.rgba.props,function(e,t){p[t.idx]=i(n[t.idx],t)}),this):"object"===c?(n instanceof l?f(u,function(e,t){n[t.cache]&&(d[t.cache]=n[t.cache].slice())}):f(u,function(t,s){var a=s.cache;f(s.props,function(e,t){if(!d[a]&&s.to){if("alpha"===e||null==n[e])return;d[a]=s.to(d._rgba)}d[a][t.idx]=i(n[e],t,!0)}),d[a]&&0>e.inArray(null,d[a].slice(0,3))&&(d[a][3]=1,s.from&&(d._rgba=s.from(d[a])))}),this):t},is:function(e){var i=l(e),s=!0,n=this;return f(u,function(e,a){var o,r=i[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],f(a.props,function(e,i){return null!=r[i.idx]?s=r[i.idx]===o[i.idx]:t})),s}),s},_space:function(){var e=[],t=this;return f(u,function(i,s){t[s.cache]&&e.push(i)}),e.pop()},transition:function(e,t){var s=l(e),n=s._space(),a=u[n],o=0===this.alpha()?l("transparent"):this,r=o[a.cache]||a.to(o._rgba),h=r.slice();return s=s[a.cache],f(a.props,function(e,n){var a=n.idx,o=r[a],l=s[a],u=d[n.type]||{};null!==l&&(null===o?h[a]=l:(u.mod&&(l-o>u.mod/2?o+=u.mod:o-l>u.mod/2&&(o-=u.mod)),h[a]=i((l-o)*t+o,n)))}),this[n](h)},blend:function(t){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(t)._rgba;return l(e.map(i,function(e,t){return(1-s)*n[t]+s*e}))},toRgbaString:function(){var t="rgba(",i=e.map(this._rgba,function(e,t){return null==e?t>2?1:0:e});return 1===i[3]&&(i.pop(),t="rgb("),t+i.join()+")"},toHslaString:function(){var t="hsla(",i=e.map(this.hsla(),function(e,t){return null==e&&(e=t>2?1:0),t&&3>t&&(e=Math.round(100*e)+"%"),e});return 1===i[3]&&(i.pop(),t="hsl("),t+i.join()+")"},toHexString:function(t){var i=this._rgba.slice(),s=i.pop();return t&&i.push(~~(255*s)),"#"+e.map(i,function(e){return e=(e||0).toString(16),1===e.length?"0"+e:e}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,u.hsla.to=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t,i,s=e[0]/255,n=e[1]/255,a=e[2]/255,o=e[3],r=Math.max(s,n,a),h=Math.min(s,n,a),l=r-h,u=r+h,d=.5*u;return t=h===r?0:s===r?60*(n-a)/l+360:n===r?60*(a-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=d?l/u:l/(2-u),[Math.round(t)%360,i,d,null==o?1:o]},u.hsla.from=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t=e[0]/360,i=e[1],s=e[2],a=e[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*n(r,o,t+1/3)),Math.round(255*n(r,o,t)),Math.round(255*n(r,o,t-1/3)),a]},f(u,function(s,n){var a=n.props,o=n.cache,h=n.to,u=n.from;l.fn[s]=function(s){if(h&&!this[o]&&(this[o]=h(this._rgba)),s===t)return this[o].slice();var n,r=e.type(s),d="array"===r||"object"===r?s:arguments,c=this[o].slice();return f(a,function(e,t){var s=d["object"===r?e:t.idx];null==s&&(s=c[t.idx]),c[t.idx]=i(s,t)}),u?(n=l(u(c)),n[o]=c,n):l(c)},f(a,function(t,i){l.fn[t]||(l.fn[t]=function(n){var a,o=e.type(n),h="alpha"===t?this._hsla?"hsla":"rgba":s,l=this[h](),u=l[i.idx];return"undefined"===o?u:("function"===o&&(n=n.call(this,u),o=e.type(n)),null==n&&i.empty?this:("string"===o&&(a=r.exec(n),a&&(n=u+parseFloat(a[2])*("+"===a[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(t){var i=t.split(" ");f(i,function(t,i){e.cssHooks[i]={set:function(t,n){var a,o,r="";if("transparent"!==n&&("string"!==e.type(n)||(a=s(n)))){if(n=l(a||n),!c.rgba&&1!==n._rgba[3]){for(o="backgroundColor"===i?t.parentNode:t;(""===r||"transparent"===r)&&o&&o.style;)try{r=e.css(o,"backgroundColor"),o=o.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{t.style[i]=n}catch(h){}}},e.fx.step[i]=function(t){t.colorInit||(t.start=l(t.elem,i),t.end=l(t.end),t.colorInit=!0),e.cssHooks[i].set(t.elem,t.start.transition(t.end,t.pos))}})},l.hook(o),e.cssHooks.borderColor={expand:function(e){var t={};return f(["Top","Right","Bottom","Left"],function(i,s){t["border"+s+"Color"]=e}),t}},a=e.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(r),function(){function t(t){var i,s,n=t.ownerDocument.defaultView?t.ownerDocument.defaultView.getComputedStyle(t,null):t.currentStyle,a={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(a[e.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(a[i]=n[i]);return a}function i(t,i){var s,a,o={};for(s in i)a=i[s],t[s]!==a&&(n[s]||(e.fx.step[s]||!isNaN(parseFloat(a)))&&(o[s]=a));return o}var s=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};e.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(t,i){e.fx.step[i]=function(e){("none"!==e.end&&!e.setAttr||1===e.pos&&!e.setAttr)&&(r.style(e.elem,i,e.end),e.setAttr=!0)}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e.effects.animateClass=function(n,a,o,r){var h=e.speed(a,o,r);return this.queue(function(){var a,o=e(this),r=o.attr("class")||"",l=h.children?o.find("*").addBack():o;l=l.map(function(){var i=e(this);return{el:i,start:t(this)}}),a=function(){e.each(s,function(e,t){n[t]&&o[t+"Class"](n[t])})},a(),l=l.map(function(){return this.end=t(this.el[0]),this.diff=i(this.start,this.end),this}),o.attr("class",r),l=l.map(function(){var t=this,i=e.Deferred(),s=e.extend({},h,{queue:!1,complete:function(){i.resolve(t)}});return this.el.animate(this.diff,s),i.promise()}),e.when.apply(e,l.get()).done(function(){a(),e.each(arguments,function(){var t=this.el;e.each(this.diff,function(e){t.css(e,"")})}),h.complete.call(o[0])})})},e.fn.extend({addClass:function(t){return function(i,s,n,a){return s?e.effects.animateClass.call(this,{add:i},s,n,a):t.apply(this,arguments)}}(e.fn.addClass),removeClass:function(t){return function(i,s,n,a){return arguments.length>1?e.effects.animateClass.call(this,{remove:i},s,n,a):t.apply(this,arguments)}}(e.fn.removeClass),toggleClass:function(t){return function(i,s,n,a,o){return"boolean"==typeof s||void 0===s?n?e.effects.animateClass.call(this,s?{add:i}:{remove:i},n,a,o):t.apply(this,arguments):e.effects.animateClass.call(this,{toggle:i},s,n,a)}}(e.fn.toggleClass),switchClass:function(t,i,s,n,a){return e.effects.animateClass.call(this,{add:i,remove:t},s,n,a)}})}(),function(){function t(t,i,s,n){return e.isPlainObject(t)&&(i=t,t=t.effect),t={effect:t},null==i&&(i={}),e.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||e.fx.speeds[i])&&(n=s,s=i,i={}),e.isFunction(s)&&(n=s,s=null),i&&e.extend(t,i),s=s||i.duration,t.duration=e.fx.off?0:"number"==typeof s?s:s in e.fx.speeds?e.fx.speeds[s]:e.fx.speeds._default,t.complete=n||i.complete,t}function i(t){return!t||"number"==typeof t||e.fx.speeds[t]?!0:"string"!=typeof t||e.effects.effect[t]?e.isFunction(t)?!0:"object"!=typeof t||t.effect?!1:!0:!0}e.extend(e.effects,{version:"1.11.4",save:function(e,t){for(var i=0;t.length>i;i++)null!==t[i]&&e.data(o+t[i],e[0].style[t[i]])},restore:function(e,t){var i,s;for(s=0;t.length>s;s++)null!==t[s]&&(i=e.data(o+t[s]),void 0===i&&(i=""),e.css(t[s],i))},setMode:function(e,t){return"toggle"===t&&(t=e.is(":hidden")?"show":"hide"),t},getBaseline:function(e,t){var i,s;switch(e[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=e[0]/t.height}switch(e[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=e[1]/t.width}return{x:s,y:i}},createWrapper:function(t){if(t.parent().is(".ui-effects-wrapper"))return t.parent();var i={width:t.outerWidth(!0),height:t.outerHeight(!0),"float":t.css("float")},s=e("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:t.width(),height:t.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return t.wrap(s),(t[0]===a||e.contains(t[0],a))&&e(a).focus(),s=t.parent(),"static"===t.css("position")?(s.css({position:"relative"}),t.css({position:"relative"})):(e.extend(i,{position:t.css("position"),zIndex:t.css("z-index")}),e.each(["top","left","bottom","right"],function(e,s){i[s]=t.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),t.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),t.css(n),s.css(i).show()},removeWrapper:function(t){var i=document.activeElement;return t.parent().is(".ui-effects-wrapper")&&(t.parent().replaceWith(t),(t[0]===i||e.contains(t[0],i))&&e(i).focus()),t},setTransition:function(t,i,s,n){return n=n||{},e.each(i,function(e,i){var a=t.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),e.fn.extend({effect:function(){function i(t){function i(){e.isFunction(a)&&a.call(n[0]),e.isFunction(t)&&t()}var n=e(this),a=s.complete,r=s.mode;(n.is(":hidden")?"hide"===r:"show"===r)?(n[r](),i()):o.call(n[0],s,i)}var s=t.apply(this,arguments),n=s.mode,a=s.queue,o=e.effects.effect[s.effect];return e.fx.off||!o?n?this[n](s.duration,s.complete):this.each(function(){s.complete&&s.complete.call(this)}):a===!1?this.each(i):this.queue(a||"fx",i)},show:function(e){return function(s){if(i(s))return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="show",this.effect.call(this,n)}}(e.fn.show),hide:function(e){return function(s){if(i(s))return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(e.fn.hide),toggle:function(e){return function(s){if(i(s)||"boolean"==typeof s)return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(e.fn.toggle),cssUnit:function(t){var i=this.css(t),s=[];return e.each(["em","px","%","pt"],function(e,t){i.indexOf(t)>0&&(s=[parseFloat(i),t])}),s}})}(),function(){var t={};e.each(["Quad","Cubic","Quart","Quint","Expo"],function(e,i){t[i]=function(t){return Math.pow(t,e+2)}}),e.extend(t,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return 0===e||1===e?e:-Math.pow(2,8*(e-1))*Math.sin((80*(e-1)-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){for(var t,i=4;((t=Math.pow(2,--i))-1)/11>e;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*t-2)/22-e,2)}}),e.each(t,function(t,i){e.easing["easeIn"+t]=i,e.easing["easeOut"+t]=function(e){return 1-i(1-e)},e.easing["easeInOut"+t]=function(e){return.5>e?i(2*e)/2:1-i(-2*e+2)/2}})}(),e.effects});

/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
!function(a){function f(a,b){if(!(a.originalEvent.touches.length>1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent("MouseEvents");d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch="ontouchend"in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&&b._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,b._touchMoved=!1,f(a,"mouseover"),f(a,"mousemove"),f(a,"mousedown"))},b._touchMove=function(a){e&&(this._touchMoved=!0,f(a,"mousemove"))},b._touchEnd=function(a){e&&(f(a,"mouseup"),f(a,"mouseout"),this._touchMoved||f(a,"click"),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),d.call(b)}}}(jQuery);

/*
 * jQuery UI Nested Sortable
 * v 2.0 / 29 oct 2012
 * http://mjsarfatti.com/sandbox/nestedSortable
 *
 * Depends on:
 * jquery.ui.sortable.js 1.10+
 *
 * Copyright (c) 2010-2013 Manuele J Sarfatti
 * Licensed under the MIT License
 * http://www.opensource.org/licenses/mit-license.php
 */

(function($) {

    function isOverAxis( x, reference, size ) {
        return ( x > reference ) && ( x < ( reference + size ) );
    }

    $.widget("mjs.nestedSortable", $.extend({}, $.ui.sortable.prototype, {

        options: {
            doNotClear: false,
            expandOnHover: 700,
            isAllowed: function(placeholder, placeholderParent, originalItem) { return true; },
            isTree: false,
            listType: 'ol',
            maxLevels: 0,
            protectRoot: false,
            rootID: null,
            rtl: false,
            startCollapsed: false,
            tabSize: 20,

            branchClass: 'mjs-nestedSortable-branch',
            collapsedClass: 'mjs-nestedSortable-collapsed',
            disableNestingClass: 'mjs-nestedSortable-no-nesting',
            errorClass: 'mjs-nestedSortable-error',
            expandedClass: 'mjs-nestedSortable-expanded',
            hoveringClass: 'mjs-nestedSortable-hovering',
            leafClass: 'mjs-nestedSortable-leaf'
        },

        _create: function() {
            this.element.data('ui-sortable', this.element.data('mjs-nestedSortable'));

            // mjs - prevent browser from freezing if the HTML is not correct
            if (!this.element.is(this.options.listType))
                throw new Error('nestedSortable: Please check that the listType option is set to your actual list type');

            // mjs - force 'intersect' tolerance method if we have a tree with expanding/collapsing functionality
            if (this.options.isTree && this.options.expandOnHover) {
                this.options.tolerance = 'intersect';
            }

            $.ui.sortable.prototype._create.apply(this, arguments);

            // mjs - prepare the tree by applying the right classes (the CSS is responsible for actual hide/show functionality)
            if (this.options.isTree) {
                var self = this;
                $(this.items).each(function() {
                    var $li = this.item;
                    if ($li.children(self.options.listType).length) {
                        $li.addClass(self.options.branchClass);
                        // expand/collapse class only if they have children
                        if (self.options.startCollapsed) $li.addClass(self.options.collapsedClass);
                        else $li.addClass(self.options.expandedClass);
                    } else {
                        $li.addClass(self.options.leafClass);
                    }
                })
            }
        },

        _destroy: function() {
            this.element
                .removeData("mjs-nestedSortable")
                .removeData("ui-sortable");
            return $.ui.sortable.prototype._destroy.apply(this, arguments);
        },

        _mouseDrag: function(event) {
            var i, item, itemElement, intersection,
                o = this.options,
                scrolled = false;

            //Compute the helpers position
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");

            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs;
            }

            //Do scrolling
            if(this.options.scroll) {
                if(this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {

                    if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                    } else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    }

                    if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                    } else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                    }

                } else {

                    if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    } else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    }

                    if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    } else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                    }

                }

                if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(this, event);
            }

            //Regenerate the absolute position used for position checks
            this.positionAbs = this._convertPositionTo("absolute");

            // mjs - find the top offset before rearrangement,
            var previousTopOffset = this.placeholder.offset().top;

            //Set the helper position
            if(!this.options.axis || this.options.axis !== "y") {
                this.helper[0].style.left = this.position.left+"px";
            }
            if(!this.options.axis || this.options.axis !== "x") {
                this.helper[0].style.top = this.position.top+"px";
            }

            // mjs - check and reset hovering state at each cycle
            this.hovering = this.hovering ? this.hovering : null;
            this.mouseentered = this.mouseentered ? this.mouseentered : false;

            // mjs - let's start caching some variables
            var parentItem = (this.placeholder[0].parentNode.parentNode &&
                             $(this.placeholder[0].parentNode.parentNode).closest('.ui-sortable').length)
                                   ? $(this.placeholder[0].parentNode.parentNode)
                                   : null,
                level = this._getLevel(this.placeholder),
                childLevels = this._getChildLevels(this.helper);

            var newList = document.createElement(o.listType);

            //Rearrange
            for (i = this.items.length - 1; i >= 0; i--) {

                //Cache variables and intersection, continue if no intersection
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) {
                    continue;
                }

                // Only put the placeholder inside the current Container, skip all
                // items form other containers. This works because when moving
                // an item from one container to another the
                // currentContainer is switched before the placeholder is moved.
                //
                // Without this moving items in "sub-sortables" can cause the placeholder to jitter
                // beetween the outer and inner container.
                if (item.instance !== this.currentContainer) {
                    continue;
                }

                // cannot intersect with itself
                // no useless actions that have been done before
                // no action if the item moved is the parent of the item checked
                if (itemElement !== this.currentItem[0] &&
                    this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
                    !$.contains(this.placeholder[0], itemElement) &&
                    (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
                ) {

                    // mjs - we are intersecting an element: trigger the mouseenter event and store this state
                    if (!this.mouseentered) {
                        $(itemElement).mouseenter();
                        this.mouseentered = true;
                    }

                    // mjs - if the element has children and they are hidden, show them after a delay (CSS responsible)
                    if (o.isTree && $(itemElement).hasClass(o.collapsedClass) && o.expandOnHover) {
                        if (!this.hovering) {
                            $(itemElement).addClass(o.hoveringClass);
                            var self = this;
                            this.hovering = window.setTimeout(function() {
                                $(itemElement).removeClass(o.collapsedClass).addClass(o.expandedClass);
                                self.refreshPositions();
                                self._trigger("expand", event, self._uiHash());
                            }, o.expandOnHover);
                        }
                    }

                    this.direction = intersection == 1 ? "down" : "up";

                    // mjs - rearrange the elements and reset timeouts and hovering state
                    if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
                        $(itemElement).mouseleave();
                        this.mouseentered = false;
                        $(itemElement).removeClass(o.hoveringClass);
                        this.hovering && window.clearTimeout(this.hovering);
                        this.hovering = null;

                        // mjs - do not switch container if it's a root item and 'protectRoot' is true
                        // or if it's not a root item but we are trying to make it root
                        if (o.protectRoot
                            && ! (this.currentItem[0].parentNode == this.element[0] // it's a root item
                                  && itemElement.parentNode != this.element[0]) // it's intersecting a non-root item
                        ) {
                            if (this.currentItem[0].parentNode != this.element[0]
                                   && itemElement.parentNode == this.element[0]
                            ) {

                                if ( ! $(itemElement).children(o.listType).length) {
                                    itemElement.appendChild(newList);
                                    o.isTree && $(itemElement).removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.expandedClass);
                                }

                                var a = this.direction === "down" ? $(itemElement).prev().children(o.listType) : $(itemElement).children(o.listType);
                                if (a[0] !== undefined) {
                                    this._rearrange(event, null, a);
                                }

                            } else {
                                this._rearrange(event, item);
                            }
                        } else if ( ! o.protectRoot) {
                            this._rearrange(event, item);
                        }
                    } else {
                        break;
                    }

                    // Clear emtpy ul's/ol's
                    this._clearEmpty(itemElement);

                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }

            // mjs - to find the previous sibling in the list, keep backtracking until we hit a valid list item.
            var previousItem = this.placeholder[0].previousSibling ? $(this.placeholder[0].previousSibling) : null;
            if (previousItem != null) {
                while (previousItem[0].nodeName.toLowerCase() != $(o.listType)[0].nodeName.toLowerCase() || previousItem[0] == this.currentItem[0] || previousItem[0] == this.helper[0]) {
                    if (previousItem[0].previousSibling) {
                        previousItem = $(previousItem[0].previousSibling);
                    } else {
                        previousItem = null;
                        break;
                    }
                }
            }

            // mjs - to find the next sibling in the list, keep stepping forward until we hit a valid list item.
            var nextItem = this.placeholder[0].nextSibling ? $(this.placeholder[0].nextSibling) : null;
            if (nextItem != null) {
                while (nextItem[0].nodeName.toLowerCase() != $(o.listType)[0].nodeName.toLowerCase() || nextItem[0] == this.currentItem[0] || nextItem[0] == this.helper[0]) {
                    if (nextItem[0].nextSibling) {
                        nextItem = $(nextItem[0].nextSibling);
                    } else {
                        nextItem = null;
                        break;
                    }
                }
            }

            this.beyondMaxLevels = 0;

            // mjs - if the item is moved to the left, send it one level up but only if it's at the bottom of the list
            if (parentItem != null
                && nextItem == null
                && ! (o.protectRoot && parentItem[0].parentNode == this.element[0])
                &&
                    (o.rtl && (this.positionAbs.left + this.helper.outerWidth() > parentItem.offset().left + parentItem.outerWidth())
                     || ! o.rtl && (this.positionAbs.left < parentItem.offset().left))
            ) {

                parentItem.after(this.placeholder[0]);
                if (o.isTree && parentItem.children(o.listItem).children(o.listItem + ':visible:not(.ui-sortable-helper)').length < 1) {
                    parentItem.removeClass(this.options.branchClass + ' ' + this.options.expandedClass)
                              .addClass(this.options.leafClass);
                }
                this._clearEmpty(parentItem[0]);
                this._trigger("change", event, this._uiHash());
            }
            // mjs - if the item is below a sibling and is moved to the right, make it a child of that sibling
            else if (previousItem != null
                     && ! previousItem.hasClass(o.disableNestingClass)
                     &&
                        (previousItem.children(o.listType).length && previousItem.children(o.listType).is(':visible')
                         || ! previousItem.children(o.listType).length)
                     && ! (o.protectRoot && this.currentItem[0].parentNode == this.element[0])
                     &&
                        (o.rtl && (this.positionAbs.left + this.helper.outerWidth() < previousItem.offset().left + previousItem.outerWidth() - o.tabSize)
                         || ! o.rtl && (this.positionAbs.left > previousItem.offset().left + o.tabSize))
            ) {

                this._isAllowed(previousItem, level, level+childLevels+1);

                if (!previousItem.children(o.listType).length) {
                    previousItem[0].appendChild(newList);
                    o.isTree && previousItem.removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.expandedClass);
                }

                // mjs - if this item is being moved from the top, add it to the top of the list.
                if (previousTopOffset && (previousTopOffset <= previousItem.offset().top)) {
                    previousItem.children(o.listType).prepend(this.placeholder);
                }
                // mjs - otherwise, add it to the bottom of the list.
                else if(previousItem.children(o.listType).length) {
                    previousItem.children(o.listType)[0].appendChild(this.placeholder[0]);
                }

                this._trigger("change", event, this._uiHash());
            }
            else {
                this._isAllowed(parentItem, level, level+childLevels);
            }

            //Post events to containers
            this._contactContainers(event);

            //Interconnect with droppables
            if($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event);
            }

            //Call callbacks
            this._trigger('sort', event, this._uiHash());

            this.lastPositionAbs = this.positionAbs;
            return false;

        },

        _mouseStop: function(event, noPropagation) {

            // mjs - if the item is in a position not allowed, send it back
            if (this.beyondMaxLevels) {

                this.placeholder.removeClass(this.options.errorClass);

                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.placeholder);
                } else {
                    $(this.domPosition.parent).prepend(this.placeholder);
                }

                this._trigger("revert", event, this._uiHash());

            }


            // mjs - clear the hovering timeout, just to be sure
            $('.'+this.options.hoveringClass).mouseleave().removeClass(this.options.hoveringClass);
            this.mouseentered = false;
            this.hovering && window.clearTimeout(this.hovering);
            this.hovering = null;

            $.ui.sortable.prototype._mouseStop.apply(this, arguments);

        },

        // mjs - this function is slightly modified to make it easier to hover over a collapsed element and have it expand
        _intersectsWithSides: function(item) {

            var half = this.options.isTree ? .8 : .5;

            var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height*half), item.height),
                isOverTopHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top - (item.height*half), item.height),
                isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();

            if (this.floating && horizontalDirection) {
                return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
            } else {
                return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && isOverTopHalf));
            }

        },

        _contactContainers: function(event) {

            if (this.options.protectRoot && this.currentItem[0].parentNode == this.element[0] ) {
                return;
            }

            $.ui.sortable.prototype._contactContainers.apply(this, arguments);

        },

        _clear: function(event, noPropagation) {

            $.ui.sortable.prototype._clear.apply(this, arguments);

            // mjs - clean last empty ul/ol
            for (var i = this.items.length - 1; i >= 0; i--) {
                var item = this.items[i].item[0];
                this._clearEmpty(item);
            }

        },

        serialize: function(options) {

            var o = $.extend({}, this.options, options),
                items = this._getItemsAsjQuery(o && o.connected),
                str = [];

            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || 'id') || '')
                        .match(o.expression || (/(.+)[-=_](.+)/)),
                    pid = ($(o.item || this).parent(o.listType)
                        .parent(o.items)
                        .attr(o.attribute || 'id') || '')
                        .match(o.expression || (/(.+)[-=_](.+)/));

                if (res) {
                    str.push(((o.key || res[1]) + '[' + (o.key && o.expression ? res[1] : res[2]) + ']')
                        + '='
                        + (pid ? (o.key && o.expression ? pid[1] : pid[2]) : o.rootID));
                }
            });

            if(!str.length && o.key) {
                str.push(o.key + '=');
            }

            return str.join('&');

        },

        toHierarchy: function(options) {

            var o = $.extend({}, this.options, options),
                sDepth = o.startDepthCount || 0,
                ret = [];

            $(this.element).children(o.items).each(function () {
                var level = _recursiveItems(this);
                ret.push(level);
            });

            return ret;

            function _recursiveItems(item) {
                var id = ($(item).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
                if (id) {
                    var currentItem = {"id" : id[2]};
                    if ($(item).children(o.listType).children(o.items).length > 0) {
                        currentItem.children = [];
                        $(item).children(o.listType).children(o.items).each(function() {
                            var level = _recursiveItems(this);
                            currentItem.children.push(level);
                        });
                    }
                    return currentItem;
                }
            }
        },

        toArray: function(options) {

            var o = $.extend({}, this.options, options),
                sDepth = o.startDepthCount || 0,
                ret = [],
                left = 1;

            if (!o.excludeRoot) {
                ret.push({
                    "item_id": o.rootID,
                    "parent_id": null,
                    "depth": sDepth,
                    "left": left,
                    "right": ($(o.items, this.element).length + 1) * 2
                });
                left++
            }

            $(this.element).children(o.items).each(function () {
                left = _recursiveArray(this, sDepth + 1, left);
            });

            ret = ret.sort(function(a,b){ return (a.left - b.left); });

            return ret;

            function _recursiveArray(item, depth, left) {

                var right = left + 1,
                    id,
                    pid;

                if ($(item).children(o.listType).children(o.items).length > 0) {
                    depth ++;
                    $(item).children(o.listType).children(o.items).each(function () {
                        right = _recursiveArray($(this), depth, right);
                    });
                    depth --;
                }

                id = ($(item).attr(o.attribute || 'id')).match(o.expression || (/(.+)[-=_](.+)/));

                if (depth === sDepth + 1) {
                    pid = o.rootID;
                } else {
                    var parentItem = ($(item).parent(o.listType)
                                             .parent(o.items)
                                             .attr(o.attribute || 'id'))
                                             .match(o.expression || (/(.+)[-=_](.+)/));
                    pid = parentItem[2];
                }

                if (id) {
                        ret.push({"item_id": id[2], "parent_id": pid, "depth": depth, "left": left, "right": right});
                }

                left = right + 1;
                return left;
            }

        },

        _clearEmpty: function(item) {
            var o = this.options;

            var emptyList = $(item).children(o.listType);

            if (emptyList.length && !emptyList.children().length && !o.doNotClear) {
                o.isTree && $(item).removeClass(o.branchClass + ' ' + o.expandedClass).addClass(o.leafClass);
                emptyList.remove();
            } else if (o.isTree && emptyList.length && emptyList.children().length && emptyList.is(':visible')) {
                $(item).removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.expandedClass);
            } else if (o.isTree && emptyList.length && emptyList.children().length && !emptyList.is(':visible')) {
                $(item).removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.collapsedClass);
            }

        },

        _getLevel: function(item) {

            var level = 1;

            if (this.options.listType) {
                var list = item.closest(this.options.listType);
                while (list && list.length > 0 &&
                        !list.is('.ui-sortable')) {
                    level++;
                    list = list.parent().closest(this.options.listType);
                }
            }

            return level;
        },

        _getChildLevels: function(parent, depth) {
            var self = this,
                o = this.options,
                result = 0;
            depth = depth || 0;

            $(parent).children(o.listType).children(o.items).each(function (index, child) {
                    result = Math.max(self._getChildLevels(child, depth + 1), result);
            });

            return depth ? result + 1 : result;
        },

        _isAllowed: function(parentItem, level, levels) {
            var o = this.options,
                maxLevels = this.placeholder.closest('.ui-sortable').nestedSortable('option', 'maxLevels'); // this takes into account the maxLevels set to the recipient list

            // mjs - is the root protected?
            // mjs - are we nesting too deep?
            if ( ! o.isAllowed(this.placeholder, parentItem, this.currentItem)) {
                    this.placeholder.addClass(o.errorClass);
                    if (maxLevels < levels && maxLevels != 0) {
                        this.beyondMaxLevels = levels - maxLevels;
                    } else {
                        this.beyondMaxLevels = 1;
                    }
            } else {
                if (maxLevels < levels && maxLevels != 0) {
                    this.placeholder.addClass(o.errorClass);
                    this.beyondMaxLevels = levels - maxLevels;
                } else {
                    this.placeholder.removeClass(o.errorClass);
                    this.beyondMaxLevels = 0;
                }
            }
        }

    }));

    $.mjs.nestedSortable.prototype.options = $.extend({}, $.ui.sortable.prototype.options, $.mjs.nestedSortable.prototype.options);
})(jQuery);
/*!
 * CMS.API.Helpers
 * Multiple helpers used accross all CMS features
 */

//##############################################################################
// COMPATIBILITY

// ensuring django namespace is set correctly
window.django = window.django || undefined;

// ensuring jQuery namespace is set correctly
window.jQuery = (window.django && window.django.jQuery) ? window.django.jQuery : window.jQuery || undefined;

// ensuring Class namespace is set correctly
window.Class = window.Class || undefined;

// ensuring CMS namespace is set correctly
/**
 * @module CMS
 */
var CMS = {
    $: (typeof window.jQuery === 'function') ? window.jQuery : undefined,
    Class: (typeof window.Class === 'function') ? window.Class : undefined,
    /**
     * @module CMS
     * @submodule CMS.API
     */
    API: {},
    /**
     * Provides key codes for common keys.
     *
     * @module CMS
     * @submodule CMS.KEYS
     * @example
     *     if (e.keyCode === CMS.KEYS.ENTER) { ... };
     */
    KEYS: {
        SHIFT: 16,
        TAB: 9,
        UP: 38,
        DOWN: 40,
        ENTER: 13,
        SPACE: 32,
        ESC: 27,
        CMD_LEFT: 91,
        CMD_RIGHT: 93,
        CMD_FIREFOX: 224,
        CTRL: 17
    },
    /**
     * Provides breakpoints for certain device widths
     *
     * @module CMS
     * @submodule CMS.BREAKPOINTS
     * @example
     *     if (window.width >= CMS.BREAKPOINTS.mobile) { ... };
     */
    BREAKPOINTS: {
        mobile: 420
    }
};

//##############################################################################
// CMS.API
(function ($) {
    'use strict';
    // shorthand for jQuery(document).ready();
    $(function () {
        var root = $('#cms-top');
        /**
         * @function _ns
         * @private
         * @param {String} events space separated event names to be namespaces
         * @return {String} string containing space separated namespaced event names
         */
        var _ns = function nameSpaceEvent(events) {
            return events.split(/\s+/g).map(function (className) {
                return 'cms-' + className;
            }).join(' ');
        };

        /**
         * Provides various helpers that are mixed in all CMS classes.
         *
         * @class Helpers
         * @static
         * @module CMS
         * @submodule CMS.API
         * @namespace CMS.API
         */
        CMS.API.Helpers = {

            /**
             * Redirects to a specific url or reloads browser.
             *
             * @method reloadBrowser
             * @param {String} url where to redirect. if equal to `REFRESH_PAGE` will reload page instead
             * @param {Number} timeout=0 timeout in ms
             * @param {Boolean} ajax if set to true first initiates **synchronous**
             *     ajax request to figure out if the browser should reload current page,
             *     move to another one, or do nothing.
             */
            reloadBrowser: function (url, timeout, ajax) {
                var that = this;
                // is there a parent window?
                var parent = (window.parent) ? window.parent : window;

                // if there is an ajax reload, prioritize
                if (ajax) {
                    parent.CMS.API.locked = true;
                    // check if the url has changed, if true redirect to the new path
                    // this requires an ajax request
                    $.ajax({
                        async: false,
                        type: 'GET',
                        url: parent.CMS.config.request.url,
                        data: {
                            model: parent.CMS.config.request.model,
                            pk: parent.CMS.config.request.pk
                        },
                        success: function (response) {
                            parent.CMS.API.locked = false;

                            if (response === '' && !url) {
                                // cancel if response is empty
                                return false;
                            } else if (parent.location.pathname !== response && response !== '') {
                                // api call to the backend to check if the current path is still the same
                                that.reloadBrowser(response);
                            } else if (url === 'REFRESH_PAGE') {
                                // if on_close provides REFRESH_PAGE, only do a reload
                                that.reloadBrowser();
                            } else if (url) {
                                // on_close can also provide a url, reload to the new destination
                                that.reloadBrowser(url);
                            }
                        }
                    });

                    // cancel further operations
                    return false;
                }

                // add timeout if provided
                parent.setTimeout(function () {
                    if (url && url !== parent.location.href) {
                        // location.reload() takes precedence over this, so we
                        // don't want to reload the page if we need a redirect
                        parent.location.href = url;
                    } else {
                        // ensure page is always reloaded #3413
                        parent.location.reload();
                    }
                }, timeout || 0);
            },

            /**
             * Assigns an event handler to forms located in the toolbar
             * to prevent multiple submissions.
             *
             * @method preventSubmit
             */
            preventSubmit: function () {
                var forms = $('.cms-toolbar').find('form');
                forms.submit(function () {
                    // show loader
                    CMS.API.Toolbar.showLoader();
                    // we cannot use disabled as the name action will be ignored
                    $('input[type="submit"]').on('click', function (e) {
                        e.preventDefault();
                    }).css('opacity', 0.5);
                });
            },

            /**
             * Sets csrf token header on ajax requests.
             *
             * @method csrf
             * @param {String} csrf_token
             */
            csrf: function (csrf_token) {
                $.ajaxSetup({
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('X-CSRFToken', csrf_token);
                    }
                });
            },

            /**
             * Sends or retrieves a JSON from localStorage
             * or the session (through synchronous ajax request)
             * if localStorage is not available.
             *
             * @method setSettings
             * @param settings
             */
            setSettings: function (settings) {
                // merge settings
                settings = JSON.stringify($.extend({}, CMS.config.settings, settings));
                // set loader
                if (CMS.API.Toolbar) {
                    CMS.API.Toolbar.showLoader();
                }

                // use local storage or session
                if (this._isStorageSupported) {
                    // save within local storage
                    localStorage.setItem('cms_cookie', settings);
                    if (CMS.API.Toolbar) {
                        CMS.API.Toolbar.hideLoader();
                    }
                } else {
                    // save within session
                    CMS.API.locked = true;

                    $.ajax({
                        async: false,
                        type: 'POST',
                        url: CMS.config.urls.settings,
                        data: {
                            csrfmiddlewaretoken: CMS.config.csrf,
                            settings: settings
                        },
                        success: function (data) {
                            CMS.API.locked = false;
                            // determine if logged in or not
                            settings = (data) ? JSON.parse(data) : CMS.config.settings;
                            if (CMS.API.Toolbar) {
                                CMS.API.Toolbar.hideLoader();
                            }
                        },
                        error: function (jqXHR) {
                            CMS.API.Messages.open({
                                message: jqXHR.response + ' | ' + jqXHR.status + ' ' + jqXHR.statusText,
                                error: true
                            });
                        }
                    });
                }

                // save settings
                CMS.settings = typeof settings === 'object' ? settings : JSON.parse(settings);

                // ensure new settings are returned
                return CMS.settings;
            },

            /**
             * Gets user settings (from JSON or the session)
             * in the same way as setSettings sets them.
             *
             * @method getSettings
             */
            getSettings: function () {
                var settings;
                // set loader
                if (CMS.API.Toolbar) {
                    CMS.API.Toolbar.showLoader();
                }

                // use local storage or session
                if (this._isStorageSupported) {
                    // get from local storage
                    settings = JSON.parse(localStorage.getItem('cms_cookie'));
                    if (CMS.API.Toolbar) {
                        CMS.API.Toolbar.hideLoader();
                    }
                } else {
                    CMS.API.locked = true;
                    // get from session
                    $.ajax({
                        async: false,
                        type: 'GET',
                        url: CMS.config.urls.settings,
                        success: function (data) {
                            CMS.API.locked = false;
                            // determine if logged in or not
                            settings = (data) ? JSON.parse(data) : CMS.config.settings;
                            if (CMS.API.Toolbar) {
                                CMS.API.Toolbar.hideLoader();
                            }
                        },
                        error: function (jqXHR) {
                            CMS.API.Messages.open({
                                message: jqXHR.response + ' | ' + jqXHR.status + ' ' + jqXHR.statusText,
                                error: true
                            });
                        }
                    });
                }

                if (!settings) {
                    settings = this.setSettings(CMS.config.settings);
                }

                // save settings
                CMS.settings = settings;

                // ensure new settings are returned
                return CMS.settings;
            },

            /**
             * Modifies the url with new params and sanitises
             * the ampersand within the url for #3404.
             *
             * @method makeURL
             * @param {String} url original url
             * @param {String[]} [params] array of `param=value` strings to update the url
             */
            makeURL: function makeURL(url, params) {
                var arr = [];
                var keys = [];
                var values = [];
                var tmp = '';
                var urlArray = [];
                var urlParams = [];
                var origin = url;

                // return url if there is no param
                if (!(url.split('?').length <= 1 || window.JSON === undefined)) {
                    // setup local vars
                    urlArray = url.split('?');
                    urlParams = urlArray[1].split('&');
                    origin = urlArray[0];
                }

                // loop through the available params
                $.each(urlParams, function (index, param) {
                    arr.push({
                        param: param.split('=')[0],
                        value: param.split('=')[1]
                    });
                });
                // loop through the new params
                if (params && params.length) {
                    $.each(params, function (index, param) {
                        arr.push({
                            param: param.split('=')[0],
                            value: param.split('=')[1]
                        });
                    });
                }

                // merge manually because jquery...
                $.each(arr, function (index, item) {
                    var i = $.inArray(item.param, keys);

                    if (i === -1) {
                        keys.push(item.param);
                        values.push(item.value);
                    } else {
                        values[i] = item.value;
                    }
                });

                // merge new url
                $.each(keys, function (index, key) {
                    tmp += '&' + key + '=' + values[index];
                });
                tmp = tmp.replace('&', '?');
                url = origin + tmp;
                url = url.replace('&', '&amp;');

                return url;
            },

            /**
             * Creates a debounced function that delays invoking `func`
             * until after `wait` milliseconds have elapsed since
             * the last time the debounced function was invoked.
             * Optionally can be invoked first time immediately.
             *
             * @method debounce
             * @param {Function} func function to debounce
             * @param {Number} wait time in ms to wait
             * @param {Object} [opts]
             * @param {Boolean} [opts.immediate] trigger func immediately?
             * @return {Function}
             */
            debounce: function debounce(func, wait, opts) {
                var timeout;
                return function () {
                    var context = this, args = arguments;
                    var later = function () {
                        timeout = null;
                        if (!opts || !opts.immediate) {
                            func.apply(context, args);
                        }
                    };
                    var callNow = opts && opts.immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) {
                        func.apply(context, args);
                    }
                };
            },

            /**
             * Returns a function that when invoked, will only be triggered
             * at most once during a given window of time. Normally, the
             * throttled function will run as much as it can, without ever
             * going more than once per `wait` duration, but if you’d like to
             * disable the execution on the leading edge, pass `{leading: false}`.
             * To disable execution on the trailing edge, ditto.
             *
             * @method throttle
             * @param {Function} func function to throttle
             * @param {Number} wait time window
             * @param {Object} [opts]
             * @param {Boolean} [opts.leading=true] execute on the leading edge
             * @param {Boolean} [opts.trailing=true] execute on the trailing edge
             * @return {Function}
             */
            throttle: function throttle(func, wait, opts) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                if (!opts) {
                    opts = {};
                }
                var later = function () {
                    previous = opts.leading === false ? 0 : $.now();
                    timeout = null;
                    result = func.apply(context, args);
                    if (!timeout) {
                        context = args = null;
                    }
                };
                return function () {
                    var now = $.now();
                    if (!previous && opts.leading === false) {
                        previous = now;
                    }
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0 || remaining > wait) {
                        if (timeout) {
                            clearTimeout(timeout);
                            timeout = null;
                        }
                        previous = now;
                        result = func.apply(context, args);
                        if (!timeout) {
                            context = args = null;
                        }
                    } else if (!timeout && opts.trailing !== false) {
                        timeout = setTimeout(later, remaining);
                    }
                    return result;
                };
            },

            /**
             * Browsers allow to "Prevent this page form creating additional
             * dialogs." checkbox which prevents further input from confirm messages.
             * This method falls back to "true" once the user chooses this option.
             *
             * @method secureConfirm
             * @param {String} message to be displayed
             * @return {Boolean}
             */
            secureConfirm: function secureConfirm(message) {
                var start = Number(new Date());
                var result = confirm(message);
                var end = Number(new Date());

                return (end < (start + 10) || result === true);
            },

            /**
             * Is localStorage truly supported?
             * Check is taken from modernizr.
             *
             * @property _isStorageSupported
             * @private
             * @type {Boolean}
             */
            _isStorageSupported: (function localStorageCheck() {
                var mod = 'modernizr';
                try {
                    localStorage.setItem(mod, mod);
                    localStorage.removeItem(mod);
                    return true;
                } catch (e) {
                    return false;
                }
            }()),

            /**
             * Adds an event listener to the "CMS".
             *
             * @method addEventListener
             * @param {String} eventName string containing space separated event names
             * @param {Function} fn callback to run when the event happens
             */
            addEventListener: function addEventListener(eventName, fn) {
                return root.on(_ns(eventName), fn);
            },

            /**
             * Removes the event listener from the "CMS". If a callback is provided - removes only that callback.
             *
             * @method addEventListener
             * @param {String} eventName string containing space separated event names
             * @param {Function} [fn] specific callback to be removed
             */
            removeEventListener: function removeEventListener(eventName, fn) {
                return root.off(_ns(eventName), fn);
            },

            /**
             * Dispatches an event
             * @method dispatchEvent
             * @param {String} eventName  string containing space separated event names
             * @param {Object} payload whatever payload required for the consumer
             */
            dispatchEvent: function dispatchEvent(eventName, payload) {
                return root.trigger(_ns(eventName), [payload]);
            }
        };

        // autoinits
        CMS.API.Helpers.preventSubmit();

    });
})(CMS.$);

/*!========================================================================
 * Originally taken from
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
/* global CMS */

(function ($) {
    'use strict';

    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
    // ============================================================

    function transitionEnd() {
        var el = document.createElement('cms');

        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        };

        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return { end: transEndEventNames[name] };
            }
        }

        return false; // explicit for ie8 (  ._.)
    }

    // http://blog.alexmaccaw.com/css-transitions
    $.fn.emulateTransitionEnd = function (duration) {
        var called = false;
        var $el = this;
        $(this).one('cmsTransitionEnd', function () {
            called = true;
        });
        var callback = function () {
            if (!called) {
                $($el).trigger($.support.transition.end) ;
            }
        };
        setTimeout(callback, duration + 10);
        return this;
    };

    $(function () {
        $.support.transition = transitionEnd();

        if (!$.support.transition) {
            return;
        }

        $.event.special.cmsTransitionEnd = {
            bindType: $.support.transition.end,
            delegateType: $.support.transition.end,
            handle: function (e) {
                if ($(e.target).is(this)) {
                    return e.handleObj.handler.apply(this, arguments);
                }
            }
        };
    });

    // has to be attached to CMS
}(CMS.$));

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// MODAL
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * Displays a message underneath the toolbar.
         *
         * @class Messages
         * @namespace CMS
         */
        CMS.Messages = new CMS.Class({

            options: {
                messageDuration: 300,
                messageDelay: 3000
            },

            initialize: function initialize(options) {
                this.options = $.extend(true, {}, this.options, options);

                // states and events
                this.click = 'click.cms.message';

                // elements
                this._setupUI();
            },

            /**
             * Stores all jQuery references within `this.ui`.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function _setupUI() {
                var container = $('.cms');
                this.ui = {
                    container: container,
                    body: $('html'),
                    toolbar: container.find('.cms-toolbar'),
                    messages: container.find('.cms-messages')
                };
            },

            /**
             * Opens a message window underneath the toolbar.
             *
             * @method open
             * @param opts
             * @param {String|HTMLNode} opts.message message to be displayed
             * @param {String} [opts.dir='center'] direction to be displayed `center` `left` or `right`
             * @param {Number} [opts.delay=this.options.messageDelay] delay until message is closed, 0 leaves it open
             * @param {Boolean} [opts.error] if true sets the style to `.cms-messages-error`
             */
            open: function open(opts) {
                if (!(opts && opts.message)) {
                    throw new Error('The arguments passed to "open" were invalid.');
                }

                var that = this;

                var msg = opts.message;
                var dir = opts.dir === undefined ? 'center' : opts.dir;
                var delay = opts.delay === undefined ? this.options.messageDelay : opts.delay;
                var error = opts.error === undefined ? false : opts.error;

                var width = 320;
                var height = this.ui.messages.outerHeight(true);
                var top = this.ui.toolbar.outerHeight(true);
                var close = this.ui.messages.find('.cms-messages-close');

                // add content to element
                this.ui.messages.find('.cms-messages-inner').html(msg);

                // error handling
                this.ui.messages.removeClass('cms-messages-error');
                if (error) {
                    this.ui.messages.addClass('cms-messages-error');
                }

                // clear timeout
                clearTimeout(this.timer);

                close.hide();
                close.off(this.click).on(this.click, function () {
                    that.close();
                });

                // set top to 0 if toolbar is collapsed
                if (CMS.settings.toolbar === 'collapsed') {
                    top = 0;
                }

                // do we need to add debug styles?
                if (CMS.config.debug) {
                    top = top + 5;
                }

                // set correct position and show
                this.ui.messages.css('top', -height).show();

                // set correct direction and animation
                switch (dir) {
                    case 'left':
                        this.ui.messages.css({
                            'top': top,
                            'left': -width,
                            'right': 'auto',
                            'margin-left': 0
                        });
                        this.ui.messages.animate({ 'left': 0 });
                        break;
                    case 'right':
                        this.ui.messages.css({
                            'top': top,
                            'right': -width,
                            'left': 'auto',
                            'margin-left': 0
                        });
                        this.ui.messages.animate({ 'right': 0 });
                        break;
                    default:
                        this.ui.messages.css({
                            'left': '50%',
                            'right': 'auto',
                            'margin-left': -(width / 2)
                        });
                        this.ui.messages.animate({ 'top': top });
                }

                // cancel autohide if delay is <= 0
                if (delay <= 0) {
                    close.show();
                } else {
                    // add delay to hide if delay > 0
                    this.timer = setTimeout(function () {
                        that.close();
                    }, delay);
                }
            },

            /**
             * Closes the message window underneath the toolbar.
             *
             * @method close
             */
            close: function close() {
                this.ui.messages.fadeOut(this.options.messageDuration);
            }

        });

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// MODAL
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * The modal is triggered via API calls from the backend either
         * through the toolbar navigation or from plugins. The APIs allow to
         * open content from a url (iframe) or inject html directly.
         *
         * @class Modal
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.Modal = new CMS.Class({

            implement: [CMS.API.Helpers],

            options: {
                onClose: false,
                minHeight: 400,
                minWidth: 800,
                modalDuration: 200,
                newPlugin: false,
                resizable: true,
                maximizable: true,
                minimizable: true
            },

            initialize: function initialize(options) {
                this.options = $.extend(true, {}, this.options, options);

                // elements
                this._setupUI();
                // event emitter
                this._setupEventEmitter();

                // states and events
                this.click = 'click.cms.modal';
                this.pointerDown = 'pointerdown.cms.modal contextmenu.cms.modal';
                this.pointerUp = 'pointerup.cms.modal pointercancel.cms.modal';
                this.pointerMove = 'pointermove.cms.modal';
                this.doubleClick = 'dblclick.cms.modal';
                this.touchEnd = 'touchend.cms.modal';
                this.maximized = false;
                this.minimized = false;
                this.triggerMaximized = false;
                this.saved = false;
            },

            /**
             * Setup event pubsub mechanism for the instance.
             *
             * @private
             * @method _setupEventEmitter
             */
            _setupEventEmitter: function _setupEventEmitter() {
                var that = this;
                var bus = $({});

                function proxy(name) {
                    return function () {
                        bus[name].apply(bus, arguments);
                        return that;
                    };
                }

                this.trigger = proxy('trigger');
                this.one = proxy('one');
                this.on = proxy('on');
                this.off = proxy('off');
            },

            /**
             * Stores all jQuery references within `this.ui`.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function _setupUI() {
                var modal = $('.cms-modal');
                this.ui = {
                    modal: modal,
                    body: $('html'),
                    window: $(window),
                    toolbarLeftPart: $('.cms-toolbar-left'),
                    minimizeButton: modal.find('.cms-modal-minimize'),
                    maximizeButton: modal.find('.cms-modal-maximize'),
                    title: modal.find('.cms-modal-title'),
                    titlePrefix: modal.find('.cms-modal-title-prefix'),
                    titleSuffix: modal.find('.cms-modal-title-suffix'),
                    resize: modal.find('.cms-modal-resize'),
                    breadcrumb: modal.find('.cms-modal-breadcrumb'),
                    closeAndCancel: modal.find('.cms-modal-close, .cms-modal-cancel'),
                    modalButtons: modal.find('.cms-modal-buttons'),
                    modalBody: modal.find('.cms-modal-body'),
                    frame: modal.find('.cms-modal-frame'),
                    shim: modal.find('.cms-modal-shim')
                };
            },

            /**
             * Sets up all the event handlers, such as maximize/minimize and resizing.
             *
             * @method _events
             * @private
             */
            _events: function _events() {
                var that = this;

                // modal behaviours
                this.ui.minimizeButton.
                    off(this.click + ' ' + this.touchEnd)
                    .on(this.click + ' ' + this.touchEnd, function (e) {
                    e.preventDefault();
                    that.minimize();
                });
                this.ui.maximizeButton
                    .off(this.click + ' ' + this.touchEnd)
                    .on(this.click + ' ' + this.touchEnd, function (e) {
                    e.preventDefault();
                    that.maximize();
                });

                this.ui.title.off(this.pointerDown).on(this.pointerDown, function (e) {
                    e.preventDefault();
                    that._startMove(e);
                });
                this.ui.title.off(this.doubleClick).on(this.doubleClick, function () {
                    that.maximize();
                });

                this.ui.resize.off(this.pointerDown).on(this.pointerDown, function (e) {
                    e.preventDefault();
                    that._startResize(e);
                });

                this.ui.closeAndCancel
                    .off(this.click + ' ' + this.touchEnd)
                    .on(this.click + ' ' + this.touchEnd, function (e) {
                    that.options.onClose = null;
                    e.preventDefault();
                    that.close();
                });

                // elements within the window
                this.ui.breadcrumb.off(this.click, 'a').on(this.click, 'a', function (e) {
                    e.preventDefault();
                    that._changeIframe($(this));
                });
            },

            /**
             * Opens the modal either in an iframe or renders markup.
             *
             * @method open
             * @chainable
             * @param {Object} opts either `opts.url` or `opts.html` are required
             * @param {Object[]} [opts.breadcrumbs] collection of breadcrumb items
             * @param {String|HTMLNode|jQuery} [opts.html] html markup to render
             * @param {String} [opts.title] modal window main title (bold)
             * @param {String} [opts.subtitle] modal window secondary title (normal)
             * @param {String} [opts.url] url to render iframe, takes precedence over `opts.html`
             * @param {Number} [opts.width] sets the width of the modal
             * @param {Number} [opts.height] sets the height of the modal
             */
            open: function open(opts) {
                // setup internals
                if (!(opts && opts.url || opts && opts.html)) {
                    throw new Error('The arguments passed to "open" were invalid.');
                }

                // handle remove option when plugin is new
                // cancel open process when switching context
                if (CMS._newPlugin && !this._deletePlugin()) {
                    return false;
                }

                // We have to rebind events every time we open a modal
                // because the event handlers contain references to the instance
                // and since we reuse the same markup we need to update
                // that instance reference every time.
                this._events();

                this.trigger('cms.modal.load');
                // trigger the event also on the dom element,
                // because if we load another modal while one is already open
                // the older instance won't receive any updates
                this.ui.modal.trigger('cms.modal.load');

                // common elements state
                this.ui.resize.toggle(this.options.resizable);
                this.ui.minimizeButton.toggle(this.options.minimizable);
                this.ui.maximizeButton.toggle(this.options.maximizable);

                var position = this._calculateNewPosition(opts);

                this.ui.maximizeButton.removeClass('cms-modal-maximize-active');
                this.maximized = false;

                // new plugin will freeze the creation process
                if (this.options.newPlugin) {
                    CMS._newPlugin = this.options.newPlugin;
                }

                // because a new instance is called, we have to ensure minimized state is removed #3620
                if (this.ui.body.hasClass('cms-modal-minimized')) {
                    this.minimized = true;
                    this.minimize();
                }

                // clear elements
                this.ui.modalButtons.empty();
                this.ui.breadcrumb.empty();

                // remove class from modal when no breadcrumbs is rendered
                this.ui.modal.removeClass('cms-modal-has-breadcrumb');

                // hide tooltip
                CMS.API.Tooltip.hide();

                // redirect to iframe rendering if url is provided
                if (opts.url) {
                    this._loadIframe({
                        url: opts.url,
                        title: opts.title,
                        breadcrumbs: opts.breadcrumbs
                    });
                } else {
                    // if url is not provided we go for html
                    this._loadMarkup({
                        html: opts.html,
                        title: opts.title,
                        subtitle: opts.subtitle
                    });
                }

                this.trigger('cms.modal.loaded');

                // display modal
                this._show($.extend({
                    duration: this.options.modalDuration
                }, position));

                return this;
            },

            /**
             * Calculates coordinates and dimensions for modal placement
             *
             * @method _calculateNewPosition
             * @private
             * @param {Object} [opts]
             * @param {Number} [opts.width] desired width of the modal
             * @param {Number} [opts.height] desired height of the modal
             */
            _calculateNewPosition: function (opts) {
                // lets set the modal width and height to the size of the browser
                var widthOffset = 300; // adds margin left and right
                var heightOffset = 300; // adds margin top and bottom;
                var screenWidth = this.ui.window.width();
                var screenHeight = this.ui.window.height();
                var modalWidth = opts.width || this.options.minWidth;
                var modalHeight = opts.height || this.options.minHeight;
                // screen width and height calculation, WC = width
                var screenWidthCalc = screenWidth >= (modalWidth + widthOffset);
                var screenHeightCalc = screenHeight >= (modalHeight + heightOffset);

                var width = screenWidthCalc && !opts.width ? screenWidth - widthOffset : modalWidth;
                var height = screenHeightCalc && !opts.height ? screenHeight - heightOffset : modalHeight;

                var currentLeft = this.ui.modal.css('left');
                var currentTop = this.ui.modal.css('top');
                var newLeft;
                var newTop;

                // jquery made me do it
                if (currentLeft === '50%') {
                    currentLeft = screenWidth / 2;
                }
                if (currentTop === '50%') {
                    currentTop = screenHeight / 2;
                }

                currentTop = parseInt(currentTop);
                currentLeft = parseInt(currentLeft);

                // if new width/height go out of the screen - reset position to center of screen
                if ((width / 2 + currentLeft > screenWidth) || (height / 2 + currentTop > screenHeight) ||
                    (currentLeft - width / 2 < 0) || (currentTop - height / 2 < 0)) {
                    newLeft = screenWidth / 2;
                    newTop = screenHeight / 2;
                }

                // in case, the modal is larger than the window, we trigger fullscreen mode
                if (width >= screenWidth || height >= screenHeight) {
                    this.triggerMaximized = true;
                }

                return {
                    width: width,
                    height: height,
                    top: newTop,
                    left: newLeft
                };
            },

            /**
             * Animation helper for opening the sideframe.
             *
             * @method _show
             * @private
             * @param {Object} opts
             * @param {Number} opts.width width of the modal
             * @param {Number} opts.height height of the modal
             * @param {Number} opts.left left in px of the center of the modal
             * @param {Number} opts.top top in px of the center of the modal
             * @param {Number} opts.duration speed of opening, ms (not really used yet)
             */
            _show: function _show(opts) {
                // we need to position the modal in the center
                var that = this;
                var width = opts.width;
                var height = opts.height;
                // TODO make use of transitionDuration, currently capped at 0.2s
                var speed = opts.duration;
                var top = opts.top;
                var left = opts.left;


                if (this.ui.modal.hasClass('cms-modal-open')) {
                    this.ui.modal.addClass('cms-modal-morphing');
                }

                this.ui.modal.css({
                    'display': 'block',
                    'width': width,
                    'height': height,
                    'top': top,
                    'left': left,
                    // TODO animate translateX if possible instead of margin
                    'margin-left': -(width / 2),
                    'margin-top': -(height / 2)
                });
                // setImmediate is required to go into the next frame
                setTimeout(function () {
                    that.ui.modal.addClass('cms-modal-open');
                }, 0);

                this.ui.modal.one('cmsTransitionEnd', function () {
                    that.ui.modal.removeClass('cms-modal-morphing');
                    that.ui.modal.css({
                        'margin-left': -(width / 2),
                        'margin-top': -(height / 2)
                    });

                    // check if we should maximize
                    if (that.triggerMaximized) {
                        that.maximize();
                    }

                    // changed locked status to allow other modals again
                    CMS.API.locked = false;
                    that.trigger('cms.modal.shown');
                }).emulateTransitionEnd(speed);

                // add esc close event
                this.ui.body.off('keydown.cms.close').on('keydown.cms.close', function (e) {
                    if (e.keyCode === CMS.KEYS.ESC) {
                        that.options.onClose = null;
                        that.close();
                    }
                });

                // set focus to modal
                this.ui.modal.focus();
            },

            /**
             * Closes the current instance.
             *
             * @method close
             */
            close: function close() {
                // handle refresh option
                if (this.options.onClose) {
                    this.reloadBrowser(this.options.onClose, false, true);
                }

                // handle remove option when plugin is new
                if (CMS._newPlugin) {
                    this._deletePlugin({
                        hideAfter: true
                    });
                } else {
                    this._hide({
                        duration: this.options.modalDuration / 2
                    });
                }
            },

            /**
             * Animation helper for closing the iframe.
             *
             * @method _hide
             * @private
             * @param {Object} opts
             * @param {Number} [opts.duration=this.options.modalDuration] animation duration
             */
            _hide: function _hide(opts) {
                var that = this;
                var duration = this.options.modalDuration;

                if (opts && opts.duration) {
                    duration = opts.duration;
                }

                this.ui.frame.empty();
                this.ui.modalBody.removeClass('cms-loader');
                this.ui.modal.removeClass('cms-modal-open');
                this.ui.modal.one('cmsTransitionEnd', function () {
                    that.ui.modal.css('display', 'none');
                }).emulateTransitionEnd(duration);

                // reset maximize or minimize states for #3111
                setTimeout(function () {
                    if (that.minimized) {
                        that.minimize();
                    }
                    if (that.maximized) {
                        that.maximize();
                    }
                    that.trigger('cms.modal.closed');
                }, this.options.duration);

                this.ui.body.off('keydown.cms.close');
            },

            /**
             * Minimizes the modal onto the toolbar.
             *
             * @method minimize
             */
            minimize: function minimize() {
                // cancel action if maximized
                if (this.maximized) {
                    return false;
                }

                if (this.minimized === false) {
                    // ensure toolbar is shown
                    CMS.API.Toolbar.open();

                    // save initial state
                    this.ui.modal.data('css', this.ui.modal.css([
                        'left', 'top', 'margin-left', 'margin-top'
                    ]));

                    // minimize
                    this.ui.body.addClass('cms-modal-minimized');
                    this.ui.modal.css({
                        'left': this.ui.toolbarLeftPart.outerWidth(true) + 50
                    });

                    this.minimized = true;
                } else {
                    // maximize
                    this.ui.body.removeClass('cms-modal-minimized');
                    this.ui.modal.css(this.ui.modal.data('css'));

                    this.minimized = false;
                }
            },

            /**
             * Maximizes the window according to the browser size.
             *
             * @method maximize
             */
            maximize: function maximize() {
                // cancel action when minimized
                if (this.minimized) {
                    return false;
                }

                if (this.maximized === false) {
                    // save initial state
                    this.ui.modal.data('css', this.ui.modal.css([
                        'left', 'top', 'margin-left', 'margin-top',
                        'width', 'height'
                    ]));

                    this.ui.body.addClass('cms-modal-maximized');

                    this.maximized = true;
                    this.dispatchEvent('modal-maximized', { instance: this });
                } else {
                    // minimize
                    this.ui.body.removeClass('cms-modal-maximized');
                    this.ui.modal.css(this.ui.modal.data('css'));

                    this.maximized = false;
                    this.dispatchEvent('modal-restored', { instance: this });
                }
            },

            /**
             * Initiates the start move event from `_events`.
             *
             * @method _startMove
             * @private
             * @param {Object} pointerEvent passes starting event
             */
            _startMove: function _startMove(pointerEvent) {
                // cancel if maximized or minimized
                if (this.maximized || this.minimized) {
                    return false;
                }

                var that = this;
                var position = this.ui.modal.position();
                var left;
                var top;

                this.ui.shim.show();

                // create event for stopping
                this.ui.body.on(this.pointerUp, function (e) {
                    that._stopMove(e);
                });

                this.ui.body.on(this.pointerMove, function (e) {
                    left = position.left - (pointerEvent.originalEvent.pageX - e.originalEvent.pageX);
                    top = position.top - (pointerEvent.originalEvent.pageY - e.originalEvent.pageY);

                    that.ui.modal.css({
                        'left': left,
                        'top': top
                    });
                }).attr('data-touch-action', 'none');
            },

            /**
             * Initiates the stop move event from `_startResize`.
             *
             * @method _stopMove
             * @private
             */
            _stopMove: function _stopMove() {
                this.ui.shim.hide();
                this.ui.body
                    .off(this.pointerMove + ' ' + this.pointerUp)
                    .removeAttr('data-touch-action');
            },

            /**
             * Initiates the start resize event from `_events`.
             *
             * @method _startResize
             * @private
             * @param {Object} pointerEvent passes starting event
             */
            _startResize: function _startResize(pointerEvent) {
                // cancel if in fullscreen
                if (this.maximized) {
                    return false;
                }
                // continue
                var that = this;
                var width = this.ui.modal.width();
                var height = this.ui.modal.height();
                var modalLeft = this.ui.modal.position().left;
                var modalTop = this.ui.modal.position().top;

                // create event for stopping
                this.ui.body.on(this.pointerUp, function (e) {
                    that._stopResize(e);
                });

                this.ui.shim.show();

                this.ui.body.on(this.pointerMove, function (e) {
                    var mvX = pointerEvent.originalEvent.pageX - e.originalEvent.pageX;
                    var mvY = pointerEvent.originalEvent.pageY - e.originalEvent.pageY;
                    var w = width - (mvX * 2);
                    var h = height - (mvY * 2);
                    var wMin = that.options.minWidth;
                    var hMin = that.options.minHeight;
                    var left = mvX + modalLeft;
                    var top = mvY + modalTop;

                    // add some limits
                    if (w <= wMin) {
                        w = wMin;
                        left = modalLeft + width / 2 - w / 2;
                    }
                    if (h <= hMin) {
                        h = hMin;
                        top = modalTop + height / 2 - h / 2;
                    }

                    // set centered animation
                    that.ui.modal.css({
                        width: w,
                        height: h,
                        left: left,
                        top: top
                    });
                }).attr('data-touch-action', 'none');
            },

            /**
             * Initiates the stop resize event from `_startResize`.
             *
             * @method _stopResize
             * @private
             */
            _stopResize: function _stopResize() {
                this.ui.shim.hide();
                this.ui.body
                    .off(this.pointerMove + ' ' + this.pointerUp)
                    .removeAttr('data-touch-action');
            },

            /**
             * Sets the breadcrumb inside the modal.
             *
             * @method _setBreadcrumb
             * @private
             * @param {Object[]} breadcrumbs renderes breadcrumb on modal
             */
            _setBreadcrumb: function _setBreadcrumb(breadcrumbs) {
                var crumb = '';
                var template = '<a href="{1}" class="{2}"><span>{3}</span></a>';

                // cancel if there is no breadcrumbs)
                if (!breadcrumbs || breadcrumbs.length <= 1) {
                    return false;
                }
                if (!breadcrumbs[0].title) {
                    return false;
                }

                // add class to modal
                this.ui.modal.addClass('cms-modal-has-breadcrumb');

                // load breadcrumbs
                $.each(breadcrumbs, function (index, item) {
                    // check if the item is the last one
                    var last = (index >= breadcrumbs.length - 1) ? 'active' : '';
                    // render breadcrumbs
                    crumb += template
                        .replace('{1}', item.url)
                        .replace('{2}', last)
                        .replace('{3}', item.title);
                });

                // attach elements
                this.ui.breadcrumb.html(crumb);
            },

            /**
             * Sets the buttons inside the modal.
             *
             * @method _setButtons
             * @private
             * @param {jQuery} iframe loaded iframe element
             */
            _setButtons: function _setButtons(iframe) {
                var djangoSuit = iframe.contents().find('.suit-columns').length > 0;
                var that = this;
                var group = $('<div class="cms-modal-item-buttons"></div>');
                var render = $('<div class="cms-modal-buttons-inner"></div>');
                var cancel = $('<a href="#" class="cms-btn">' + CMS.config.lang.cancel + '</a>');
                var row;
                var tmp;

                if (!djangoSuit) {
                    row = iframe.contents().find('.submit-row:eq(0)');
                } else {
                    row = iframe.contents().find('.save-box:eq(0)');
                }
                var form = iframe.contents().find('form');
                //avoids conflict between the browser's form validation and Django's validation
                form.on('submit', function () {
                    if (that.hideFrame) { // submit button was clicked
                        that.ui.modal.find('.cms-modal-frame iframe').hide();
                        // page has been saved, run checkup
                        that.saved = true;
                    }
                });
                var buttons = row.find('input, a, button');

                // hide all submit-rows
                iframe.contents().find('.submit-row').hide();

                // if there are no given buttons within the submit-row area
                // scan deeper within the form itself
                if (!buttons.length) {
                    row = iframe.contents().find('body:not(.change-list) #content form:eq(0)');
                    buttons = row.find('input[type="submit"], button[type="submit"]');
                    buttons.addClass('deletelink').hide();
                }

                // loop over input buttons
                buttons.each(function (index, item) {
                    item = $(item);
                    item.attr('data-rel', '_' + index);

                    // cancel if item is a hidden input
                    if (item.attr('type') === 'hidden') {
                        return false;
                    }

                    var title = item.attr('value') || item.text();
                    var cls = 'cms-btn';

                    if (item.is('button')) {
                        title = item.text();
                    }

                    // set additional special css classes
                    if (item.hasClass('default')) {
                        cls = 'cms-btn cms-btn-action';
                    }
                    if (item.hasClass('deletelink')) {
                        cls = 'cms-btn cms-btn-caution';
                    }

                    var el = $('<a href="#" class="' + cls + ' ' + item.attr('class') + '">' + title + '</a>');

                    el.on(that.click + ' ' + that.touchEnd, function (e) {
                        e.preventDefault();

                        if (item.is('a')) {
                            that._loadIframe({
                                url: item.prop('href'),
                                name: title
                            });
                        }

                        // trigger only when blue action buttons are triggered
                        if (item.hasClass('default') || item.hasClass('deletelink')) {
                            if (!item.hasClass('default')) { // hide iframe when using buttons other than submit
                                that.ui.modal.find('.cms-modal-frame iframe').hide();
                                // page has been saved or deleted, run checkup
                                that.saved = true;
                            } else { // submit button uses the form's submit event
                                that.hideFrame = true;
                            }
                        }

                        if (item.is('input') || item.is('button')) {
                            // we need to use native `.click()` event specifically
                            // as we are inside an iframe and magic is happening
                            item[0].click();
                        }

                    });
                    el.wrap(group);

                    // append element
                    render.append(el.parent());
                });

                // manually add cancel button at the end
                cancel.on(that.click, function (e) {
                    e.preventDefault();
                    that.options.onClose = false;
                    that.close();
                });
                cancel.wrap(group);
                render.append(cancel.parent());

                // prepare groups
                render.find('.cms-btn-group').unwrap();
                tmp = render.find('.cms-btn-group').clone(true, true);
                render.find('.cms-btn-group').remove();
                render.append(tmp.wrapAll(group.clone().addClass('cms-modal-item-buttons-left')).parent());

                // render buttons
                this.ui.modalButtons.html(render);
            },

            /**
             * Version where the modal loads an iframe.
             *
             * @method _loadIframe
             * @private
             * @param {Object} opts
             * @param {String} opts.url url to render iframe, takes presedence over opts.html
             * @param {Object[]} [opts.breadcrumbs] collection of breadcrumb items
             * @param {String} [opts.title] modal window main title (bold)
             */
            _loadIframe: function _loadIframe(opts) {
                var that = this;

                opts.url = this.makeURL(opts.url);
                opts.title = opts.title || '';
                opts.breadcrumbs = opts.breadcrumbs || '';

                // show loader
                CMS.API.Toolbar.showLoader();

                // set classes
                this.ui.modal.removeClass('cms-modal-markup');
                this.ui.modal.addClass('cms-modal-iframe');

                // we need to render the breadcrumb
                this._setBreadcrumb(opts.breadcrumbs);

                // now refresh the content
                var holder = this.ui.frame;
                var iframe = $('<iframe src="' + opts.url + '" class="" frameborder="0" />');

                // set correct title
                var titlePrefix = this.ui.titlePrefix;
                var titleSuffix = this.ui.titleSuffix;

                iframe.css('visibility', 'hidden');
                titlePrefix.text(opts.title || '');
                titleSuffix.text('');

                // ensure previous iframe is hidden
                holder.find('iframe').css('visibility', 'hidden');
                that.ui.modalBody.addClass('cms-loader');

                // attach load event for iframe to prevent flicker effects
                iframe.on('load', function () {
                    var messages;
                    var messageList;
                    var contents;
                    var body;
                    var innerTitle;
                    var bc;

                    // check if iframe can be accessed
                    try {
                        iframe.contents();
                    } catch (error) {
                        CMS.API.Messages.open({
                            message: '<strong>' + error + '</strong>',
                            error: true
                        });
                        that.close();
                    }

                    CMS.Modal._setupCtrlEnterSave(document);
                    CMS.Modal._setupCtrlEnterSave(iframe[0].contentWindow.document);
                    // for ckeditor we need to go deeper
                    if (iframe[0].contentWindow.CMS && iframe[0].contentWindow.CMS.CKEditor) {
                        $(iframe[0].contentWindow.document).ready(function () {
                            // setTimeout is required to battle CKEditor initialisation
                            setTimeout(function () {
                                var editor = iframe[0].contentWindow.CMS.CKEditor.editor;
                                if (editor) {
                                    editor.on('loaded', function (e) {
                                        CMS.Modal._setupCtrlEnterSave(
                                            $(e.editor.container.$).find('iframe')[0].contentWindow.document
                                        );
                                    });
                                }
                            }, 100);
                        });
                    }

                    // hide loader
                    CMS.API.Toolbar.hideLoader();

                    // show messages in toolbar if provided
                    messageList = iframe.contents().find('.messagelist');
                    messages = messageList.find('li');
                    if (messages.length) {
                        CMS.API.Messages.open({
                            message: messages.eq(0).text()
                        });
                    }
                    messageList.remove();
                    contents = iframe.contents();
                    body = contents.find('body');

                    // inject css class
                    body.addClass('cms-admin cms-admin-modal');

                    // determine if we should close the modal or reload
                    if (messages.length && that.enforceReload) {
                        that.reloadBrowser();
                    }
                    if (messages.length && that.enforceClose) {
                        that.close();
                        return false;
                    }

                    // adding django hacks
                    contents.find('.viewsitelink').attr('target', '_top');

                    // set modal buttons
                    that._setButtons($(this));

                    // when an error occurs, reset the saved status so the form can be checked and validated again
                    if (iframe.contents().find('.errornote').length || iframe.contents().find('.errorlist').length) {
                        that.saved = false;
                    }

                    // when the window has been changed pressing the blue or red button, we need to run a reload check
                    // also check that no delete-confirmation is required
                    if (that.saved && !contents.find('.delete-confirmation').length) {
                        that.reloadBrowser(
                            that.options.onClose ? that.options.onClose : window.location.href,
                            false,
                            true
                        );
                    } else {
                        iframe.show();
                        // set title of not provided
                        innerTitle = iframe.contents().find('#content h1:eq(0)');

                        // case when there is no prefix
                        if (opts.title === undefined && that.ui.titlePrefix.text() === '') {
                            bc = iframe.contents().find('.breadcrumbs').contents();
                            that.ui.titlePrefix.text(bc.eq(bc.length - 1).text().replace('›', '').trim());
                        }

                        if (titlePrefix.text().trim() === '') {
                            titlePrefix.text(innerTitle.text());
                        } else {
                            titleSuffix.text(innerTitle.text());
                        }
                        innerTitle.remove();

                        // than show
                        iframe.css('visibility', 'visible');

                        // append ready state
                        iframe.data('ready', true);

                        // attach close event
                        body.on('keydown.cms', function (e) {
                            if (e.keyCode === CMS.KEYS.ESC) {
                                that.close();
                            }
                        });

                        // figure out if .object-tools is available
                        if (contents.find('.object-tools').length) {
                            contents.find('#content').css('padding-top', 38);
                        }
                    }
                });

                // inject
                holder.html(iframe);
            },

            /**
             * Version where the modal loads an url within an iframe.
             *
             * @method _changeIframe
             * @private
             * @param {jQuery} el originated element
             */
            _changeIframe: function _changeIframe(el) {
                if (el.hasClass('active')) {
                    return false;
                }

                var parents = el.parent().find('a');
                parents.removeClass('active');

                el.addClass('active');

                this._loadIframe({
                    url: el.attr('href')
                });

                this.ui.titlePrefix.text(el.text());
            },

            /**
             * Version where the modal loads html markup.
             *
             * @method _loadMarkup
             * @private
             * @param {Object} opts
             * @param {String|HTMLNode|jQuery} opts.html html markup to render
             * @param {String} opts.title modal window main title (bold)
             * @param {String} [opts.subtitle] modal window secondary title (normal)
             */
            _loadMarkup: function _loadMarkup(opts) {
                this.ui.modal.removeClass('cms-modal-iframe');
                this.ui.modal.addClass('cms-modal-markup');
                this.ui.modalBody.removeClass('cms-loader');

                // set content
                // empty to remove events, append to keep events
                this.ui.frame.empty().append(opts.html);
                this.ui.titlePrefix.text(opts.title || '');
                this.ui.titleSuffix.text(opts.subtitle || '');
            },

            /**
             * _deletePlugin removes a plugin once created when clicking
             * on delete or the close item. If we don't do this, an empty
             * plugin is generated
             * https://github.com/divio/django-cms/pull/4381 will eventually
             * provide a better solution
             *
             * @method _deletePlugin
             * @private
             * @param {Object} [opts] general objects element that holds settings
             * @param {Boolean} [opts.hideAfter] hides the modal after the ajax requests succeeds
             */
            _deletePlugin: function _deletePlugin(opts) {
                var that = this;
                var data = CMS._newPlugin;
                var post = '{ "csrfmiddlewaretoken": "' + CMS.config.csrf + '" }';
                var text = CMS.config.lang.confirmEmpty.replace(
                    '{1}', CMS._newPlugin.breadcrumb[CMS._newPlugin.breadcrumb.length - 1].title
                );

                // trigger an ajax request
                return CMS.API.Toolbar.openAjax({
                    url: data['delete'],
                    post: post,
                    text: text,
                    callback: function () {
                        CMS._newPlugin = false;
                        if (opts && opts.hideAfter) {
                            that._hide({
                                duration: 100
                            });
                        }
                    }
                });
            }
        });

        /**
         * Sets up keyup/keydown listeners so you're able to save whatever you're
         * editing inside of an iframe by pressing `ctrl + enter` on windows and `cmd + enter` on mac.
         *
         * It only works with default button (e.g. action), not the `delete` button,
         * even though sometimes it's the only actionable button in the modal.
         *
         * @method _setupCtrlEnterSave
         * @private
         * @static
         * @param {HTMLElement} document document element (iframe or parent window);
         */
        CMS.Modal._setupCtrlEnterSave = function _setupCtrlEnterSave(doc) {
            var cmdPressed = false;
            var mac = (navigator.platform.toLowerCase().indexOf('mac') + 1);

            $(doc).on('keydown.cms.submit', function (e) {
                if (e.ctrlKey && e.keyCode === CMS.KEYS.ENTER && !mac) {
                    $('.cms-modal-buttons .cms-btn-action:first').trigger('click');
                }

                if (mac) {
                    if (e.keyCode === CMS.KEYS.CMD_LEFT ||
                        e.keyCode === CMS.KEYS.CMD_RIGHT ||
                        e.keyCode === CMS.KEYS.CMD_FIREFOX) {
                        cmdPressed = true;
                    }

                    if (e.keyCode === CMS.KEYS.ENTER && cmdPressed) {
                        $('.cms-modal-buttons .cms-btn-action:first').trigger('click');
                    }
                }
            }).on('keyup.cms.submit', function (e) {
                if (mac) {
                    if (e.keyCode === CMS.KEYS.CMD_LEFT || e.keyCode === CMS.KEYS.CMD_RIGHT) {
                        cmdPressed = false;
                    }
                }
            });

        };
    });

})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// SIDEFRAME
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * The sideframe is triggered via API calls from the backend either
         * through the toolbar navigation or from plugins. The APIs only allow to
         * open a url within the sideframe.
         *
         * @class Sideframe
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.Sideframe = new CMS.Class({

            implement: [CMS.API.Helpers],

            options: {
                onClose: false,
                sideframeDuration: 300,
                sideframeWidth: 0.8 // matches 80% of window width
            },

            initialize: function initialize(options) {
                this.options = $.extend(true, {}, this.options, options);

                // elements
                this._setupUI();

                // states and events
                this.click = 'click.cms.sideframe';
                this.pointerDown = 'pointerdown.cms.sideframe contextmenu.cms.sideframe';
                this.pointerUp = 'pointerup.cms.sideframe pointercancel.cms.sideframe';
                this.pointerMove = 'pointermove.cms.sideframe';
                this.enforceReload = false;
                this.settingsRefreshTimer = 600;
            },

            /**
             * Stores all jQuery references within `this.ui`.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function _setupUI() {
                var sideframe = $('.cms-sideframe');
                this.ui = {
                    sideframe: sideframe,
                    body: $('html'),
                    window: $(window),
                    dimmer: sideframe.find('.cms-sideframe-dimmer'),
                    close: sideframe.find('.cms-sideframe-close'),
                    resize: sideframe.find('.cms-sideframe-resize'),
                    frame: sideframe.find('.cms-sideframe-frame'),
                    shim: sideframe.find('.cms-sideframe-shim'),
                    historyBack: sideframe.find('.cms-sideframe-history .cms-icon-arrow-back'),
                    historyForward: sideframe.find('.cms-sideframe-history .cms-icon-arrow-forward')
                };
            },

            /**
             * Sets up all the event handlers, such as closing and resizing.
             *
             * @method _events
             * @private
             */
            _events: function _events() {
                var that = this;

                // we need to set the history state on event creation
                // to ensure we start with clean states in new instances
                this.history = {
                    back: [],
                    forward: []
                };

                this.ui.close.off(this.click).on(this.click, function () {
                    that.close();
                });

                // the resize event attaches an off event to the body
                // which is handled within _startResize()
                this.ui.resize.off(this.pointerDown).on(this.pointerDown, function (e) {
                    e.preventDefault();
                    that._startResize();
                });

                // close sideframe when clicking on the dimmer
                this.ui.dimmer.off(this.click).on(this.click, function () {
                    that.close();
                });

                // attach events to the back button
                this.ui.historyBack.off(this.click).on(this.click, function () {
                    if (that.ui.historyBack.hasClass('cms-icon-disabled')) {
                        return false;
                    }
                    that._goToHistory('back');
                });

                // attach events to the forward button
                this.ui.historyForward.off(this.click).on(this.click, function () {
                    if (that.ui.historyForward.hasClass('cms-icon-disabled')) {
                        return false;
                    }
                    that._goToHistory('forward');
                });
            },

            /**
             * Opens a given url within a sideframe.
             *
             * @method open
             * @chainable
             * @param {Object} opts
             * @param {String} opts.url url to render iframe
             * @param {Boolean} [opts.animate] should modal be animated
             */
            open: function open(opts) {
                if (!(opts && opts.url)) {
                    throw new Error('The arguments passed to "open" were invalid.');
                }

                var url = opts.url;
                var animate = opts.animate;

                // setup internals
                var language = 'language=' + CMS.config.request.language;
                var page_id = 'page_id=' + CMS.config.request.page_id;
                var params = [];
                var width = window.innerWidth;
                var currentWidth = this.ui.sideframe.outerWidth();
                var isFrameVisible = this.ui.sideframe.is(':visible');

                // set the ratio for bigger devices than mobile
                if (this.ui.body.width() >= CMS.BREAKPOINTS.mobile) {
                    width = CMS.settings.sideframe.position ||
                        (this.options.sideframeWidth * 100 + '%');
                }

                // We have to rebind events every time we open a sideframe
                // because the event handlers contain references to the instance
                // and since we reuse the same markup we need to update
                // that instance reference every time.
                this._events();

                // show dimmer even before iframe is loaded
                this.ui.dimmer.show();
                this.ui.frame.addClass('cms-loader');

                // show loader
                if (CMS.API && CMS.API.Toolbar) {
                    CMS.API.Toolbar.showLoader();
                }

                // we need to modify the url appropriately to pass
                // language and page to the params
                if (url.indexOf(CMS.config.request.tree) >= 0) {
                    if (CMS.config.request.language) {
                        params.push(language);
                    }
                    if (CMS.config.request.page_id) {
                        params.push(page_id);
                    }
                }

                url = this.makeURL(url, params);

                // load the iframe
                this._content(url);

                // cancel animation if sideframe is already shown
                if (isFrameVisible && currentWidth < width) {
                    // The user has performed an action that requires the
                    // sideframe to be shown, this intent outweighs any
                    // previous intent to minimize the frame.
                    CMS.settings.sideframe.hidden = false;
                }

                if (isFrameVisible && Math.round(currentWidth) === Math.round(width)) {
                    // Math.round because subpixel values
                    animate = false;
                }

                // show iframe
                this._show(width, animate);

                return this;
            },

            /**
             * Handles content replacement mechanisms.
             *
             * @method _content
             * @private
             * @param {String} url valid uri to pass on the iframe
             */
            _content: function _content(url) {
                var that = this;
                var iframe = $('<iframe src="' + url + '" class="" frameborder="0" />');
                var holder = this.ui.frame;
                var contents;
                var body;

                // attach load event to iframe
                iframe.hide().on('load', function () {
                    contents = iframe.contents();
                    body = contents.find('body');

                    // inject css class
                    body.addClass('cms-admin cms-admin-sideframe');

                    // remove loader
                    that.ui.frame.removeClass('cms-loader');
                    // than show
                    iframe.show();

                    // add debug infos
                    if (CMS.config.debug) {
                        iframe.contents().find('body').addClass('cms-debug');
                    }

                    // save url in settings
                    CMS.settings.sideframe.url = iframe.prop('src');
                    CMS.settings = that.setSettings(CMS.settings);

                    // bind extra events
                    body.on(that.click, function () {
                        $(document).trigger(that.click);
                    });

                    // attach close event
                    body.on('keydown.cms', function (e) {
                        if (e.keyCode === CMS.KEYS.ESC) {
                            that.close();
                        }
                    });

                    // adding django hacks
                    contents.find('.viewsitelink').attr('target', '_top');

                    // update history
                    that._addToHistory(this.contentWindow.location.href);
                });

                // inject iframe
                holder.html(iframe);
            },

            /**
             * Animation helper for opening the sideframe.
             *
             * @method _show
             * @private
             * @param {Number} width width that the iframes opens to
             * @param {Number} [animate] Animation duration
             */
            _show: function _show(width, animate) {
                var that = this;

                this.ui.sideframe.show();

                // check if sideframe should be hidden
                if (CMS.settings.sideframe.hidden) {
                    this._hide();
                }

                // otherwise do normal behaviour
                if (animate) {
                    this.ui.sideframe.animate({
                        width: width,
                        overflow: 'visible'
                    }, this.options.sideframeDuration);
                } else {
                    this.ui.sideframe.css('width', width);
                    // reset width if larger than available space
                    if (width >= $(window).width()) {
                        this.ui.sideframe.css({
                            width: $(window).width() - 30,
                            overflow: 'visible'
                        });
                    }
                }

                // trigger API handlers
                if (CMS.API && CMS.API.Toolbar) {
                    // FIXME: initialization needs to be done after our libs are loaded
                    CMS.API.Toolbar.open();
                    CMS.API.Toolbar.hideLoader();
                    CMS.API.Toolbar._lock(true);
                }

                // add esc close event
                this.ui.body.off('keydown.cms.close').on('keydown.cms.close', function (e) {
                    if (e.keyCode === CMS.KEYS.ESC) {
                        that.options.onClose = null;
                        that.close();
                    }
                });

                // disable scrolling for touch
                this.ui.body.addClass('cms-prevent-scrolling');
            },

            /**
             * Closes the current instance.
             *
             * @method close
             */
            close: function close() {
                // hide dimmer immediately
                this.ui.dimmer.hide();

                // update settings
                CMS.settings.sideframe = {
                    url: null,
                    hidden: false,
                    width: this.options.sideframeWidth
                };
                CMS.settings = this.setSettings(CMS.settings);

                // check for reloading
                this.reloadBrowser(this.options.onClose, false, true);

                // trigger hide animation
                this._hide({ duration: 0 });
            },

            /**
             * Animation helper for closing the iframe.
             *
             * @method _hide
             * @private
             * @param {Object} opts
             * @param {Number} opts.duration animation duration
             */
            _hide: function _hide(opts) {
                var duration = this.options.sideframeDuration;
                if (opts && opts.duration) {
                    duration = opts.duration;
                }

                this.ui.sideframe.animate({ width: 0 }, duration, function () {
                    $(this).hide();
                });
                this.ui.frame.removeClass('cms-loader');

                if (CMS.API && CMS.API.Toolbar) {
                    CMS.API.Toolbar._lock(false);
                }

                this.ui.body.off('keydown.cms.close');

                // enable scrolling again
                this.ui.body.removeClass('cms-prevent-scrolling');
            },

            /**
             * Initiates the start resize event from `_events`.
             *
             * @method _startResize
             * @private
             */
            _startResize: function _startResize() {
                var that = this;
                var outerOffset = 30;
                var timer = function () {};

                // create event for stopping
                this.ui.body.on(this.pointerUp, function (e) {
                    e.preventDefault();
                    that._stopResize();
                });

                // this prevents the iframe from being focusable
                this.ui.shim.css('z-index', 20);

                this.ui.body.attr('data-touch-action', 'none').on(this.pointerMove, function (e) {
                    if (e.originalEvent.clientX <= 320) {
                        e.originalEvent.clientX = 320;
                    }
                    if (e.originalEvent.clientX >= $(window).width() - outerOffset) {
                        e.originalEvent.clientX = $(window).width() - outerOffset;
                    }

                    that.ui.sideframe.css('width', e.originalEvent.clientX);

                    // update settings
                    CMS.settings.sideframe.position = e.originalEvent.clientX;

                    // save position into our settings
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        CMS.settings = that.setSettings(CMS.settings);
                    }, that.settingsRefreshTimer);
                });
            },

            /**
             * Initiates the stop resize event from `_startResize`.
             *
             * @method _stopResize
             * @private
             */
            _stopResize: function _stopResize() {
                this.ui.shim.css('z-index', 1);
                this.ui.body
                    .off(this.pointerUp)
                    .off(this.pointerMove)
                    .removeAttr('data-touch-action');
            },

            /**
             * Retrieves the history states from `this.history`.
             *
             * @method _goToHistory
             * @private
             * @param {String} type can be either `back` or `forward`
             */
            _goToHistory: function _goToHistory(type) {
                var iframe = this.ui.frame.find('iframe');
                var tmp;

                if (type === 'back') {
                    // remove latest entry (which is the current site)
                    this.history.forward.push(this.history.back.pop());
                    iframe.attr('src', this.history.back[this.history.back.length - 1]);
                }

                if (type === 'forward') {
                    tmp = this.history.forward.pop();
                    this.history.back.push(tmp);
                    iframe.attr('src', tmp);
                }

                this._updateHistoryButtons();
            },

            /**
             * Stores the history states in `this.history`.
             *
             * @method _addToHistory
             * @private
             * @param {String} url url to be stored in `this.history.back`
             */
            _addToHistory: function _addToHistory(url) {
                var iframe = this.ui.frame.find('iframe');

                // we need to update history first
                this.history.back.push(url);
                // and than set local variables
                var length = this.history.back.length;

                // store current url if array is empty
                if (this.history.back.length <= 0) {
                    this.history.back.push(iframe.attr('src'));
                }

                // check for duplicates
                if (this.history.back[length - 1] === this.history.back[length - 2]) {
                    this.history.back.pop();
                }

                this._updateHistoryButtons();
            },

            /**
             * Sets the correct states for the history UI elements.
             *
             * @method _updateHistoryButtons
             * @private
             */
            _updateHistoryButtons: function _updateHistoryButtons() {
                if (this.history.back.length > 1) {
                    this.ui.historyBack.removeClass('cms-icon-disabled');
                } else {
                    this.ui.historyBack.addClass('cms-icon-disabled');
                }

                if (this.history.forward.length >= 1) {
                    this.ui.historyForward.removeClass('cms-icon-disabled');
                } else {
                    this.ui.historyForward.addClass('cms-icon-disabled');
                }
            }
        });

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Clipboard
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * Handles copy & paste in the structureboard.
         *
         * @class Clipboard
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.Clipboard = new CMS.Class({

            implement: [CMS.API.Helpers],

            initialize: function () {
                this._setupUI();

                // states
                this.click = 'click.cms.clipboard';

                // setup events
                this._events();
            },

            /**
             * Caches all the jQuery element queries.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function _setupUI() {
                var clipboard = $('.cms-clipboard');
                this.ui = {
                    clipboard: clipboard,
                    triggers: $('.cms-clipboard-trigger a'),
                    triggerRemove: $('.cms-clipboard-empty a'),
                    pluginsList: clipboard.find('.cms-clipboard-containers'),
                    document: $(document)
                };
            },

            /**
             * Sets up event handlers for clipboard ui.
             *
             * @method _events
             * @private
             */
            _events: function () {
                var that = this;

                var MIN_WIDTH = 400;
                // FIXME kind of a magic number for 1 item in clipboard
                var MIN_HEIGHT = 117;

                that.modal = new CMS.Modal({
                    minWidth: MIN_WIDTH,
                    minHeight: MIN_HEIGHT,
                    minimizable: false,
                    maximizable: false,
                    resizable: false
                });

                that.modal.on('cms.modal.loaded cms.modal.closed', function removePlaceholder() {
                    // cannot be cached
                    $('.cms-add-plugin-placeholder').remove();
                }).on('cms.modal.closed cms.modal.load', function () {
                    that.ui.pluginsList.prependTo(that.ui.clipboard);
                }).ui.modal.on('cms.modal.load', function () {
                    that.ui.pluginsList.prependTo(that.ui.clipboard);
                });

                that.ui.triggers.on(that.click, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if ($(this).parent().hasClass('cms-toolbar-item-navigation-disabled')) {
                        return false;
                    }

                    that.modal.open({
                        html: that.ui.pluginsList,
                        title: that.ui.clipboard.data('title'),
                        width: MIN_WIDTH,
                        height: MIN_HEIGHT
                    });
                    that.ui.document.trigger('click.cms.toolbar');
                });

                // add remove event
                that.ui.triggerRemove.on(that.click, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if ($(this).parent().hasClass('cms-toolbar-item-navigation-disabled')) {
                        return false;
                    }
                    that.clear(function () {
                        // remove element on success
                        that.modal.close();
                        that.ui.triggers.parent().addClass('cms-toolbar-item-navigation-disabled');
                        that.ui.triggerRemove.parent().addClass('cms-toolbar-item-navigation-disabled');
                        that.ui.document.trigger('click.cms.toolbar');
                    });
                });
            },

            /**
             * Clears the clipboard by quering the server.
             * Callback is optional, but if provided - it's called
             * no matter what outcome was of the ajax call.
             *
             * @method clear
             * @param {Function} [callback]
             */
            clear: function (callback) {
                // post needs to be a string, it will be converted using JSON.parse
                var post = '{ "csrfmiddlewaretoken": "' + CMS.config.csrf + '" }';
                var pasteItems = $('.cms-submenu-item [data-rel=paste]').parent().
                    addClass('cms-submenu-item-disabled');
                pasteItems.find('.cms-submenu-item-paste-tooltip').css('display', 'none');
                pasteItems.find('.cms-submenu-item-paste-tooltip-empty').css('display', 'block');

                // redirect to ajax
                CMS.API.Toolbar.openAjax({
                    url: CMS.config.clipboard.url,
                    post: post,
                    callback: callback
                });
            }

        });

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Plugin
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        var doc = $(document);
        var clipboard = $('.cms-clipboard');
        var clipboardDraggable = clipboard.find('.cms-draggable:first');
        var clipboardPlugin = clipboard.find('.cms-plugin:first');
        var clickCounter = 0;
        var timer;

        doc.on('pointerup.cms.plugin', function () {
            // call it as a static method, because otherwise we trigger it the
            // amount of times CMS.Plugin is instantiated,
            // which does not make much sense
            CMS.Plugin._hideSettingsMenu();
        }).on('keydown.cms.plugin', function (e) {
            if (e.keyCode === CMS.KEYS.SHIFT) {
                doc.data('expandmode', true);
            }
        }).on('keyup.cms.plugin', function (e) {
            if (e.keyCode === CMS.KEYS.SHIFT) {
                doc.data('expandmode', false);
            }
        }).on('click', '.cms-plugin a, a:has(.cms-plugin)', function (e) {
            // prevents single click from messing up the edit call
            // don't go to the link if there is custom js attached to it
            // or if it's clicked along with shift, ctrl, cmd
            if (e.shiftKey || e.ctrlKey || e.metaKey || e.isDefaultPrevented()) {
                return;
            }
            e.preventDefault();
            if (++clickCounter === 1) {
                timer = setTimeout(function () {
                    clickCounter = 0;
                    window.location.href = $(e.currentTarget).attr('href');
                }, 300);
            } else {
                clearTimeout(timer);
                clickCounter = 0;
            }
        });

        /**
         * Class for handling Plugins / Placeholders or Generics.
         * Handles adding / moving / copying / pasting / menus etc
         * in structureboard.
         *
         * @class Plugin
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.Plugin = new CMS.Class({

            implement: [CMS.API.Helpers],

            options: {
                type: '', // bar, plugin or generic
                placeholder_id: null,
                plugin_type: '',
                plugin_id: null,
                plugin_language: '',
                plugin_parent: null,
                plugin_order: null,
                plugin_breadcrumb: [],
                plugin_restriction: [],
                plugin_parent_restriction: [],
                urls: {
                    add_plugin: '',
                    edit_plugin: '',
                    move_plugin: '',
                    copy_plugin: '',
                    delete_plugin: ''
                }
            },

            initialize: function initialize(container, options) {
                this.options = $.extend(true, {}, this.options, options);

                this._setupUI(container);

                // states
                this.csrf = CMS.config.csrf;
                this.click = 'click.cms.plugin';
                this.pointerUp = 'pointerup.cms.plugin';
                this.pointerDown = 'pointerdown.cms.plugin';
                this.pointerOverAndOut = 'pointerover.cms.plugin pointerout.cms.plugin';
                this.doubleClick = 'dblclick.cms.plugin';
                this.keyUp = 'keyup.cms.plugin';
                this.keyDown = 'keydown.cms.plugin';
                this.mouseEvents = 'mousedown.cms.plugin mousemove.cms.plugin mouseup.cms.plugin';
                this.touchStart = 'touchstart.cms.plugin';

                // bind data element to the container
                this.ui.container.data('settings', this.options);

                // determine type of plugin
                switch (this.options.type) {
                    case 'placeholder': // handler for placeholder bars
                        this._setPlaceholder();
                        this._collapsables();
                        break;
                    case 'plugin': // handler for all plugins
                        this._setPlugin();
                        this._collapsables();
                        break;
                    default: // handler for static content
                        this._setGeneric();
                }
            },

            /**
             * Caches some jQuery references and sets up structure for
             * further initialisation.
             *
             * @method _setupUI
             * @private
             * @param {String} container `cms-plugin-${id}`
             */
            _setupUI: function setupUI(container) {
                container = $('.' + container);
                this.ui = {
                    container: container,
                    publish: $('.cms-btn-publish'),
                    save: $('.cms-toolbar-item-switch-save-edit'),
                    window: $(window),
                    revert: $('.cms-toolbar-revert'),
                    dragbar: null,
                    draggable: null,
                    draggables: null,
                    submenu: null,
                    dropdown: null
                };
            },

            /**
             * Sets up behaviours and ui for placeholder.
             *
             * @method _setPlaceholder
             * @private
             */
            _setPlaceholder: function () {
                var that = this;
                this.ui.dragbar = $('.cms-dragbar-' + this.options.placeholder_id);
                this.ui.draggables = this.ui.dragbar.closest('.cms-dragarea').find('> .cms-draggables');
                this.ui.submenu = this.ui.dragbar.find('.cms-submenu-settings');
                var title = this.ui.dragbar.find('.cms-dragbar-title');
                var togglerLinks = this.ui.dragbar.find('.cms-dragbar-toggler a');
                var expanded = 'cms-dragbar-title-expanded';

                // register the subnav on the placeholder
                this._setSettingsMenu(this.ui.submenu);
                this._setAddPluginModal(this.ui.dragbar.find('.cms-submenu-add'));

                CMS.settings.dragbars = CMS.settings.dragbars || []; // expanded dragbars array

                // enable expanding/collapsing globally within the placeholder
                togglerLinks.off(this.click).on(this.click, function (e) {
                    e.preventDefault();
                    if (title.hasClass(expanded)) {
                        that._collapseAll(title);
                    } else {
                        that._expandAll(title);
                    }
                });

                if ($.inArray(this.options.placeholder_id, CMS.settings.dragbars) !== -1) {
                    title.addClass(expanded);
                }

                this._checkIfPasteAllowed();
            },

            /**
             * Sets up behaviours and ui for plugin.
             *
             * @method _setPlugin
             * @private
             */
            _setPlugin: function () {
                var that = this;

                // adds double click to edit
                this.ui.container.add(this.ui.dragitem).on(this.doubleClick, function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    that.editPlugin(
                        that.options.urls.edit_plugin,
                        that.options.plugin_name,
                        that.options.plugin_breadcrumb
                    );
                });

                // adds edit tooltip
                this.ui.container.on(this.pointerOverAndOut + ' ' + this.touchStart, function (e) {
                    // required for both, click and touch
                    // otherwise propagation won't work to the nested plugin
                    e.stopPropagation();
                    var name = that.options.plugin_name;
                    var id = that.options.plugin_id;
                    CMS.API.Tooltip.displayToggle(e.type === 'pointerover' || e.type === 'touchstart', e, name, id);
                });

                // adds listener for all plugin updates
                this.ui.container.on('cms.plugins.update', function (e) {
                    e.stopPropagation();
                    that.movePlugin();
                });

                // adds listener for copy/paste updates
                this.ui.container.on('cms.plugin.update', function (e) {
                    e.stopPropagation();

                    var el = $(e.delegateTarget);
                    var dragitem = $('.cms-draggable-' + el.data('settings').plugin_id);
                    var placeholder_id = that._getId(
                        dragitem.parents('.cms-draggables').last().prevAll('.cms-dragbar').first()
                    );

                    // if placeholder_id is empty, cancel
                    if (!placeholder_id) {
                        return false;
                    }

                    var data = el.data('settings');
                    data.target = placeholder_id;
                    data.parent = that._getId(dragitem.parent().closest('.cms-draggable'));
                    data.move_a_copy = true;

                    that.movePlugin(data);
                });

                // filling up ui object
                this.ui.draggable = $('.cms-draggable-' + this.options.plugin_id);
                this.ui.dragitem = this.ui.draggable.find('> .cms-dragitem');
                this.ui.draggables = this.ui.draggable.find('> .cms-draggables');
                this.ui.submenu = this.ui.dragitem.find('.cms-submenu');

                // attach event to the plugin menu
                this._setSettingsMenu(this.ui.submenu);

                // attach events for the "Add plugin" modal
                this._setAddPluginModal(this.ui.dragitem.find('.cms-submenu-add'));

                // clickability of "Paste" menu item
                this._checkIfPasteAllowed();
            },

            /**
             * Sets up behaviours and ui for generics.
             * Generics do not show up in structure board.
             *
             * @method _setGeneric
             * @private
             */
            _setGeneric: function () {
                var that = this;

                // adds double click to edit
                this.ui.container.on(this.doubleClick, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    that.editPlugin(that.options.urls.edit_plugin, that.options.plugin_name, []);
                });

                // adds edit tooltip
                this.ui.container.on(this.pointerOverAndOut + ' ' + this.touchStart, function (e) {
                    if (e.type !== 'touchstart') {
                        e.stopPropagation();
                    }
                    var name = that.options.plugin_name;
                    var id = that.options.plugin_id;
                    CMS.API.Tooltip.displayToggle(e.type === 'pointerover' || e.type === 'touchstart', e, name, id);
                });
            },

            /**
             * Checks if paste is allowed into current plugin/placeholder based
             * on restrictions we have. Also determines which tooltip to show.
             *
             * @method _checkIfPasteAllowed
             * @private
             * @return {Boolean}
             */
            _checkIfPasteAllowed: function _checkIfPasteAllowed() {
                var pasteButton = this.ui.dropdown.find('[data-rel=paste]');
                var pasteItem = pasteButton.parent();
                if (!clipboardPlugin.length) {
                    pasteItem.addClass('cms-submenu-item-disabled');
                    pasteItem.find('.cms-submenu-item-paste-tooltip-empty').css('display', 'block');
                    return false;
                }

                if (this.ui.draggable && this.ui.draggable.hasClass('cms-draggable-disabled')) {
                    pasteItem.addClass('cms-submenu-item-disabled');
                    pasteItem.find('.cms-submenu-item-paste-tooltip-disabled').css('display', 'block');
                    return false;
                }

                var bounds = this.options.plugin_restriction;
                var type = clipboardPlugin.data('settings').plugin_type;
                var parent_bounds = clipboardPlugin.data('settings').plugin_parent_restriction;
                var currentPluginType = this.options.plugin_type;

                if ((bounds.length && $.inArray(type, bounds) === -1) ||
                    (parent_bounds.length && $.inArray(currentPluginType, parent_bounds) === -1)) {
                    pasteItem.addClass('cms-submenu-item-disabled');
                    pasteItem.find('.cms-submenu-item-paste-tooltip-restricted').css('display', 'block');
                    return false;
                }

                return true;
            },

            /**
             * Calls api to create a plugin and then proceeds to edit it.
             *
             * @method addPlugin
             * @param {String} type type of the plugin, e.g "Bootstrap3ColumnCMSPlugin"
             * @param {String} name name of the plugin, e.g. "Column"
             * @param {String} parent id of a parent plugin
             */
            addPlugin: function (type, name, parent) {
                // cancel request if already in progress
                if (CMS.API.locked) {
                    return false;
                }
                CMS.API.locked = true;

                var that = this;
                var data = {
                    placeholder_id: this.options.placeholder_id,
                    plugin_type: type,
                    plugin_parent: parent || '',
                    plugin_language: this.options.plugin_language,
                    csrfmiddlewaretoken: this.csrf
                };

                $.ajax({
                    type: 'POST',
                    url: this.options.urls.add_plugin,
                    data: data,
                    success: function (data) {
                        CMS.API.locked = false;
                        that.newPlugin = data;
                        that.editPlugin(data.url, name, data.breadcrumb);
                    },
                    error: function (jqXHR) {
                        CMS.API.locked = false;
                        var msg = CMS.config.lang.error;
                        // trigger error
                        CMS.API.Messages.open({
                            message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                            error: true
                        });
                    }
                });
            },

            /**
             * Opens the modal for editing a plugin.
             *
             * @method editPlugin
             * @param {String} url editing url
             * @param {String} name Name of the plugin, e.g. "Column"
             * @param {Object[]} breadcrumb array of objects representing a breadcrumb,
             *     each item is `{ title: 'string': url: 'string' }`
             */
            editPlugin: function (url, name, breadcrumb) {
                // trigger modal window
                var modal = new CMS.Modal({
                    newPlugin: this.newPlugin || false,
                    onClose: this.options.onClose || false,
                    redirectOnClose: this.options.redirectOnClose || false
                });
                if (!this.newPlugin) {
                    modal.on('cms.modal.loaded', function removePlaceholder() {
                        $('.cms-add-plugin-placeholder').remove();
                    });
                }
                modal.on('cms.modal.closed', function removePlaceholder() {
                    $('.cms-add-plugin-placeholder').remove();
                });
                modal.open({
                    url: url,
                    title: name,
                    breadcrumbs: breadcrumb,
                    width: 850
                });
            },

            /**
             * Used for copying _and_ pasting a plugin. If either of params
             * is present method assumes that it's "paste" and will make a call
             * to api to insert current plugin to specified `options.target_plugin_id`
             * or `options.target_placeholder_id`. Copying a plugin also first
             * clears the clipboard.
             *
             * @method copyPlugin
             * @param {Object} [options=this.options]
             * @param {String} source_language
             */
            copyPlugin: function (options, source_language) {
                // cancel request if already in progress
                if (CMS.API.locked) {
                    return false;
                }
                CMS.API.locked = true;

                var move = (options || source_language) ? true : false;

                // set correct options
                options = options || this.options;
                if (source_language) {
                    options.target = options.placeholder_id;
                    options.plugin_id = '';
                    options.parent = '';
                } else {
                    source_language = options.plugin_language;
                }

                var data = {
                    source_placeholder_id: options.placeholder_id,
                    source_plugin_id: options.plugin_id || '',
                    source_language: source_language,
                    target_plugin_id: options.parent || '',
                    target_placeholder_id: options.target || CMS.config.clipboard.id,
                    target_language: options.page_language || source_language,
                    csrfmiddlewaretoken: this.csrf
                };
                var request = {
                    type: 'POST',
                    url: options.urls.copy_plugin,
                    data: data,
                    success: function () {
                        CMS.API.Messages.open({
                            message: CMS.config.lang.success
                        });
                        // reload
                        CMS.API.Helpers.reloadBrowser();
                    },
                    error: function (jqXHR) {
                        CMS.API.locked = false;
                        var msg = CMS.config.lang.error;
                        // trigger error
                        CMS.API.Messages.open({
                            message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                            error: true
                        });
                    }
                };

                if (move) {
                    $.ajax(request);
                } else {
                    // ensure clipboard is cleaned
                    CMS.API.Clipboard.clear(function () {
                        $.ajax(request);
                    });
                }
            },

            /**
             * Essentially clears clipboard and moves plugin to a clipboard
             * placholder through `movePlugin`.
             *
             * @method cutPlugin
             */
            cutPlugin: function () {
                // if cut is once triggered, prevent additional actions
                if (CMS.API.locked) {
                    return false;
                }
                CMS.API.locked = true;

                var that = this;
                var data = {
                    placeholder_id: CMS.config.clipboard.id,
                    plugin_id: this.options.plugin_id,
                    plugin_parent: '',
                    plugin_language: this.options.page_language,
                    plugin_order: [this.options.plugin_id],
                    csrfmiddlewaretoken: this.csrf
                };

                // ensure clipboard is cleaned
                CMS.API.Clipboard.clear(function () {
                    // cancel request if already in progress
                    if (CMS.API.locked) {
                        return false;
                    }
                    CMS.API.locked = true;

                    // move plugin
                    $.ajax({
                        type: 'POST',
                        url: that.options.urls.move_plugin,
                        data: data,
                        success: function () {
                            CMS.API.Messages.open({
                                message: CMS.config.lang.success
                            });
                            // if response is reload
                            CMS.API.Helpers.reloadBrowser();
                        },
                        error: function (jqXHR) {
                            CMS.API.locked = false;
                            var msg = CMS.config.lang.error;
                            // trigger error
                            CMS.API.Messages.open({
                                message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                                error: true
                            });
                        }
                    });
                });
            },

            /**
             * Method is called when you click on the paste button on the plugin.
             * Uses existing solution of `copyPlugin(options)`
             *
             * @method pastePlugin
             */
            pastePlugin: function () {
                clipboardDraggable.appendTo(this.ui.draggables);
                this.ui.draggables.trigger('cms.update');
                clipboardPlugin.trigger('cms.plugin.update');
            },

            /**
             * Moves plugin by querying the API and then updates some UI parts
             * to reflect that the page has changed.
             *
             * @method movePlugin
             * @param {Object} [options=this.options]
             * @param {String} [options.placeholder_id]
             * @param {String} [options.plugin_id]
             * @param {String} [options.plugin_parent]
             * @param {String} [options.plugin_language]
             * @param {Boolean} [options.move_a_copy]
             */
            movePlugin: function (options) {
                // cancel request if already in progress
                if (CMS.API.locked) {
                    return false;
                }
                CMS.API.locked = true;

                var that = this;
                // set correct options
                options = options || this.options;

                var plugin = $('.cms-plugin-' + options.plugin_id);
                var dragitem = $('.cms-draggable-' + options.plugin_id);

                // SETTING POSITION
                this._setPosition(options.plugin_id, plugin, dragitem);

                // SAVING POSITION
                var placeholder_id = this._getId(
                    dragitem.parents('.cms-draggables').last().prevAll('.cms-dragbar').first()
                );
                var plugin_parent = this._getId(dragitem.parent().closest('.cms-draggable'));
                var plugin_order = this._getIds(dragitem.siblings('.cms-draggable').andSelf());

                if (options.move_a_copy) {
                    plugin_order = plugin_order.map(function (pluginId) {
                        // TODO correct way would be to check if it's actually a
                        // pasted plugin and only then replace the id with copy token
                        // otherwise if we would copy from the same placeholder we would get
                        // two copy tokens instead of original and a copy.
                        // it's ok so far, as long as we copy only from clipboard
                        if (pluginId === options.plugin_id) {
                            pluginId = '__COPY__';
                        }
                        return pluginId;
                    });
                }

                // cancel here if we have no placeholder id
                if (placeholder_id === false) {
                    return false;
                }

                // gather the data for ajax request
                var data = {
                    placeholder_id: placeholder_id,
                    plugin_id: options.plugin_id,
                    plugin_parent: plugin_parent || '',
                    // this is a hack: when moving to different languages use the global language
                    plugin_language: options.page_language,
                    plugin_order: plugin_order,
                    csrfmiddlewaretoken: this.csrf,
                    move_a_copy: options.move_a_copy
                };

                $.ajax({
                    type: 'POST',
                    url: options.urls.move_plugin,
                    data: data,
                    success: function (response) {
                        // if response is reload
                        if (response.reload) {
                            CMS.API.Helpers.reloadBrowser();
                        }

                        // enable actions again
                        CMS.API.locked = false;

                        // TODO: show only if (response.status)
                        that._showSuccess(dragitem);
                    },
                    error: function (jqXHR) {
                        CMS.API.locked = false;
                        var msg = CMS.config.lang.error;
                        // trigger error
                        CMS.API.Messages.open({
                            message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                            error: true
                        });
                    }
                });

                // show publish / save buttons
                this.ui.publish
                    .addClass('cms-btn-publish-active')
                    .removeClass('cms-btn-disabled')
                    .parent().show();
                this.ui.window.trigger('resize');

                // enable revert to live
                this.ui.revert.removeClass('cms-toolbar-item-navigation-disabled');
            },

            /**
             * Opens a modal to delete a plugin
             *
             * @method deletePlugin
             * @param {String} url admin url for deleting a page
             * @param {String} name plugin name, e.g. "Column"
             * @param {Object[]} breadcrumb array of objects representing a breadcrumb,
             *     each item is `{ title: 'string': url: 'string' }`
             */
            deletePlugin: function (url, name, breadcrumb) {
                // trigger modal window
                var modal = new CMS.Modal({
                    newPlugin: this.newPlugin || false,
                    onClose: this.options.onClose || false,
                    redirectOnClose: this.options.redirectOnClose || false
                });
                modal.on('cms.modal.loaded', function removePlaceholder() {
                    $('.cms-add-plugin-placeholder').remove();
                });
                modal.open({
                    url: url,
                    title: name,
                    breadcrumbs: breadcrumb
                });
            },

            /**
             * Moves the plugin according to the place it should have in content mode.
             *
             * @method _setPosition
             * @private
             * @param {String} id
             * @param {jQuery} plugin the `.cms-plugin` element
             * @param {jQuery} dragitem the `.cms-draggable` of the plugin
             */
            _setPosition: function (id, plugin, dragitem) {
                // after we insert the plugin onto its new place, we need to figure out where to position it
                var prevItem = dragitem.prev('.cms-draggable');
                var nextItem = dragitem.next('.cms-draggable');
                var parent = dragitem.parent().closest('.cms-draggable');
                var child = $('.cms-plugin-' + this._getId(parent));
                var placeholder = dragitem.closest('.cms-dragarea');

                // determine if there are other plugins within the same level, this makes the move easier
                if (prevItem.length) {
                    plugin.insertAfter($('.cms-plugin-' + this._getId(prevItem)));
                } else if (nextItem.length) {
                    plugin.insertBefore($('.cms-plugin-' + this._getId(nextItem)));
                } else if (parent.length) {
                    // if we can't find a plugin on the same level, we need to travel higher
                    // for this we need to find the deepest child
                    while (child.children().length) {
                        child = child.children();
                    }
                    child.append(plugin);
                } else if (placeholder.length) {
                    // we also need to cover the case if we move the plugin to an empty placeholder
                    plugin.insertAfter($('.cms-placeholder-' + this._getId(placeholder)));
                } else {
                    // if we did not found a match, reload
                    CMS.API.Helpers.reloadBrowser();
                }
            },

            /**
             * Called after plugin is added through ajax.
             *
             * @method editPluginPostAjax
             * @param {Object} toolbar CMS.API.Toolbar instance (not used)
             * @param {Object} response response from server
             */
            editPluginPostAjax: function (toolbar, response) {
                this.editPlugin(response.url, this.options.plugin_name, response.breadcrumb);
            },

            /**
             * _setSettingsMenu sets up event handlers for settings menu.
             *
             * @method _setSettingsMenu
             * @private
             * @param {jQuery} nav
             */
            _setSettingsMenu: function _setSettingsMenu(nav) {
                var that = this;
                this.ui.dropdown = nav.siblings('.cms-submenu-dropdown-settings');
                var dropdown = this.ui.dropdown;

                nav.on(this.pointerUp, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var trigger = $(this);
                    if (trigger.hasClass('cms-btn-active')) {
                        CMS.Plugin._hideSettingsMenu(trigger);
                    } else {
                        CMS.Plugin._hideSettingsMenu();
                        that._showSettingsMenu(trigger);
                    }
                });

                dropdown.on(this.mouseEvents, function (e) {
                    e.stopPropagation();
                }).on(this.touchStart, function (e) {
                    // required for scrolling on mobile
                    e.stopPropagation();
                });

                that._setupActions(nav);
                // prevent propagation
                nav.on([this.pointerUp, this.pointerDown, this.click, this.doubleClick].join(' '), function (e) {
                    e.stopPropagation();
                });

                nav.siblings('.cms-quicksearch, .cms-submenu-dropdown-settings')
                    .on([this.pointerUp, this.click, this.doubleClick].join(' '), function (e) {
                    e.stopPropagation();
                });
            },

            /**
             * Simplistic implementation, only scrolls down, only works in structuremode
             * and highly depends on the styles of the structureboard to work correctly
             *
             * @method _scrollToElement
             * @private
             * @param {jQuery} el element to scroll to
             * @param {Object} [opts]
             * @param {Number} [opts.duration=200] time to scroll
             * @param {Number} [opts.offset=50] distance in px to the bottom of the screen
             */
            _scrollToElement: function _scrollToElement(el, opts) {
                var duration = opts && opts.duration !== undefined ? opts.duration : 200;
                var offset = opts && opts.offset !== undefined ? opts.offset : 50;
                var scrollable = el.offsetParent();
                var win = $(window);
                var scrollHeight = win.height();
                var scrollTop = scrollable.scrollTop();
                var elPosition = el.position().top;
                var elHeight = el.height();
                var isInViewport = (elPosition + elHeight + offset <= scrollHeight);

                if (!isInViewport) {
                    scrollable.animate({
                        scrollTop: elPosition + offset + elHeight + scrollTop - scrollHeight
                    }, duration);
                }
            },

            /**
             * Opens a modal with traversable plugins list, adds a placeholder to where
             * the plugin will be added.
             *
             * @method _setAddPluginModal
             * @private
             * @param {jQuery} nav modal trigger element
             */
            _setAddPluginModal: function _setAddPluginModal(nav) {
                if (nav.hasClass('cms-btn-disabled')) {
                    return false;
                }
                var that = this;
                var placeholder = $(
                    '<div class="cms-add-plugin-placeholder">' +
                        CMS.config.lang.addPluginPlaceholder +
                    '</div>'
                );
                var modal = new CMS.Modal({
                    minWidth: 400,
                    minHeight: 400
                });
                var dragItem = nav.closest('.cms-dragitem');
                var isPlaceholder = !Boolean(dragItem.length);
                var childrenList;
                var isTouching;

                if (isPlaceholder) {
                    childrenList = nav.closest('.cms-dragarea').find('> .cms-draggables');
                } else {
                    childrenList = nav.closest('.cms-draggable').find('> .cms-draggables');
                }

                modal.on('cms.modal.loaded', $.proxy(that._setupKeyboardTraversing, that));
                modal.on('cms.modal.loaded', function addPlaceholder() {
                    if (childrenList.hasClass('cms-hidden') && !isPlaceholder) {
                        that._toggleCollapsable(dragItem);
                    }
                    $('.cms-add-plugin-placeholder').remove();
                    placeholder.appendTo(childrenList);
                    that._scrollToElement(placeholder);
                });
                modal.on('cms.modal.closed', function removePlaceholder() {
                    $('.cms-add-plugin-placeholder').remove();
                });
                modal.on('cms.modal.shown', function () {
                    var dropdown = $('.cms-modal-markup .cms-plugin-picker');
                    if (!isTouching) {
                        // only focus the field if using mouse
                        // otherwise keyboard pops up
                        dropdown.find('input').trigger('focus');
                    }
                    isTouching = false;
                });
                var plugins = nav.siblings('.cms-plugin-picker');

                that._setupQuickSearch(plugins);

                nav.on(this.touchStart, function () {
                    isTouching = true;
                }).on(this.pointerUp, function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    CMS.Plugin._hideSettingsMenu();

                    // since we don't know exact plugin parent (because dragndrop)
                    // we need to know the parent id by the time we open "add plugin" dialog
                    var pluginsCopy = plugins.clone(true, true).data(
                        'parentId', that._getId(nav.closest('.cms-draggable'))
                    );

                    modal.open({
                        title: that.ui.container.data('settings').addPluginHelpTitle,
                        html: pluginsCopy,
                        width: 530,
                        height: 400
                    });
                });

                // prevent propagation
                nav.on([this.pointerUp, this.pointerDown, this.click, this.doubleClick].join(' '), function (e) {
                    e.stopPropagation();
                });

                nav.siblings('.cms-quicksearch, .cms-submenu-dropdown')
                    .on([this.pointerUp, this.click, this.doubleClick].join(' '), function (e) {
                    e.stopPropagation();
                });
            },

            /**
             * Sets up event handlers for quicksearching in the plugin picker.
             *
             * @method _setupQuickSearch
             * @private
             * @param {jQuery} plugins plugins picker element
             */
            _setupQuickSearch: function _setupQuickSearch(plugins) {
                var that = this;
                var input = plugins.find('> .cms-quicksearch').find('input');

                var handler = CMS.API.Helpers.debounce(function () {
                    var input = $(this);
                    // have to always find the pluginsPicker in the handler
                    // because of how we move things into/out of the modal
                    var pluginsPicker = input.closest('.cms-plugin-picker');
                    that._filterPluginsList(pluginsPicker, input);
                }, 100);

                input.on(this.keyUp, handler).on(this.keyUp, CMS.API.Helpers.debounce(function (e) {
                    var input;
                    var pluginsPicker;
                    if (e.keyCode === CMS.KEYS.ENTER) {
                        input = $(this);
                        pluginsPicker = input.closest('.cms-plugin-picker');
                        pluginsPicker.find('.cms-submenu-item')
                            .not('.cms-submenu-item-title').filter(':visible').first().find('> a').focus()
                            .trigger('click');
                    }
                }, 110));
            },

            /**
             * Sets up click handlers for various plugin/placeholder items.
             * Items can be anywhere in the plugin dragitem, not only in dropdown.
             *
             * @method _setupActions
             * @private
             * @param {jQuery} nav dropdown trigger with the items
             */
            _setupActions: function _setupActions(nav) {
                var that = this;
                var items = '.cms-submenu-edit, .cms-submenu-item a';
                nav.parent().find(items).on(that.click, function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // show loader and make sure scroll doesn't jump
                    CMS.API.Toolbar.showLoader();

                    var el = $(this);
                    CMS.Plugin._hideSettingsMenu(nav);

                    // set switch for subnav entries
                    switch (el.attr('data-rel')) {
                        case 'add':
                            that.addPlugin(
                                el.attr('href').replace('#', ''),
                                el.text(),
                                el.closest('.cms-plugin-picker').data('parentId')
                            );
                            break;
                        case 'ajax_add':
                            CMS.API.Toolbar.openAjax({
                                url: el.attr('href'),
                                post: JSON.stringify(el.data('post')),
                                text: el.data('text'),
                                callback: $.proxy(that.editPluginPostAjax, that),
                                onSuccess: el.data('on-success')
                            });
                            break;
                        case 'edit':
                            that.editPlugin(
                                that.options.urls.edit_plugin,
                                that.options.plugin_name,
                                that.options.plugin_breadcrumb
                            );
                            break;
                        case 'copy-lang':
                            that.copyPlugin(this.options, el.attr('data-language'));
                            break;
                        case 'copy':
                            that.copyPlugin();
                            break;
                        case 'cut':
                            that.cutPlugin();
                            break;
                        case 'paste':
                            if (!el.parent().hasClass('cms-submenu-item-disabled')) {
                                that.pastePlugin();
                            } else {
                                CMS.API.Toolbar.hideLoader();
                            }
                            break;
                        case 'delete':
                            that.deletePlugin(
                                that.options.urls.delete_plugin,
                                that.options.plugin_name,
                                that.options.plugin_breadcrumb
                            );
                            break;
                        default:
                            CMS.API.Toolbar.hideLoader();
                            CMS.API.Toolbar._delegate(el);
                    }
                });
            },

            /**
             * Sets up keyboard traversing of plugin picker.
             *
             * @method _setupKeyboardTraversing
             * @private
             */
            _setupKeyboardTraversing: function _setupKeyboardTraversing() {
                var dropdown = $('.cms-modal-markup .cms-plugin-picker');
                if (!dropdown.length) {
                    return;
                }
                // add key events
                doc.off(this.keyDown + '.traverse');
                doc.on(this.keyDown + '.traverse', function (e) {
                    var anchors = dropdown.find('.cms-submenu-item:visible a');
                    var index = anchors.index(anchors.filter(':focus'));

                    // bind arrow down and tab keys
                    if (e.keyCode === CMS.KEYS.DOWN || e.keyCode === CMS.KEYS.TAB) {
                        e.preventDefault();
                        if (index >= 0 && index < anchors.length - 1) {
                            anchors.eq(index + 1).focus();
                        } else {
                            anchors.eq(0).focus();
                        }
                    }

                    // bind arrow up and shift+tab keys
                    if (e.keyCode === CMS.KEYS.UP || (e.keyCode === CMS.KEYS.TAB && e.shiftKey)) {
                        e.preventDefault();
                        if (anchors.is(':focus')) {
                            anchors.eq(index - 1).focus();
                        } else {
                            anchors.eq(anchors.length).focus();
                        }
                    }
                });
            },

            /**
             * Opens the settings menu for a plugin.
             *
             * @method _showSettingsMenu
             * @private
             * @param {jQuery} nav trigger element
             */
            _showSettingsMenu: function (nav) {
                var dropdown = this.ui.dropdown;
                var parents = nav.parentsUntil('.cms-dragarea').last();

                nav.addClass('cms-btn-active');
                parents.addClass('cms-z-index-9999');

                // set visible states
                dropdown.show();

                // calculate dropdown positioning
                if (this.ui.window.height() + this.ui.window.scrollTop() -
                    nav.offset().top - dropdown.height() <= 10 && nav.offset().top - dropdown.height() >= 0) {
                    dropdown.removeClass('cms-submenu-dropdown-top').addClass('cms-submenu-dropdown-bottom');
                } else {
                    dropdown.removeClass('cms-submenu-dropdown-bottom').addClass('cms-submenu-dropdown-top');
                }
            },

            /**
             * Filters given plugins list by a query.
             *
             * @method _filterPluginsList
             * @private
             * @param {jQuery} list plugins picker element
             * @param {jQuery} input input, which value to filter plugins with
             */
            _filterPluginsList: function _filterPluginsList(list, input) {
                var items = list.find('.cms-submenu-item');
                var titles = list.find('.cms-submenu-item-title');
                var query = input.val();

                // cancel if query is zero
                if (query === '') {
                    items.add(titles).show();
                    return false;
                }

                // loop through items and figure out if we need to hide items
                items.find('a, span').each(function (index, item) {
                    item = $(item);
                    var text = item.text().toLowerCase();
                    var search = query.toLowerCase();

                    (text.indexOf(search) >= 0) ? item.parent().show() : item.parent().hide();
                });

                // check if a title is matching
                titles.filter(':visible').each(function (index, item) {
                    titles.hide();
                    $(item).nextUntil('.cms-submenu-item-title').show();
                });

                // always display title of a category
                items.filter(':visible').each(function (index, item) {
                    item = $(item);
                    if (item.prev().hasClass('cms-submenu-item-title')) {
                        item.prev().show();
                    } else {
                        item.prevUntil('.cms-submenu-item-title').last().prev().show();
                    }
                });

                // if there is no element visible, show only first categoriy
                list.siblings('.cms-submenu-dropdown-children').show();
                if (items.add(titles).filter(':visible').length <= 0) {
                    list.siblings('.cms-submenu-dropdown-children').hide();
                }
            },

            /**
             * Toggles collapsable item.
             *
             * @method _toggleCollapsable
             * @private
             * @param {jQuery} el element to toggle
             */
            _toggleCollapsable: function toggleCollapsable(el) {
                var that = this;
                var id = that._getId(el.parent());
                var draggable = this.ui.draggable;
                var items;

                var settings = CMS.settings;
                settings.states = settings.states || [];

                // collapsable function and save states
                if (el.hasClass('cms-dragitem-expanded')) {
                    settings.states.splice($.inArray(id, settings.states), 1);
                    el.removeClass('cms-dragitem-expanded').parent()
                        .find('> .cms-collapsable-container').addClass('cms-hidden');

                    if (doc.data('expandmode')) {
                        items = draggable.find('.cms-draggable').find('.cms-dragitem-collapsable');
                        if (!items.length) {
                            return false;
                        }
                        items.each(function () {
                            var item = $(this);
                            if (item.hasClass('cms-dragitem-expanded')) {
                                that._toggleCollapsable(item);
                            }
                        });
                    }

                } else {
                    settings.states.push(id);
                    el.addClass('cms-dragitem-expanded').parent()
                        .find('> .cms-collapsable-container').removeClass('cms-hidden');

                    if (doc.data('expandmode')) {
                        items = draggable.find('.cms-draggable').find('.cms-dragitem-collapsable');
                        if (!items.length) {
                            return false;
                        }
                        items.each(function () {
                            var item = $(this);
                            if (!item.hasClass('cms-dragitem-expanded')) {
                                that._toggleCollapsable(item);
                            }
                        });
                    }
                }

                // make sure structurboard gets updated after expanding
                this.ui.window.trigger('resize.sideframe');

                // save settings
                CMS.API.Toolbar.setSettings(settings);
            },

            /**
             * Sets up collabspable event handlers.
             *
             * @method _collapsables
             * @private
             */
            _collapsables: function () {
                // one time setup
                var that = this;
                this.ui.draggable = $('.cms-draggable-' + this.options.plugin_id);
                var dragitem = this.ui.draggable.find('> .cms-dragitem');

                // check which button should be shown for collapsemenu
                this.ui.container.each(function (index, item) {
                    var els = $(item).find('.cms-dragitem-collapsable');
                    var open = els.filter('.cms-dragitem-expanded');
                    if (els.length === open.length && (els.length + open.length !== 0)) {
                        $(item).find('.cms-dragbar-title').addClass('cms-dragbar-title-expanded');
                    }
                });
                // cancel here if its not a draggable
                if (!this.ui.draggable.length) {
                    return false;
                }

                // attach events to draggable
                dragitem.find('> .cms-dragitem-text').on(this.click, function () {
                    if (!dragitem.hasClass('cms-dragitem-collapsable')) {
                        return;
                    }
                    that._toggleCollapsable(dragitem);
                });

                // adds double click event
                this.ui.draggable.on(this.doubleClick, function (e) {
                    e.stopPropagation();
                    $('.cms-plugin-' + that._getId($(this))).trigger('dblclick.cms');
                });

                // only needs to be excecuted once
                if (CMS.Toolbar.ready) {
                    return false;
                }

                // removing duplicate entries
                var sortedArr = CMS.settings.states.sort();
                var filteredArray = [];
                for (var i = 0; i < sortedArr.length; i++) {
                    if (sortedArr[i] !== sortedArr[i + 1]) {
                        filteredArray.push(sortedArr[i]);
                    }
                }
                CMS.settings.states = filteredArray;

                // loop through the items
                $.each(CMS.settings.states, function (index, id) {
                    var el = $('.cms-draggable-' + id);
                    // only add this class to elements which have a draggable area
                    if (el.find('.cms-draggables').length) {
                        el.find('> .cms-collapsable-container').removeClass('cms-hidden');
                        el.find('> .cms-dragitem').addClass('cms-dragitem-expanded');
                    }
                });

                // set global setup
                CMS.Toolbar.ready = true;
            },

            /**
             * Expands all the collapsables in the given placeholder.
             *
             * @method _expandAll
             * @private
             * @param {jQuery} el trigger element that is a child of a placeholder
             */
            _expandAll: function (el) {
                var that = this;
                var items = el.closest('.cms-dragarea').find('.cms-dragitem-collapsable');
                // cancel if there are no items
                if (!items.length) {
                    return false;
                }
                items.each(function () {
                    var item = $(this);
                    if (!item.hasClass('cms-dragitem-expanded')) {
                        that._toggleCollapsable(item);
                    }
                });

                el.addClass('cms-dragbar-title-expanded');

                var settings = CMS.settings;
                settings.dragbars = settings.dragbars || [];
                settings.dragbars.push(this.options.placeholder_id);
                CMS.API.Toolbar.setSettings(settings);
            },

            /**
             * Collapses all the collapsables in the given placeholder.
             *
             * @method _collapseAll
             * @private
             * @param {jQuery} el trigger element that is a child of a placeholder
             */
            _collapseAll: function (el) {
                var that = this;
                var items = el.closest('.cms-dragarea').find('.cms-dragitem-collapsable');
                items.each(function () {
                    var item = $(this);
                    if (item.hasClass('cms-dragitem-expanded')) {
                        that._toggleCollapsable(item);
                    }
                });

                el.removeClass('cms-dragbar-title-expanded');

                var settings = CMS.settings;
                settings.dragbars = settings.dragbars || [];
                settings.dragbars.splice($.inArray(this.options.placeholder_id, settings.states), 1);
                CMS.API.Toolbar.setSettings(settings);
            },

            /**
             * Gets the id of the element, uses CMS.StructureBoard instance.
             *
             * @method _getId
             * @private
             * @param {jQuery} el element to get id from
             * @return {String}
             */
            _getId: function (el) {
                return CMS.API.StructureBoard.getId(el);
            },

            /**
             * Gets the ids of the list of elements, uses CMS.StructureBoard instance.
             *
             * @method _getIds
             * @private
             * @param {jQuery} els elements to get id from
             * @return {String[]}
             */
            _getIds: function (els) {
                return CMS.API.StructureBoard.getIds(els);
            },

            /**
             * Shows and immediately fades out a success notification (when
             * plugin was successfully moved.
             *
             * @method _showSuccess
             * @private
             * @param {jQuery} el draggable element
             */
            _showSuccess: function (el) {
                var tpl = $('<div class="cms-dragitem-success"></div>');
                el.addClass('cms-draggable-success').append(tpl);
                // start animation
                tpl.fadeOut(1000, function () {
                    $(this).remove();
                    el.removeClass('cms-draggable-success');
                });
                // make sure structurboard gets updated after success
                this.ui.window.trigger('resize.sideframe');
            }
        });

        /**
         * Hides the opened settings menu. By default looks for any open ones.
         *
         * @method _hideSettingsMenu
         * @static
         * @private
         * @param {jQuery} [nav] element representing the subnav trigger
         */
        CMS.Plugin._hideSettingsMenu = function (nav) {
            nav = nav || $('.cms-submenu-btn.cms-btn-active');
            if (!nav.length) {
                return;
            }
            nav.removeClass('cms-btn-active');

            // set correct active state
            nav.closest('.cms-draggable').data('active', false);
            $('.cms-z-index-9999').removeClass('cms-z-index-9999');

            nav.siblings('.cms-submenu-dropdown').hide();
            nav.siblings('.cms-quicksearch').hide();
            // reset search
            nav.siblings('.cms-quicksearch')
                .find('input')
                .val('')
                .trigger(this.keyUp).blur();

            // reset relativity
            $('.cms-dragbar').css('position', '');
        };
    });

})(CMS.$);

//##############################################################################
// STRUCTUREBOARD
/**
 * @module CMS
 */
var CMS = window.CMS || {};

(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        var placeholders = $('.cms-dragarea:not(.cms-clipboard-containers)');
        function actualizeEmptyPlaceholders() {
            placeholders.each(function () {
                var placeholder = $(this);
                if (placeholder
                    .find('> .cms-draggables')
                    .children('.cms-draggable:not(.cms-draggable-is-dragging)').length) {
                    placeholder.removeClass('cms-dragarea-empty');
                } else {
                    placeholder.addClass('cms-dragarea-empty');
                }
            });
        }

        function actualizePluginsCollapsibleStatus(els) {
            els.each(function () {
                var childList = $(this);
                var pluginDragItem = childList.closest('.cms-draggable').find('> .cms-dragitem');

                if (childList.children().length) {
                    pluginDragItem.addClass('cms-dragitem-collapsable cms-dragitem-expanded');
                } else {
                    pluginDragItem.removeClass('cms-dragitem-collapsable');
                }
            });
        }

        /**
         * Handles drag & drop, mode switching and collapsables.
         *
         * @class StructureBoard
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.StructureBoard = new CMS.Class({

            implement: [CMS.API.Helpers],

            options: {
                speed: 300
            },

            initialize: function (options) {
                this.options = $.extend(true, {}, this.options, options);

                // elements
                this._setupUI();

                // states
                this.click = 'click.cms';
                this.pointerUp = 'pointerup.cms';
                this.state = false;
                this.dragging = false;

                // setup initial stuff
                this._setup();

                this._setupModeSwitcher();
                actualizeEmptyPlaceholders();
            },

            /**
             * Stores all jQuery references within `this.ui`.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function setupUI() {
                var container = $('.cms-structure');
                var toolbar = $('.cms-toolbar');
                this.ui = {
                    container: container,
                    content: $('.cms-structure-content'),
                    doc: $(document),
                    window: $(window),
                    html: $('html'),
                    toolbar: toolbar,
                    sortables: $('.cms-draggables'), // global scope to include clipboard
                    plugins: $('.cms-plugin'),
                    render_model: $('.cms-render-model'),
                    placeholders: $('.cms-placeholder'),
                    dragitems: $('.cms-draggable'),
                    dragareas: $('.cms-dragarea'),
                    toolbarModeSwitcher: toolbar.find('.cms-toolbar-item-cms-mode-switcher'),
                    toolbarModeLinks: toolbar.find('.cms-toolbar-item-cms-mode-switcher a'),
                    toolbarTrigger: $('.cms-toolbar-trigger')
                };
            },

            /**
             * Initial setup (and early bail if specific
             * elements do not exist).
             *
             * @method _setup
             * @private
             */
            _setup: function () {
                var that = this;
                // cancel if there are no dragareas
                if (!this.ui.dragareas.length) {
                    return false;
                }

                // cancel if there is no structure / content switcher
                if (!this.ui.toolbarModeSwitcher.length) {
                    return false;
                }

                // setup toolbar mode
                // FIXME this setTimeout is needed because
                // plugins are initialized after all the scripts are processed
                // which should be fixed btw. _resizeBoard wants plugins to be initialized,
                // otherwise throws errors
                setTimeout(function () {
                    if (CMS.settings.mode === 'structure') {
                        that.show(true);
                    } else {
                        // triggering hide here to switch proper classnames on switcher
                        that.hide(true);
                    }
                }, 0);

                // check if modes should be visible
                if (this.ui.placeholders.length) {
                    this.ui.toolbarModeSwitcher.show();
                }

                // add drag & drop functionality
                this._drag();
            },

            /**
             * Sets up events handlers for switching
             * structureboard modes.
             *
             * @method _setupModeSwitcher
             * @private
             */
            _setupModeSwitcher: function () {
                var that = this;
                var modes = that.ui.toolbarModeLinks;

                // show edit mode
                modes.eq(1).on(that.click + ' ' + that.pointerUp, function (e) {
                    e.preventDefault();
                    // cancel if already active
                    if (CMS.settings.mode === 'edit') {
                        return false;
                    }
                    // otherwise hide
                    that.hide();
                });
                // show structure mode
                modes.eq(0).on(that.click + ' ' + that.pointerUp, function (e) {
                    e.preventDefault();
                    // cancel if already active
                    if (CMS.settings.mode === 'structure') {
                        return false;
                    }
                    // otherwise show
                    that.show();
                });

                // keyboard handling
                // only if there is a structure / content switcher
                if (that.ui.toolbarModeSwitcher.length) {
                    that.ui.doc.on('keydown', function (e) {
                        // check if we have an important focus
                        var haveFocusedField = document.activeElement !== document.body;
                        if (e.keyCode === CMS.KEYS.SPACE && !haveFocusedField) {
                            e.preventDefault();
                            if (CMS.settings.mode === 'structure') {
                                that.hide();
                            } else if (CMS.settings.mode === 'edit') {
                                that.show();
                            }
                        }
                    });
                }
            },

            /**
             * Shows the structureboard. (Structure mode)
             *
             * @method show
             * @public
             * @param {Boolean} init true if this is first initialization
             */
            show: function (init) {
                // cancel show if live modus is active
                if (CMS.config.mode === 'live') {
                    return false;
                }

                // in order to get consistent positioning
                // of the toolbar we have to know if the page
                // had the scrollbar nad if it had - we adjust
                // the toolbar positioning
                var width = this.ui.toolbar.width();
                var scrollBarWidth = window.innerWidth - width;
                if (scrollBarWidth) {
                    this.ui.toolbar.css('right', scrollBarWidth);
                    this.ui.toolbarTrigger.css('right', scrollBarWidth);
                }

                // set active item
                var modes = this.ui.toolbarModeLinks;
                modes.removeClass('cms-btn-active').eq(0).addClass('cms-btn-active');
                this.ui.html.removeClass('cms-structure-mode-content')
                    .addClass('cms-structure-mode-structure');

                // apply new settings
                CMS.settings.mode = 'structure';
                if (!init) {
                    CMS.settings = this.setSettings(CMS.settings);
                }

                // ensure all elements are visible
                this.ui.dragareas.show();

                // show canvas
                this._showBoard();
            },

            /**
             * Hides the structureboard. (Content mode)
             *
             * @param {Boolean} init true if this is first initialization
             */
            hide: function (init) {
                // cancel show if live modus is active
                if (CMS.config.mode === 'live') {
                    return false;
                }

                // reset toolbar positioning
                this.ui.toolbar.css('right', '');
                this.ui.toolbarTrigger.css('right', '');

                // set active item
                var modes = this.ui.toolbarModeLinks;
                modes.removeClass('cms-btn-active').eq(1).addClass('cms-btn-active');
                this.ui.html.removeClass('cms-structure-mode-structure')
                    .addClass('cms-structure-mode-content');

                // hide clipboard if in edit mode
                this.ui.container.find('.cms-clipboard').hide();

                CMS.settings.mode = 'edit';
                if (!init) {
                    CMS.settings = this.setSettings(CMS.settings);
                }

                // hide canvas
                this._hideBoard();
            },

            /**
             * Gets the id of the element.
             *
             * @param {jQuery} el element to get id from
             * @return {String}
             */
            getId: function (el) {
                // cancel if no element is defined
                if (el === undefined || el === null || el.length <= 0) {
                    return false;
                }

                var id = null;
                var cls = el.attr('class').split(' ')[1];

                if (el.hasClass('cms-plugin')) {
                    id = cls.replace('cms-plugin-', '');
                } else if (el.hasClass('cms-draggable')) {
                    id = cls.replace('cms-draggable-', '');
                } else if (el.hasClass('cms-placeholder')) {
                    id = cls.replace('cms-placeholder-', '');
                } else if (el.hasClass('cms-dragbar')) {
                    id = cls.replace('cms-dragbar-', '');
                } else if (el.hasClass('cms-dragarea')) {
                    id = cls.replace('cms-dragarea-', '');
                }

                return id;
            },

            /**
             * Gets the ids of the list of  elements.
             *
             * @param {jQuery} el elements to get id from
             * @return {String[]}
             */
            getIds: function (els) {
                var that = this;
                var array = [];
                els.each(function () {
                    array.push(that.getId($(this)));
                });
                return array;
            },

            /**
             * Actually shows the board canvas.
             *
             * @method _showBoard
             * @private
             */
            _showBoard: function () {
                var that = this;

                // show container
                this.ui.container.show();
                this.ui.dragareas.css('opacity', 1);

                this.ui.plugins.not(this.ui.render_model).hide();
                this.ui.placeholders.show();

                // attach event
                if (CMS.config.simpleStructureBoard) {
                    var content = this.ui.content;
                    var areas = content.find('.cms-dragarea');
                    // set correct css attributes for the new mode
                    content.addClass('cms-structure-content-simple');
                    areas.addClass('cms-dragarea-simple');
                    // lets reorder placeholders
                    areas.each(function (index, item) {
                        if ($(item).hasClass('cms-dragarea-static')) {
                            content.append(item);
                        }
                    });
                    // now lets get the first instance and add some padding
                    areas.filter('.cms-dragarea-static').eq(0).css('margin-top', '50px');
                } else {
                    this.ui.container.addClass('cms-structure-dynamic');
                    this.ui.window.on('resize.sideframe', function () {
                        that._resizeBoard();
                    }).trigger('resize.sideframe');
                }
            },

            /**
             * Hides the board canvas.
             *
             * @method _hideBoard
             * @private
             */
            _hideBoard: function () {
                // hide elements
                this.ui.container.hide();
                this.ui.plugins.show();
                this.ui.placeholders.hide();

                // detach event
                this.ui.window.off('resize.sideframe');

                this.ui.window.trigger('structureboard_hidden.sideframe');
                if (!CMS.config.simpleStructureBoard) {
                    this.ui.container.height(this.ui.doc.outerHeight());
                }
            },

            /**
             * Resizes the placeholder to fit their placement
             * and the structure board.
             *
             * @method _resizeBoard
             * @private
             * @deprecated as of CMS 3.2
             */
            _resizeBoard: function () {
                // calculate placeholder position
                var id = null;
                var area = null;
                var min = null;
                var areaParentOffset = null;
                var that = this;

                // have to delay since height changes when toggling modes
                setTimeout(function () {
                    that.ui.container.height(that.ui.doc.outerHeight());
                }, 0);

                // start calculating
                this.ui.placeholders.each(function (index, item) {
                    item = $(item);
                    id = item.data('settings').placeholder_id;
                    area = $('.cms-dragarea-' + id);
                    // to calculate the correct offset, we need to set the
                    // placeholders correct heights and than set the according position
                    item.height(area.outerHeight(true));
                    // set min width
                    min = (item.width()) ? 0 : 150;
                    // as area is "css positioned" and jquery offset function is relative to the
                    // document (not the first relative/absolute parent) we need to substract
                    // first relative/absolute parent offset.
                    areaParentOffset = $(area).offsetParent().offset();
                    area.css({
                        top: item.offset().top - areaParentOffset.top - 5,
                        left: item.offset().left - areaParentOffset.left - min,
                        width: item.width() + min
                    });
                });
            },

            /**
             * Sets up all the sortables.
             *
             * @method _drag
             * @private
             */
            _drag: function () {
                var that = this;
                var originalPluginContainer;

                this.ui.sortables.nestedSortable({
                    items: '> .cms-draggable:not(.cms-draggable-disabled .cms-draggable)',
                    placeholder: 'cms-droppable',
                    connectWith: '.cms-draggables:not(.cms-hidden)',
                    tolerance: 'intersect',
                    toleranceElement: '> div',
                    dropOnEmpty: true,
                    // cloning huge structure is a performance loss compared to cloning just a dragitem
                    helper: function createHelper(e, item) {
                        var clone = item.find('> .cms-dragitem').clone();
                        clone.wrap('<div class="' + item[0].className + '"></div>');
                        return clone.parent();
                    },
                    appendTo: '.cms-structure-content',
                    // appendTo: '.cms',
                    cursor: 'move',
                    cursorAt: { left: -15, top: -15 },
                    opacity: 1,
                    zIndex: 9999999,
                    delay: 100,
                    tabSize: 15,
                    // nestedSortable
                    listType: 'div.cms-draggables',
                    doNotClear: true,
                    disableNestingClass: 'cms-draggable-disabled',
                    errorClass: 'cms-draggable-disallowed',
                    scrollSpeed: 15,
                    scrollSensitivity: that.ui.window.height() * 0.2,
                    start: function (e, ui) {
                        that.ui.content.attr('data-touch-action', 'none');

                        originalPluginContainer = ui.item.closest('.cms-draggables');
                        that.dragging = true;
                        // show empty
                        actualizeEmptyPlaceholders();
                        // ensure all menus are closed
                        CMS.Plugin._hideSettingsMenu();
                        // keep in mind that caching cms-draggables query only works
                        // as long as we don't create them on the fly
                        that.ui.sortables.each(function () {
                            var element = $(this);
                            if (element.children().length === 0) {
                                element.removeClass('cms-hidden');
                            }
                        });

                        // fixes placeholder height
                        ui.item.addClass('cms-is-dragging');
                        ui.helper.addClass('cms-draggable-is-dragging');
                        if (ui.item.find('> .cms-draggables').children().length) {
                            ui.helper.addClass('cms-draggable-stack');
                        }

                        // attach escape event to cancel dragging
                        that.ui.doc.on('keyup.cms.interrupt', function (e, cancel) {
                            if (e.keyCode === CMS.KEYS.ESC && that.dragging || cancel) {
                                that.state = false;
                                $.ui.sortable.prototype._mouseStop();
                                that.ui.sortables.trigger('mouseup');
                            }
                        });
                    },

                    beforeStop: function (event, ui) {
                        that.dragging = false;
                        ui.item.removeClass('cms-is-dragging cms-draggable-stack');
                        that.ui.doc.off('keyup.cms.interrupt');
                        that.ui.content.attr('data-touch-action', 'pan-y');
                    },

                    update: function (event, ui) {
                        // cancel if isAllowed returns false
                        if (!that.state) {
                            return false;
                        }

                        var newPluginContainer = ui.item.closest('.cms-draggables');
                        if (!originalPluginContainer.is(newPluginContainer)) {
                            actualizePluginsCollapsibleStatus(newPluginContainer.add(originalPluginContainer));
                        } else {
                            // if we moved inside same container,
                            // but event is fired on a parent, discard update
                            if (!newPluginContainer.is(this)) {
                                return false;
                            }
                        }

                        // we pass the id to the updater which checks within the backend the correct place
                        var id = that.getId(ui.item);
                        var plugin = $('.cms-plugin-' + id);

                        // check if we copy/paste a plugin or not
                        if (plugin.closest('.cms-clipboard').length) {
                            plugin.trigger('cms.plugin.update');
                        } else {
                            plugin.trigger('cms.plugins.update');
                        }

                        // reset placeholder without entries
                        that.ui.sortables.each(function () {
                            var element = $(this);
                            if (element.children().length === 0) {
                                element.addClass('cms-hidden');
                            }
                        });

                        actualizeEmptyPlaceholders();
                    },
                    isAllowed: function (placeholder, placeholderParent, originalItem) {
                        // cancel if action is executed
                        if (CMS.API.locked) {
                            return false;
                        }
                        // getting restriction array
                        var bounds = [];
                        var immediateParentType;
                        // save original state events
                        var original = $('.cms-plugin-' + that.getId(originalItem));
                        // cancel if item has no settings
                        if (original.length === 0 || original.data('settings') === null) {
                            return false;
                        }
                        var parent_bounds = original.data('settings').plugin_parent_restriction;
                        var type = original.data('settings').plugin_type;
                        // prepare variables for bound
                        var holderId = that.getId(placeholder.closest('.cms-dragarea'));
                        var holder = $('.cms-placeholder-' + holderId);
                        var plugin;
                        if (placeholderParent && placeholderParent.length) {
                            // placeholderParent is always latest, it maybe that
                            // isAllowed is called _before_ placeholder is moved to a child plugin
                            plugin = $('.cms-plugin-' + that.getId(placeholderParent.closest('.cms-draggable')));
                        } else {
                            plugin = $('.cms-plugin-' + that.getId(placeholder.closest('.cms-draggable')));
                        }

                        // now set the correct bounds
                        if (holder.length) {
                            bounds = holder.data('settings').plugin_restriction;
                            immediateParentType = holder.data('settings').plugin_type;
                        }
                        if (plugin.length) {
                            bounds = plugin.data('settings').plugin_restriction;
                            immediateParentType = plugin.data('settings').plugin_type;
                        }

                        // if parent has class disabled, dissalow drop
                        if (placeholder.parent().hasClass('cms-draggable-disabled')) {
                            return false;
                        }

                        // if restrictions is still empty, proceed
                        that.state = (!bounds.length || $.inArray(type, bounds) !== -1) ? true : false;

                        // check if we have a parent restriction
                        if (parent_bounds.length) {
                            that.state = ($.inArray(immediateParentType, parent_bounds) !== -1) ? true : false;
                        }

                        return that.state;
                    }
                }).on('cms.update', actualizeEmptyPlaceholders);
            }

        });
    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Toolbar
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * Responsible for creating usable navigation for narrow screens.
         *
         * @class Navigation
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.Navigation = new CMS.Class({

            implement: [CMS.API.Helpers],

            initialize: function initialize() {
                this._setupUI();
                this._getWidths();

                /**
                 * The zero based index of the right-most visible menu item of the left toolbar part.
                 *
                 * @property rightMostItemIndex {Number}
                 */
                this.rightMostItemIndex = this.items.left.length - 1;

                /**
                 * The zero based index of the left-most visible item of the right toolbar part.
                 *
                 * @property leftMostItemIndex {Number}
                 */
                this.leftMostItemIndex = 0;

                this.resize = 'resize.cms.navigation';
                this.load = 'load.cms.navigation';
                this.orientationChange = 'orientationchange.cms.navigation';

                this._events();
            },

            /**
             * Cache UI jquery objects.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function _setupUI() {
                var container = $('.cms');
                var trigger = container.find('.cms-toolbar-more');
                this.ui = {
                    window: $(window),
                    toolbarLeftPart: container.find('.cms-toolbar-left'),
                    toolbarRightPart: container.find('.cms-toolbar-right'),
                    trigger: trigger,
                    dropdown: trigger.find('> ul'),
                    toolbarTrigger: container.find('.cms-toolbar-trigger'),
                    logo: container.find('.cms-toolbar-item-logo')
                };
            },

            /**
             * Setup resize handler to construct the dropdown.
             *
             * @method _events
             * @private
             */
            _events: function _events() {
                this.ui.window.on(
                    [this.resize, this.load, this.orientationChange].join(' '),
                    CMS.API.Helpers.throttle(
                        this._handleResize.bind(this), 50
                    )
                );
            },

            /**
             * Calculates all the movable menu items widths.
             *
             * @method _getWidths
             * @private
             */
            _getWidths: function _getWidths() {
                var that = this;
                that.items = {
                    left: [],
                    leftTotalWidth: 0,
                    right: [],
                    rightTotalWidth: 0,
                    moreButtonWidth: 0
                };
                var leftItems = that.ui.toolbarLeftPart
                    .find('.cms-toolbar-item-navigation > li:not(.cms-toolbar-more)');
                var rightItems = that.ui.toolbarRightPart.find('> .cms-toolbar-item');

                var getSize = function getSize(el, store) {
                    var element = $(el);
                    var width = $(el).outerWidth(true);

                    store.push({
                        element: element,
                        width: width
                    });
                };
                var sumWidths = function sumWidths(sum, item) {
                    return sum + item.width;
                };

                leftItems.each(function () {
                    getSize(this, that.items.left);
                });

                rightItems.each(function () {
                    getSize(this, that.items.right);
                });

                that.items.leftTotalWidth = that.items.left.reduce(sumWidths, 0);
                that.items.rightTotalWidth = that.items.right.reduce(sumWidths, 0);
                that.items.moreButtonWidth = that.ui.trigger.outerWidth();
            },

            /**
             * Calculates available width based on the state of the page.
             *
             * @method _calculateAvailableWidth
             * @private
             * @return {Number} available width in px
             */
            _calculateAvailableWidth: function _calculateAvailableWidth() {
                var fullWidth = this.ui.window.width();
                var reduce = parseInt(this.ui.toolbarRightPart.css('padding-right'), 10) + this.ui.logo.offset().left +
                    this.ui.logo.outerWidth(true) + 15;

                return fullWidth - reduce;
            },

            /**
             * Shows the dropdown.
             *
             * @method _showDropdown
             * @private
             */
            _showDropdown: function _showDropdown() {
                this.ui.trigger.css('display', 'list-item');
            },

            /**
             * Hides the dropdown.
             *
             * @method _hideDropdown
             * @private
             */
            _hideDropdown: function _hideDropdown() {
                this.ui.trigger.css('display', 'none');
            },

            /**
             * Figures out if we need to show/hide/modify the dropdown.
             *
             * @method _handleResize
             * @private
             */
            _handleResize: function _handleResize() {
                var remainingWidth;
                var availableWidth = this._calculateAvailableWidth();

                if (availableWidth > this.items.leftTotalWidth + this.items.rightTotalWidth) {
                    this._showAll();
                } else {
                    // first handle the left part
                    remainingWidth = availableWidth - this.items.moreButtonWidth - this.items.rightTotalWidth;

                    // Figure out how many nav menu items fit into the available space.
                    var newRightMostItemIndex = -1;
                    while (remainingWidth - this.items.left[newRightMostItemIndex + 1].width >= 0) {
                        remainingWidth -= this.items.left[newRightMostItemIndex + 1].width;
                        newRightMostItemIndex++;
                    }

                    if (newRightMostItemIndex < this.rightMostItemIndex) {
                        this._moveToDropdown(this.rightMostItemIndex - newRightMostItemIndex);
                    } else if (this.rightMostItemIndex < newRightMostItemIndex) {
                        this._moveOutOfDropdown(newRightMostItemIndex - this.rightMostItemIndex);
                    }

                    this._showDropdown();

                    // if we do not have any width left and all the items from the left part
                    // are already in the dropdown - start with the right part
                    if (remainingWidth < 0 && this.rightMostItemIndex === -1) {
                        remainingWidth += this.items.rightTotalWidth;

                        var newLeftMostItemIndex = this.items.right.length;
                        if (false) {
                            // if you want to move items from the right one by one
                            while (remainingWidth - this.items.right[newLeftMostItemIndex - 1].width > 0) {
                                remainingWidth -= this.items.right[newLeftMostItemIndex - 1].width;
                                newLeftMostItemIndex--;
                            }

                            if (newLeftMostItemIndex > this.leftMostItemIndex) {
                                this._moveToDropdown(newLeftMostItemIndex - this.leftMostItemIndex, 'right');
                            } else if (newLeftMostItemIndex < this.leftMostItemIndex) {
                                this._moveOutOfDropdown(this.leftMostItemIndex - newLeftMostItemIndex, 'right');
                            }
                        } else {
                            // but for now we want to move all of them immediately
                            this._moveToDropdown(newLeftMostItemIndex - this.leftMostItemIndex, 'right');
                            this.ui.dropdown.addClass('cms-more-dropdown-full');
                        }
                    } else {
                        this._showAllRight();
                        this.ui.dropdown.removeClass('cms-more-dropdown-full');
                    }
                }
            },

            /**
             * Hides and empties dropdown.
             *
             * @method _showAll
             * @private
             */
            _showAll: function _showAll() {
                this._showAllLeft();
                this._showAllRight();
                this._hideDropdown();
            },

            /**
             * Show all items in the left part of the toolbar.
             *
             * @method _showAllLeft
             * @private
             */
            _showAllLeft: function _showAllLeft() {
                this._moveOutOfDropdown((this.items.left.length - 1) - this.rightMostItemIndex);
            },

            /**
             * Show all items in the right part of the toolbar.
             *
             * @method _showAllRight
             * @private
             */
            _showAllRight: function _showAllRight() {
                this._moveOutOfDropdown(this.leftMostItemIndex, 'right');
            },

            /**
             * Moves items into the dropdown, reducing menu right-to-left in case it's a left part of toolbar
             * and left-to-right if it's right one.
             *
             * @method _moveToDropdown
             * @private
             * @param {Number} numberOfItems how many items to move to dropdown
             * @param {String} part from which part to move to dropdown (defaults to left)
             */
            _moveToDropdown: function _moveToDropdown(numberOfItems, part) {
                if (numberOfItems <= 0) {
                    return;
                }

                var item;
                var leftMostIndexToMove;
                var rightMostIndexToMove;
                var i;

                if (part === 'right') {
                    // Move items (working left-to-right) from the toolbar left part to the more menu.
                    leftMostIndexToMove = this.leftMostItemIndex;
                    rightMostIndexToMove = this.leftMostItemIndex + numberOfItems - 1;
                    for (i = leftMostIndexToMove; i <= rightMostIndexToMove; i++) {
                        item = this.items.right[i].element;

                        this.ui.dropdown.prepend(item.wrap('<li class="cms-more-buttons"></li>').parent());
                    }

                    this.leftMostItemIndex += numberOfItems;
                } else {
                    // Move items (working right-to-left) from the toolbar left part to the more menu.
                    rightMostIndexToMove = this.rightMostItemIndex;
                    leftMostIndexToMove = this.rightMostItemIndex - numberOfItems + 1;
                    for (i = rightMostIndexToMove; i >= leftMostIndexToMove; i--) {
                        item = this.items.left[i].element;

                        this.ui.dropdown.prepend(item);
                        if (item.find('> ul').children().length) {
                            item.addClass('cms-toolbar-item-navigation-children');
                        }
                    }

                    this.rightMostItemIndex -= numberOfItems;
                }
            },

            /**
             * Moves items out of the dropdown.
             *
             * @method _moveOutOfDropdown
             * @private
             * @param {Number} numberOfItems how many items to move out of the dropdown
             * @param {String} part to which part to move out of dropdown (defaults to left)
             */
            _moveOutOfDropdown: function _moveOutOfDropdown(numberOfItems, part) {
                if (numberOfItems <= 0) {
                    return;
                }

                var i;
                var item;
                var leftMostIndexToMove;
                var rightMostIndexToMove;

                if (part === 'right') {
                    // Move items (working bottom-to-top) from the more menu into the toolbar right part.
                    rightMostIndexToMove = this.leftMostItemIndex - 1;
                    leftMostIndexToMove = this.leftMostItemIndex - numberOfItems;

                    for (i = rightMostIndexToMove; i >= leftMostIndexToMove; i--) {
                        item = this.items.right[i].element;
                        item.unwrap('<li></li>');

                        item.prependTo(this.ui.toolbarRightPart);
                    }

                    this.leftMostItemIndex -= numberOfItems;
                } else {
                    // Move items (working top-to-bottom) from the more menu into the toolbar left part.
                    leftMostIndexToMove = this.rightMostItemIndex + 1;
                    rightMostIndexToMove = this.rightMostItemIndex + numberOfItems;

                    for (i = leftMostIndexToMove; i <= rightMostIndexToMove; i++) {
                        item = this.items.left[i].element;

                        item.insertBefore(this.ui.trigger);
                        item.removeClass('cms-toolbar-item-navigation-children');
                        item.find('> ul').removeAttr('style');
                    }

                    this.rightMostItemIndex += numberOfItems;
                }
            }

        });

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Toolbar
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * The toolbar is the generic element which holds various components
         * together and provides several commonly used API methods such as
         * show/hide, message display or loader indication.
         *
         * @class Toolbar
         * @namespace CMS
         * @uses CMS.API.Helpers
         */
        CMS.Toolbar = new CMS.Class({

            implement: [CMS.API.Helpers],

            options: {
                preventSwitch: false,
                preventSwitchMessage: 'Switching is disabled.',
                toolbarDuration: 200
            },

            initialize: function initialize(options) {
                this.options = $.extend(true, {}, this.options, options);

                // elements
                this._setupUI();

                /**
                 * @property {CMS.Navigation} navigation
                 */
                this.navigation = new CMS.Navigation();

                // states
                this.click = 'click.cms.toolbar';
                this.touchStart = 'touchstart.cms.toolbar';
                this.pointerUp = 'pointerup.cms.toolbar';
                this.pointerOverOut = 'pointerover.cms.toolbar pointerout.csm.toolbar';
                this.pointerLeave = 'pointerleave.csm.toolbar';
                this.mouseEnter = 'mouseenter.cms.toolbar';
                this.mouseLeave = 'mouseleave.cms.toolbar';
                this.resize = 'resize.cms.toolbar';
                this.key = 'keydown.cms.toolbar keyup.cms.toolbar';

                this.timer = function () {};
                this.lockToolbar = false;

                // setup initial stuff
                if (!this.ui.toolbar.data('ready')) {
                    this._events();
                }

                // FIXME the general initialization is handled within the toolbar
                // rather than a separate cms.setup or similar. Yet other components
                // are loaded after the toolbar so it can create a clash where
                // CMS.API is not ready. This is a workaround until a proper fix
                // will be released in 3.x
                var that = this;
                setTimeout(function () {
                    that._initialStates();
                }, 200);

                // set a state to determine if we need to reinitialize this._events();
                this.ui.toolbar.data('ready', true);
            },

            /**
             * Stores all jQuery references within `this.ui`.
             *
             * @method _setupUI
             * @private
             */
            _setupUI: function _setupUI() {
                var container = $('.cms');
                this.ui = {
                    container: container,
                    body: $('html'),
                    document: $(document),
                    window: $(window),
                    toolbar: container.find('.cms-toolbar'),
                    toolbarTrigger: container.find('.cms-toolbar-trigger'),
                    navigations: container.find('.cms-toolbar-item-navigation'),
                    buttons: container.find('.cms-toolbar-item-buttons'),
                    switcher: container.find('.cms-toolbar-item-switch'),
                    messages: container.find('.cms-messages'),
                    screenBlock: container.find('.cms-screenblock'),
                    structureBoard: container.find('.cms-structure')
                };
            },

            /**
             * Sets up all the event handlers, such as closing and resizing.
             *
             * @method _events
             * @private
             */
            _events: function _events() {
                var that = this;

                // attach event to the trigger handler
                this.ui.toolbarTrigger.on(this.pointerUp, function (e) {
                    e.preventDefault();
                    that.toggle();
                    that.ui.document.trigger(that.click);
                }).on(this.click, function (e) {
                    e.preventDefault();
                });

                // attach event to the navigation elements
                this.ui.navigations.each(function () {
                    var navigation = $(this);
                    var lists = navigation.find('li');
                    var root = 'cms-toolbar-item-navigation';
                    var hover = 'cms-toolbar-item-navigation-hover';
                    var disabled = 'cms-toolbar-item-navigation-disabled';
                    var children = 'cms-toolbar-item-navigation-children';
                    var isTouchingTopLevelMenu = false;
                    var open = false;
                    var cmdPressed = false;

                    // remove events from first level
                    navigation.find('a').on(that.click + ', ' + that.key, function (e) {
                        var el = $(this);
                        // we need to restore the default behaviour once a user
                        // presses ctrl/cmd and clicks on the entry. In this
                        // case a new tab should open. First we determine if
                        // ctrl/cmd is pressed:
                        if (
                            e.keyCode === CMS.KEYS.CMD_LEFT ||
                            e.keyCode === CMS.KEYS.CMD_RIGHT ||
                            e.keyCode === CMS.KEYS.CMD_FIREFOX ||
                            e.keyCode === CMS.KEYS.SHIFT ||
                            e.keyCode === CMS.KEYS.CTRL
                        ) {
                            cmdPressed = true;
                        }
                        if (e.type === 'keyup') {
                            cmdPressed = false;
                        }

                        if (el.attr('href') !== '' &&
                            el.attr('href') !== '#' &&
                            !el.parent().hasClass(disabled)) {

                            if (cmdPressed) {
                                // control the behaviour when ctrl/cmd is pressed
                                window.open(el.attr('href'), '_blank');
                            } else {
                                // otherwise delegate as usual
                                that._delegate($(this));
                            }

                            reset();
                            return false;
                        }

                    }).on(that.touchStart, function () {
                        isTouchingTopLevelMenu = true;
                    });

                    // handle click states
                    lists.on(that.click, function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        var el = $(this);

                        // close navigation once it's pressed again
                        if (el.parent().hasClass(root) && open) {
                            that.ui.body.trigger(that.click);
                            return false;
                        }

                        // close if el does not have children
                        if (!el.hasClass(children)) {
                            reset();
                        }

                        if (el.parent().hasClass(root) && el.hasClass(hover) || el.hasClass(disabled)) {
                            return false;
                        } else {
                            el.addClass(hover);
                        }

                        // activate hover selection
                        if (!isTouchingTopLevelMenu) {
                            // we only set the handler for mouseover when not touching because
                            // the mouseover actually is triggered on touch devices :/
                            navigation.find('> li').on(that.mouseEnter, function () {
                                // cancel if item is already active
                                if ($(this).hasClass(hover)) {
                                    return false;
                                }
                                open = false;
                                $(this).trigger(that.click);
                            });
                        }

                        isTouchingTopLevelMenu = false;
                        // create the document event
                        that.ui.document.on(that.click, reset);
                        that.ui.structureBoard.on(that.click, reset);
                        that.ui.toolbar.on(that.click, reset);
                        that.ui.window.on('resize', CMS.API.Helpers.throttle(reset, 1000));
                        // update states
                        open = true;
                    });

                    // attach hover
                    lists.on(that.pointerOverOut, 'li', function () {
                        var el = $(this);
                        var parent = el.closest('.cms-toolbar-item-navigation-children')
                            .add(el.parents('.cms-toolbar-item-navigation-children'));
                        var hasChildren = el.hasClass(children) || parent.length;

                        // do not attach hover effect if disabled
                        // cancel event if element has already hover class
                        if (el.hasClass(disabled)) {
                            return false;
                        }
                        if (el.hasClass(hover)) {
                            return true;
                        }

                        // reset
                        lists.find('li').removeClass(hover);

                        // add hover effect
                        el.addClass(hover);

                        // handle children elements
                        if (hasChildren) {
                            el.find('> ul').show();
                            // add parent class
                            parent.addClass(hover);
                        } else {
                            lists.find('ul ul').hide();
                        }

                        // Remove stale submenus
                        el.siblings().find('> ul').hide();
                    }).on(that.click, function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                    });

                    // fix leave event
                    lists.on(that.pointerLeave, '> ul', function () {
                        lists.find('li').removeClass(hover);
                    });

                    // removes classes and events
                    function reset() {
                        open = false;
                        cmdPressed = false;
                        lists.removeClass(hover);
                        lists.find('ul ul').hide();
                        navigation.find('> li').off(that.mouseEnter);
                        that.ui.document.off(that.click);
                        that.ui.toolbar.off(that.click, reset);
                        that.ui.structureBoard.off(that.click);
                    }
                });

                // attach event to the switcher elements
                this.ui.switcher.each(function () {
                    $(this).on(that.click, function (e) {
                        e.preventDefault();
                        that._setSwitcher($(e.currentTarget));
                    });
                });

                // attach event for first page publish
                this.ui.buttons.each(function () {
                    var btn = $(this);

                    // in case the button has a data-rel attribute
                    if (btn.find('a').attr('data-rel')) {
                        btn.on(that.click, function (e) {
                            e.preventDefault();
                            that._delegate($(this).find('a'));
                        });
                    } else {
                        btn.find('a').on(that.click, function (e) {
                            e.stopPropagation();
                        });
                    }

                    // in case of the publish button
                    btn.find('.cms-publish-page').on(that.click, function (e) {
                        if (!CMS.API.Helpers.secureConfirm(CMS.config.lang.publish)) {
                            e.preventDefault();
                        }
                    });

                    btn.find('.cms-btn-publish').on(that.click, function (e) {
                        e.preventDefault();
                        // send post request to prevent xss attacks
                        $.ajax({
                            'type': 'post',
                            'url': $(this).prop('href'),
                            'data': {
                                'csrfmiddlewaretoken': CMS.config.csrf
                            },
                            'success': function () {
                                var url = CMS.API.Helpers.makeURL(
                                    window.location.href.split('?')[0],
                                    [CMS.settings.edit_off + '=true']
                                );
                                CMS.API.Helpers.reloadBrowser(url);
                            },
                            'error': function (request) {
                                throw new Error(request);
                            }
                        });
                    });
                });
            },

            /**
             * We check for various states on load if elements in the toolbar
             * should appear or trigger other components. This precedes a timeout
             * which is not optimal and should be addressed separately.
             *
             * @method _initialStates
             * @private
             * @deprecated this method is deprecated now, it will be removed in > 3.2
             */
            _initialStates: function _initialStates() {
                var publishBtn = $('.cms-btn-publish').parent();

                // setup toolbar visibility, we need to reverse the options to set the correct state
                if (CMS.settings.toolbar === 'expanded') {
                    this.open({ duration: 0 });
                } else {
                    this.close();
                }

                // hide publish button
                publishBtn.hide();

                if ($('.cms-btn-publish-active').length) {
                    publishBtn.show();
                    this.ui.window.trigger('resize');
                }

                // check if debug is true
                if (CMS.config.debug) {
                    this._debug();
                }

                // check if there are messages and display them
                if (CMS.config.messages) {
                    CMS.API.Messages.open({
                        message: CMS.config.messages
                    });
                }

                // check if there are error messages and display them
                if (CMS.config.error) {
                    CMS.API.Messages.open({
                        message: CMS.config.error,
                        error: true
                    });
                }

                // enforce open state if user is not logged in but requests the toolbar
                if (!CMS.config.auth || CMS.config.settings.version !== CMS.settings.version) {
                    this.open({ duration: 0 });
                    CMS.settings = this.setSettings(CMS.config.settings);
                }

                // should switcher indicate that there is an unpublished page?
                if (CMS.config.publisher) {
                    CMS.API.Messages.open({
                        message: CMS.config.publisher,
                        dir: 'right'
                    });
                    setInterval(function () {
                        CMS.$('.cms-toolbar-item-switch').toggleClass('cms-toolbar-item-switch-highlight');
                    }, CMS.API.Messages.messageDelay);
                }

                // open sideframe if it was previously opened
                if (CMS.settings.sideframe.url) {
                    var sideframe = new CMS.Sideframe();
                    sideframe.open({
                        url: CMS.settings.sideframe.url,
                        animate: false
                    });
                }

                // if there is a screenblock, do some resize magic
                if (this.ui.screenBlock.length) {
                    this._screenBlock();
                }

                // add toolbar ready class to body and fire event
                this.ui.body.addClass('cms-ready');
                this.ui.document.trigger('cms-ready');
            },

            /**
             * Toggles the toolbar state: open > closes / closed > opens.
             *
             * @method toggle
             */
            toggle: function toggle() {
                // toggle bar
                if (CMS.settings.toolbar === 'collapsed') {
                    this.open();
                } else {
                    this.close();
                }
            },

            /**
             * Opens the toolbar (slide down).
             *
             * @method open
             * @param {Object} [opts]
             * @param {Number} [opts.duration] time in milliseconds for toolbar to animate
             */
            open: function open(opts) {
                this._show(opts);

                // set new settings
                CMS.settings.toolbar = 'expanded';
                CMS.settings = this.setSettings(CMS.settings);
            },

            /**
             * Animation helper for opening the toolbar.
             *
             * @method _show
             * @private
             * @param {Object} [opts]
             * @param {Number} [opts.duration] time in milliseconds for toolbar to animate
             */
            _show: function _show(opts) {
                var speed = opts && opts.duration !== undefined ? opts.duration : this.options.toolbarDuration;
                var debugHeight = $('.cms-debug-bar').height() || 0;
                var toolbarHeight = $('.cms-toolbar').height() + 10;

                this.ui.toolbar.css({
                    'transition': 'margin-top ' + speed + 'ms',
                    'margin-top': 0
                });
                this.ui.toolbarTrigger.addClass('cms-toolbar-trigger-expanded');
                // animate html
                this.ui.body.addClass('cms-toolbar-expanded');
                this.ui.body.animate({ 'margin-top': toolbarHeight - 10 + debugHeight }, speed, 'linear');
                // set messages top to toolbar height
                this.ui.messages.css('top', toolbarHeight - 10);
            },

            /**
             * Closes the toolbar (slide up).
             *
             * @method close
             */
            close: function close() {
                this._hide();

                // set new settings
                CMS.settings.toolbar = 'collapsed';
                CMS.settings = this.setSettings(CMS.settings);
            },

            /**
             * Animation helper for closing the toolbar.
             *
             * @method _hide
             * @private
             */
            _hide: function _hide() {
                var speed = this.options.toolbarDuration;
                var toolbarHeight = $('.cms-toolbar').height() + 10;

                this.ui.toolbar.css('transition', 'margin-top ' + speed + 'ms');
                // cancel if sideframe is active
                if (this.lockToolbar) {
                    return false;
                }

                this.ui.toolbarTrigger.removeClass('cms-toolbar-trigger-expanded');
                this.ui.toolbar.css('margin-top', -toolbarHeight);
                // animate html
                this.ui.body.removeClass('cms-toolbar-expanded');
                this.ui.body.animate({ 'margin-top': (CMS.config.debug) ? 5 : 0 }, speed);
                // set messages top to 0
                this.ui.messages.css('top', 0);
            },

            /**
             * Makes a request to the given url, runs optional callbacks.
             *
             * @method openAjax
             * @param {Object} opts
             * @param {String} opts.url url where the ajax points to
             * @param {Object} [opts.post] post data to be passed
             * @param {String} [opts.text] message to be displayed
             * @param {Function} [opts.callback] custom callback instead of reload
             * @param {String} [opts.onSuccess] reload and display custom message
             * @return {Boolean|jQuery.Deferred} either false or a promise
             */
            openAjax: function (opts) {
                var that = this;
                // url, post, text, callback, onSuccess
                var url = opts.url;
                var post = opts.post || '{}';
                var text = opts.text || '';
                var callback = opts.callback;
                var onSuccess = opts.onSuccess;
                var question = (text) ? CMS.API.Helpers.secureConfirm(text) : true;

                // cancel if question has been denied
                if (!question) {
                    return false;
                }

                // set loader
                this.showLoader();

                return $.ajax({
                    type: 'POST',
                    url: url,
                    data: (post) ? JSON.parse(post) : {}
                }).done(function (response) {
                    CMS.API.locked = false;

                    if (callback) {
                        callback(that, response);
                        that.hideLoader();
                    } else if (onSuccess) {
                        CMS.API.Helpers.reloadBrowser(onSuccess, false, true);
                    } else {
                        // reload
                        CMS.API.Helpers.reloadBrowser(false, false, true);
                    }
                }).fail(function (jqXHR) {
                    CMS.API.locked = false;

                    CMS.API.Messages.open({
                        message: jqXHR.response + ' | ' + jqXHR.status + ' ' + jqXHR.statusText,
                        error: true
                    });
                });
            },

            /**
             * Shows the loader spinner on the trigger knob for the toolbar.
             *
             * @method showLoader
             */
            showLoader: function showLoader() {
                this.ui.toolbarTrigger.addClass('cms-toolbar-loader');
            },

            /**
             * Hides the loader spinner on the trigger knob for the toolbar.
             *
             * @method hideLoader
             */
            hideLoader: function hideLoader() {
                this.ui.toolbarTrigger.removeClass('cms-toolbar-loader');
            },

            /**
             * Delegates event from element to appropriate functionalities.
             *
             * @method _delegate
             * @param {jQuery} el trigger element
             * @private
             */
            _delegate: function _delegate(el) {
                // save local vars
                var target = el.data('rel');
                if (el.hasClass('cms-btn-disabled')) {
                    return false;
                }

                switch (target) {
                    case 'modal':
                        var modal = new CMS.Modal({
                            onClose: el.data('on-close')
                        });
                        modal.open({
                            url: el.attr('href'),
                            title: el.data('name')
                        });
                        break;
                    case 'message':
                        CMS.API.Messages.open({
                            message: el.data('text')
                        });
                        break;
                    case 'sideframe':
                        var sideframe = new CMS.Sideframe({
                            onClose: el.data('on-close')
                        });
                        sideframe.open({
                            url: el.attr('href'),
                            animate: true
                        });
                        break;
                    case 'ajax':
                        this.openAjax({
                            url: el.attr('href'),
                            post: JSON.stringify(el.data('post')),
                            text: el.data('text'),
                            onSuccess: el.data('on-success')
                        });
                        break;
                    default:
                        window.location.href = el.attr('href');
                }
            },

            /**
             * Sets the functionality for the switcher button.
             *
             * @method _setSwitcher
             * @param {jQuery} el button element
             * @private
             * @deprecated
             */
            _setSwitcher: function _setSwitcher(el) {
                // save local vars
                var active = el.hasClass('cms-toolbar-item-switch-active');
                var anchor = el.find('a');
                var knob = el.find('.cms-toolbar-item-switch-knob');
                var duration = 300;

                // prevent if switchopstion is passed
                if (this.options.preventSwitch) {
                    CMS.API.Messages.open({
                        message: this.options.preventSwitchMessage,
                        dir: 'right'
                    });
                    return false;
                }

                // determin what to trigger
                if (active) {
                    knob.animate({
                        'right': anchor.outerWidth(true) - (knob.outerWidth(true) + 2)
                    }, duration);
                    // move anchor behind the knob
                    anchor.css('z-index', 1).animate({
                        'padding-top': 6,
                        'padding-right': 14,
                        'padding-bottom': 4,
                        'padding-left': 28
                    }, duration);
                } else {
                    knob.animate({
                        'left': anchor.outerWidth(true) - (knob.outerWidth(true) + 2)
                    }, duration);
                    // move anchor behind the knob
                    anchor.css('z-index', 1).animate({
                        'padding-top': 6,
                        'padding-right': 28,
                        'padding-bottom': 4,
                        'padding-left': 14
                    }, duration);
                }

                // reload
                setTimeout(function () {
                    window.location.href = anchor.attr('href');
                }, duration);
            },

            /**
             * Locks the toolbar so it cannot be closed.
             *
             * @method _lock
             * @param {Boolean} lock true if the toolbar should be locked
             * @private
             */
            _lock: function _lock(lock) {
                if (lock) {
                    this.lockToolbar = true;
                    // make button look disabled
                    this.ui.toolbarTrigger.css('opacity', 0.2);
                } else {
                    this.lockToolbar = false;
                    // make button look disabled
                    this.ui.toolbarTrigger.css('opacity', 1);
                }
            },

            /**
             * Handles the debug bar when `DEBUG=true` on top of the toolbar.
             *
             * @method _debug
             * @private
             */
            _debug: function _debug() {
                var that = this;
                var timeout = 1000;
                var timer = function () {};

                // bind message event
                var debug = this.ui.container.find('.cms-debug-bar');
                debug.on(this.mouseEnter + ' ' + this.mouseLeave, function (e) {
                    clearTimeout(timer);

                    if (e.type === that.mouseEnter) {
                        timer = setTimeout(function () {
                            CMS.API.Messages.open({
                                message: CMS.config.lang.debug
                            });
                        }, timeout);
                    }
                });
            },

            /**
             * This shows a dark screen with a note "This page is a redirect"
             * on a page where the settings have been modified to redirect to
             * another page.
             *
             * @method _screenBlock
             * @private
             */
            _screenBlock: function _screenBlock() {
                var that = this;
                var interval = 20;
                var blocker = this.ui.screenBlock;
                var sideframe = $('.cms-sideframe');

                // automatically resize screenblock window according to given attributes
                $(window).on(this.resize, function () {
                    blocker.css({
                        'width': $(this).width() - sideframe.width(),
                        'height': $(window).height()
                    });
                }).trigger('resize');

                // set update interval
                setInterval(function () {
                    $(window).trigger(that.resize);
                }, interval);
            }

        });
    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Tooltip
(function ($) {
    'use strict';

    // shorthand for jQuery(document).ready();
    $(function () {
        /**
         * The tooltip is the element which shows over plugins
         * and suggests clicking/tapping them to edit.
         *
         * @class Tooltip
         * @namespace CMS
         */
        CMS.Tooltip = new CMS.Class({

            initialize: function () {
                this.body = $('body');
                /**
                 * Are we on touch device?
                 *
                 * @property {Boolean} isTouch
                 */
                this.isTouch = false;
                /**
                 * Tooltip DOM element
                 *
                 * @property {jQuery} domElem
                 */
                this.domElem = this._pick();

                this._checkTouch();
            },

            /**
             * Checks for touch event and switches to touch tooltip if detected.
             *
             * @method checkTouch
             * @private
             */
            _checkTouch: function () {
                var that = this;

                this.body.one('touchstart.cms', function () {
                    that.isTouch = true;
                    that.domElem = that._pick();

                    // attach tooltip event for touch devices
                    that.domElem.on('touchstart.cms', function () {
                        var id = $(this).data('plugin_id');
                        var plugin = $('.cms-plugin-' + id);
                        // check if it is a normal plugin or a generic
                        if (plugin.length) {
                            plugin.trigger('dblclick.cms');
                        } else {
                            // generics are added through the content mode via special
                            // template tags some generic element might be
                            // cms-plugin-cms-page-changelist-x
                            var generic = $('.cms-plugin[class*="cms-plugin-cms-"][class*="-' + id + '"]');
                            generic.eq(0).trigger('dblclick.cms');
                        }
                    });
                });
            },

            /**
             * Manages show/hide calls.
             *
             * @method displayToggle
             * @param {Boolean} isShown
             * @param {Object} e event object
             * @param {String} name current plugin name
             * @param {String} id current plugin id
             */
            displayToggle: function (isShown, e, name, id) {
                isShown ? this.show(e, name, id) : this.hide();
            },

            /**
             * Shows tooltip with specific plugin-related parameters
             *
             * @method show
             * @param {Object} e
             * @param {String} name current plugin name
             * @param {String} id current plugin id
             */
            show: function (e, name, id) {
                var tooltip = this.domElem;
                var that = this;

                // change css and attributes
                tooltip.css('visibility', 'visible')
                    .data('plugin_id', id || null)
                    .show()
                    .find('span').html(name);

                if (this.isTouch) {
                    this.position(e.originalEvent, tooltip);
                } else {
                    // attaches move event
                    // this sets the correct position for the edit tooltip
                    that.position(e.originalEvent, tooltip);
                    this.body.on('mousemove.cms', function (e) {
                        that.position(e, tooltip);
                    });
                }
            },

            /**
             * Hides tooltip
             *
             * @method hide
             */
            hide: function () {
                // change css
                this.domElem.css('visibility', 'hidden').hide();

                // unbind events
                if (!this.isTouch) {
                    this.body.off('mousemove.cms');
                }
            },

            /**
             * Picks tooltip to show (touch or desktop).
             *
             * @method _pick
             * @private
             */
            _pick: function () {
                $('.cms-tooltip-touch, .cms-tooltip').css('visibility', 'hidden').hide();
                return this.isTouch ? $('.cms-tooltip-touch') : $('.cms-tooltip');
            },

            /**
             * Positions tooltip next to the pointer event coordinates.
             *
             * @method position
             * @private
             * @param {Object} e event object
             * @param {jQuery} tooltip element
             */
            position: function (e, tooltip) {
                // so lets figure out where we are
                var offset = 20;
                var relX = e.pageX - $(tooltip).offsetParent().offset().left;
                var relY = e.pageY - $(tooltip).offsetParent().offset().top;
                var bound = $(tooltip).offsetParent().width();
                var pos = relX + tooltip.outerWidth(true) + offset;

                tooltip.css({
                    left: (pos >= bound) ? relX - tooltip.outerWidth(true) - offset : relX + offset,
                    top: relY - 12
                });
            }

        });
    });
})(CMS.$);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5taW4uanMiLCJjbGFzcy5taW4uanMiLCJwZXAuanMiLCJqcXVlcnkudWkuY3VzdG9tLmpzIiwianF1ZXJ5LnVpLnRvdWNocHVuY2guanMiLCJqcXVlcnkudWkubmVzdGVkc29ydGFibGUuanMiLCJjbXMuYmFzZS5qcyIsImpxdWVyeS50cmFuc2l0aW9uLmpzIiwiY21zLm1lc3NhZ2VzLmpzIiwiY21zLm1vZGFsLmpzIiwiY21zLnNpZGVmcmFtZS5qcyIsImNtcy5jbGlwYm9hcmQuanMiLCJjbXMucGx1Z2lucy5qcyIsImNtcy5zdHJ1Y3R1cmVib2FyZC5qcyIsImNtcy5uYXZpZ2F0aW9uLmpzIiwiY21zLnRvb2xiYXIuanMiLCJjbXMudG9vbHRpcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3B6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcG1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdGtDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2ZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDNzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1dkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJidW5kbGUudG9vbGJhci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgalF1ZXJ5IHYxLjExLjMgfCAoYykgMjAwNSwgMjAxNSBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xuIWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWEuZG9jdW1lbnQ/YihhLCEwKTpmdW5jdGlvbihhKXtpZighYS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiBiKGEpfTpiKGEpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKGEsYil7dmFyIGM9W10sZD1jLnNsaWNlLGU9Yy5jb25jYXQsZj1jLnB1c2gsZz1jLmluZGV4T2YsaD17fSxpPWgudG9TdHJpbmcsaj1oLmhhc093blByb3BlcnR5LGs9e30sbD1cIjEuMTEuM1wiLG09ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IG0uZm4uaW5pdChhLGIpfSxuPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxvPS9eLW1zLS8scD0vLShbXFxkYS16XSkvZ2kscT1mdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9O20uZm49bS5wcm90b3R5cGU9e2pxdWVyeTpsLGNvbnN0cnVjdG9yOm0sc2VsZWN0b3I6XCJcIixsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIGQuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hPzA+YT90aGlzW2ErdGhpcy5sZW5ndGhdOnRoaXNbYV06ZC5jYWxsKHRoaXMpfSxwdXNoU3RhY2s6ZnVuY3Rpb24oYSl7dmFyIGI9bS5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksYSk7cmV0dXJuIGIucHJldk9iamVjdD10aGlzLGIuY29udGV4dD10aGlzLmNvbnRleHQsYn0sZWFjaDpmdW5jdGlvbihhLGIpe3JldHVybiBtLmVhY2godGhpcyxhLGIpfSxtYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG0ubWFwKHRoaXMsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS5jYWxsKGIsYyxiKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCxjPSthKygwPmE/YjowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soYz49MCYmYj5jP1t0aGlzW2NdXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IobnVsbCl9LHB1c2g6Zixzb3J0OmMuc29ydCxzcGxpY2U6Yy5zcGxpY2V9LG0uZXh0ZW5kPW0uZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZSxmLGc9YXJndW1lbnRzWzBdfHx7fSxoPTEsaT1hcmd1bWVudHMubGVuZ3RoLGo9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgZyYmKGo9ZyxnPWFyZ3VtZW50c1toXXx8e30saCsrKSxcIm9iamVjdFwiPT10eXBlb2YgZ3x8bS5pc0Z1bmN0aW9uKGcpfHwoZz17fSksaD09PWkmJihnPXRoaXMsaC0tKTtpPmg7aCsrKWlmKG51bGwhPShlPWFyZ3VtZW50c1toXSkpZm9yKGQgaW4gZSlhPWdbZF0sYz1lW2RdLGchPT1jJiYoaiYmYyYmKG0uaXNQbGFpbk9iamVjdChjKXx8KGI9bS5pc0FycmF5KGMpKSk/KGI/KGI9ITEsZj1hJiZtLmlzQXJyYXkoYSk/YTpbXSk6Zj1hJiZtLmlzUGxhaW5PYmplY3QoYSk/YTp7fSxnW2RdPW0uZXh0ZW5kKGosZixjKSk6dm9pZCAwIT09YyYmKGdbZF09YykpO3JldHVybiBnfSxtLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhsK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKGEpfSxub29wOmZ1bmN0aW9uKCl7fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PW0udHlwZShhKX0saXNBcnJheTpBcnJheS5pc0FycmF5fHxmdW5jdGlvbihhKXtyZXR1cm5cImFycmF5XCI9PT1tLnR5cGUoYSl9LGlzV2luZG93OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hJiZhPT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3JldHVybiFtLmlzQXJyYXkoYSkmJmEtcGFyc2VGbG9hdChhKSsxPj0wfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiO2ZvcihiIGluIGEpcmV0dXJuITE7cmV0dXJuITB9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoIWF8fFwib2JqZWN0XCIhPT1tLnR5cGUoYSl8fGEubm9kZVR5cGV8fG0uaXNXaW5kb3coYSkpcmV0dXJuITE7dHJ5e2lmKGEuY29uc3RydWN0b3ImJiFqLmNhbGwoYSxcImNvbnN0cnVjdG9yXCIpJiYhai5jYWxsKGEuY29uc3RydWN0b3IucHJvdG90eXBlLFwiaXNQcm90b3R5cGVPZlwiKSlyZXR1cm4hMX1jYXRjaChjKXtyZXR1cm4hMX1pZihrLm93bkxhc3QpZm9yKGIgaW4gYSlyZXR1cm4gai5jYWxsKGEsYik7Zm9yKGIgaW4gYSk7cmV0dXJuIHZvaWQgMD09PWJ8fGouY2FsbChhLGIpfSx0eXBlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP2ErXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYT9oW2kuY2FsbChhKV18fFwib2JqZWN0XCI6dHlwZW9mIGF9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oYil7YiYmbS50cmltKGIpJiYoYS5leGVjU2NyaXB0fHxmdW5jdGlvbihiKXthLmV2YWwuY2FsbChhLGIpfSkoYil9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKG8sXCJtcy1cIikucmVwbGFjZShwLHEpfSxub2RlTmFtZTpmdW5jdGlvbihhLGIpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU9MCxmPWEubGVuZ3RoLGc9cihhKTtpZihjKXtpZihnKXtmb3IoO2Y+ZTtlKyspaWYoZD1iLmFwcGx5KGFbZV0sYyksZD09PSExKWJyZWFrfWVsc2UgZm9yKGUgaW4gYSlpZihkPWIuYXBwbHkoYVtlXSxjKSxkPT09ITEpYnJlYWt9ZWxzZSBpZihnKXtmb3IoO2Y+ZTtlKyspaWYoZD1iLmNhbGwoYVtlXSxlLGFbZV0pLGQ9PT0hMSlicmVha31lbHNlIGZvcihlIGluIGEpaWYoZD1iLmNhbGwoYVtlXSxlLGFbZV0pLGQ9PT0hMSlicmVhaztyZXR1cm4gYX0sdHJpbTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOihhK1wiXCIpLnJlcGxhY2UobixcIlwiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8W107cmV0dXJuIG51bGwhPWEmJihyKE9iamVjdChhKSk/bS5tZXJnZShjLFwic3RyaW5nXCI9PXR5cGVvZiBhP1thXTphKTpmLmNhbGwoYyxhKSksY30saW5BcnJheTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7aWYoYil7aWYoZylyZXR1cm4gZy5jYWxsKGIsYSxjKTtmb3IoZD1iLmxlbmd0aCxjPWM/MD5jP01hdGgubWF4KDAsZCtjKTpjOjA7ZD5jO2MrKylpZihjIGluIGImJmJbY109PT1hKXJldHVybiBjfXJldHVybi0xfSxtZXJnZTpmdW5jdGlvbihhLGIpe3ZhciBjPStiLmxlbmd0aCxkPTAsZT1hLmxlbmd0aDt3aGlsZShjPmQpYVtlKytdPWJbZCsrXTtpZihjIT09Yyl3aGlsZSh2b2lkIDAhPT1iW2RdKWFbZSsrXT1iW2QrK107cmV0dXJuIGEubGVuZ3RoPWUsYX0sZ3JlcDpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkLGU9W10sZj0wLGc9YS5sZW5ndGgsaD0hYztnPmY7ZisrKWQ9IWIoYVtmXSxmKSxkIT09aCYmZS5wdXNoKGFbZl0pO3JldHVybiBlfSxtYXA6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGY9MCxnPWEubGVuZ3RoLGg9cihhKSxpPVtdO2lmKGgpZm9yKDtnPmY7ZisrKWQ9YihhW2ZdLGYsYyksbnVsbCE9ZCYmaS5wdXNoKGQpO2Vsc2UgZm9yKGYgaW4gYSlkPWIoYVtmXSxmLGMpLG51bGwhPWQmJmkucHVzaChkKTtyZXR1cm4gZS5hcHBseShbXSxpKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBiJiYoZj1hW2JdLGI9YSxhPWYpLG0uaXNGdW5jdGlvbihhKT8oYz1kLmNhbGwoYXJndW1lbnRzLDIpLGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShifHx0aGlzLGMuY29uY2F0KGQuY2FsbChhcmd1bWVudHMpKSl9LGUuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxtLmd1aWQrKyxlKTp2b2lkIDB9LG5vdzpmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX0sc3VwcG9ydDprfSksbS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe2hbXCJbb2JqZWN0IFwiK2IrXCJdXCJdPWIudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIHIoYSl7dmFyIGI9XCJsZW5ndGhcImluIGEmJmEubGVuZ3RoLGM9bS50eXBlKGEpO3JldHVyblwiZnVuY3Rpb25cIj09PWN8fG0uaXNXaW5kb3coYSk/ITE6MT09PWEubm9kZVR5cGUmJmI/ITA6XCJhcnJheVwiPT09Y3x8MD09PWJ8fFwibnVtYmVyXCI9PXR5cGVvZiBiJiZiPjAmJmItMSBpbiBhfXZhciBzPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGksaixrLGwsbSxuLG8scCxxLHIscyx0LHU9XCJzaXp6bGVcIisxKm5ldyBEYXRlLHY9YS5kb2N1bWVudCx3PTAseD0wLHk9aGEoKSx6PWhhKCksQT1oYSgpLEI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWImJihsPSEwKSwwfSxDPTE8PDMxLEQ9e30uaGFzT3duUHJvcGVydHksRT1bXSxGPUUucG9wLEc9RS5wdXNoLEg9RS5wdXNoLEk9RS5zbGljZSxKPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtkPmM7YysrKWlmKGFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSxLPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixMPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixNPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsTj1NLnJlcGxhY2UoXCJ3XCIsXCJ3I1wiKSxPPVwiXFxcXFtcIitMK1wiKihcIitNK1wiKSg/OlwiK0wrXCIqKFsqXiR8IX5dPz0pXCIrTCtcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK04rXCIpKXwpXCIrTCtcIipcXFxcXVwiLFA9XCI6KFwiK00rXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK08rXCIpKil8LiopXFxcXCl8KVwiLFE9bmV3IFJlZ0V4cChMK1wiK1wiLFwiZ1wiKSxSPW5ldyBSZWdFeHAoXCJeXCIrTCtcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrTCtcIiskXCIsXCJnXCIpLFM9bmV3IFJlZ0V4cChcIl5cIitMK1wiKixcIitMK1wiKlwiKSxUPW5ldyBSZWdFeHAoXCJeXCIrTCtcIiooWz4rfl18XCIrTCtcIilcIitMK1wiKlwiKSxVPW5ldyBSZWdFeHAoXCI9XCIrTCtcIiooW15cXFxcXSdcXFwiXSo/KVwiK0wrXCIqXFxcXF1cIixcImdcIiksVj1uZXcgUmVnRXhwKFApLFc9bmV3IFJlZ0V4cChcIl5cIitOK1wiJFwiKSxYPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrTStcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitNK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrTS5yZXBsYWNlKFwid1wiLFwidypcIikrXCIpXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitPKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitQKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitMK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrTCtcIiooPzooWystXXwpXCIrTCtcIiooXFxcXGQrKXwpKVwiK0wrXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrSytcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK0wrXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK0wrXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK0wrXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LFk9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxaPS9eaFxcZCQvaSwkPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXz0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxhYT0vWyt+XS8sYmE9Lyd8XFxcXC9nLGNhPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitMK1wiP3woXCIrTCtcIil8LilcIixcImlnXCIpLGRhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cIjB4XCIrYi02NTUzNjtyZXR1cm4gZCE9PWR8fGM/YjowPmQ/U3RyaW5nLmZyb21DaGFyQ29kZShkKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGQ+PjEwfDU1Mjk2LDEwMjMmZHw1NjMyMCl9LGVhPWZ1bmN0aW9uKCl7bSgpfTt0cnl7SC5hcHBseShFPUkuY2FsbCh2LmNoaWxkTm9kZXMpLHYuY2hpbGROb2RlcyksRVt2LmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChmYSl7SD17YXBwbHk6RS5sZW5ndGg/ZnVuY3Rpb24oYSxiKXtHLmFwcGx5KGEsSS5jYWxsKGIpKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aCxkPTA7d2hpbGUoYVtjKytdPWJbZCsrXSk7YS5sZW5ndGg9Yy0xfX19ZnVuY3Rpb24gZ2EoYSxiLGQsZSl7dmFyIGYsaCxqLGssbCxvLHIscyx3LHg7aWYoKGI/Yi5vd25lckRvY3VtZW50fHxiOnYpIT09biYmbShiKSxiPWJ8fG4sZD1kfHxbXSxrPWIubm9kZVR5cGUsXCJzdHJpbmdcIiE9dHlwZW9mIGF8fCFhfHwxIT09ayYmOSE9PWsmJjExIT09aylyZXR1cm4gZDtpZighZSYmcCl7aWYoMTEhPT1rJiYoZj1fLmV4ZWMoYSkpKWlmKGo9ZlsxXSl7aWYoOT09PWspe2lmKGg9Yi5nZXRFbGVtZW50QnlJZChqKSwhaHx8IWgucGFyZW50Tm9kZSlyZXR1cm4gZDtpZihoLmlkPT09ailyZXR1cm4gZC5wdXNoKGgpLGR9ZWxzZSBpZihiLm93bmVyRG9jdW1lbnQmJihoPWIub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChqKSkmJnQoYixoKSYmaC5pZD09PWopcmV0dXJuIGQucHVzaChoKSxkfWVsc2V7aWYoZlsyXSlyZXR1cm4gSC5hcHBseShkLGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSkpLGQ7aWYoKGo9ZlszXSkmJmMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gSC5hcHBseShkLGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShqKSksZH1pZihjLnFzYSYmKCFxfHwhcS50ZXN0KGEpKSl7aWYocz1yPXUsdz1iLHg9MSE9PWsmJmEsMT09PWsmJlwib2JqZWN0XCIhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpe289ZyhhKSwocj1iLmdldEF0dHJpYnV0ZShcImlkXCIpKT9zPXIucmVwbGFjZShiYSxcIlxcXFwkJlwiKTpiLnNldEF0dHJpYnV0ZShcImlkXCIscykscz1cIltpZD0nXCIrcytcIiddIFwiLGw9by5sZW5ndGg7d2hpbGUobC0tKW9bbF09cytyYShvW2xdKTt3PWFhLnRlc3QoYSkmJnBhKGIucGFyZW50Tm9kZSl8fGIseD1vLmpvaW4oXCIsXCIpfWlmKHgpdHJ5e3JldHVybiBILmFwcGx5KGQsdy5xdWVyeVNlbGVjdG9yQWxsKHgpKSxkfWNhdGNoKHkpe31maW5hbGx5e3J8fGIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9fX1yZXR1cm4gaShhLnJlcGxhY2UoUixcIiQxXCIpLGIsZCxlKX1mdW5jdGlvbiBoYSgpe3ZhciBhPVtdO2Z1bmN0aW9uIGIoYyxlKXtyZXR1cm4gYS5wdXNoKGMrXCIgXCIpPmQuY2FjaGVMZW5ndGgmJmRlbGV0ZSBiW2Euc2hpZnQoKV0sYltjK1wiIFwiXT1lfXJldHVybiBifWZ1bmN0aW9uIGlhKGEpe3JldHVybiBhW3VdPSEwLGF9ZnVuY3Rpb24gamEoYSl7dmFyIGI9bi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RyeXtyZXR1cm4hIWEoYil9Y2F0Y2goYyl7cmV0dXJuITF9ZmluYWxseXtiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGx9fWZ1bmN0aW9uIGthKGEsYil7dmFyIGM9YS5zcGxpdChcInxcIiksZT1hLmxlbmd0aDt3aGlsZShlLS0pZC5hdHRySGFuZGxlW2NbZV1dPWJ9ZnVuY3Rpb24gbGEoYSxiKXt2YXIgYz1iJiZhLGQ9YyYmMT09PWEubm9kZVR5cGUmJjE9PT1iLm5vZGVUeXBlJiYofmIuc291cmNlSW5kZXh8fEMpLSh+YS5zb3VyY2VJbmRleHx8Qyk7aWYoZClyZXR1cm4gZDtpZihjKXdoaWxlKGM9Yy5uZXh0U2libGluZylpZihjPT09YilyZXR1cm4tMTtyZXR1cm4gYT8xOi0xfWZ1bmN0aW9uIG1hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YyYmYi50eXBlPT09YX19ZnVuY3Rpb24gbmEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oXCJpbnB1dFwiPT09Y3x8XCJidXR0b25cIj09PWMpJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBvYShhKXtyZXR1cm4gaWEoZnVuY3Rpb24oYil7cmV0dXJuIGI9K2IsaWEoZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEoW10sYy5sZW5ndGgsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pY1tlPWZbZ11dJiYoY1tlXT0hKGRbZV09Y1tlXSkpfSl9KX1mdW5jdGlvbiBwYShhKXtyZXR1cm4gYSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmF9Yz1nYS5zdXBwb3J0PXt9LGY9Z2EuaXNYTUw9ZnVuY3Rpb24oYSl7dmFyIGI9YSYmKGEub3duZXJEb2N1bWVudHx8YSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiBiP1wiSFRNTFwiIT09Yi5ub2RlTmFtZTohMX0sbT1nYS5zZXREb2N1bWVudD1mdW5jdGlvbihhKXt2YXIgYixlLGc9YT9hLm93bmVyRG9jdW1lbnR8fGE6djtyZXR1cm4gZyE9PW4mJjk9PT1nLm5vZGVUeXBlJiZnLmRvY3VtZW50RWxlbWVudD8obj1nLG89Zy5kb2N1bWVudEVsZW1lbnQsZT1nLmRlZmF1bHRWaWV3LGUmJmUhPT1lLnRvcCYmKGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixlYSwhMSk6ZS5hdHRhY2hFdmVudCYmZS5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsZWEpKSxwPSFmKGcpLGMuYXR0cmlidXRlcz1qYShmdW5jdGlvbihhKXtyZXR1cm4gYS5jbGFzc05hbWU9XCJpXCIsIWEuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpfSksYy5nZXRFbGVtZW50c0J5VGFnTmFtZT1qYShmdW5jdGlvbihhKXtyZXR1cm4gYS5hcHBlbmRDaGlsZChnLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFhLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxjLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9JC50ZXN0KGcuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksYy5nZXRCeUlkPWphKGZ1bmN0aW9uKGEpe3JldHVybiBvLmFwcGVuZENoaWxkKGEpLmlkPXUsIWcuZ2V0RWxlbWVudHNCeU5hbWV8fCFnLmdldEVsZW1lbnRzQnlOYW1lKHUpLmxlbmd0aH0pLGMuZ2V0QnlJZD8oZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQmJnApe3ZhciBjPWIuZ2V0RWxlbWVudEJ5SWQoYSk7cmV0dXJuIGMmJmMucGFyZW50Tm9kZT9bY106W119fSxkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoY2EsZGEpO3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PWJ9fSk6KGRlbGV0ZSBkLmZpbmQuSUQsZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKGNhLGRhKTtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0QXR0cmlidXRlTm9kZSYmYS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIGMmJmMudmFsdWU9PT1ifX0pLGQuZmluZC5UQUc9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZT9mdW5jdGlvbihhLGIpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRzQnlUYWdOYW1lP2IuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSk6Yy5xc2E/Yi5xdWVyeVNlbGVjdG9yQWxsKGEpOnZvaWQgMH06ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9MCxmPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSk7aWYoXCIqXCI9PT1hKXt3aGlsZShjPWZbZSsrXSkxPT09Yy5ub2RlVHlwZSYmZC5wdXNoKGMpO3JldHVybiBkfXJldHVybiBmfSxkLmZpbmQuQ0xBU1M9Yy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZmdW5jdGlvbihhLGIpe3JldHVybiBwP2IuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShhKTp2b2lkIDB9LHI9W10scT1bXSwoYy5xc2E9JC50ZXN0KGcucXVlcnlTZWxlY3RvckFsbCkpJiYoamEoZnVuY3Rpb24oYSl7by5hcHBlbmRDaGlsZChhKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrdStcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK3UrXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnEucHVzaChcIlsqXiRdPVwiK0wrXCIqKD86Jyd8XFxcIlxcXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHxxLnB1c2goXCJcXFxcW1wiK0wrXCIqKD86dmFsdWV8XCIrSytcIilcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIit1K1wiLV1cIikubGVuZ3RofHxxLnB1c2goXCJ+PVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHEucHVzaChcIjpjaGVja2VkXCIpLGEucXVlcnlTZWxlY3RvckFsbChcImEjXCIrdStcIisqXCIpLmxlbmd0aHx8cS5wdXNoKFwiLiMuK1srfl1cIil9KSxqYShmdW5jdGlvbihhKXt2YXIgYj1nLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtiLnNldEF0dHJpYnV0ZShcInR5cGVcIixcImhpZGRlblwiKSxhLmFwcGVuZENoaWxkKGIpLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcIkRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoJiZxLnB1c2goXCJuYW1lXCIrTCtcIipbKl4kfCF+XT89XCIpLGEucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aHx8cS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHEucHVzaChcIiwuKjpcIil9KSksKGMubWF0Y2hlc1NlbGVjdG9yPSQudGVzdChzPW8ubWF0Y2hlc3x8by53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fG8ubW96TWF0Y2hlc1NlbGVjdG9yfHxvLm9NYXRjaGVzU2VsZWN0b3J8fG8ubXNNYXRjaGVzU2VsZWN0b3IpKSYmamEoZnVuY3Rpb24oYSl7Yy5kaXNjb25uZWN0ZWRNYXRjaD1zLmNhbGwoYSxcImRpdlwiKSxzLmNhbGwoYSxcIltzIT0nJ106eFwiKSxyLnB1c2goXCIhPVwiLFApfSkscT1xLmxlbmd0aCYmbmV3IFJlZ0V4cChxLmpvaW4oXCJ8XCIpKSxyPXIubGVuZ3RoJiZuZXcgUmVnRXhwKHIuam9pbihcInxcIikpLGI9JC50ZXN0KG8uY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHQ9Ynx8JC50ZXN0KG8uY29udGFpbnMpP2Z1bmN0aW9uKGEsYil7dmFyIGM9OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YSxkPWImJmIucGFyZW50Tm9kZTtyZXR1cm4gYT09PWR8fCEoIWR8fDEhPT1kLm5vZGVUeXBlfHwhKGMuY29udGFpbnM/Yy5jb250YWlucyhkKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGQpKSl9OmZ1bmN0aW9uKGEsYil7aWYoYil3aGlsZShiPWIucGFyZW50Tm9kZSlpZihiPT09YSlyZXR1cm4hMDtyZXR1cm4hMX0sQj1iP2Z1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGw9ITAsMDt2YXIgZD0hYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gZD9kOihkPShhLm93bmVyRG9jdW1lbnR8fGEpPT09KGIub3duZXJEb2N1bWVudHx8Yik/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKToxLDEmZHx8IWMuc29ydERldGFjaGVkJiZiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpPT09ZD9hPT09Z3x8YS5vd25lckRvY3VtZW50PT09diYmdCh2LGEpPy0xOmI9PT1nfHxiLm93bmVyRG9jdW1lbnQ9PT12JiZ0KHYsYik/MTprP0ooayxhKS1KKGssYik6MDo0JmQ/LTE6MSl9OmZ1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGw9ITAsMDt2YXIgYyxkPTAsZT1hLnBhcmVudE5vZGUsZj1iLnBhcmVudE5vZGUsaD1bYV0saT1bYl07aWYoIWV8fCFmKXJldHVybiBhPT09Zz8tMTpiPT09Zz8xOmU/LTE6Zj8xOms/SihrLGEpLUooayxiKTowO2lmKGU9PT1mKXJldHVybiBsYShhLGIpO2M9YTt3aGlsZShjPWMucGFyZW50Tm9kZSloLnVuc2hpZnQoYyk7Yz1iO3doaWxlKGM9Yy5wYXJlbnROb2RlKWkudW5zaGlmdChjKTt3aGlsZShoW2RdPT09aVtkXSlkKys7cmV0dXJuIGQ/bGEoaFtkXSxpW2RdKTpoW2RdPT09dj8tMTppW2RdPT09dj8xOjB9LGcpOm59LGdhLm1hdGNoZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ2EoYSxudWxsLG51bGwsYil9LGdhLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihhLGIpe2lmKChhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSxiPWIucmVwbGFjZShVLFwiPSckMSddXCIpLCEoIWMubWF0Y2hlc1NlbGVjdG9yfHwhcHx8ciYmci50ZXN0KGIpfHxxJiZxLnRlc3QoYikpKXRyeXt2YXIgZD1zLmNhbGwoYSxiKTtpZihkfHxjLmRpc2Nvbm5lY3RlZE1hdGNofHxhLmRvY3VtZW50JiYxMSE9PWEuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIGR9Y2F0Y2goZSl7fXJldHVybiBnYShiLG4sbnVsbCxbYV0pLmxlbmd0aD4wfSxnYS5jb250YWlucz1mdW5jdGlvbihhLGIpe3JldHVybihhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSx0KGEsYil9LGdhLmF0dHI9ZnVuY3Rpb24oYSxiKXsoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSk7dmFyIGU9ZC5hdHRySGFuZGxlW2IudG9Mb3dlckNhc2UoKV0sZj1lJiZELmNhbGwoZC5hdHRySGFuZGxlLGIudG9Mb3dlckNhc2UoKSk/ZShhLGIsIXApOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09Zj9mOmMuYXR0cmlidXRlc3x8IXA/YS5nZXRBdHRyaWJ1dGUoYik6KGY9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZi5zcGVjaWZpZWQ/Zi52YWx1ZTpudWxsfSxnYS5lcnJvcj1mdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIithKX0sZ2EudW5pcXVlU29ydD1mdW5jdGlvbihhKXt2YXIgYixkPVtdLGU9MCxmPTA7aWYobD0hYy5kZXRlY3REdXBsaWNhdGVzLGs9IWMuc29ydFN0YWJsZSYmYS5zbGljZSgwKSxhLnNvcnQoQiksbCl7d2hpbGUoYj1hW2YrK10pYj09PWFbZl0mJihlPWQucHVzaChmKSk7d2hpbGUoZS0tKWEuc3BsaWNlKGRbZV0sMSl9cmV0dXJuIGs9bnVsbCxhfSxlPWdhLmdldFRleHQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz1cIlwiLGQ9MCxmPWEubm9kZVR5cGU7aWYoZil7aWYoMT09PWZ8fDk9PT1mfHwxMT09PWYpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhLnRleHRDb250ZW50KXJldHVybiBhLnRleHRDb250ZW50O2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZyljKz1lKGEpfWVsc2UgaWYoMz09PWZ8fDQ9PT1mKXJldHVybiBhLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKGI9YVtkKytdKWMrPWUoYik7cmV0dXJuIGN9LGQ9Z2Euc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86aWEsbWF0Y2g6WCxhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6e1wiPlwiOntkaXI6XCJwYXJlbnROb2RlXCIsZmlyc3Q6ITB9LFwiIFwiOntkaXI6XCJwYXJlbnROb2RlXCJ9LFwiK1wiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIixmaXJzdDohMH0sXCJ+XCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0ucmVwbGFjZShjYSxkYSksYVszXT0oYVszXXx8YVs0XXx8YVs1XXx8XCJcIikucmVwbGFjZShjYSxkYSksXCJ+PVwiPT09YVsyXSYmKGFbM109XCIgXCIrYVszXStcIiBcIiksYS5zbGljZSgwLDQpfSxDSElMRDpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnRvTG93ZXJDYXNlKCksXCJudGhcIj09PWFbMV0uc2xpY2UoMCwzKT8oYVszXXx8Z2EuZXJyb3IoYVswXSksYVs0XT0rKGFbNF0/YVs1XSsoYVs2XXx8MSk6MiooXCJldmVuXCI9PT1hWzNdfHxcIm9kZFwiPT09YVszXSkpLGFbNV09KyhhWzddK2FbOF18fFwib2RkXCI9PT1hWzNdKSk6YVszXSYmZ2EuZXJyb3IoYVswXSksYX0sUFNFVURPOmZ1bmN0aW9uKGEpe3ZhciBiLGM9IWFbNl0mJmFbMl07cmV0dXJuIFguQ0hJTEQudGVzdChhWzBdKT9udWxsOihhWzNdP2FbMl09YVs0XXx8YVs1XXx8XCJcIjpjJiZWLnRlc3QoYykmJihiPWcoYywhMCkpJiYoYj1jLmluZGV4T2YoXCIpXCIsYy5sZW5ndGgtYiktYy5sZW5ndGgpJiYoYVswXT1hWzBdLnNsaWNlKDAsYiksYVsyXT1jLnNsaWNlKDAsYikpLGEuc2xpY2UoMCwzKSl9fSxmaWx0ZXI6e1RBRzpmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoY2EsZGEpLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIqXCI9PT1hP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1ifX0sQ0xBU1M6ZnVuY3Rpb24oYSl7dmFyIGI9eVthK1wiIFwiXTtyZXR1cm4gYnx8KGI9bmV3IFJlZ0V4cChcIihefFwiK0wrXCIpXCIrYStcIihcIitMK1wifCQpXCIpKSYmeShhLGZ1bmN0aW9uKGEpe3JldHVybiBiLnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGEuY2xhc3NOYW1lJiZhLmNsYXNzTmFtZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0QXR0cmlidXRlJiZhLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU9Z2EuYXR0cihkLGEpO3JldHVybiBudWxsPT1lP1wiIT1cIj09PWI6Yj8oZSs9XCJcIixcIj1cIj09PWI/ZT09PWM6XCIhPVwiPT09Yj9lIT09YzpcIl49XCI9PT1iP2MmJjA9PT1lLmluZGV4T2YoYyk6XCIqPVwiPT09Yj9jJiZlLmluZGV4T2YoYyk+LTE6XCIkPVwiPT09Yj9jJiZlLnNsaWNlKC1jLmxlbmd0aCk9PT1jOlwifj1cIj09PWI/KFwiIFwiK2UucmVwbGFjZShRLFwiIFwiKStcIiBcIikuaW5kZXhPZihjKT4tMTpcInw9XCI9PT1iP2U9PT1jfHxlLnNsaWNlKDAsYy5sZW5ndGgrMSk9PT1jK1wiLVwiOiExKTohMH19LENISUxEOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJudGhcIiE9PWEuc2xpY2UoMCwzKSxnPVwibGFzdFwiIT09YS5zbGljZSgtNCksaD1cIm9mLXR5cGVcIj09PWI7cmV0dXJuIDE9PT1kJiYwPT09ZT9mdW5jdGlvbihhKXtyZXR1cm4hIWEucGFyZW50Tm9kZX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtLG4sbyxwPWYhPT1nP1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLHE9Yi5wYXJlbnROb2RlLHI9aCYmYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHM9IWkmJiFoO2lmKHEpe2lmKGYpe3doaWxlKHApe2w9Yjt3aGlsZShsPWxbcF0paWYoaD9sLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1sLm5vZGVUeXBlKXJldHVybiExO289cD1cIm9ubHlcIj09PWEmJiFvJiZcIm5leHRTaWJsaW5nXCJ9cmV0dXJuITB9aWYobz1bZz9xLmZpcnN0Q2hpbGQ6cS5sYXN0Q2hpbGRdLGcmJnMpe2s9cVt1XXx8KHFbdV09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSxtPWpbMF09PT13JiZqWzJdLGw9biYmcS5jaGlsZE5vZGVzW25dO3doaWxlKGw9KytuJiZsJiZsW3BdfHwobT1uPTApfHxvLnBvcCgpKWlmKDE9PT1sLm5vZGVUeXBlJiYrK20mJmw9PT1iKXtrW2FdPVt3LG4sbV07YnJlYWt9fWVsc2UgaWYocyYmKGo9KGJbdV18fChiW3VdPXt9KSlbYV0pJiZqWzBdPT09dyltPWpbMV07ZWxzZSB3aGlsZShsPSsrbiYmbCYmbFtwXXx8KG09bj0wKXx8by5wb3AoKSlpZigoaD9sLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1sLm5vZGVUeXBlKSYmKyttJiYocyYmKChsW3VdfHwobFt1XT17fSkpW2FdPVt3LG1dKSxsPT09YikpYnJlYWs7cmV0dXJuIG0tPWUsbT09PWR8fG0lZD09PTAmJm0vZD49MH19fSxQU0VVRE86ZnVuY3Rpb24oYSxiKXt2YXIgYyxlPWQucHNldWRvc1thXXx8ZC5zZXRGaWx0ZXJzW2EudG9Mb3dlckNhc2UoKV18fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIithKTtyZXR1cm4gZVt1XT9lKGIpOmUubGVuZ3RoPjE/KGM9W2EsYSxcIlwiLGJdLGQuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShhLnRvTG93ZXJDYXNlKCkpP2lhKGZ1bmN0aW9uKGEsYyl7dmFyIGQsZj1lKGEsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pZD1KKGEsZltnXSksYVtkXT0hKGNbZF09ZltnXSl9KTpmdW5jdGlvbihhKXtyZXR1cm4gZShhLDAsYyl9KTplfX0scHNldWRvczp7bm90OmlhKGZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9W10sZD1oKGEucmVwbGFjZShSLFwiJDFcIikpO3JldHVybiBkW3VdP2lhKGZ1bmN0aW9uKGEsYixjLGUpe3ZhciBmLGc9ZChhLG51bGwsZSxbXSksaD1hLmxlbmd0aDt3aGlsZShoLS0pKGY9Z1toXSkmJihhW2hdPSEoYltoXT1mKSl9KTpmdW5jdGlvbihhLGUsZil7cmV0dXJuIGJbMF09YSxkKGIsbnVsbCxmLGMpLGJbMF09bnVsbCwhYy5wb3AoKX19KSxoYXM6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBnYShhLGIpLmxlbmd0aD4wfX0pLGNvbnRhaW5zOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBhPWEucmVwbGFjZShjYSxkYSksZnVuY3Rpb24oYil7cmV0dXJuKGIudGV4dENvbnRlbnR8fGIuaW5uZXJUZXh0fHxlKGIpKS5pbmRleE9mKGEpPi0xfX0pLGxhbmc6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIFcudGVzdChhfHxcIlwiKXx8Z2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIithKSxhPWEucmVwbGFjZShjYSxkYSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihiKXt2YXIgYztkbyBpZihjPXA/Yi5sYW5nOmIuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIil8fGIuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlyZXR1cm4gYz1jLnRvTG93ZXJDYXNlKCksYz09PWF8fDA9PT1jLmluZGV4T2YoYStcIi1cIik7d2hpbGUoKGI9Yi5wYXJlbnROb2RlKSYmMT09PWIubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihiKXt2YXIgYz1hLmxvY2F0aW9uJiZhLmxvY2F0aW9uLmhhc2g7cmV0dXJuIGMmJmMuc2xpY2UoMSk9PT1iLmlkfSxyb290OmZ1bmN0aW9uKGEpe3JldHVybiBhPT09b30sZm9jdXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1uLmFjdGl2ZUVsZW1lbnQmJighbi5oYXNGb2N1c3x8bi5oYXNGb2N1cygpKSYmISEoYS50eXBlfHxhLmhyZWZ8fH5hLnRhYkluZGV4KX0sZW5hYmxlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSExfSxkaXNhYmxlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSEwfSxjaGVja2VkOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiYhIWEuY2hlY2tlZHx8XCJvcHRpb25cIj09PWImJiEhYS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucGFyZW50Tm9kZSYmYS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsYS5zZWxlY3RlZD09PSEwfSxlbXB0eTpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpaWYoYS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIWQucHNldWRvcy5lbXB0eShhKX0saGVhZGVyOmZ1bmN0aW9uKGEpe3JldHVybiBaLnRlc3QoYS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGEpe3JldHVybiBZLnRlc3QoYS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YiYmXCJidXR0b25cIj09PWEudHlwZXx8XCJidXR0b25cIj09PWJ9LHRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuXCJpbnB1dFwiPT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcInRleHRcIj09PWEudHlwZSYmKG51bGw9PShiPWEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSl8fFwidGV4dFwiPT09Yi50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6b2EoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0Om9hKGZ1bmN0aW9uKGEsYil7cmV0dXJuW2ItMV19KSxlcTpvYShmdW5jdGlvbihhLGIsYyl7cmV0dXJuWzA+Yz9jK2I6Y119KSxldmVuOm9hKGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7Yj5jO2MrPTIpYS5wdXNoKGMpO3JldHVybiBhfSksb2RkOm9hKGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTE7Yj5jO2MrPTIpYS5wdXNoKGMpO3JldHVybiBhfSksbHQ6b2EoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wPmM/YytiOmM7LS1kPj0wOylhLnB1c2goZCk7cmV0dXJuIGF9KSxndDpvYShmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA+Yz9jK2I6YzsrK2Q8YjspYS5wdXNoKGQpO3JldHVybiBhfSl9fSxkLnBzZXVkb3MubnRoPWQucHNldWRvcy5lcTtmb3IoYiBpbntyYWRpbzohMCxjaGVja2JveDohMCxmaWxlOiEwLHBhc3N3b3JkOiEwLGltYWdlOiEwfSlkLnBzZXVkb3NbYl09bWEoYik7Zm9yKGIgaW57c3VibWl0OiEwLHJlc2V0OiEwfSlkLnBzZXVkb3NbYl09bmEoYik7ZnVuY3Rpb24gcWEoKXt9cWEucHJvdG90eXBlPWQuZmlsdGVycz1kLnBzZXVkb3MsZC5zZXRGaWx0ZXJzPW5ldyBxYSxnPWdhLnRva2VuaXplPWZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmLGcsaCxpLGosaz16W2ErXCIgXCJdO2lmKGspcmV0dXJuIGI/MDprLnNsaWNlKDApO2g9YSxpPVtdLGo9ZC5wcmVGaWx0ZXI7d2hpbGUoaCl7KCFjfHwoZT1TLmV4ZWMoaCkpKSYmKGUmJihoPWguc2xpY2UoZVswXS5sZW5ndGgpfHxoKSxpLnB1c2goZj1bXSkpLGM9ITEsKGU9VC5leGVjKGgpKSYmKGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmVbMF0ucmVwbGFjZShSLFwiIFwiKX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2ZvcihnIGluIGQuZmlsdGVyKSEoZT1YW2ddLmV4ZWMoaCkpfHxqW2ddJiYhKGU9altnXShlKSl8fChjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTpnLG1hdGNoZXM6ZX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2lmKCFjKWJyZWFrfXJldHVybiBiP2gubGVuZ3RoOmg/Z2EuZXJyb3IoYSk6eihhLGkpLnNsaWNlKDApfTtmdW5jdGlvbiByYShhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoLGQ9XCJcIjtjPmI7YisrKWQrPWFbYl0udmFsdWU7cmV0dXJuIGR9ZnVuY3Rpb24gc2EoYSxiLGMpe3ZhciBkPWIuZGlyLGU9YyYmXCJwYXJlbnROb2RlXCI9PT1kLGY9eCsrO3JldHVybiBiLmZpcnN0P2Z1bmN0aW9uKGIsYyxmKXt3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGUpcmV0dXJuIGEoYixjLGYpfTpmdW5jdGlvbihiLGMsZyl7dmFyIGgsaSxqPVt3LGZdO2lmKGcpe3doaWxlKGI9YltkXSlpZigoMT09PWIubm9kZVR5cGV8fGUpJiZhKGIsYyxnKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZSl7aWYoaT1iW3VdfHwoYlt1XT17fSksKGg9aVtkXSkmJmhbMF09PT13JiZoWzFdPT09ZilyZXR1cm4galsyXT1oWzJdO2lmKGlbZF09aixqWzJdPWEoYixjLGcpKXJldHVybiEwfX19ZnVuY3Rpb24gdGEoYSl7cmV0dXJuIGEubGVuZ3RoPjE/ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWEubGVuZ3RoO3doaWxlKGUtLSlpZighYVtlXShiLGMsZCkpcmV0dXJuITE7cmV0dXJuITB9OmFbMF19ZnVuY3Rpb24gdWEoYSxiLGMpe2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZT5kO2QrKylnYShhLGJbZF0sYyk7cmV0dXJuIGN9ZnVuY3Rpb24gdmEoYSxiLGMsZCxlKXtmb3IodmFyIGYsZz1bXSxoPTAsaT1hLmxlbmd0aCxqPW51bGwhPWI7aT5oO2grKykoZj1hW2hdKSYmKCFjfHxjKGYsZCxlKSkmJihnLnB1c2goZiksaiYmYi5wdXNoKGgpKTtyZXR1cm4gZ31mdW5jdGlvbiB3YShhLGIsYyxkLGUsZil7cmV0dXJuIGQmJiFkW3VdJiYoZD13YShkKSksZSYmIWVbdV0mJihlPXdhKGUsZikpLGlhKGZ1bmN0aW9uKGYsZyxoLGkpe3ZhciBqLGssbCxtPVtdLG49W10sbz1nLmxlbmd0aCxwPWZ8fHVhKGJ8fFwiKlwiLGgubm9kZVR5cGU/W2hdOmgsW10pLHE9IWF8fCFmJiZiP3A6dmEocCxtLGEsaCxpKSxyPWM/ZXx8KGY/YTpvfHxkKT9bXTpnOnE7aWYoYyYmYyhxLHIsaCxpKSxkKXtqPXZhKHIsbiksZChqLFtdLGgsaSksaz1qLmxlbmd0aDt3aGlsZShrLS0pKGw9altrXSkmJihyW25ba11dPSEocVtuW2tdXT1sKSl9aWYoZil7aWYoZXx8YSl7aWYoZSl7aj1bXSxrPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmai5wdXNoKHFba109bCk7ZShudWxsLHI9W10saixpKX1rPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmKGo9ZT9KKGYsbCk6bVtrXSk+LTEmJihmW2pdPSEoZ1tqXT1sKSl9fWVsc2Ugcj12YShyPT09Zz9yLnNwbGljZShvLHIubGVuZ3RoKTpyKSxlP2UobnVsbCxnLHIsaSk6SC5hcHBseShnLHIpfSl9ZnVuY3Rpb24geGEoYSl7Zm9yKHZhciBiLGMsZSxmPWEubGVuZ3RoLGc9ZC5yZWxhdGl2ZVthWzBdLnR5cGVdLGg9Z3x8ZC5yZWxhdGl2ZVtcIiBcIl0saT1nPzE6MCxrPXNhKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0saCwhMCksbD1zYShmdW5jdGlvbihhKXtyZXR1cm4gSihiLGEpPi0xfSxoLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7dmFyIGU9IWcmJihkfHxjIT09ail8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSk7cmV0dXJuIGI9bnVsbCxlfV07Zj5pO2krKylpZihjPWQucmVsYXRpdmVbYVtpXS50eXBlXSltPVtzYSh0YShtKSxjKV07ZWxzZXtpZihjPWQuZmlsdGVyW2FbaV0udHlwZV0uYXBwbHkobnVsbCxhW2ldLm1hdGNoZXMpLGNbdV0pe2ZvcihlPSsraTtmPmU7ZSsrKWlmKGQucmVsYXRpdmVbYVtlXS50eXBlXSlicmVhaztyZXR1cm4gd2EoaT4xJiZ0YShtKSxpPjEmJnJhKGEuc2xpY2UoMCxpLTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1hW2ktMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoUixcIiQxXCIpLGMsZT5pJiZ4YShhLnNsaWNlKGksZSkpLGY+ZSYmeGEoYT1hLnNsaWNlKGUpKSxmPmUmJnJhKGEpKX1tLnB1c2goYyl9cmV0dXJuIHRhKG0pfWZ1bmN0aW9uIHlhKGEsYil7dmFyIGM9Yi5sZW5ndGg+MCxlPWEubGVuZ3RoPjAsZj1mdW5jdGlvbihmLGcsaCxpLGspe3ZhciBsLG0sbyxwPTAscT1cIjBcIixyPWYmJltdLHM9W10sdD1qLHU9Znx8ZSYmZC5maW5kLlRBRyhcIipcIixrKSx2PXcrPW51bGw9PXQ/MTpNYXRoLnJhbmRvbSgpfHwuMSx4PXUubGVuZ3RoO2ZvcihrJiYoaj1nIT09biYmZyk7cSE9PXgmJm51bGwhPShsPXVbcV0pO3ErKyl7aWYoZSYmbCl7bT0wO3doaWxlKG89YVttKytdKWlmKG8obCxnLGgpKXtpLnB1c2gobCk7YnJlYWt9ayYmKHc9dil9YyYmKChsPSFvJiZsKSYmcC0tLGYmJnIucHVzaChsKSl9aWYocCs9cSxjJiZxIT09cCl7bT0wO3doaWxlKG89YlttKytdKW8ocixzLGcsaCk7aWYoZil7aWYocD4wKXdoaWxlKHEtLSlyW3FdfHxzW3FdfHwoc1txXT1GLmNhbGwoaSkpO3M9dmEocyl9SC5hcHBseShpLHMpLGsmJiFmJiZzLmxlbmd0aD4wJiZwK2IubGVuZ3RoPjEmJmdhLnVuaXF1ZVNvcnQoaSl9cmV0dXJuIGsmJih3PXYsaj10KSxyfTtyZXR1cm4gYz9pYShmKTpmfXJldHVybiBoPWdhLmNvbXBpbGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9W10sZj1BW2ErXCIgXCJdO2lmKCFmKXtifHwoYj1nKGEpKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlmPXhhKGJbY10pLGZbdV0/ZC5wdXNoKGYpOmUucHVzaChmKTtmPUEoYSx5YShlLGQpKSxmLnNlbGVjdG9yPWF9cmV0dXJuIGZ9LGk9Z2Euc2VsZWN0PWZ1bmN0aW9uKGEsYixlLGYpe3ZhciBpLGosayxsLG0sbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiZhLG89IWYmJmcoYT1uLnNlbGVjdG9yfHxhKTtpZihlPWV8fFtdLDE9PT1vLmxlbmd0aCl7aWYoaj1vWzBdPW9bMF0uc2xpY2UoMCksai5sZW5ndGg+MiYmXCJJRFwiPT09KGs9alswXSkudHlwZSYmYy5nZXRCeUlkJiY5PT09Yi5ub2RlVHlwZSYmcCYmZC5yZWxhdGl2ZVtqWzFdLnR5cGVdKXtpZihiPShkLmZpbmQuSUQoay5tYXRjaGVzWzBdLnJlcGxhY2UoY2EsZGEpLGIpfHxbXSlbMF0sIWIpcmV0dXJuIGU7biYmKGI9Yi5wYXJlbnROb2RlKSxhPWEuc2xpY2Uoai5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9aT1YLm5lZWRzQ29udGV4dC50ZXN0KGEpPzA6ai5sZW5ndGg7d2hpbGUoaS0tKXtpZihrPWpbaV0sZC5yZWxhdGl2ZVtsPWsudHlwZV0pYnJlYWs7aWYoKG09ZC5maW5kW2xdKSYmKGY9bShrLm1hdGNoZXNbMF0ucmVwbGFjZShjYSxkYSksYWEudGVzdChqWzBdLnR5cGUpJiZwYShiLnBhcmVudE5vZGUpfHxiKSkpe2lmKGouc3BsaWNlKGksMSksYT1mLmxlbmd0aCYmcmEoaiksIWEpcmV0dXJuIEguYXBwbHkoZSxmKSxlO2JyZWFrfX19cmV0dXJuKG58fGgoYSxvKSkoZixiLCFwLGUsYWEudGVzdChhKSYmcGEoYi5wYXJlbnROb2RlKXx8YiksZX0sYy5zb3J0U3RhYmxlPXUuc3BsaXQoXCJcIikuc29ydChCKS5qb2luKFwiXCIpPT09dSxjLmRldGVjdER1cGxpY2F0ZXM9ISFsLG0oKSxjLnNvcnREZXRhY2hlZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gMSZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG4uY3JlYXRlRWxlbWVudChcImRpdlwiKSl9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxrYShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGM/dm9pZCAwOmEuZ2V0QXR0cmlidXRlKGIsXCJ0eXBlXCI9PT1iLnRvTG93ZXJDYXNlKCk/MToyKX0pLGMuYXR0cmlidXRlcyYmamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixhLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGthKFwidmFsdWVcIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGN8fFwiaW5wdXRcIiE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT92b2lkIDA6YS5kZWZhdWx0VmFsdWV9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxrYShLLGZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYz92b2lkIDA6YVtiXT09PSEwP2IudG9Mb3dlckNhc2UoKTooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZkLnNwZWNpZmllZD9kLnZhbHVlOm51bGx9KSxnYX0oYSk7bS5maW5kPXMsbS5leHByPXMuc2VsZWN0b3JzLG0uZXhwcltcIjpcIl09bS5leHByLnBzZXVkb3MsbS51bmlxdWU9cy51bmlxdWVTb3J0LG0udGV4dD1zLmdldFRleHQsbS5pc1hNTERvYz1zLmlzWE1MLG0uY29udGFpbnM9cy5jb250YWluczt2YXIgdD1tLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LHU9L148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvLHY9L14uW146I1xcW1xcLixdKiQvO2Z1bmN0aW9uIHcoYSxiLGMpe2lmKG0uaXNGdW5jdGlvbihiKSlyZXR1cm4gbS5ncmVwKGEsZnVuY3Rpb24oYSxkKXtyZXR1cm4hIWIuY2FsbChhLGQsYSkhPT1jfSk7aWYoYi5ub2RlVHlwZSlyZXR1cm4gbS5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1iIT09Y30pO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiKXtpZih2LnRlc3QoYikpcmV0dXJuIG0uZmlsdGVyKGIsYSxjKTtiPW0uZmlsdGVyKGIsYSl9cmV0dXJuIG0uZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBtLmluQXJyYXkoYSxiKT49MCE9PWN9KX1tLmZpbHRlcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YlswXTtyZXR1cm4gYyYmKGE9XCI6bm90KFwiK2ErXCIpXCIpLDE9PT1iLmxlbmd0aCYmMT09PWQubm9kZVR5cGU/bS5maW5kLm1hdGNoZXNTZWxlY3RvcihkLGEpP1tkXTpbXTptLmZpbmQubWF0Y2hlcyhhLG0uZ3JlcChiLGZ1bmN0aW9uKGEpe3JldHVybiAxPT09YS5ub2RlVHlwZX0pKX0sbS5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oYSl7dmFyIGIsYz1bXSxkPXRoaXMsZT1kLmxlbmd0aDtpZihcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gdGhpcy5wdXNoU3RhY2sobShhKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IoYj0wO2U+YjtiKyspaWYobS5jb250YWlucyhkW2JdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihiPTA7ZT5iO2IrKyltLmZpbmQoYSxkW2JdLGMpO3JldHVybiBjPXRoaXMucHVzaFN0YWNrKGU+MT9tLnVuaXF1ZShjKTpjKSxjLnNlbGVjdG9yPXRoaXMuc2VsZWN0b3I/dGhpcy5zZWxlY3RvcitcIiBcIithOmEsY30sZmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayh3KHRoaXMsYXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayh3KHRoaXMsYXx8W10sITApKX0saXM6ZnVuY3Rpb24oYSl7cmV0dXJuISF3KHRoaXMsXCJzdHJpbmdcIj09dHlwZW9mIGEmJnQudGVzdChhKT9tKGEpOmF8fFtdLCExKS5sZW5ndGh9fSk7dmFyIHgseT1hLmRvY3VtZW50LHo9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sQT1tLmZuLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkO2lmKCFhKXJldHVybiB0aGlzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXtpZihjPVwiPFwiPT09YS5jaGFyQXQoMCkmJlwiPlwiPT09YS5jaGFyQXQoYS5sZW5ndGgtMSkmJmEubGVuZ3RoPj0zP1tudWxsLGEsbnVsbF06ei5leGVjKGEpLCFjfHwhY1sxXSYmYilyZXR1cm4hYnx8Yi5qcXVlcnk/KGJ8fHgpLmZpbmQoYSk6dGhpcy5jb25zdHJ1Y3RvcihiKS5maW5kKGEpO2lmKGNbMV0pe2lmKGI9YiBpbnN0YW5jZW9mIG0/YlswXTpiLG0ubWVyZ2UodGhpcyxtLnBhcnNlSFRNTChjWzFdLGImJmIubm9kZVR5cGU/Yi5vd25lckRvY3VtZW50fHxiOnksITApKSx1LnRlc3QoY1sxXSkmJm0uaXNQbGFpbk9iamVjdChiKSlmb3IoYyBpbiBiKW0uaXNGdW5jdGlvbih0aGlzW2NdKT90aGlzW2NdKGJbY10pOnRoaXMuYXR0cihjLGJbY10pO3JldHVybiB0aGlzfWlmKGQ9eS5nZXRFbGVtZW50QnlJZChjWzJdKSxkJiZkLnBhcmVudE5vZGUpe2lmKGQuaWQhPT1jWzJdKXJldHVybiB4LmZpbmQoYSk7dGhpcy5sZW5ndGg9MSx0aGlzWzBdPWR9cmV0dXJuIHRoaXMuY29udGV4dD15LHRoaXMuc2VsZWN0b3I9YSx0aGlzfXJldHVybiBhLm5vZGVUeXBlPyh0aGlzLmNvbnRleHQ9dGhpc1swXT1hLHRoaXMubGVuZ3RoPTEsdGhpcyk6bS5pc0Z1bmN0aW9uKGEpP1widW5kZWZpbmVkXCIhPXR5cGVvZiB4LnJlYWR5P3gucmVhZHkoYSk6YShtKToodm9pZCAwIT09YS5zZWxlY3RvciYmKHRoaXMuc2VsZWN0b3I9YS5zZWxlY3Rvcix0aGlzLmNvbnRleHQ9YS5jb250ZXh0KSxtLm1ha2VBcnJheShhLHRoaXMpKX07QS5wcm90b3R5cGU9bS5mbix4PW0oeSk7dmFyIEI9L14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sQz17Y2hpbGRyZW46ITAsY29udGVudHM6ITAsbmV4dDohMCxwcmV2OiEwfTttLmV4dGVuZCh7ZGlyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1bXSxlPWFbYl07d2hpbGUoZSYmOSE9PWUubm9kZVR5cGUmJih2b2lkIDA9PT1jfHwxIT09ZS5ub2RlVHlwZXx8IW0oZSkuaXMoYykpKTE9PT1lLm5vZGVUeXBlJiZkLnB1c2goZSksZT1lW2JdO3JldHVybiBkfSxzaWJsaW5nOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPVtdO2E7YT1hLm5leHRTaWJsaW5nKTE9PT1hLm5vZGVUeXBlJiZhIT09YiYmYy5wdXNoKGEpO3JldHVybiBjfX0pLG0uZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oYSl7dmFyIGIsYz1tKGEsdGhpcyksZD1jLmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IoYj0wO2Q+YjtiKyspaWYobS5jb250YWlucyh0aGlzLGNbYl0pKXJldHVybiEwfSl9LGNsb3Nlc3Q6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMsZD0wLGU9dGhpcy5sZW5ndGgsZj1bXSxnPXQudGVzdChhKXx8XCJzdHJpbmdcIiE9dHlwZW9mIGE/bShhLGJ8fHRoaXMuY29udGV4dCk6MDtlPmQ7ZCsrKWZvcihjPXRoaXNbZF07YyYmYyE9PWI7Yz1jLnBhcmVudE5vZGUpaWYoYy5ub2RlVHlwZTwxMSYmKGc/Zy5pbmRleChjKT4tMToxPT09Yy5ub2RlVHlwZSYmbS5maW5kLm1hdGNoZXNTZWxlY3RvcihjLGEpKSl7Zi5wdXNoKGMpO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjayhmLmxlbmd0aD4xP20udW5pcXVlKGYpOmYpfSxpbmRleDpmdW5jdGlvbihhKXtyZXR1cm4gYT9cInN0cmluZ1wiPT10eXBlb2YgYT9tLmluQXJyYXkodGhpc1swXSxtKGEpKTptLmluQXJyYXkoYS5qcXVlcnk/YVswXTphLHRoaXMpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG0udW5pcXVlKG0ubWVyZ2UodGhpcy5nZXQoKSxtKGEsYikpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWE/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoYSkpfX0pO2Z1bmN0aW9uIEQoYSxiKXtkbyBhPWFbYl07d2hpbGUoYSYmMSE9PWEubm9kZVR5cGUpO3JldHVybiBhfW0uZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmMTEhPT1iLm5vZGVUeXBlP2I6bnVsbH0scGFyZW50czpmdW5jdGlvbihhKXtyZXR1cm4gbS5kaXIoYSxcInBhcmVudE5vZGVcIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG0uZGlyKGEsXCJwYXJlbnROb2RlXCIsYyl9LG5leHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIEQoYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGEpe3JldHVybiBEKGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIG0uZGlyKGEsXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihhKXtyZXR1cm4gbS5kaXIoYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbS5kaXIoYSxcIm5leHRTaWJsaW5nXCIsYyl9LHByZXZVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG0uZGlyKGEsXCJwcmV2aW91c1NpYmxpbmdcIixjKX0sc2libGluZ3M6ZnVuY3Rpb24oYSl7cmV0dXJuIG0uc2libGluZygoYS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxhKX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7cmV0dXJuIG0uc2libGluZyhhLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihhKXtyZXR1cm4gbS5ub2RlTmFtZShhLFwiaWZyYW1lXCIpP2EuY29udGVudERvY3VtZW50fHxhLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ6bS5tZXJnZShbXSxhLmNoaWxkTm9kZXMpfX0sZnVuY3Rpb24oYSxiKXttLmZuW2FdPWZ1bmN0aW9uKGMsZCl7dmFyIGU9bS5tYXAodGhpcyxiLGMpO3JldHVyblwiVW50aWxcIiE9PWEuc2xpY2UoLTUpJiYoZD1jKSxkJiZcInN0cmluZ1wiPT10eXBlb2YgZCYmKGU9bS5maWx0ZXIoZCxlKSksdGhpcy5sZW5ndGg+MSYmKENbYV18fChlPW0udW5pcXVlKGUpKSxCLnRlc3QoYSkmJihlPWUucmV2ZXJzZSgpKSksdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIEU9L1xcUysvZyxGPXt9O2Z1bmN0aW9uIEcoYSl7dmFyIGI9RlthXT17fTtyZXR1cm4gbS5lYWNoKGEubWF0Y2goRSl8fFtdLGZ1bmN0aW9uKGEsYyl7YltjXT0hMH0pLGJ9bS5DYWxsYmFja3M9ZnVuY3Rpb24oYSl7YT1cInN0cmluZ1wiPT10eXBlb2YgYT9GW2FdfHxHKGEpOm0uZXh0ZW5kKHt9LGEpO3ZhciBiLGMsZCxlLGYsZyxoPVtdLGk9IWEub25jZSYmW10saj1mdW5jdGlvbihsKXtmb3IoYz1hLm1lbW9yeSYmbCxkPSEwLGY9Z3x8MCxnPTAsZT1oLmxlbmd0aCxiPSEwO2gmJmU+ZjtmKyspaWYoaFtmXS5hcHBseShsWzBdLGxbMV0pPT09ITEmJmEuc3RvcE9uRmFsc2Upe2M9ITE7YnJlYWt9Yj0hMSxoJiYoaT9pLmxlbmd0aCYmaihpLnNoaWZ0KCkpOmM/aD1bXTprLmRpc2FibGUoKSl9LGs9e2FkZDpmdW5jdGlvbigpe2lmKGgpe3ZhciBkPWgubGVuZ3RoOyFmdW5jdGlvbiBmKGIpe20uZWFjaChiLGZ1bmN0aW9uKGIsYyl7dmFyIGQ9bS50eXBlKGMpO1wiZnVuY3Rpb25cIj09PWQ/YS51bmlxdWUmJmsuaGFzKGMpfHxoLnB1c2goYyk6YyYmYy5sZW5ndGgmJlwic3RyaW5nXCIhPT1kJiZmKGMpfSl9KGFyZ3VtZW50cyksYj9lPWgubGVuZ3RoOmMmJihnPWQsaihjKSl9cmV0dXJuIHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiBoJiZtLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGEsYyl7dmFyIGQ7d2hpbGUoKGQ9bS5pbkFycmF5KGMsaCxkKSk+LTEpaC5zcGxpY2UoZCwxKSxiJiYoZT49ZCYmZS0tLGY+PWQmJmYtLSl9KSx0aGlzfSxoYXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/bS5pbkFycmF5KGEsaCk+LTE6ISghaHx8IWgubGVuZ3RoKX0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gaD1bXSxlPTAsdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBoPWk9Yz12b2lkIDAsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4haH0sbG9jazpmdW5jdGlvbigpe3JldHVybiBpPXZvaWQgMCxjfHxrLmRpc2FibGUoKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4haX0sZmlyZVdpdGg6ZnVuY3Rpb24oYSxjKXtyZXR1cm4haHx8ZCYmIWl8fChjPWN8fFtdLGM9W2EsYy5zbGljZT9jLnNsaWNlKCk6Y10sYj9pLnB1c2goYyk6aihjKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBrLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhZH19O3JldHVybiBrfSxtLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9W1tcInJlc29sdmVcIixcImRvbmVcIixtLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFwicmVzb2x2ZWRcIl0sW1wicmVqZWN0XCIsXCJmYWlsXCIsbS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcInJlamVjdGVkXCJdLFtcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixtLkNhbGxiYWNrcyhcIm1lbW9yeVwiKV1dLGM9XCJwZW5kaW5nXCIsZD17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gY30sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIGUuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSx0aGVuOmZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzO3JldHVybiBtLkRlZmVycmVkKGZ1bmN0aW9uKGMpe20uZWFjaChiLGZ1bmN0aW9uKGIsZil7dmFyIGc9bS5pc0Z1bmN0aW9uKGFbYl0pJiZhW2JdO2VbZlsxXV0oZnVuY3Rpb24oKXt2YXIgYT1nJiZnLmFwcGx5KHRoaXMsYXJndW1lbnRzKTthJiZtLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9hLnByb21pc2UoKS5kb25lKGMucmVzb2x2ZSkuZmFpbChjLnJlamVjdCkucHJvZ3Jlc3MoYy5ub3RpZnkpOmNbZlswXStcIldpdGhcIl0odGhpcz09PWQ/Yy5wcm9taXNlKCk6dGhpcyxnP1thXTphcmd1bWVudHMpfSl9KSxhPW51bGx9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWE/bS5leHRlbmQoYSxkKTpkfX0sZT17fTtyZXR1cm4gZC5waXBlPWQudGhlbixtLmVhY2goYixmdW5jdGlvbihhLGYpe3ZhciBnPWZbMl0saD1mWzNdO2RbZlsxXV09Zy5hZGQsaCYmZy5hZGQoZnVuY3Rpb24oKXtjPWh9LGJbMV5hXVsyXS5kaXNhYmxlLGJbMl1bMl0ubG9jayksZVtmWzBdXT1mdW5jdGlvbigpe3JldHVybiBlW2ZbMF0rXCJXaXRoXCJdKHRoaXM9PT1lP2Q6dGhpcyxhcmd1bWVudHMpLHRoaXN9LGVbZlswXStcIldpdGhcIl09Zy5maXJlV2l0aH0pLGQucHJvbWlzZShlKSxhJiZhLmNhbGwoZSxlKSxlfSx3aGVuOmZ1bmN0aW9uKGEpe3ZhciBiPTAsYz1kLmNhbGwoYXJndW1lbnRzKSxlPWMubGVuZ3RoLGY9MSE9PWV8fGEmJm0uaXNGdW5jdGlvbihhLnByb21pc2UpP2U6MCxnPTE9PT1mP2E6bS5EZWZlcnJlZCgpLGg9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmdW5jdGlvbihlKXtiW2FdPXRoaXMsY1thXT1hcmd1bWVudHMubGVuZ3RoPjE/ZC5jYWxsKGFyZ3VtZW50cyk6ZSxjPT09aT9nLm5vdGlmeVdpdGgoYixjKTotLWZ8fGcucmVzb2x2ZVdpdGgoYixjKX19LGksaixrO2lmKGU+MSlmb3IoaT1uZXcgQXJyYXkoZSksaj1uZXcgQXJyYXkoZSksaz1uZXcgQXJyYXkoZSk7ZT5iO2IrKyljW2JdJiZtLmlzRnVuY3Rpb24oY1tiXS5wcm9taXNlKT9jW2JdLnByb21pc2UoKS5kb25lKGgoYixrLGMpKS5mYWlsKGcucmVqZWN0KS5wcm9ncmVzcyhoKGIsaixpKSk6LS1mO3JldHVybiBmfHxnLnJlc29sdmVXaXRoKGssYyksZy5wcm9taXNlKCl9fSk7dmFyIEg7bS5mbi5yZWFkeT1mdW5jdGlvbihhKXtyZXR1cm4gbS5yZWFkeS5wcm9taXNlKCkuZG9uZShhKSx0aGlzfSxtLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxob2xkUmVhZHk6ZnVuY3Rpb24oYSl7YT9tLnJlYWR5V2FpdCsrOm0ucmVhZHkoITApfSxyZWFkeTpmdW5jdGlvbihhKXtpZihhPT09ITA/IS0tbS5yZWFkeVdhaXQ6IW0uaXNSZWFkeSl7aWYoIXkuYm9keSlyZXR1cm4gc2V0VGltZW91dChtLnJlYWR5KTttLmlzUmVhZHk9ITAsYSE9PSEwJiYtLW0ucmVhZHlXYWl0PjB8fChILnJlc29sdmVXaXRoKHksW21dKSxtLmZuLnRyaWdnZXJIYW5kbGVyJiYobSh5KS50cmlnZ2VySGFuZGxlcihcInJlYWR5XCIpLG0oeSkub2ZmKFwicmVhZHlcIikpKX19fSk7ZnVuY3Rpb24gSSgpe3kuYWRkRXZlbnRMaXN0ZW5lcj8oeS5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLEosITEpLGEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixKLCExKSk6KHkuZGV0YWNoRXZlbnQoXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIixKKSxhLmRldGFjaEV2ZW50KFwib25sb2FkXCIsSikpfWZ1bmN0aW9uIEooKXsoeS5hZGRFdmVudExpc3RlbmVyfHxcImxvYWRcIj09PWV2ZW50LnR5cGV8fFwiY29tcGxldGVcIj09PXkucmVhZHlTdGF0ZSkmJihJKCksbS5yZWFkeSgpKX1tLnJlYWR5LnByb21pc2U9ZnVuY3Rpb24oYil7aWYoIUgpaWYoSD1tLkRlZmVycmVkKCksXCJjb21wbGV0ZVwiPT09eS5yZWFkeVN0YXRlKXNldFRpbWVvdXQobS5yZWFkeSk7ZWxzZSBpZih5LmFkZEV2ZW50TGlzdGVuZXIpeS5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLEosITEpLGEuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixKLCExKTtlbHNle3kuYXR0YWNoRXZlbnQoXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIixKKSxhLmF0dGFjaEV2ZW50KFwib25sb2FkXCIsSik7dmFyIGM9ITE7dHJ5e2M9bnVsbD09YS5mcmFtZUVsZW1lbnQmJnkuZG9jdW1lbnRFbGVtZW50fWNhdGNoKGQpe31jJiZjLmRvU2Nyb2xsJiYhZnVuY3Rpb24gZSgpe2lmKCFtLmlzUmVhZHkpe3RyeXtjLmRvU2Nyb2xsKFwibGVmdFwiKX1jYXRjaChhKXtyZXR1cm4gc2V0VGltZW91dChlLDUwKX1JKCksbS5yZWFkeSgpfX0oKX1yZXR1cm4gSC5wcm9taXNlKGIpfTt2YXIgSz1cInVuZGVmaW5lZFwiLEw7Zm9yKEwgaW4gbShrKSlicmVhaztrLm93bkxhc3Q9XCIwXCIhPT1MLGsuaW5saW5lQmxvY2tOZWVkc0xheW91dD0hMSxtKGZ1bmN0aW9uKCl7dmFyIGEsYixjLGQ7Yz15LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXSxjJiZjLnN0eWxlJiYoYj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZD15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZC5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIixjLmFwcGVuZENoaWxkKGQpLmFwcGVuZENoaWxkKGIpLHR5cGVvZiBiLnN0eWxlLnpvb20hPT1LJiYoYi5zdHlsZS5jc3NUZXh0PVwiZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiLGsuaW5saW5lQmxvY2tOZWVkc0xheW91dD1hPTM9PT1iLm9mZnNldFdpZHRoLGEmJihjLnN0eWxlLnpvb209MSkpLGMucmVtb3ZlQ2hpbGQoZCkpfSksZnVuY3Rpb24oKXt2YXIgYT15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWYobnVsbD09ay5kZWxldGVFeHBhbmRvKXtrLmRlbGV0ZUV4cGFuZG89ITA7dHJ5e2RlbGV0ZSBhLnRlc3R9Y2F0Y2goYil7ay5kZWxldGVFeHBhbmRvPSExfX1hPW51bGx9KCksbS5hY2NlcHREYXRhPWZ1bmN0aW9uKGEpe3ZhciBiPW0ubm9EYXRhWyhhLm5vZGVOYW1lK1wiIFwiKS50b0xvd2VyQ2FzZSgpXSxjPSthLm5vZGVUeXBlfHwxO3JldHVybiAxIT09YyYmOSE9PWM/ITE6IWJ8fGIhPT0hMCYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc2lkXCIpPT09Yn07dmFyIE09L14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLE49LyhbQS1aXSkvZztmdW5jdGlvbiBPKGEsYixjKXtpZih2b2lkIDA9PT1jJiYxPT09YS5ub2RlVHlwZSl7dmFyIGQ9XCJkYXRhLVwiK2IucmVwbGFjZShOLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCk7aWYoYz1hLmdldEF0dHJpYnV0ZShkKSxcInN0cmluZ1wiPT10eXBlb2YgYyl7dHJ5e2M9XCJ0cnVlXCI9PT1jPyEwOlwiZmFsc2VcIj09PWM/ITE6XCJudWxsXCI9PT1jP251bGw6K2MrXCJcIj09PWM/K2M6TS50ZXN0KGMpP20ucGFyc2VKU09OKGMpOmN9Y2F0Y2goZSl7fW0uZGF0YShhLGIsYyl9ZWxzZSBjPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBQKGEpe3ZhciBiO2ZvcihiIGluIGEpaWYoKFwiZGF0YVwiIT09Ynx8IW0uaXNFbXB0eU9iamVjdChhW2JdKSkmJlwidG9KU09OXCIhPT1iKXJldHVybiExO1xuXG5yZXR1cm4hMH1mdW5jdGlvbiBRKGEsYixkLGUpe2lmKG0uYWNjZXB0RGF0YShhKSl7dmFyIGYsZyxoPW0uZXhwYW5kbyxpPWEubm9kZVR5cGUsaj1pP20uY2FjaGU6YSxrPWk/YVtoXTphW2hdJiZoO2lmKGsmJmpba10mJihlfHxqW2tdLmRhdGEpfHx2b2lkIDAhPT1kfHxcInN0cmluZ1wiIT10eXBlb2YgYilyZXR1cm4ga3x8KGs9aT9hW2hdPWMucG9wKCl8fG0uZ3VpZCsrOmgpLGpba118fChqW2tdPWk/e306e3RvSlNPTjptLm5vb3B9KSwoXCJvYmplY3RcIj09dHlwZW9mIGJ8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGIpJiYoZT9qW2tdPW0uZXh0ZW5kKGpba10sYik6altrXS5kYXRhPW0uZXh0ZW5kKGpba10uZGF0YSxiKSksZz1qW2tdLGV8fChnLmRhdGF8fChnLmRhdGE9e30pLGc9Zy5kYXRhKSx2b2lkIDAhPT1kJiYoZ1ttLmNhbWVsQ2FzZShiKV09ZCksXCJzdHJpbmdcIj09dHlwZW9mIGI/KGY9Z1tiXSxudWxsPT1mJiYoZj1nW20uY2FtZWxDYXNlKGIpXSkpOmY9ZyxmfX1mdW5jdGlvbiBSKGEsYixjKXtpZihtLmFjY2VwdERhdGEoYSkpe3ZhciBkLGUsZj1hLm5vZGVUeXBlLGc9Zj9tLmNhY2hlOmEsaD1mP2FbbS5leHBhbmRvXTptLmV4cGFuZG87aWYoZ1toXSl7aWYoYiYmKGQ9Yz9nW2hdOmdbaF0uZGF0YSkpe20uaXNBcnJheShiKT9iPWIuY29uY2F0KG0ubWFwKGIsbS5jYW1lbENhc2UpKTpiIGluIGQ/Yj1bYl06KGI9bS5jYW1lbENhc2UoYiksYj1iIGluIGQ/W2JdOmIuc3BsaXQoXCIgXCIpKSxlPWIubGVuZ3RoO3doaWxlKGUtLSlkZWxldGUgZFtiW2VdXTtpZihjPyFQKGQpOiFtLmlzRW1wdHlPYmplY3QoZCkpcmV0dXJufShjfHwoZGVsZXRlIGdbaF0uZGF0YSxQKGdbaF0pKSkmJihmP20uY2xlYW5EYXRhKFthXSwhMCk6ay5kZWxldGVFeHBhbmRvfHxnIT1nLndpbmRvdz9kZWxldGUgZ1toXTpnW2hdPW51bGwpfX19bS5leHRlbmQoe2NhY2hlOnt9LG5vRGF0YTp7XCJhcHBsZXQgXCI6ITAsXCJlbWJlZCBcIjohMCxcIm9iamVjdCBcIjpcImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwifSxoYXNEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiBhPWEubm9kZVR5cGU/bS5jYWNoZVthW20uZXhwYW5kb11dOmFbbS5leHBhbmRvXSwhIWEmJiFQKGEpfSxkYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUShhLGIsYyl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUihhLGIpfSxfZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFEoYSxiLGMsITApfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe3JldHVybiBSKGEsYiwhMCl9fSksbS5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj10aGlzWzBdLGc9ZiYmZi5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PWEpe2lmKHRoaXMubGVuZ3RoJiYoZT1tLmRhdGEoZiksMT09PWYubm9kZVR5cGUmJiFtLl9kYXRhKGYsXCJwYXJzZWRBdHRyc1wiKSkpe2M9Zy5sZW5ndGg7d2hpbGUoYy0tKWdbY10mJihkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKFwiZGF0YS1cIikmJihkPW0uY2FtZWxDYXNlKGQuc2xpY2UoNSkpLE8oZixkLGVbZF0pKSk7bS5fZGF0YShmLFwicGFyc2VkQXR0cnNcIiwhMCl9cmV0dXJuIGV9cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGE/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5kYXRhKHRoaXMsYSl9KTphcmd1bWVudHMubGVuZ3RoPjE/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5kYXRhKHRoaXMsYSxiKX0pOmY/TyhmLGEsbS5kYXRhKGYsYSkpOnZvaWQgMH0scmVtb3ZlRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5yZW1vdmVEYXRhKHRoaXMsYSl9KX19KSxtLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBhPyhiPShifHxcImZ4XCIpK1wicXVldWVcIixkPW0uX2RhdGEoYSxiKSxjJiYoIWR8fG0uaXNBcnJheShjKT9kPW0uX2RhdGEoYSxiLG0ubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdKTp2b2lkIDB9LGRlcXVldWU6ZnVuY3Rpb24oYSxiKXtiPWJ8fFwiZnhcIjt2YXIgYz1tLnF1ZXVlKGEsYiksZD1jLmxlbmd0aCxlPWMuc2hpZnQoKSxmPW0uX3F1ZXVlSG9va3MoYSxiKSxnPWZ1bmN0aW9uKCl7bS5kZXF1ZXVlKGEsYil9O1wiaW5wcm9ncmVzc1wiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKFwiZnhcIj09PWImJmMudW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIGYuc3RvcCxlLmNhbGwoYSxnLGYpKSwhZCYmZiYmZi5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YitcInF1ZXVlSG9va3NcIjtyZXR1cm4gbS5fZGF0YShhLGMpfHxtLl9kYXRhKGEsYyx7ZW1wdHk6bS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXttLl9yZW1vdmVEYXRhKGEsYitcInF1ZXVlXCIpLG0uX3JlbW92ZURhdGEoYSxjKX0pfSl9fSksbS5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPVwiZnhcIixjLS0pLGFyZ3VtZW50cy5sZW5ndGg8Yz9tLnF1ZXVlKHRoaXNbMF0sYSk6dm9pZCAwPT09Yj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjPW0ucXVldWUodGhpcyxhLGIpO20uX3F1ZXVlSG9va3ModGhpcyxhKSxcImZ4XCI9PT1hJiZcImlucHJvZ3Jlc3NcIiE9PWNbMF0mJm0uZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20uZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MSxlPW0uRGVmZXJyZWQoKSxmPXRoaXMsZz10aGlzLmxlbmd0aCxoPWZ1bmN0aW9uKCl7LS1kfHxlLnJlc29sdmVXaXRoKGYsW2ZdKX07XCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGE9YXx8XCJmeFwiO3doaWxlKGctLSljPW0uX2RhdGEoZltnXSxhK1wicXVldWVIb29rc1wiKSxjJiZjLmVtcHR5JiYoZCsrLGMuZW1wdHkuYWRkKGgpKTtyZXR1cm4gaCgpLGUucHJvbWlzZShiKX19KTt2YXIgUz0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsVD1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sVT1mdW5jdGlvbihhLGIpe3JldHVybiBhPWJ8fGEsXCJub25lXCI9PT1tLmNzcyhhLFwiZGlzcGxheVwiKXx8IW0uY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpfSxWPW0uYWNjZXNzPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoXCJvYmplY3RcIj09PW0udHlwZShjKSl7ZT0hMDtmb3IoaCBpbiBjKW0uYWNjZXNzKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLG0uaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChtKGEpLGMpfSkpLGIpKWZvcig7aT5oO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9LFc9L14oPzpjaGVja2JveHxyYWRpbykkL2k7IWZ1bmN0aW9uKCl7dmFyIGE9eS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYz15LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihiLmlubmVySFRNTD1cIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiLGsubGVhZGluZ1doaXRlc3BhY2U9Mz09PWIuZmlyc3RDaGlsZC5ub2RlVHlwZSxrLnRib2R5PSFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIikubGVuZ3RoLGsuaHRtbFNlcmlhbGl6ZT0hIWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpLmxlbmd0aCxrLmh0bWw1Q2xvbmU9XCI8Om5hdj48LzpuYXY+XCIhPT15LmNyZWF0ZUVsZW1lbnQoXCJuYXZcIikuY2xvbmVOb2RlKCEwKS5vdXRlckhUTUwsYS50eXBlPVwiY2hlY2tib3hcIixhLmNoZWNrZWQ9ITAsYy5hcHBlbmRDaGlsZChhKSxrLmFwcGVuZENoZWNrZWQ9YS5jaGVja2VkLGIuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLGsubm9DbG9uZUNoZWNrZWQ9ISFiLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZSxjLmFwcGVuZENoaWxkKGIpLGIuaW5uZXJIVE1MPVwiPGlucHV0IHR5cGU9J3JhZGlvJyBjaGVja2VkPSdjaGVja2VkJyBuYW1lPSd0Jy8+XCIsay5jaGVja0Nsb25lPWIuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLGsubm9DbG9uZUV2ZW50PSEwLGIuYXR0YWNoRXZlbnQmJihiLmF0dGFjaEV2ZW50KFwib25jbGlja1wiLGZ1bmN0aW9uKCl7ay5ub0Nsb25lRXZlbnQ9ITF9KSxiLmNsb25lTm9kZSghMCkuY2xpY2soKSksbnVsbD09ay5kZWxldGVFeHBhbmRvKXtrLmRlbGV0ZUV4cGFuZG89ITA7dHJ5e2RlbGV0ZSBiLnRlc3R9Y2F0Y2goZCl7ay5kZWxldGVFeHBhbmRvPSExfX19KCksZnVuY3Rpb24oKXt2YXIgYixjLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihiIGlue3N1Ym1pdDohMCxjaGFuZ2U6ITAsZm9jdXNpbjohMH0pYz1cIm9uXCIrYiwoa1tiK1wiQnViYmxlc1wiXT1jIGluIGEpfHwoZC5zZXRBdHRyaWJ1dGUoYyxcInRcIiksa1tiK1wiQnViYmxlc1wiXT1kLmF0dHJpYnV0ZXNbY10uZXhwYW5kbz09PSExKTtkPW51bGx9KCk7dmFyIFg9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLFk9L15rZXkvLFo9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51KXxjbGljay8sJD0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXz0vXihbXi5dKikoPzpcXC4oLispfCkkLztmdW5jdGlvbiBhYSgpe3JldHVybiEwfWZ1bmN0aW9uIGJhKCl7cmV0dXJuITF9ZnVuY3Rpb24gY2EoKXt0cnl7cmV0dXJuIHkuYWN0aXZlRWxlbWVudH1jYXRjaChhKXt9fW0uZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxuLG8scCxxLHI9bS5fZGF0YShhKTtpZihyKXtjLmhhbmRsZXImJihpPWMsYz1pLmhhbmRsZXIsZT1pLnNlbGVjdG9yKSxjLmd1aWR8fChjLmd1aWQ9bS5ndWlkKyspLChnPXIuZXZlbnRzKXx8KGc9ci5ldmVudHM9e30pLChrPXIuaGFuZGxlKXx8KGs9ci5oYW5kbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHR5cGVvZiBtPT09S3x8YSYmbS5ldmVudC50cmlnZ2VyZWQ9PT1hLnR5cGU/dm9pZCAwOm0uZXZlbnQuZGlzcGF0Y2guYXBwbHkoay5lbGVtLGFyZ3VtZW50cyl9LGsuZWxlbT1hKSxiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGg9Yi5sZW5ndGg7d2hpbGUoaC0tKWY9Xy5leGVjKGJbaF0pfHxbXSxvPXE9ZlsxXSxwPShmWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8mJihqPW0uZXZlbnQuc3BlY2lhbFtvXXx8e30sbz0oZT9qLmRlbGVnYXRlVHlwZTpqLmJpbmRUeXBlKXx8byxqPW0uZXZlbnQuc3BlY2lhbFtvXXx8e30sbD1tLmV4dGVuZCh7dHlwZTpvLG9yaWdUeXBlOnEsZGF0YTpkLGhhbmRsZXI6YyxndWlkOmMuZ3VpZCxzZWxlY3RvcjplLG5lZWRzQ29udGV4dDplJiZtLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoZSksbmFtZXNwYWNlOnAuam9pbihcIi5cIil9LGkpLChuPWdbb10pfHwobj1nW29dPVtdLG4uZGVsZWdhdGVDb3VudD0wLGouc2V0dXAmJmouc2V0dXAuY2FsbChhLGQscCxrKSE9PSExfHwoYS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihvLGssITEpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvblwiK28saykpKSxqLmFkZCYmKGouYWRkLmNhbGwoYSxsKSxsLmhhbmRsZXIuZ3VpZHx8KGwuaGFuZGxlci5ndWlkPWMuZ3VpZCkpLGU/bi5zcGxpY2Uobi5kZWxlZ2F0ZUNvdW50KyssMCxsKTpuLnB1c2gobCksbS5ldmVudC5nbG9iYWxbb109ITApO2E9bnVsbH19LHJlbW92ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGcsaCxpLGosayxsLG4sbyxwLHEscj1tLmhhc0RhdGEoYSkmJm0uX2RhdGEoYSk7aWYociYmKGs9ci5ldmVudHMpKXtiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9Xy5leGVjKGJbal0pfHxbXSxvPXE9aFsxXSxwPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8pe2w9bS5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxvLG49a1tvXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksaT1mPW4ubGVuZ3RoO3doaWxlKGYtLSlnPW5bZl0sIWUmJnEhPT1nLm9yaWdUeXBlfHxjJiZjLmd1aWQhPT1nLmd1aWR8fGgmJiFoLnRlc3QoZy5uYW1lc3BhY2UpfHxkJiZkIT09Zy5zZWxlY3RvciYmKFwiKipcIiE9PWR8fCFnLnNlbGVjdG9yKXx8KG4uc3BsaWNlKGYsMSksZy5zZWxlY3RvciYmbi5kZWxlZ2F0ZUNvdW50LS0sbC5yZW1vdmUmJmwucmVtb3ZlLmNhbGwoYSxnKSk7aSYmIW4ubGVuZ3RoJiYobC50ZWFyZG93biYmbC50ZWFyZG93bi5jYWxsKGEscCxyLmhhbmRsZSkhPT0hMXx8bS5yZW1vdmVFdmVudChhLG8sci5oYW5kbGUpLGRlbGV0ZSBrW29dKX1lbHNlIGZvcihvIGluIGspbS5ldmVudC5yZW1vdmUoYSxvK2Jbal0sYyxkLCEwKTttLmlzRW1wdHlPYmplY3QoaykmJihkZWxldGUgci5oYW5kbGUsbS5fcmVtb3ZlRGF0YShhLFwiZXZlbnRzXCIpKX19LHRyaWdnZXI6ZnVuY3Rpb24oYixjLGQsZSl7dmFyIGYsZyxoLGksayxsLG4sbz1bZHx8eV0scD1qLmNhbGwoYixcInR5cGVcIik/Yi50eXBlOmIscT1qLmNhbGwoYixcIm5hbWVzcGFjZVwiKT9iLm5hbWVzcGFjZS5zcGxpdChcIi5cIik6W107aWYoaD1sPWQ9ZHx8eSwzIT09ZC5ub2RlVHlwZSYmOCE9PWQubm9kZVR5cGUmJiEkLnRlc3QocCttLmV2ZW50LnRyaWdnZXJlZCkmJihwLmluZGV4T2YoXCIuXCIpPj0wJiYocT1wLnNwbGl0KFwiLlwiKSxwPXEuc2hpZnQoKSxxLnNvcnQoKSksZz1wLmluZGV4T2YoXCI6XCIpPDAmJlwib25cIitwLGI9YlttLmV4cGFuZG9dP2I6bmV3IG0uRXZlbnQocCxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksYi5pc1RyaWdnZXI9ZT8yOjMsYi5uYW1lc3BhY2U9cS5qb2luKFwiLlwiKSxiLm5hbWVzcGFjZV9yZT1iLm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcS5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCxiLnJlc3VsdD12b2lkIDAsYi50YXJnZXR8fChiLnRhcmdldD1kKSxjPW51bGw9PWM/W2JdOm0ubWFrZUFycmF5KGMsW2JdKSxrPW0uZXZlbnQuc3BlY2lhbFtwXXx8e30sZXx8IWsudHJpZ2dlcnx8ay50cmlnZ2VyLmFwcGx5KGQsYykhPT0hMSkpe2lmKCFlJiYhay5ub0J1YmJsZSYmIW0uaXNXaW5kb3coZCkpe2ZvcihpPWsuZGVsZWdhdGVUeXBlfHxwLCQudGVzdChpK3ApfHwoaD1oLnBhcmVudE5vZGUpO2g7aD1oLnBhcmVudE5vZGUpby5wdXNoKGgpLGw9aDtsPT09KGQub3duZXJEb2N1bWVudHx8eSkmJm8ucHVzaChsLmRlZmF1bHRWaWV3fHxsLnBhcmVudFdpbmRvd3x8YSl9bj0wO3doaWxlKChoPW9bbisrXSkmJiFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYi50eXBlPW4+MT9pOmsuYmluZFR5cGV8fHAsZj0obS5fZGF0YShoLFwiZXZlbnRzXCIpfHx7fSlbYi50eXBlXSYmbS5fZGF0YShoLFwiaGFuZGxlXCIpLGYmJmYuYXBwbHkoaCxjKSxmPWcmJmhbZ10sZiYmZi5hcHBseSYmbS5hY2NlcHREYXRhKGgpJiYoYi5yZXN1bHQ9Zi5hcHBseShoLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7aWYoYi50eXBlPXAsIWUmJiFiLmlzRGVmYXVsdFByZXZlbnRlZCgpJiYoIWsuX2RlZmF1bHR8fGsuX2RlZmF1bHQuYXBwbHkoby5wb3AoKSxjKT09PSExKSYmbS5hY2NlcHREYXRhKGQpJiZnJiZkW3BdJiYhbS5pc1dpbmRvdyhkKSl7bD1kW2ddLGwmJihkW2ddPW51bGwpLG0uZXZlbnQudHJpZ2dlcmVkPXA7dHJ5e2RbcF0oKX1jYXRjaChyKXt9bS5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGwmJihkW2ddPWwpfXJldHVybiBiLnJlc3VsdH19LGRpc3BhdGNoOmZ1bmN0aW9uKGEpe2E9bS5ldmVudC5maXgoYSk7dmFyIGIsYyxlLGYsZyxoPVtdLGk9ZC5jYWxsKGFyZ3VtZW50cyksaj0obS5fZGF0YSh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbYS50eXBlXXx8W10saz1tLmV2ZW50LnNwZWNpYWxbYS50eXBlXXx8e307aWYoaVswXT1hLGEuZGVsZWdhdGVUYXJnZXQ9dGhpcywhay5wcmVEaXNwYXRjaHx8ay5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsYSkhPT0hMSl7aD1tLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxhLGopLGI9MDt3aGlsZSgoZj1oW2IrK10pJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXthLmN1cnJlbnRUYXJnZXQ9Zi5lbGVtLGc9MDt3aGlsZSgoZT1mLmhhbmRsZXJzW2crK10pJiYhYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSghYS5uYW1lc3BhY2VfcmV8fGEubmFtZXNwYWNlX3JlLnRlc3QoZS5uYW1lc3BhY2UpKSYmKGEuaGFuZGxlT2JqPWUsYS5kYXRhPWUuZGF0YSxjPSgobS5ldmVudC5zcGVjaWFsW2Uub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxlLmhhbmRsZXIpLmFwcGx5KGYuZWxlbSxpKSx2b2lkIDAhPT1jJiYoYS5yZXN1bHQ9Yyk9PT0hMSYmKGEucHJldmVudERlZmF1bHQoKSxhLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGsucG9zdERpc3BhdGNoJiZrLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsYSksYS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGc9W10saD1iLmRlbGVnYXRlQ291bnQsaT1hLnRhcmdldDtpZihoJiZpLm5vZGVUeXBlJiYoIWEuYnV0dG9ufHxcImNsaWNrXCIhPT1hLnR5cGUpKWZvcig7aSE9dGhpcztpPWkucGFyZW50Tm9kZXx8dGhpcylpZigxPT09aS5ub2RlVHlwZSYmKGkuZGlzYWJsZWQhPT0hMHx8XCJjbGlja1wiIT09YS50eXBlKSl7Zm9yKGU9W10sZj0wO2g+ZjtmKyspZD1iW2ZdLGM9ZC5zZWxlY3RvcitcIiBcIix2b2lkIDA9PT1lW2NdJiYoZVtjXT1kLm5lZWRzQ29udGV4dD9tKGMsdGhpcykuaW5kZXgoaSk+PTA6bS5maW5kKGMsdGhpcyxudWxsLFtpXSkubGVuZ3RoKSxlW2NdJiZlLnB1c2goZCk7ZS5sZW5ndGgmJmcucHVzaCh7ZWxlbTppLGhhbmRsZXJzOmV9KX1yZXR1cm4gaDxiLmxlbmd0aCYmZy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6Yi5zbGljZShoKX0pLGd9LGZpeDpmdW5jdGlvbihhKXtpZihhW20uZXhwYW5kb10pcmV0dXJuIGE7dmFyIGIsYyxkLGU9YS50eXBlLGY9YSxnPXRoaXMuZml4SG9va3NbZV07Z3x8KHRoaXMuZml4SG9va3NbZV09Zz1aLnRlc3QoZSk/dGhpcy5tb3VzZUhvb2tzOlkudGVzdChlKT90aGlzLmtleUhvb2tzOnt9KSxkPWcucHJvcHM/dGhpcy5wcm9wcy5jb25jYXQoZy5wcm9wcyk6dGhpcy5wcm9wcyxhPW5ldyBtLkV2ZW50KGYpLGI9ZC5sZW5ndGg7d2hpbGUoYi0tKWM9ZFtiXSxhW2NdPWZbY107cmV0dXJuIGEudGFyZ2V0fHwoYS50YXJnZXQ9Zi5zcmNFbGVtZW50fHx5KSwzPT09YS50YXJnZXQubm9kZVR5cGUmJihhLnRhcmdldD1hLnRhcmdldC5wYXJlbnROb2RlKSxhLm1ldGFLZXk9ISFhLm1ldGFLZXksZy5maWx0ZXI/Zy5maWx0ZXIoYSxmKTphfSxwcm9wczpcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxmaXhIb29rczp7fSxrZXlIb29rczp7cHJvcHM6XCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLGZpbHRlcjpmdW5jdGlvbihhLGIpe3JldHVybiBudWxsPT1hLndoaWNoJiYoYS53aGljaD1udWxsIT1iLmNoYXJDb2RlP2IuY2hhckNvZGU6Yi5rZXlDb2RlKSxhfX0sbW91c2VIb29rczp7cHJvcHM6XCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgZnJvbUVsZW1lbnQgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksZmlsdGVyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9Yi5idXR0b24sZz1iLmZyb21FbGVtZW50O3JldHVybiBudWxsPT1hLnBhZ2VYJiZudWxsIT1iLmNsaWVudFgmJihkPWEudGFyZ2V0Lm93bmVyRG9jdW1lbnR8fHksZT1kLmRvY3VtZW50RWxlbWVudCxjPWQuYm9keSxhLnBhZ2VYPWIuY2xpZW50WCsoZSYmZS5zY3JvbGxMZWZ0fHxjJiZjLnNjcm9sbExlZnR8fDApLShlJiZlLmNsaWVudExlZnR8fGMmJmMuY2xpZW50TGVmdHx8MCksYS5wYWdlWT1iLmNsaWVudFkrKGUmJmUuc2Nyb2xsVG9wfHxjJiZjLnNjcm9sbFRvcHx8MCktKGUmJmUuY2xpZW50VG9wfHxjJiZjLmNsaWVudFRvcHx8MCkpLCFhLnJlbGF0ZWRUYXJnZXQmJmcmJihhLnJlbGF0ZWRUYXJnZXQ9Zz09PWEudGFyZ2V0P2IudG9FbGVtZW50OmcpLGEud2hpY2h8fHZvaWQgMD09PWZ8fChhLndoaWNoPTEmZj8xOjImZj8zOjQmZj8yOjApLGF9fSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09Y2EoKSYmdGhpcy5mb2N1cyl0cnl7cmV0dXJuIHRoaXMuZm9jdXMoKSwhMX1jYXRjaChhKXt9fSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c2luXCJ9LGJsdXI6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcz09PWNhKCkmJnRoaXMuYmx1cj8odGhpcy5ibHVyKCksITEpOnZvaWQgMH0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbS5ub2RlTmFtZSh0aGlzLFwiaW5wdXRcIikmJlwiY2hlY2tib3hcIj09PXRoaXMudHlwZSYmdGhpcy5jbGljaz8odGhpcy5jbGljaygpLCExKTp2b2lkIDB9LF9kZWZhdWx0OmZ1bmN0aW9uKGEpe3JldHVybiBtLm5vZGVOYW1lKGEudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEucmVzdWx0JiZhLm9yaWdpbmFsRXZlbnQmJihhLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9YS5yZXN1bHQpfX19LHNpbXVsYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW0uZXh0ZW5kKG5ldyBtLkV2ZW50LGMse3R5cGU6YSxpc1NpbXVsYXRlZDohMCxvcmlnaW5hbEV2ZW50Ont9fSk7ZD9tLmV2ZW50LnRyaWdnZXIoZSxudWxsLGIpOm0uZXZlbnQuZGlzcGF0Y2guY2FsbChiLGUpLGUuaXNEZWZhdWx0UHJldmVudGVkKCkmJmMucHJldmVudERlZmF1bHQoKX19LG0ucmVtb3ZlRXZlbnQ9eS5yZW1vdmVFdmVudExpc3RlbmVyP2Z1bmN0aW9uKGEsYixjKXthLnJlbW92ZUV2ZW50TGlzdGVuZXImJmEucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMsITEpfTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9XCJvblwiK2I7YS5kZXRhY2hFdmVudCYmKHR5cGVvZiBhW2RdPT09SyYmKGFbZF09bnVsbCksYS5kZXRhY2hFdmVudChkLGMpKX0sbS5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgbS5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/YWE6YmEpOnRoaXMudHlwZT1hLGImJm0uZXh0ZW5kKHRoaXMsYiksdGhpcy50aW1lU3RhbXA9YSYmYS50aW1lU3RhbXB8fG0ubm93KCksdm9pZCh0aGlzW20uZXhwYW5kb109ITApKTpuZXcgbS5FdmVudChhLGIpfSxtLkV2ZW50LnByb3RvdHlwZT17aXNEZWZhdWx0UHJldmVudGVkOmJhLGlzUHJvcGFnYXRpb25TdG9wcGVkOmJhLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOmJhLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPWFhLGEmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTphLnJldHVyblZhbHVlPSExKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YWEsYSYmKGEuc3RvcFByb3BhZ2F0aW9uJiZhLnN0b3BQcm9wYWdhdGlvbigpLGEuY2FuY2VsQnViYmxlPSEwKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9YWEsYSYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24mJmEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LG0uZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihhLGIpe20uZXZlbnQuc3BlY2lhbFthXT17ZGVsZWdhdGVUeXBlOmIsYmluZFR5cGU6YixoYW5kbGU6ZnVuY3Rpb24oYSl7dmFyIGMsZD10aGlzLGU9YS5yZWxhdGVkVGFyZ2V0LGY9YS5oYW5kbGVPYmo7cmV0dXJuKCFlfHxlIT09ZCYmIW0uY29udGFpbnMoZCxlKSkmJihhLnR5cGU9Zi5vcmlnVHlwZSxjPWYuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksYS50eXBlPWIpLGN9fX0pLGsuc3VibWl0QnViYmxlc3x8KG0uZXZlbnQuc3BlY2lhbC5zdWJtaXQ9e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIG0ubm9kZU5hbWUodGhpcyxcImZvcm1cIik/ITE6dm9pZCBtLmV2ZW50LmFkZCh0aGlzLFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQsYz1tLm5vZGVOYW1lKGIsXCJpbnB1dFwiKXx8bS5ub2RlTmFtZShiLFwiYnV0dG9uXCIpP2IuZm9ybTp2b2lkIDA7YyYmIW0uX2RhdGEoYyxcInN1Ym1pdEJ1YmJsZXNcIikmJihtLmV2ZW50LmFkZChjLFwic3VibWl0Ll9zdWJtaXRcIixmdW5jdGlvbihhKXthLl9zdWJtaXRfYnViYmxlPSEwfSksbS5fZGF0YShjLFwic3VibWl0QnViYmxlc1wiLCEwKSl9KX0scG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe2EuX3N1Ym1pdF9idWJibGUmJihkZWxldGUgYS5fc3VibWl0X2J1YmJsZSx0aGlzLnBhcmVudE5vZGUmJiFhLmlzVHJpZ2dlciYmbS5ldmVudC5zaW11bGF0ZShcInN1Ym1pdFwiLHRoaXMucGFyZW50Tm9kZSxhLCEwKSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIG0ubm9kZU5hbWUodGhpcyxcImZvcm1cIik/ITE6dm9pZCBtLmV2ZW50LnJlbW92ZSh0aGlzLFwiLl9zdWJtaXRcIil9fSksay5jaGFuZ2VCdWJibGVzfHwobS5ldmVudC5zcGVjaWFsLmNoYW5nZT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gWC50ZXN0KHRoaXMubm9kZU5hbWUpPygoXCJjaGVja2JveFwiPT09dGhpcy50eXBlfHxcInJhZGlvXCI9PT10aGlzLnR5cGUpJiYobS5ldmVudC5hZGQodGhpcyxcInByb3BlcnR5Y2hhbmdlLl9jaGFuZ2VcIixmdW5jdGlvbihhKXtcImNoZWNrZWRcIj09PWEub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUmJih0aGlzLl9qdXN0X2NoYW5nZWQ9ITApfSksbS5ldmVudC5hZGQodGhpcyxcImNsaWNrLl9jaGFuZ2VcIixmdW5jdGlvbihhKXt0aGlzLl9qdXN0X2NoYW5nZWQmJiFhLmlzVHJpZ2dlciYmKHRoaXMuX2p1c3RfY2hhbmdlZD0hMSksbS5ldmVudC5zaW11bGF0ZShcImNoYW5nZVwiLHRoaXMsYSwhMCl9KSksITEpOnZvaWQgbS5ldmVudC5hZGQodGhpcyxcImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2VcIixmdW5jdGlvbihhKXt2YXIgYj1hLnRhcmdldDtYLnRlc3QoYi5ub2RlTmFtZSkmJiFtLl9kYXRhKGIsXCJjaGFuZ2VCdWJibGVzXCIpJiYobS5ldmVudC5hZGQoYixcImNoYW5nZS5fY2hhbmdlXCIsZnVuY3Rpb24oYSl7IXRoaXMucGFyZW50Tm9kZXx8YS5pc1NpbXVsYXRlZHx8YS5pc1RyaWdnZXJ8fG0uZXZlbnQuc2ltdWxhdGUoXCJjaGFuZ2VcIix0aGlzLnBhcmVudE5vZGUsYSwhMCl9KSxtLl9kYXRhKGIsXCJjaGFuZ2VCdWJibGVzXCIsITApKX0pfSxoYW5kbGU6ZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQ7cmV0dXJuIHRoaXMhPT1ifHxhLmlzU2ltdWxhdGVkfHxhLmlzVHJpZ2dlcnx8XCJyYWRpb1wiIT09Yi50eXBlJiZcImNoZWNrYm94XCIhPT1iLnR5cGU/YS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dm9pZCAwfSx0ZWFyZG93bjpmdW5jdGlvbigpe3JldHVybiBtLmV2ZW50LnJlbW92ZSh0aGlzLFwiLl9jaGFuZ2VcIiksIVgudGVzdCh0aGlzLm5vZGVOYW1lKX19KSxrLmZvY3VzaW5CdWJibGVzfHxtLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe20uZXZlbnQuc2ltdWxhdGUoYixhLnRhcmdldCxtLmV2ZW50LmZpeChhKSwhMCl9O20uZXZlbnQuc3BlY2lhbFtiXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1tLl9kYXRhKGQsYik7ZXx8ZC5hZGRFdmVudExpc3RlbmVyKGEsYywhMCksbS5fZGF0YShkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPW0uX2RhdGEoZCxiKS0xO2U/bS5fZGF0YShkLGIsZSk6KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMsITApLG0uX3JlbW92ZURhdGEoZCxiKSl9fX0pLG0uZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGc7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1jfHxiLGI9dm9pZCAwKTtmb3IoZiBpbiBhKXRoaXMub24oZixiLGMsYVtmXSxlKTtyZXR1cm4gdGhpc31pZihudWxsPT1jJiZudWxsPT1kPyhkPWIsYz1iPXZvaWQgMCk6bnVsbD09ZCYmKFwic3RyaW5nXCI9PXR5cGVvZiBiPyhkPWMsYz12b2lkIDApOihkPWMsYz1iLGI9dm9pZCAwKSksZD09PSExKWQ9YmE7ZWxzZSBpZighZClyZXR1cm4gdGhpcztyZXR1cm4gMT09PWUmJihnPWQsZD1mdW5jdGlvbihhKXtyZXR1cm4gbSgpLm9mZihhKSxnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZC5ndWlkPWcuZ3VpZHx8KGcuZ3VpZD1tLmd1aWQrKykpLHRoaXMuZWFjaChmdW5jdGlvbigpe20uZXZlbnQuYWRkKHRoaXMsYSxkLGMsYil9KX0sb25lOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLm9uKGEsYixjLGQsMSl9LG9mZjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZTtpZihhJiZhLnByZXZlbnREZWZhdWx0JiZhLmhhbmRsZU9iailyZXR1cm4gZD1hLmhhbmRsZU9iaixtKGEuZGVsZWdhdGVUYXJnZXQpLm9mZihkLm5hbWVzcGFjZT9kLm9yaWdUeXBlK1wiLlwiK2QubmFtZXNwYWNlOmQub3JpZ1R5cGUsZC5zZWxlY3RvcixkLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe2ZvcihlIGluIGEpdGhpcy5vZmYoZSxiLGFbZV0pO3JldHVybiB0aGlzfXJldHVybihiPT09ITF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGIpJiYoYz1iLGI9dm9pZCAwKSxjPT09ITEmJihjPWJhKSx0aGlzLmVhY2goZnVuY3Rpb24oKXttLmV2ZW50LnJlbW92ZSh0aGlzLGEsYyxiKX0pfSx0cmlnZ2VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20uZXZlbnQudHJpZ2dlcihhLGIsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzWzBdO3JldHVybiBjP20uZXZlbnQudHJpZ2dlcihhLGIsYywhMCk6dm9pZCAwfX0pO2Z1bmN0aW9uIGRhKGEpe3ZhciBiPWVhLnNwbGl0KFwifFwiKSxjPWEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2lmKGMuY3JlYXRlRWxlbWVudCl3aGlsZShiLmxlbmd0aCljLmNyZWF0ZUVsZW1lbnQoYi5wb3AoKSk7cmV0dXJuIGN9dmFyIGVhPVwiYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxkZXRhaWxzfGZpZ2NhcHRpb258ZmlndXJlfGZvb3RlcnxoZWFkZXJ8aGdyb3VwfG1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwcm9ncmVzc3xzZWN0aW9ufHN1bW1hcnl8dGltZXx2aWRlb1wiLGZhPS8galF1ZXJ5XFxkKz1cIig/Om51bGx8XFxkKylcIi9nLGdhPW5ldyBSZWdFeHAoXCI8KD86XCIrZWErXCIpW1xcXFxzLz5dXCIsXCJpXCIpLGhhPS9eXFxzKy8saWE9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLGphPS88KFtcXHc6XSspLyxrYT0vPHRib2R5L2ksbGE9Lzx8JiM/XFx3KzsvLG1hPS88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksbmE9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxvYT0vXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLHBhPS9edHJ1ZVxcLyguKikvLHFhPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxyYT17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLGxlZ2VuZDpbMSxcIjxmaWVsZHNldD5cIixcIjwvZmllbGRzZXQ+XCJdLGFyZWE6WzEsXCI8bWFwPlwiLFwiPC9tYXA+XCJdLHBhcmFtOlsxLFwiPG9iamVjdD5cIixcIjwvb2JqZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDprLmh0bWxTZXJpYWxpemU/WzAsXCJcIixcIlwiXTpbMSxcIlg8ZGl2PlwiLFwiPC9kaXY+XCJdfSxzYT1kYSh5KSx0YT1zYS5hcHBlbmRDaGlsZCh5LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO3JhLm9wdGdyb3VwPXJhLm9wdGlvbixyYS50Ym9keT1yYS50Zm9vdD1yYS5jb2xncm91cD1yYS5jYXB0aW9uPXJhLnRoZWFkLHJhLnRoPXJhLnRkO2Z1bmN0aW9uIHVhKGEsYil7dmFyIGMsZCxlPTAsZj10eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZSE9PUs/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHxcIipcIik6dHlwZW9mIGEucXVlcnlTZWxlY3RvckFsbCE9PUs/YS5xdWVyeVNlbGVjdG9yQWxsKGJ8fFwiKlwiKTp2b2lkIDA7aWYoIWYpZm9yKGY9W10sYz1hLmNoaWxkTm9kZXN8fGE7bnVsbCE9KGQ9Y1tlXSk7ZSsrKSFifHxtLm5vZGVOYW1lKGQsYik/Zi5wdXNoKGQpOm0ubWVyZ2UoZix1YShkLGIpKTtyZXR1cm4gdm9pZCAwPT09Ynx8YiYmbS5ub2RlTmFtZShhLGIpP20ubWVyZ2UoW2FdLGYpOmZ9ZnVuY3Rpb24gdmEoYSl7Vy50ZXN0KGEudHlwZSkmJihhLmRlZmF1bHRDaGVja2VkPWEuY2hlY2tlZCl9ZnVuY3Rpb24gd2EoYSxiKXtyZXR1cm4gbS5ub2RlTmFtZShhLFwidGFibGVcIikmJm0ubm9kZU5hbWUoMTEhPT1iLm5vZGVUeXBlP2I6Yi5maXJzdENoaWxkLFwidHJcIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdfHxhLmFwcGVuZENoaWxkKGEub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikpOmF9ZnVuY3Rpb24geGEoYSl7cmV0dXJuIGEudHlwZT0obnVsbCE9PW0uZmluZC5hdHRyKGEsXCJ0eXBlXCIpKStcIi9cIithLnR5cGUsYX1mdW5jdGlvbiB5YShhKXt2YXIgYj1wYS5leGVjKGEudHlwZSk7cmV0dXJuIGI/YS50eXBlPWJbMV06YS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGF9ZnVuY3Rpb24gemEoYSxiKXtmb3IodmFyIGMsZD0wO251bGwhPShjPWFbZF0pO2QrKyltLl9kYXRhKGMsXCJnbG9iYWxFdmFsXCIsIWJ8fG0uX2RhdGEoYltkXSxcImdsb2JhbEV2YWxcIikpfWZ1bmN0aW9uIEFhKGEsYil7aWYoMT09PWIubm9kZVR5cGUmJm0uaGFzRGF0YShhKSl7dmFyIGMsZCxlLGY9bS5fZGF0YShhKSxnPW0uX2RhdGEoYixmKSxoPWYuZXZlbnRzO2lmKGgpe2RlbGV0ZSBnLmhhbmRsZSxnLmV2ZW50cz17fTtmb3IoYyBpbiBoKWZvcihkPTAsZT1oW2NdLmxlbmd0aDtlPmQ7ZCsrKW0uZXZlbnQuYWRkKGIsYyxoW2NdW2RdKX1nLmRhdGEmJihnLmRhdGE9bS5leHRlbmQoe30sZy5kYXRhKSl9fWZ1bmN0aW9uIEJhKGEsYil7dmFyIGMsZCxlO2lmKDE9PT1iLm5vZGVUeXBlKXtpZihjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwhay5ub0Nsb25lRXZlbnQmJmJbbS5leHBhbmRvXSl7ZT1tLl9kYXRhKGIpO2ZvcihkIGluIGUuZXZlbnRzKW0ucmVtb3ZlRXZlbnQoYixkLGUuaGFuZGxlKTtiLnJlbW92ZUF0dHJpYnV0ZShtLmV4cGFuZG8pfVwic2NyaXB0XCI9PT1jJiZiLnRleHQhPT1hLnRleHQ/KHhhKGIpLnRleHQ9YS50ZXh0LHlhKGIpKTpcIm9iamVjdFwiPT09Yz8oYi5wYXJlbnROb2RlJiYoYi5vdXRlckhUTUw9YS5vdXRlckhUTUwpLGsuaHRtbDVDbG9uZSYmYS5pbm5lckhUTUwmJiFtLnRyaW0oYi5pbm5lckhUTUwpJiYoYi5pbm5lckhUTUw9YS5pbm5lckhUTUwpKTpcImlucHV0XCI9PT1jJiZXLnRlc3QoYS50eXBlKT8oYi5kZWZhdWx0Q2hlY2tlZD1iLmNoZWNrZWQ9YS5jaGVja2VkLGIudmFsdWUhPT1hLnZhbHVlJiYoYi52YWx1ZT1hLnZhbHVlKSk6XCJvcHRpb25cIj09PWM/Yi5kZWZhdWx0U2VsZWN0ZWQ9Yi5zZWxlY3RlZD1hLmRlZmF1bHRTZWxlY3RlZDooXCJpbnB1dFwiPT09Y3x8XCJ0ZXh0YXJlYVwiPT09YykmJihiLmRlZmF1bHRWYWx1ZT1hLmRlZmF1bHRWYWx1ZSl9fW0uZXh0ZW5kKHtjbG9uZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpPW0uY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpO2lmKGsuaHRtbDVDbG9uZXx8bS5pc1hNTERvYyhhKXx8IWdhLnRlc3QoXCI8XCIrYS5ub2RlTmFtZStcIj5cIik/Zj1hLmNsb25lTm9kZSghMCk6KHRhLmlubmVySFRNTD1hLm91dGVySFRNTCx0YS5yZW1vdmVDaGlsZChmPXRhLmZpcnN0Q2hpbGQpKSwhKGsubm9DbG9uZUV2ZW50JiZrLm5vQ2xvbmVDaGVja2VkfHwxIT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlfHxtLmlzWE1MRG9jKGEpKSlmb3IoZD11YShmKSxoPXVhKGEpLGc9MDtudWxsIT0oZT1oW2ddKTsrK2cpZFtnXSYmQmEoZSxkW2ddKTtpZihiKWlmKGMpZm9yKGg9aHx8dWEoYSksZD1kfHx1YShmKSxnPTA7bnVsbCE9KGU9aFtnXSk7ZysrKUFhKGUsZFtnXSk7ZWxzZSBBYShhLGYpO3JldHVybiBkPXVhKGYsXCJzY3JpcHRcIiksZC5sZW5ndGg+MCYmemEoZCwhaSYmdWEoYSxcInNjcmlwdFwiKSksZD1oPWU9bnVsbCxmfSxidWlsZEZyYWdtZW50OmZ1bmN0aW9uKGEsYixjLGQpe2Zvcih2YXIgZSxmLGcsaCxpLGosbCxuPWEubGVuZ3RoLG89ZGEoYikscD1bXSxxPTA7bj5xO3ErKylpZihmPWFbcV0sZnx8MD09PWYpaWYoXCJvYmplY3RcIj09PW0udHlwZShmKSltLm1lcmdlKHAsZi5ub2RlVHlwZT9bZl06Zik7ZWxzZSBpZihsYS50ZXN0KGYpKXtoPWh8fG8uYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxpPShqYS5leGVjKGYpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSxsPXJhW2ldfHxyYS5fZGVmYXVsdCxoLmlubmVySFRNTD1sWzFdK2YucmVwbGFjZShpYSxcIjwkMT48LyQyPlwiKStsWzJdLGU9bFswXTt3aGlsZShlLS0paD1oLmxhc3RDaGlsZDtpZighay5sZWFkaW5nV2hpdGVzcGFjZSYmaGEudGVzdChmKSYmcC5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoaGEuZXhlYyhmKVswXSkpLCFrLnRib2R5KXtmPVwidGFibGVcIiE9PWl8fGthLnRlc3QoZik/XCI8dGFibGU+XCIhPT1sWzFdfHxrYS50ZXN0KGYpPzA6aDpoLmZpcnN0Q2hpbGQsZT1mJiZmLmNoaWxkTm9kZXMubGVuZ3RoO3doaWxlKGUtLSltLm5vZGVOYW1lKGo9Zi5jaGlsZE5vZGVzW2VdLFwidGJvZHlcIikmJiFqLmNoaWxkTm9kZXMubGVuZ3RoJiZmLnJlbW92ZUNoaWxkKGopfW0ubWVyZ2UocCxoLmNoaWxkTm9kZXMpLGgudGV4dENvbnRlbnQ9XCJcIjt3aGlsZShoLmZpcnN0Q2hpbGQpaC5yZW1vdmVDaGlsZChoLmZpcnN0Q2hpbGQpO2g9by5sYXN0Q2hpbGR9ZWxzZSBwLnB1c2goYi5jcmVhdGVUZXh0Tm9kZShmKSk7aCYmby5yZW1vdmVDaGlsZChoKSxrLmFwcGVuZENoZWNrZWR8fG0uZ3JlcCh1YShwLFwiaW5wdXRcIiksdmEpLHE9MDt3aGlsZShmPXBbcSsrXSlpZigoIWR8fC0xPT09bS5pbkFycmF5KGYsZCkpJiYoZz1tLmNvbnRhaW5zKGYub3duZXJEb2N1bWVudCxmKSxoPXVhKG8uYXBwZW5kQ2hpbGQoZiksXCJzY3JpcHRcIiksZyYmemEoaCksYykpe2U9MDt3aGlsZShmPWhbZSsrXSlvYS50ZXN0KGYudHlwZXx8XCJcIikmJmMucHVzaChmKX1yZXR1cm4gaD1udWxsLG99LGNsZWFuRGF0YTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZCxlLGYsZyxoPTAsaT1tLmV4cGFuZG8saj1tLmNhY2hlLGw9ay5kZWxldGVFeHBhbmRvLG49bS5ldmVudC5zcGVjaWFsO251bGwhPShkPWFbaF0pO2grKylpZigoYnx8bS5hY2NlcHREYXRhKGQpKSYmKGY9ZFtpXSxnPWYmJmpbZl0pKXtpZihnLmV2ZW50cylmb3IoZSBpbiBnLmV2ZW50cyluW2VdP20uZXZlbnQucmVtb3ZlKGQsZSk6bS5yZW1vdmVFdmVudChkLGUsZy5oYW5kbGUpO2pbZl0mJihkZWxldGUgaltmXSxsP2RlbGV0ZSBkW2ldOnR5cGVvZiBkLnJlbW92ZUF0dHJpYnV0ZSE9PUs/ZC5yZW1vdmVBdHRyaWJ1dGUoaSk6ZFtpXT1udWxsLGMucHVzaChmKSl9fX0pLG0uZm4uZXh0ZW5kKHt0ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBWKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWE/bS50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5hcHBlbmQoKHRoaXNbMF0mJnRoaXNbMF0ub3duZXJEb2N1bWVudHx8eSkuY3JlYXRlVGV4dE5vZGUoYSkpfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9d2EodGhpcyxhKTtiLmFwcGVuZENoaWxkKGEpfX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj13YSh0aGlzLGEpO2IuaW5zZXJ0QmVmb3JlKGEsYi5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMubmV4dFNpYmxpbmcpfSl9LHJlbW92ZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYyxkPWE/bS5maWx0ZXIoYSx0aGlzKTp0aGlzLGU9MDtudWxsIT0oYz1kW2VdKTtlKyspYnx8MSE9PWMubm9kZVR5cGV8fG0uY2xlYW5EYXRhKHVhKGMpKSxjLnBhcmVudE5vZGUmJihiJiZtLmNvbnRhaW5zKGMub3duZXJEb2N1bWVudCxjKSYmemEodWEoYyxcInNjcmlwdFwiKSksYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpKTtyZXR1cm4gdGhpc30sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wO251bGwhPShhPXRoaXNbYl0pO2IrKyl7MT09PWEubm9kZVR5cGUmJm0uY2xlYW5EYXRhKHVhKGEsITEpKTt3aGlsZShhLmZpcnN0Q2hpbGQpYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Eub3B0aW9ucyYmbS5ub2RlTmFtZShhLFwic2VsZWN0XCIpJiYoYS5vcHRpb25zLmxlbmd0aD0wKX1yZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1udWxsPT1hPyExOmEsYj1udWxsPT1iP2E6Yix0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBtLmNsb25lKHRoaXMsYSxiKX0pfSxodG1sOmZ1bmN0aW9uKGEpe3JldHVybiBWKHRoaXMsZnVuY3Rpb24oYSl7dmFyIGI9dGhpc1swXXx8e30sYz0wLGQ9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09YSlyZXR1cm4gMT09PWIubm9kZVR5cGU/Yi5pbm5lckhUTUwucmVwbGFjZShmYSxcIlwiKTp2b2lkIDA7aWYoIShcInN0cmluZ1wiIT10eXBlb2YgYXx8bWEudGVzdChhKXx8IWsuaHRtbFNlcmlhbGl6ZSYmZ2EudGVzdChhKXx8IWsubGVhZGluZ1doaXRlc3BhY2UmJmhhLnRlc3QoYSl8fHJhWyhqYS5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pKXthPWEucmVwbGFjZShpYSxcIjwkMT48LyQyPlwiKTt0cnl7Zm9yKDtkPmM7YysrKWI9dGhpc1tjXXx8e30sMT09PWIubm9kZVR5cGUmJihtLmNsZWFuRGF0YSh1YShiLCExKSksYi5pbm5lckhUTUw9YSk7Yj0wfWNhdGNoKGUpe319YiYmdGhpcy5lbXB0eSgpLmFwcGVuZChhKX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYil7YT10aGlzLnBhcmVudE5vZGUsbS5jbGVhbkRhdGEodWEodGhpcykpLGEmJmEucmVwbGFjZUNoaWxkKGIsdGhpcyl9KSxhJiYoYS5sZW5ndGh8fGEubm9kZVR5cGUpP3RoaXM6dGhpcy5yZW1vdmUoKX0sZGV0YWNoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnJlbW92ZShhLCEwKX0sZG9tTWFuaXA6ZnVuY3Rpb24oYSxiKXthPWUuYXBwbHkoW10sYSk7dmFyIGMsZCxmLGcsaCxpLGo9MCxsPXRoaXMubGVuZ3RoLG49dGhpcyxvPWwtMSxwPWFbMF0scT1tLmlzRnVuY3Rpb24ocCk7aWYocXx8bD4xJiZcInN0cmluZ1wiPT10eXBlb2YgcCYmIWsuY2hlY2tDbG9uZSYmbmEudGVzdChwKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3ZhciBkPW4uZXEoYyk7cSYmKGFbMF09cC5jYWxsKHRoaXMsYyxkLmh0bWwoKSkpLGQuZG9tTWFuaXAoYSxiKX0pO2lmKGwmJihpPW0uYnVpbGRGcmFnbWVudChhLHRoaXNbMF0ub3duZXJEb2N1bWVudCwhMSx0aGlzKSxjPWkuZmlyc3RDaGlsZCwxPT09aS5jaGlsZE5vZGVzLmxlbmd0aCYmKGk9YyksYykpe2ZvcihnPW0ubWFwKHVhKGksXCJzY3JpcHRcIikseGEpLGY9Zy5sZW5ndGg7bD5qO2orKylkPWksaiE9PW8mJihkPW0uY2xvbmUoZCwhMCwhMCksZiYmbS5tZXJnZShnLHVhKGQsXCJzY3JpcHRcIikpKSxiLmNhbGwodGhpc1tqXSxkLGopO2lmKGYpZm9yKGg9Z1tnLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LG0ubWFwKGcseWEpLGo9MDtmPmo7aisrKWQ9Z1tqXSxvYS50ZXN0KGQudHlwZXx8XCJcIikmJiFtLl9kYXRhKGQsXCJnbG9iYWxFdmFsXCIpJiZtLmNvbnRhaW5zKGgsZCkmJihkLnNyYz9tLl9ldmFsVXJsJiZtLl9ldmFsVXJsKGQuc3JjKTptLmdsb2JhbEV2YWwoKGQudGV4dHx8ZC50ZXh0Q29udGVudHx8ZC5pbm5lckhUTUx8fFwiXCIpLnJlcGxhY2UocWEsXCJcIikpKTtpPWM9bnVsbH1yZXR1cm4gdGhpc319KSxtLmVhY2goe2FwcGVuZFRvOlwiYXBwZW5kXCIscHJlcGVuZFRvOlwicHJlcGVuZFwiLGluc2VydEJlZm9yZTpcImJlZm9yZVwiLGluc2VydEFmdGVyOlwiYWZ0ZXJcIixyZXBsYWNlQWxsOlwicmVwbGFjZVdpdGhcIn0sZnVuY3Rpb24oYSxiKXttLmZuW2FdPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxkPTAsZT1bXSxnPW0oYSksaD1nLmxlbmd0aC0xO2g+PWQ7ZCsrKWM9ZD09PWg/dGhpczp0aGlzLmNsb25lKCEwKSxtKGdbZF0pW2JdKGMpLGYuYXBwbHkoZSxjLmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIENhLERhPXt9O2Z1bmN0aW9uIEVhKGIsYyl7dmFyIGQsZT1tKGMuY3JlYXRlRWxlbWVudChiKSkuYXBwZW5kVG8oYy5ib2R5KSxmPWEuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUmJihkPWEuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoZVswXSkpP2QuZGlzcGxheTptLmNzcyhlWzBdLFwiZGlzcGxheVwiKTtyZXR1cm4gZS5kZXRhY2goKSxmfWZ1bmN0aW9uIEZhKGEpe3ZhciBiPXksYz1EYVthXTtyZXR1cm4gY3x8KGM9RWEoYSxiKSxcIm5vbmVcIiE9PWMmJmN8fChDYT0oQ2F8fG0oXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIpKS5hcHBlbmRUbyhiLmRvY3VtZW50RWxlbWVudCksYj0oQ2FbMF0uY29udGVudFdpbmRvd3x8Q2FbMF0uY29udGVudERvY3VtZW50KS5kb2N1bWVudCxiLndyaXRlKCksYi5jbG9zZSgpLGM9RWEoYSxiKSxDYS5kZXRhY2goKSksRGFbYV09YyksY30hZnVuY3Rpb24oKXt2YXIgYTtrLnNocmlua1dyYXBCbG9ja3M9ZnVuY3Rpb24oKXtpZihudWxsIT1hKXJldHVybiBhO2E9ITE7dmFyIGIsYyxkO3JldHVybiBjPXkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLGMmJmMuc3R5bGU/KGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCIsYy5hcHBlbmRDaGlsZChkKS5hcHBlbmRDaGlsZChiKSx0eXBlb2YgYi5zdHlsZS56b29tIT09SyYmKGIuc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MXB4O3dpZHRoOjFweDt6b29tOjFcIixiLmFwcGVuZENoaWxkKHkuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuc3R5bGUud2lkdGg9XCI1cHhcIixhPTMhPT1iLm9mZnNldFdpZHRoKSxjLnJlbW92ZUNoaWxkKGQpLGEpOnZvaWQgMH19KCk7dmFyIEdhPS9ebWFyZ2luLyxIYT1uZXcgUmVnRXhwKFwiXihcIitTK1wiKSg/IXB4KVthLXolXSskXCIsXCJpXCIpLElhLEphLEthPS9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLzthLmdldENvbXB1dGVkU3R5bGU/KElhPWZ1bmN0aW9uKGIpe3JldHVybiBiLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyP2Iub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCk6YS5nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCl9LEphPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuc3R5bGU7cmV0dXJuIGM9Y3x8SWEoYSksZz1jP2MuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXTp2b2lkIDAsYyYmKFwiXCIhPT1nfHxtLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKXx8KGc9bS5zdHlsZShhLGIpKSxIYS50ZXN0KGcpJiZHYS50ZXN0KGIpJiYoZD1oLndpZHRoLGU9aC5taW5XaWR0aCxmPWgubWF4V2lkdGgsaC5taW5XaWR0aD1oLm1heFdpZHRoPWgud2lkdGg9ZyxnPWMud2lkdGgsaC53aWR0aD1kLGgubWluV2lkdGg9ZSxoLm1heFdpZHRoPWYpKSx2b2lkIDA9PT1nP2c6ZytcIlwifSk6eS5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlJiYoSWE9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY3VycmVudFN0eWxlfSxKYT1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fElhKGEpLGc9Yz9jW2JdOnZvaWQgMCxudWxsPT1nJiZoJiZoW2JdJiYoZz1oW2JdKSxIYS50ZXN0KGcpJiYhS2EudGVzdChiKSYmKGQ9aC5sZWZ0LGU9YS5ydW50aW1lU3R5bGUsZj1lJiZlLmxlZnQsZiYmKGUubGVmdD1hLmN1cnJlbnRTdHlsZS5sZWZ0KSxoLmxlZnQ9XCJmb250U2l6ZVwiPT09Yj9cIjFlbVwiOmcsZz1oLnBpeGVsTGVmdCtcInB4XCIsaC5sZWZ0PWQsZiYmKGUubGVmdD1mKSksdm9pZCAwPT09Zz9nOmcrXCJcInx8XCJhdXRvXCJ9KTtmdW5jdGlvbiBMYShhLGIpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXt2YXIgYz1hKCk7aWYobnVsbCE9YylyZXR1cm4gYz92b2lkIGRlbGV0ZSB0aGlzLmdldDoodGhpcy5nZXQ9YikuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19IWZ1bmN0aW9uKCl7dmFyIGIsYyxkLGUsZixnLGg7aWYoYj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5pbm5lckhUTUw9XCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIixkPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWzBdLGM9ZCYmZC5zdHlsZSl7Yy5jc3NUZXh0PVwiZmxvYXQ6bGVmdDtvcGFjaXR5Oi41XCIsay5vcGFjaXR5PVwiMC41XCI9PT1jLm9wYWNpdHksay5jc3NGbG9hdD0hIWMuY3NzRmxvYXQsYi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIsYi5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsay5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09Yi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxrLmJveFNpemluZz1cIlwiPT09Yy5ib3hTaXppbmd8fFwiXCI9PT1jLk1vekJveFNpemluZ3x8XCJcIj09PWMuV2Via2l0Qm94U2l6aW5nLG0uZXh0ZW5kKGsse3JlbGlhYmxlSGlkZGVuT2Zmc2V0czpmdW5jdGlvbigpe3JldHVybiBudWxsPT1nJiZpKCksZ30sYm94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZiYmaSgpLGZ9LHBpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZSYmaSgpLGV9LHJlbGlhYmxlTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09aCYmaSgpLGh9fSk7ZnVuY3Rpb24gaSgpe3ZhciBiLGMsZCxpO2M9eS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0sYyYmYy5zdHlsZSYmKGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCIsYy5hcHBlbmRDaGlsZChkKS5hcHBlbmRDaGlsZChiKSxiLnN0eWxlLmNzc1RleHQ9XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiLGU9Zj0hMSxoPSEwLGEuZ2V0Q29tcHV0ZWRTdHlsZSYmKGU9XCIxJVwiIT09KGEuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpfHx7fSkudG9wLGY9XCI0cHhcIj09PShhLmdldENvbXB1dGVkU3R5bGUoYixudWxsKXx8e3dpZHRoOlwiNHB4XCJ9KS53aWR0aCxpPWIuYXBwZW5kQ2hpbGQoeS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxpLnN0eWxlLmNzc1RleHQ9Yi5zdHlsZS5jc3NUZXh0PVwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCIsaS5zdHlsZS5tYXJnaW5SaWdodD1pLnN0eWxlLndpZHRoPVwiMFwiLGIuc3R5bGUud2lkdGg9XCIxcHhcIixoPSFwYXJzZUZsb2F0KChhLmdldENvbXB1dGVkU3R5bGUoaSxudWxsKXx8e30pLm1hcmdpblJpZ2h0KSxiLnJlbW92ZUNoaWxkKGkpKSxiLmlubmVySFRNTD1cIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIixpPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSxpWzBdLnN0eWxlLmNzc1RleHQ9XCJtYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjA7ZGlzcGxheTpub25lXCIsZz0wPT09aVswXS5vZmZzZXRIZWlnaHQsZyYmKGlbMF0uc3R5bGUuZGlzcGxheT1cIlwiLGlbMV0uc3R5bGUuZGlzcGxheT1cIm5vbmVcIixnPTA9PT1pWzBdLm9mZnNldEhlaWdodCksYy5yZW1vdmVDaGlsZChkKSl9fX0oKSxtLnN3YXA9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXt9O2ZvcihmIGluIGIpZ1tmXT1hLnN0eWxlW2ZdLGEuc3R5bGVbZl09YltmXTtlPWMuYXBwbHkoYSxkfHxbXSk7Zm9yKGYgaW4gYilhLnN0eWxlW2ZdPWdbZl07cmV0dXJuIGV9O3ZhciBNYT0vYWxwaGFcXChbXildKlxcKS9pLE5hPS9vcGFjaXR5XFxzKj1cXHMqKFteKV0qKS8sT2E9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFBhPW5ldyBSZWdFeHAoXCJeKFwiK1MrXCIpKC4qKSRcIixcImlcIiksUWE9bmV3IFJlZ0V4cChcIl4oWystXSk9KFwiK1MrXCIpXCIsXCJpXCIpLFJhPXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxTYT17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9LFRhPVtcIldlYmtpdFwiLFwiT1wiLFwiTW96XCIsXCJtc1wiXTtmdW5jdGlvbiBVYShhLGIpe2lmKGIgaW4gYSlyZXR1cm4gYjt2YXIgYz1iLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSksZD1iLGU9VGEubGVuZ3RoO3doaWxlKGUtLSlpZihiPVRhW2VdK2MsYiBpbiBhKXJldHVybiBiO3JldHVybiBkfWZ1bmN0aW9uIFZhKGEsYil7Zm9yKHZhciBjLGQsZSxmPVtdLGc9MCxoPWEubGVuZ3RoO2g+ZztnKyspZD1hW2ddLGQuc3R5bGUmJihmW2ddPW0uX2RhdGEoZCxcIm9sZGRpc3BsYXlcIiksYz1kLnN0eWxlLmRpc3BsYXksYj8oZltnXXx8XCJub25lXCIhPT1jfHwoZC5zdHlsZS5kaXNwbGF5PVwiXCIpLFwiXCI9PT1kLnN0eWxlLmRpc3BsYXkmJlUoZCkmJihmW2ddPW0uX2RhdGEoZCxcIm9sZGRpc3BsYXlcIixGYShkLm5vZGVOYW1lKSkpKTooZT1VKGQpLChjJiZcIm5vbmVcIiE9PWN8fCFlKSYmbS5fZGF0YShkLFwib2xkZGlzcGxheVwiLGU/YzptLmNzcyhkLFwiZGlzcGxheVwiKSkpKTtmb3IoZz0wO2g+ZztnKyspZD1hW2ddLGQuc3R5bGUmJihiJiZcIm5vbmVcIiE9PWQuc3R5bGUuZGlzcGxheSYmXCJcIiE9PWQuc3R5bGUuZGlzcGxheXx8KGQuc3R5bGUuZGlzcGxheT1iP2ZbZ118fFwiXCI6XCJub25lXCIpKTtyZXR1cm4gYX1mdW5jdGlvbiBXYShhLGIsYyl7dmFyIGQ9UGEuZXhlYyhiKTtyZXR1cm4gZD9NYXRoLm1heCgwLGRbMV0tKGN8fDApKSsoZFsyXXx8XCJweFwiKTpifWZ1bmN0aW9uIFhhKGEsYixjLGQsZSl7Zm9yKHZhciBmPWM9PT0oZD9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PWI/MTowLGc9MDs0PmY7Zis9MilcIm1hcmdpblwiPT09YyYmKGcrPW0uY3NzKGEsYytUW2ZdLCEwLGUpKSxkPyhcImNvbnRlbnRcIj09PWMmJihnLT1tLmNzcyhhLFwicGFkZGluZ1wiK1RbZl0sITAsZSkpLFwibWFyZ2luXCIhPT1jJiYoZy09bS5jc3MoYSxcImJvcmRlclwiK1RbZl0rXCJXaWR0aFwiLCEwLGUpKSk6KGcrPW0uY3NzKGEsXCJwYWRkaW5nXCIrVFtmXSwhMCxlKSxcInBhZGRpbmdcIiE9PWMmJihnKz1tLmNzcyhhLFwiYm9yZGVyXCIrVFtmXStcIldpZHRoXCIsITAsZSkpKTtyZXR1cm4gZ31mdW5jdGlvbiBZYShhLGIsYyl7dmFyIGQ9ITAsZT1cIndpZHRoXCI9PT1iP2Eub2Zmc2V0V2lkdGg6YS5vZmZzZXRIZWlnaHQsZj1JYShhKSxnPWsuYm94U2l6aW5nJiZcImJvcmRlci1ib3hcIj09PW0uY3NzKGEsXCJib3hTaXppbmdcIiwhMSxmKTtpZigwPj1lfHxudWxsPT1lKXtpZihlPUphKGEsYixmKSwoMD5lfHxudWxsPT1lKSYmKGU9YS5zdHlsZVtiXSksSGEudGVzdChlKSlyZXR1cm4gZTtkPWcmJihrLmJveFNpemluZ1JlbGlhYmxlKCl8fGU9PT1hLnN0eWxlW2JdKSxlPXBhcnNlRmxvYXQoZSl8fDB9cmV0dXJuIGUrWGEoYSxiLGN8fChnP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGQsZikrXCJweFwifW0uZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGEsYil7aWYoYil7dmFyIGM9SmEoYSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PWM/XCIxXCI6Y319fX0sY3NzTnVtYmVyOntjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7XCJmbG9hdFwiOmsuY3NzRmxvYXQ/XCJjc3NGbG9hdFwiOlwic3R5bGVGbG9hdFwifSxzdHlsZTpmdW5jdGlvbihhLGIsYyxkKXtpZihhJiYzIT09YS5ub2RlVHlwZSYmOCE9PWEubm9kZVR5cGUmJmEuc3R5bGUpe3ZhciBlLGYsZyxoPW0uY2FtZWxDYXNlKGIpLGk9YS5zdHlsZTtpZihiPW0uY3NzUHJvcHNbaF18fChtLmNzc1Byb3BzW2hdPVVhKGksaCkpLGc9bS5jc3NIb29rc1tiXXx8bS5jc3NIb29rc1toXSx2b2lkIDA9PT1jKXJldHVybiBnJiZcImdldFwiaW4gZyYmdm9pZCAwIT09KGU9Zy5nZXQoYSwhMSxkKSk/ZTppW2JdO2lmKGY9dHlwZW9mIGMsXCJzdHJpbmdcIj09PWYmJihlPVFhLmV4ZWMoYykpJiYoYz0oZVsxXSsxKSplWzJdK3BhcnNlRmxvYXQobS5jc3MoYSxiKSksZj1cIm51bWJlclwiKSxudWxsIT1jJiZjPT09YyYmKFwibnVtYmVyXCIhPT1mfHxtLmNzc051bWJlcltoXXx8KGMrPVwicHhcIiksay5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1jfHwwIT09Yi5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGlbYl09XCJpbmhlcml0XCIpLCEoZyYmXCJzZXRcImluIGcmJnZvaWQgMD09PShjPWcuc2V0KGEsYyxkKSkpKSl0cnl7aVtiXT1jfWNhdGNoKGope319fSxjc3M6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGg9bS5jYW1lbENhc2UoYik7cmV0dXJuIGI9bS5jc3NQcm9wc1toXXx8KG0uY3NzUHJvcHNbaF09VWEoYS5zdHlsZSxoKSksZz1tLmNzc0hvb2tzW2JdfHxtLmNzc0hvb2tzW2hdLGcmJlwiZ2V0XCJpbiBnJiYoZj1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1mJiYoZj1KYShhLGIsZCkpLFwibm9ybWFsXCI9PT1mJiZiIGluIFNhJiYoZj1TYVtiXSksXCJcIj09PWN8fGM/KGU9cGFyc2VGbG9hdChmKSxjPT09ITB8fG0uaXNOdW1lcmljKGUpP2V8fDA6Zik6Zn19KSxtLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihhLGIpe20uY3NzSG9va3NbYl09e2dldDpmdW5jdGlvbihhLGMsZCl7cmV0dXJuIGM/T2EudGVzdChtLmNzcyhhLFwiZGlzcGxheVwiKSkmJjA9PT1hLm9mZnNldFdpZHRoP20uc3dhcChhLFJhLGZ1bmN0aW9uKCl7cmV0dXJuIFlhKGEsYixkKX0pOllhKGEsYixkKTp2b2lkIDB9LHNldDpmdW5jdGlvbihhLGMsZCl7dmFyIGU9ZCYmSWEoYSk7cmV0dXJuIFdhKGEsYyxkP1hhKGEsYixkLGsuYm94U2l6aW5nJiZcImJvcmRlci1ib3hcIj09PW0uY3NzKGEsXCJib3hTaXppbmdcIiwhMSxlKSxlKTowKX19fSksay5vcGFjaXR5fHwobS5jc3NIb29rcy5vcGFjaXR5PXtnZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTmEudGVzdCgoYiYmYS5jdXJyZW50U3R5bGU/YS5jdXJyZW50U3R5bGUuZmlsdGVyOmEuc3R5bGUuZmlsdGVyKXx8XCJcIik/LjAxKnBhcnNlRmxvYXQoUmVnRXhwLiQxKStcIlwiOmI/XCIxXCI6XCJcIn0sc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zdHlsZSxkPWEuY3VycmVudFN0eWxlLGU9bS5pc051bWVyaWMoYik/XCJhbHBoYShvcGFjaXR5PVwiKzEwMCpiK1wiKVwiOlwiXCIsZj1kJiZkLmZpbHRlcnx8Yy5maWx0ZXJ8fFwiXCI7Yy56b29tPTEsKGI+PTF8fFwiXCI9PT1iKSYmXCJcIj09PW0udHJpbShmLnJlcGxhY2UoTWEsXCJcIikpJiZjLnJlbW92ZUF0dHJpYnV0ZSYmKGMucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpLFwiXCI9PT1ifHxkJiYhZC5maWx0ZXIpfHwoYy5maWx0ZXI9TWEudGVzdChmKT9mLnJlcGxhY2UoTWEsZSk6ZitcIiBcIitlKX19KSxtLmNzc0hvb2tzLm1hcmdpblJpZ2h0PUxhKGsucmVsaWFibGVNYXJnaW5SaWdodCxmdW5jdGlvbihhLGIpe3JldHVybiBiP20uc3dhcChhLHtkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9LEphLFthLFwibWFyZ2luUmlnaHRcIl0pOnZvaWQgMH0pLG0uZWFjaCh7bWFyZ2luOlwiXCIscGFkZGluZzpcIlwiLGJvcmRlcjpcIldpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7bS5jc3NIb29rc1thK2JdPXtleHBhbmQ6ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPTAsZT17fSxmPVwic3RyaW5nXCI9PXR5cGVvZiBjP2Muc3BsaXQoXCIgXCIpOltjXTs0PmQ7ZCsrKWVbYStUW2RdK2JdPWZbZF18fGZbZC0yXXx8ZlswXTtyZXR1cm4gZX19LEdhLnRlc3QoYSl8fChtLmNzc0hvb2tzW2ErYl0uc2V0PVdhKX0pLG0uZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9e30sZz0wO2lmKG0uaXNBcnJheShiKSl7Zm9yKGQ9SWEoYSksZT1iLmxlbmd0aDtlPmc7ZysrKWZbYltnXV09bS5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP20uc3R5bGUoYSxiLGMpOm0uY3NzKGEsYil9LGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIFZhKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIFZhKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhP2E/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7VSh0aGlzKT9tKHRoaXMpLnNob3coKTptKHRoaXMpLmhpZGUoKX0pfX0pO2Z1bmN0aW9uIFphKGEsYixjLGQsZSl7XG5yZXR1cm4gbmV3IFphLnByb3RvdHlwZS5pbml0KGEsYixjLGQsZSl9bS5Ud2Vlbj1aYSxaYS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlphLGluaXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuZWxlbT1hLHRoaXMucHJvcD1jLHRoaXMuZWFzaW5nPWV8fFwic3dpbmdcIix0aGlzLm9wdGlvbnM9Yix0aGlzLnN0YXJ0PXRoaXMubm93PXRoaXMuY3VyKCksdGhpcy5lbmQ9ZCx0aGlzLnVuaXQ9Znx8KG0uY3NzTnVtYmVyW2NdP1wiXCI6XCJweFwiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGE9WmEucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGEmJmEuZ2V0P2EuZ2V0KHRoaXMpOlphLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihhKXt2YXIgYixjPVphLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLm9wdGlvbnMuZHVyYXRpb24/dGhpcy5wb3M9Yj1tLmVhc2luZ1t0aGlzLmVhc2luZ10oYSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qYSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTp0aGlzLnBvcz1iPWEsdGhpcy5ub3c9KHRoaXMuZW5kLXRoaXMuc3RhcnQpKmIrdGhpcy5zdGFydCx0aGlzLm9wdGlvbnMuc3RlcCYmdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sdGhpcy5ub3csdGhpcyksYyYmYy5zZXQ/Yy5zZXQodGhpcyk6WmEucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSx0aGlzfX0sWmEucHJvdG90eXBlLmluaXQucHJvdG90eXBlPVphLnByb3RvdHlwZSxaYS5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIG51bGw9PWEuZWxlbVthLnByb3BdfHxhLmVsZW0uc3R5bGUmJm51bGwhPWEuZWxlbS5zdHlsZVthLnByb3BdPyhiPW0uY3NzKGEuZWxlbSxhLnByb3AsXCJcIiksYiYmXCJhdXRvXCIhPT1iP2I6MCk6YS5lbGVtW2EucHJvcF19LHNldDpmdW5jdGlvbihhKXttLmZ4LnN0ZXBbYS5wcm9wXT9tLmZ4LnN0ZXBbYS5wcm9wXShhKTphLmVsZW0uc3R5bGUmJihudWxsIT1hLmVsZW0uc3R5bGVbbS5jc3NQcm9wc1thLnByb3BdXXx8bS5jc3NIb29rc1thLnByb3BdKT9tLnN0eWxlKGEuZWxlbSxhLnByb3AsYS5ub3crYS51bml0KTphLmVsZW1bYS5wcm9wXT1hLm5vd319fSxaYS5wcm9wSG9va3Muc2Nyb2xsVG9wPVphLnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oYSl7YS5lbGVtLm5vZGVUeXBlJiZhLmVsZW0ucGFyZW50Tm9kZSYmKGEuZWxlbVthLnByb3BdPWEubm93KX19LG0uZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHN3aW5nOmZ1bmN0aW9uKGEpe3JldHVybi41LU1hdGguY29zKGEqTWF0aC5QSSkvMn19LG0uZng9WmEucHJvdG90eXBlLmluaXQsbS5meC5zdGVwPXt9O3ZhciAkYSxfYSxhYj0vXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sYmI9bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIrUytcIikoW2EteiVdKikkXCIsXCJpXCIpLGNiPS9xdWV1ZUhvb2tzJC8sZGI9W2liXSxlYj17XCIqXCI6W2Z1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jcmVhdGVUd2VlbihhLGIpLGQ9Yy5jdXIoKSxlPWJiLmV4ZWMoYiksZj1lJiZlWzNdfHwobS5jc3NOdW1iZXJbYV0/XCJcIjpcInB4XCIpLGc9KG0uY3NzTnVtYmVyW2FdfHxcInB4XCIhPT1mJiYrZCkmJmJiLmV4ZWMobS5jc3MoYy5lbGVtLGEpKSxoPTEsaT0yMDtpZihnJiZnWzNdIT09Zil7Zj1mfHxnWzNdLGU9ZXx8W10sZz0rZHx8MTtkbyBoPWh8fFwiLjVcIixnLz1oLG0uc3R5bGUoYy5lbGVtLGEsZytmKTt3aGlsZShoIT09KGg9Yy5jdXIoKS9kKSYmMSE9PWgmJi0taSl9cmV0dXJuIGUmJihnPWMuc3RhcnQ9K2d8fCtkfHwwLGMudW5pdD1mLGMuZW5kPWVbMV0/ZysoZVsxXSsxKSplWzJdOitlWzJdKSxjfV19O2Z1bmN0aW9uIGZiKCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXskYT12b2lkIDB9KSwkYT1tLm5vdygpfWZ1bmN0aW9uIGdiKGEsYil7dmFyIGMsZD17aGVpZ2h0OmF9LGU9MDtmb3IoYj1iPzE6MDs0PmU7ZSs9Mi1iKWM9VFtlXSxkW1wibWFyZ2luXCIrY109ZFtcInBhZGRpbmdcIitjXT1hO3JldHVybiBiJiYoZC5vcGFjaXR5PWQud2lkdGg9YSksZH1mdW5jdGlvbiBoYihhLGIsYyl7Zm9yKHZhciBkLGU9KGViW2JdfHxbXSkuY29uY2F0KGViW1wiKlwiXSksZj0wLGc9ZS5sZW5ndGg7Zz5mO2YrKylpZihkPWVbZl0uY2FsbChjLGIsYSkpcmV0dXJuIGR9ZnVuY3Rpb24gaWIoYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGwsbj10aGlzLG89e30scD1hLnN0eWxlLHE9YS5ub2RlVHlwZSYmVShhKSxyPW0uX2RhdGEoYSxcImZ4c2hvd1wiKTtjLnF1ZXVlfHwoaD1tLl9xdWV1ZUhvb2tzKGEsXCJmeFwiKSxudWxsPT1oLnVucXVldWVkJiYoaC51bnF1ZXVlZD0wLGk9aC5lbXB0eS5maXJlLGguZW1wdHkuZmlyZT1mdW5jdGlvbigpe2gudW5xdWV1ZWR8fGkoKX0pLGgudW5xdWV1ZWQrKyxuLmFsd2F5cyhmdW5jdGlvbigpe24uYWx3YXlzKGZ1bmN0aW9uKCl7aC51bnF1ZXVlZC0tLG0ucXVldWUoYSxcImZ4XCIpLmxlbmd0aHx8aC5lbXB0eS5maXJlKCl9KX0pKSwxPT09YS5ub2RlVHlwZSYmKFwiaGVpZ2h0XCJpbiBifHxcIndpZHRoXCJpbiBiKSYmKGMub3ZlcmZsb3c9W3Aub3ZlcmZsb3cscC5vdmVyZmxvd1gscC5vdmVyZmxvd1ldLGo9bS5jc3MoYSxcImRpc3BsYXlcIiksbD1cIm5vbmVcIj09PWo/bS5fZGF0YShhLFwib2xkZGlzcGxheVwiKXx8RmEoYS5ub2RlTmFtZSk6aixcImlubGluZVwiPT09bCYmXCJub25lXCI9PT1tLmNzcyhhLFwiZmxvYXRcIikmJihrLmlubGluZUJsb2NrTmVlZHNMYXlvdXQmJlwiaW5saW5lXCIhPT1GYShhLm5vZGVOYW1lKT9wLnpvb209MTpwLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIikpLGMub3ZlcmZsb3cmJihwLm92ZXJmbG93PVwiaGlkZGVuXCIsay5zaHJpbmtXcmFwQmxvY2tzKCl8fG4uYWx3YXlzKGZ1bmN0aW9uKCl7cC5vdmVyZmxvdz1jLm92ZXJmbG93WzBdLHAub3ZlcmZsb3dYPWMub3ZlcmZsb3dbMV0scC5vdmVyZmxvd1k9Yy5vdmVyZmxvd1syXX0pKTtmb3IoZCBpbiBiKWlmKGU9YltkXSxhYi5leGVjKGUpKXtpZihkZWxldGUgYltkXSxmPWZ8fFwidG9nZ2xlXCI9PT1lLGU9PT0ocT9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09ZXx8IXJ8fHZvaWQgMD09PXJbZF0pY29udGludWU7cT0hMH1vW2RdPXImJnJbZF18fG0uc3R5bGUoYSxkKX1lbHNlIGo9dm9pZCAwO2lmKG0uaXNFbXB0eU9iamVjdChvKSlcImlubGluZVwiPT09KFwibm9uZVwiPT09aj9GYShhLm5vZGVOYW1lKTpqKSYmKHAuZGlzcGxheT1qKTtlbHNle3I/XCJoaWRkZW5cImluIHImJihxPXIuaGlkZGVuKTpyPW0uX2RhdGEoYSxcImZ4c2hvd1wiLHt9KSxmJiYoci5oaWRkZW49IXEpLHE/bShhKS5zaG93KCk6bi5kb25lKGZ1bmN0aW9uKCl7bShhKS5oaWRlKCl9KSxuLmRvbmUoZnVuY3Rpb24oKXt2YXIgYjttLl9yZW1vdmVEYXRhKGEsXCJmeHNob3dcIik7Zm9yKGIgaW4gbyltLnN0eWxlKGEsYixvW2JdKX0pO2ZvcihkIGluIG8pZz1oYihxP3JbZF06MCxkLG4pLGQgaW4gcnx8KHJbZF09Zy5zdGFydCxxJiYoZy5lbmQ9Zy5zdGFydCxnLnN0YXJ0PVwid2lkdGhcIj09PWR8fFwiaGVpZ2h0XCI9PT1kPzE6MCkpfX1mdW5jdGlvbiBqYihhLGIpe3ZhciBjLGQsZSxmLGc7Zm9yKGMgaW4gYSlpZihkPW0uY2FtZWxDYXNlKGMpLGU9YltkXSxmPWFbY10sbS5pc0FycmF5KGYpJiYoZT1mWzFdLGY9YVtjXT1mWzBdKSxjIT09ZCYmKGFbZF09ZixkZWxldGUgYVtjXSksZz1tLmNzc0hvb2tzW2RdLGcmJlwiZXhwYW5kXCJpbiBnKXtmPWcuZXhwYW5kKGYpLGRlbGV0ZSBhW2RdO2ZvcihjIGluIGYpYyBpbiBhfHwoYVtjXT1mW2NdLGJbY109ZSl9ZWxzZSBiW2RdPWV9ZnVuY3Rpb24ga2IoYSxiLGMpe3ZhciBkLGUsZj0wLGc9ZGIubGVuZ3RoLGg9bS5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSBpLmVsZW19KSxpPWZ1bmN0aW9uKCl7aWYoZSlyZXR1cm4hMTtmb3IodmFyIGI9JGF8fGZiKCksYz1NYXRoLm1heCgwLGouc3RhcnRUaW1lK2ouZHVyYXRpb24tYiksZD1jL2ouZHVyYXRpb258fDAsZj0xLWQsZz0wLGk9ai50d2VlbnMubGVuZ3RoO2k+ZztnKyspai50d2VlbnNbZ10ucnVuKGYpO3JldHVybiBoLm5vdGlmeVdpdGgoYSxbaixmLGNdKSwxPmYmJmk/YzooaC5yZXNvbHZlV2l0aChhLFtqXSksITEpfSxqPWgucHJvbWlzZSh7ZWxlbTphLHByb3BzOm0uZXh0ZW5kKHt9LGIpLG9wdHM6bS5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e319LGMpLG9yaWdpbmFsUHJvcGVydGllczpiLG9yaWdpbmFsT3B0aW9uczpjLHN0YXJ0VGltZTokYXx8ZmIoKSxkdXJhdGlvbjpjLmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbihiLGMpe3ZhciBkPW0uVHdlZW4oYSxqLm9wdHMsYixjLGoub3B0cy5zcGVjaWFsRWFzaW5nW2JdfHxqLm9wdHMuZWFzaW5nKTtyZXR1cm4gai50d2VlbnMucHVzaChkKSxkfSxzdG9wOmZ1bmN0aW9uKGIpe3ZhciBjPTAsZD1iP2oudHdlZW5zLmxlbmd0aDowO2lmKGUpcmV0dXJuIHRoaXM7Zm9yKGU9ITA7ZD5jO2MrKylqLnR3ZWVuc1tjXS5ydW4oMSk7cmV0dXJuIGI/aC5yZXNvbHZlV2l0aChhLFtqLGJdKTpoLnJlamVjdFdpdGgoYSxbaixiXSksdGhpc319KSxrPWoucHJvcHM7Zm9yKGpiKGssai5vcHRzLnNwZWNpYWxFYXNpbmcpO2c+ZjtmKyspaWYoZD1kYltmXS5jYWxsKGosYSxrLGoub3B0cykpcmV0dXJuIGQ7cmV0dXJuIG0ubWFwKGssaGIsaiksbS5pc0Z1bmN0aW9uKGoub3B0cy5zdGFydCkmJmoub3B0cy5zdGFydC5jYWxsKGEsaiksbS5meC50aW1lcihtLmV4dGVuZChpLHtlbGVtOmEsYW5pbTpqLHF1ZXVlOmoub3B0cy5xdWV1ZX0pKSxqLnByb2dyZXNzKGoub3B0cy5wcm9ncmVzcykuZG9uZShqLm9wdHMuZG9uZSxqLm9wdHMuY29tcGxldGUpLmZhaWwoai5vcHRzLmZhaWwpLmFsd2F5cyhqLm9wdHMuYWx3YXlzKX1tLkFuaW1hdGlvbj1tLmV4dGVuZChrYix7dHdlZW5lcjpmdW5jdGlvbihhLGIpe20uaXNGdW5jdGlvbihhKT8oYj1hLGE9W1wiKlwiXSk6YT1hLnNwbGl0KFwiIFwiKTtmb3IodmFyIGMsZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyljPWFbZF0sZWJbY109ZWJbY118fFtdLGViW2NdLnVuc2hpZnQoYil9LHByZWZpbHRlcjpmdW5jdGlvbihhLGIpe2I/ZGIudW5zaGlmdChhKTpkYi5wdXNoKGEpfX0pLG0uc3BlZWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEmJlwib2JqZWN0XCI9PXR5cGVvZiBhP20uZXh0ZW5kKHt9LGEpOntjb21wbGV0ZTpjfHwhYyYmYnx8bS5pc0Z1bmN0aW9uKGEpJiZhLGR1cmF0aW9uOmEsZWFzaW5nOmMmJmJ8fGImJiFtLmlzRnVuY3Rpb24oYikmJmJ9O3JldHVybiBkLmR1cmF0aW9uPW0uZngub2ZmPzA6XCJudW1iZXJcIj09dHlwZW9mIGQuZHVyYXRpb24/ZC5kdXJhdGlvbjpkLmR1cmF0aW9uIGluIG0uZnguc3BlZWRzP20uZnguc3BlZWRzW2QuZHVyYXRpb25dOm0uZnguc3BlZWRzLl9kZWZhdWx0LChudWxsPT1kLnF1ZXVlfHxkLnF1ZXVlPT09ITApJiYoZC5xdWV1ZT1cImZ4XCIpLGQub2xkPWQuY29tcGxldGUsZC5jb21wbGV0ZT1mdW5jdGlvbigpe20uaXNGdW5jdGlvbihkLm9sZCkmJmQub2xkLmNhbGwodGhpcyksZC5xdWV1ZSYmbS5kZXF1ZXVlKHRoaXMsZC5xdWV1ZSl9LGR9LG0uZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuZmlsdGVyKFUpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTpifSxhLGMsZCl9LGFuaW1hdGU6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bS5pc0VtcHR5T2JqZWN0KGEpLGY9bS5zcGVlZChiLGMsZCksZz1mdW5jdGlvbigpe3ZhciBiPWtiKHRoaXMsbS5leHRlbmQoe30sYSksZik7KGV8fG0uX2RhdGEodGhpcyxcImZpbmlzaFwiKSkmJmIuc3RvcCghMCl9O3JldHVybiBnLmZpbmlzaD1nLGV8fGYucXVldWU9PT0hMT90aGlzLmVhY2goZyk6dGhpcy5xdWV1ZShmLnF1ZXVlLGcpfSxzdG9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhKXt2YXIgYj1hLnN0b3A7ZGVsZXRlIGEuc3RvcCxiKGMpfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGM9YixiPWEsYT12b2lkIDApLGImJmEhPT0hMSYmdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPSEwLGU9bnVsbCE9YSYmYStcInF1ZXVlSG9va3NcIixmPW0udGltZXJzLGc9bS5fZGF0YSh0aGlzKTtpZihlKWdbZV0mJmdbZV0uc3RvcCYmZChnW2VdKTtlbHNlIGZvcihlIGluIGcpZ1tlXSYmZ1tlXS5zdG9wJiZjYi50ZXN0KGUpJiZkKGdbZV0pO2ZvcihlPWYubGVuZ3RoO2UtLTspZltlXS5lbGVtIT09dGhpc3x8bnVsbCE9YSYmZltlXS5xdWV1ZSE9PWF8fChmW2VdLmFuaW0uc3RvcChjKSxiPSExLGYuc3BsaWNlKGUsMSkpOyhifHwhYykmJm0uZGVxdWV1ZSh0aGlzLGEpfSl9LGZpbmlzaDpmdW5jdGlvbihhKXtyZXR1cm4gYSE9PSExJiYoYT1hfHxcImZ4XCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiLGM9bS5fZGF0YSh0aGlzKSxkPWNbYStcInF1ZXVlXCJdLGU9Y1thK1wicXVldWVIb29rc1wiXSxmPW0udGltZXJzLGc9ZD9kLmxlbmd0aDowO2ZvcihjLmZpbmlzaD0hMCxtLnF1ZXVlKHRoaXMsYSxbXSksZSYmZS5zdG9wJiZlLnN0b3AuY2FsbCh0aGlzLCEwKSxiPWYubGVuZ3RoO2ItLTspZltiXS5lbGVtPT09dGhpcyYmZltiXS5xdWV1ZT09PWEmJihmW2JdLmFuaW0uc3RvcCghMCksZi5zcGxpY2UoYiwxKSk7Zm9yKGI9MDtnPmI7YisrKWRbYl0mJmRbYl0uZmluaXNoJiZkW2JdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSBjLmZpbmlzaH0pfX0pLG0uZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oYSxiKXt2YXIgYz1tLmZuW2JdO20uZm5bYl09ZnVuY3Rpb24oYSxkLGUpe3JldHVybiBudWxsPT1hfHxcImJvb2xlYW5cIj09dHlwZW9mIGE/Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGdiKGIsITApLGEsZCxlKX19KSxtLmVhY2goe3NsaWRlRG93bjpnYihcInNob3dcIiksc2xpZGVVcDpnYihcImhpZGVcIiksc2xpZGVUb2dnbGU6Z2IoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihhLGIpe20uZm5bYV09ZnVuY3Rpb24oYSxjLGQpe3JldHVybiB0aGlzLmFuaW1hdGUoYixhLGMsZCl9fSksbS50aW1lcnM9W10sbS5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGEsYj1tLnRpbWVycyxjPTA7Zm9yKCRhPW0ubm93KCk7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEoKXx8YltjXSE9PWF8fGIuc3BsaWNlKGMtLSwxKTtiLmxlbmd0aHx8bS5meC5zdG9wKCksJGE9dm9pZCAwfSxtLmZ4LnRpbWVyPWZ1bmN0aW9uKGEpe20udGltZXJzLnB1c2goYSksYSgpP20uZnguc3RhcnQoKTptLnRpbWVycy5wb3AoKX0sbS5meC5pbnRlcnZhbD0xMyxtLmZ4LnN0YXJ0PWZ1bmN0aW9uKCl7X2F8fChfYT1zZXRJbnRlcnZhbChtLmZ4LnRpY2ssbS5meC5pbnRlcnZhbCkpfSxtLmZ4LnN0b3A9ZnVuY3Rpb24oKXtjbGVhckludGVydmFsKF9hKSxfYT1udWxsfSxtLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxtLmZuLmRlbGF5PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bS5meD9tLmZ4LnNwZWVkc1thXXx8YTphLGI9Ynx8XCJmeFwiLHRoaXMucXVldWUoYixmdW5jdGlvbihiLGMpe3ZhciBkPXNldFRpbWVvdXQoYixhKTtjLnN0b3A9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoZCl9fSl9LGZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZTtiPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiLFwidFwiKSxiLmlubmVySFRNTD1cIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiLGQ9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIilbMF0sYz15LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiksZT1jLmFwcGVuZENoaWxkKHkuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSksYT1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilbMF0sZC5zdHlsZS5jc3NUZXh0PVwidG9wOjFweFwiLGsuZ2V0U2V0QXR0cmlidXRlPVwidFwiIT09Yi5jbGFzc05hbWUsay5zdHlsZT0vdG9wLy50ZXN0KGQuZ2V0QXR0cmlidXRlKFwic3R5bGVcIikpLGsuaHJlZk5vcm1hbGl6ZWQ9XCIvYVwiPT09ZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLGsuY2hlY2tPbj0hIWEudmFsdWUsay5vcHRTZWxlY3RlZD1lLnNlbGVjdGVkLGsuZW5jdHlwZT0hIXkuY3JlYXRlRWxlbWVudChcImZvcm1cIikuZW5jdHlwZSxjLmRpc2FibGVkPSEwLGsub3B0RGlzYWJsZWQ9IWUuZGlzYWJsZWQsYT15LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIiksay5pbnB1dD1cIlwiPT09YS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSxhLnZhbHVlPVwidFwiLGEuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwicmFkaW9cIiksay5yYWRpb1ZhbHVlPVwidFwiPT09YS52YWx1ZX0oKTt2YXIgbGI9L1xcci9nO20uZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZD1tLmlzRnVuY3Rpb24oYSksdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3ZhciBlOzE9PT10aGlzLm5vZGVUeXBlJiYoZT1kP2EuY2FsbCh0aGlzLGMsbSh0aGlzKS52YWwoKSk6YSxudWxsPT1lP2U9XCJcIjpcIm51bWJlclwiPT10eXBlb2YgZT9lKz1cIlwiOm0uaXNBcnJheShlKSYmKGU9bS5tYXAoZSxmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOmErXCJcIn0pKSxiPW0udmFsSG9va3NbdGhpcy50eXBlXXx8bS52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLGImJlwic2V0XCJpbiBiJiZ2b2lkIDAhPT1iLnNldCh0aGlzLGUsXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9ZSkpfSk7aWYoZSlyZXR1cm4gYj1tLnZhbEhvb2tzW2UudHlwZV18fG0udmFsSG9va3NbZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcImdldFwiaW4gYiYmdm9pZCAwIT09KGM9Yi5nZXQoZSxcInZhbHVlXCIpKT9jOihjPWUudmFsdWUsXCJzdHJpbmdcIj09dHlwZW9mIGM/Yy5yZXBsYWNlKGxiLFwiXCIpOm51bGw9PWM/XCJcIjpjKX19fSksbS5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihhKXt2YXIgYj1tLmZpbmQuYXR0cihhLFwidmFsdWVcIik7cmV0dXJuIG51bGwhPWI/YjptLnRyaW0obS50ZXh0KGEpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYixjLGQ9YS5vcHRpb25zLGU9YS5zZWxlY3RlZEluZGV4LGY9XCJzZWxlY3Qtb25lXCI9PT1hLnR5cGV8fDA+ZSxnPWY/bnVsbDpbXSxoPWY/ZSsxOmQubGVuZ3RoLGk9MD5lP2g6Zj9lOjA7aD5pO2krKylpZihjPWRbaV0sISghYy5zZWxlY3RlZCYmaSE9PWV8fChrLm9wdERpc2FibGVkP2MuZGlzYWJsZWQ6bnVsbCE9PWMuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikpfHxjLnBhcmVudE5vZGUuZGlzYWJsZWQmJm0ubm9kZU5hbWUoYy5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZihiPW0oYykudmFsKCksZilyZXR1cm4gYjtnLnB1c2goYil9cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZT1hLm9wdGlvbnMsZj1tLm1ha2VBcnJheShiKSxnPWUubGVuZ3RoO3doaWxlKGctLSlpZihkPWVbZ10sbS5pbkFycmF5KG0udmFsSG9va3Mub3B0aW9uLmdldChkKSxmKT49MCl0cnl7ZC5zZWxlY3RlZD1jPSEwfWNhdGNoKGgpe2Quc2Nyb2xsSGVpZ2h0fWVsc2UgZC5zZWxlY3RlZD0hMTtyZXR1cm4gY3x8KGEuc2VsZWN0ZWRJbmRleD0tMSksZX19fX0pLG0uZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXttLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbS5pc0FycmF5KGIpP2EuY2hlY2tlZD1tLmluQXJyYXkobShhKS52YWwoKSxiKT49MDp2b2lkIDB9fSxrLmNoZWNrT258fChtLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09PWEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmEudmFsdWV9KX0pO3ZhciBtYixuYixvYj1tLmV4cHIuYXR0ckhhbmRsZSxwYj0vXig/OmNoZWNrZWR8c2VsZWN0ZWQpJC9pLHFiPWsuZ2V0U2V0QXR0cmlidXRlLHJiPWsuaW5wdXQ7bS5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVih0aGlzLG0uYXR0cixhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5yZW1vdmVBdHRyKHRoaXMsYSl9KX19KSxtLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoYSYmMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm4gdHlwZW9mIGEuZ2V0QXR0cmlidXRlPT09Sz9tLnByb3AoYSxiLGMpOigxPT09ZiYmbS5pc1hNTERvYyhhKXx8KGI9Yi50b0xvd2VyQ2FzZSgpLGQ9bS5hdHRySG9va3NbYl18fChtLmV4cHIubWF0Y2guYm9vbC50ZXN0KGIpP25iOm1iKSksdm9pZCAwPT09Yz9kJiZcImdldFwiaW4gZCYmbnVsbCE9PShlPWQuZ2V0KGEsYikpP2U6KGU9bS5maW5kLmF0dHIoYSxiKSxudWxsPT1lP3ZvaWQgMDplKTpudWxsIT09Yz9kJiZcInNldFwiaW4gZCYmdm9pZCAwIT09KGU9ZC5zZXQoYSxjLGIpKT9lOihhLnNldEF0dHJpYnV0ZShiLGMrXCJcIiksYyk6dm9pZCBtLnJlbW92ZUF0dHIoYSxiKSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9MCxmPWImJmIubWF0Y2goRSk7aWYoZiYmMT09PWEubm9kZVR5cGUpd2hpbGUoYz1mW2UrK10pZD1tLnByb3BGaXhbY118fGMsbS5leHByLm1hdGNoLmJvb2wudGVzdChjKT9yYiYmcWJ8fCFwYi50ZXN0KGMpP2FbZF09ITE6YVttLmNhbWVsQ2FzZShcImRlZmF1bHQtXCIrYyldPWFbZF09ITE6bS5hdHRyKGEsYyxcIlwiKSxhLnJlbW92ZUF0dHJpYnV0ZShxYj9jOmQpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihhLGIpe2lmKCFrLnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PWImJm0ubm9kZU5hbWUoYSxcImlucHV0XCIpKXt2YXIgYz1hLnZhbHVlO3JldHVybiBhLnNldEF0dHJpYnV0ZShcInR5cGVcIixiKSxjJiYoYS52YWx1ZT1jKSxifX19fX0pLG5iPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiPT09ITE/bS5yZW1vdmVBdHRyKGEsYyk6cmImJnFifHwhcGIudGVzdChjKT9hLnNldEF0dHJpYnV0ZSghcWImJm0ucHJvcEZpeFtjXXx8YyxjKTphW20uY2FtZWxDYXNlKFwiZGVmYXVsdC1cIitjKV09YVtjXT0hMCxjfX0sbS5lYWNoKG0uZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihhLGIpe3ZhciBjPW9iW2JdfHxtLmZpbmQuYXR0cjtvYltiXT1yYiYmcWJ8fCFwYi50ZXN0KGIpP2Z1bmN0aW9uKGEsYixkKXt2YXIgZSxmO3JldHVybiBkfHwoZj1vYltiXSxvYltiXT1lLGU9bnVsbCE9YyhhLGIsZCk/Yi50b0xvd2VyQ2FzZSgpOm51bGwsb2JbYl09ZiksZX06ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjP3ZvaWQgMDphW20uY2FtZWxDYXNlKFwiZGVmYXVsdC1cIitiKV0/Yi50b0xvd2VyQ2FzZSgpOm51bGx9fSkscmImJnFifHwobS5hdHRySG9va3MudmFsdWU9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG0ubm9kZU5hbWUoYSxcImlucHV0XCIpP3ZvaWQoYS5kZWZhdWx0VmFsdWU9Yik6bWImJm1iLnNldChhLGIsYyl9fSkscWJ8fChtYj17c2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLmdldEF0dHJpYnV0ZU5vZGUoYyk7cmV0dXJuIGR8fGEuc2V0QXR0cmlidXRlTm9kZShkPWEub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoYykpLGQudmFsdWU9Yis9XCJcIixcInZhbHVlXCI9PT1jfHxiPT09YS5nZXRBdHRyaWJ1dGUoYyk/Yjp2b2lkIDB9fSxvYi5pZD1vYi5uYW1lPW9iLmNvb3Jkcz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGM/dm9pZCAwOihkPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJlwiXCIhPT1kLnZhbHVlP2QudmFsdWU6bnVsbH0sbS52YWxIb29rcy5idXR0b249e2dldDpmdW5jdGlvbihhLGIpe3ZhciBjPWEuZ2V0QXR0cmlidXRlTm9kZShiKTtyZXR1cm4gYyYmYy5zcGVjaWZpZWQ/Yy52YWx1ZTp2b2lkIDB9LHNldDptYi5zZXR9LG0uYXR0ckhvb2tzLmNvbnRlbnRlZGl0YWJsZT17c2V0OmZ1bmN0aW9uKGEsYixjKXttYi5zZXQoYSxcIlwiPT09Yj8hMTpiLGMpfX0sbS5lYWNoKFtcIndpZHRoXCIsXCJoZWlnaHRcIl0sZnVuY3Rpb24oYSxiKXttLmF0dHJIb29rc1tiXT17c2V0OmZ1bmN0aW9uKGEsYyl7cmV0dXJuXCJcIj09PWM/KGEuc2V0QXR0cmlidXRlKGIsXCJhdXRvXCIpLGMpOnZvaWQgMH19fSkpLGsuc3R5bGV8fChtLmF0dHJIb29rcy5zdHlsZT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnN0eWxlLmNzc1RleHR8fHZvaWQgMH0sc2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuc3R5bGUuY3NzVGV4dD1iK1wiXCJ9fSk7dmFyIHNiPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QpJC9pLHRiPS9eKD86YXxhcmVhKSQvaTttLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIpe3JldHVybiBWKHRoaXMsbS5wcm9wLGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGEpe3JldHVybiBhPW0ucHJvcEZpeFthXXx8YSx0aGlzLmVhY2goZnVuY3Rpb24oKXt0cnl7dGhpc1thXT12b2lkIDAsZGVsZXRlIHRoaXNbYV19Y2F0Y2goYil7fX0pfX0pLG0uZXh0ZW5kKHtwcm9wRml4OntcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwifSxwcm9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZz1hLm5vZGVUeXBlO2lmKGEmJjMhPT1nJiY4IT09ZyYmMiE9PWcpcmV0dXJuIGY9MSE9PWd8fCFtLmlzWE1MRG9jKGEpLGYmJihiPW0ucHJvcEZpeFtiXXx8YixlPW0ucHJvcEhvb2tzW2JdKSx2b2lkIDAhPT1jP2UmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6YVtiXT1jOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDphW2JdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9bS5maW5kLmF0dHIoYSxcInRhYmluZGV4XCIpO3JldHVybiBiP3BhcnNlSW50KGIsMTApOnNiLnRlc3QoYS5ub2RlTmFtZSl8fHRiLnRlc3QoYS5ub2RlTmFtZSkmJmEuaHJlZj8wOi0xfX19fSksay5ocmVmTm9ybWFsaXplZHx8bS5lYWNoKFtcImhyZWZcIixcInNyY1wiXSxmdW5jdGlvbihhLGIpe20ucHJvcEhvb2tzW2JdPXtnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKGIsNCl9fX0pLGsub3B0U2VsZWN0ZWR8fChtLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmKGIuc2VsZWN0ZWRJbmRleCxiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KSxudWxsfX0pLG0uZWFjaChbXCJ0YWJJbmRleFwiLFwicmVhZE9ubHlcIixcIm1heExlbmd0aFwiLFwiY2VsbFNwYWNpbmdcIixcImNlbGxQYWRkaW5nXCIsXCJyb3dTcGFuXCIsXCJjb2xTcGFuXCIsXCJ1c2VNYXBcIixcImZyYW1lQm9yZGVyXCIsXCJjb250ZW50RWRpdGFibGVcIl0sZnVuY3Rpb24oKXttLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSksay5lbmN0eXBlfHwobS5wcm9wRml4LmVuY3R5cGU9XCJlbmNvZGluZ1wiKTt2YXIgdWI9L1tcXHRcXHJcXG5cXGZdL2c7bS5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoPTAsaT10aGlzLmxlbmd0aCxqPVwic3RyaW5nXCI9PXR5cGVvZiBhJiZhO2lmKG0uaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe20odGhpcykuYWRkQ2xhc3MoYS5jYWxsKHRoaXMsYix0aGlzLmNsYXNzTmFtZSkpfSk7aWYoailmb3IoYj0oYXx8XCJcIikubWF0Y2goRSl8fFtdO2k+aDtoKyspaWYoYz10aGlzW2hdLGQ9MT09PWMubm9kZVR5cGUmJihjLmNsYXNzTmFtZT8oXCIgXCIrYy5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UodWIsXCIgXCIpOlwiIFwiKSl7Zj0wO3doaWxlKGU9YltmKytdKWQuaW5kZXhPZihcIiBcIitlK1wiIFwiKTwwJiYoZCs9ZStcIiBcIik7Zz1tLnRyaW0oZCksYy5jbGFzc05hbWUhPT1nJiYoYy5jbGFzc05hbWU9Zyl9cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoPTAsaT10aGlzLmxlbmd0aCxqPTA9PT1hcmd1bWVudHMubGVuZ3RofHxcInN0cmluZ1wiPT10eXBlb2YgYSYmYTtpZihtLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXttKHRoaXMpLnJlbW92ZUNsYXNzKGEuY2FsbCh0aGlzLGIsdGhpcy5jbGFzc05hbWUpKX0pO2lmKGopZm9yKGI9KGF8fFwiXCIpLm1hdGNoKEUpfHxbXTtpPmg7aCsrKWlmKGM9dGhpc1toXSxkPTE9PT1jLm5vZGVUeXBlJiYoYy5jbGFzc05hbWU/KFwiIFwiK2MuY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKHViLFwiIFwiKTpcIlwiKSl7Zj0wO3doaWxlKGU9YltmKytdKXdoaWxlKGQuaW5kZXhPZihcIiBcIitlK1wiIFwiKT49MClkPWQucmVwbGFjZShcIiBcIitlK1wiIFwiLFwiIFwiKTtnPWE/bS50cmltKGQpOlwiXCIsYy5jbGFzc05hbWUhPT1nJiYoYy5jbGFzc05hbWU9Zyl9cmV0dXJuIHRoaXN9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dHlwZW9mIGE7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBiJiZcInN0cmluZ1wiPT09Yz9iP3RoaXMuYWRkQ2xhc3MoYSk6dGhpcy5yZW1vdmVDbGFzcyhhKTp0aGlzLmVhY2gobS5pc0Z1bmN0aW9uKGEpP2Z1bmN0aW9uKGMpe20odGhpcykudG9nZ2xlQ2xhc3MoYS5jYWxsKHRoaXMsYyx0aGlzLmNsYXNzTmFtZSxiKSxiKX06ZnVuY3Rpb24oKXtpZihcInN0cmluZ1wiPT09Yyl7dmFyIGIsZD0wLGU9bSh0aGlzKSxmPWEubWF0Y2goRSl8fFtdO3doaWxlKGI9ZltkKytdKWUuaGFzQ2xhc3MoYik/ZS5yZW1vdmVDbGFzcyhiKTplLmFkZENsYXNzKGIpfWVsc2UoYz09PUt8fFwiYm9vbGVhblwiPT09YykmJih0aGlzLmNsYXNzTmFtZSYmbS5fZGF0YSh0aGlzLFwiX19jbGFzc05hbWVfX1wiLHRoaXMuY2xhc3NOYW1lKSx0aGlzLmNsYXNzTmFtZT10aGlzLmNsYXNzTmFtZXx8YT09PSExP1wiXCI6bS5fZGF0YSh0aGlzLFwiX19jbGFzc05hbWVfX1wiKXx8XCJcIil9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVwiIFwiK2ErXCIgXCIsYz0wLGQ9dGhpcy5sZW5ndGg7ZD5jO2MrKylpZigxPT09dGhpc1tjXS5ub2RlVHlwZSYmKFwiIFwiK3RoaXNbY10uY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKHViLFwiIFwiKS5pbmRleE9mKGIpPj0wKXJldHVybiEwO3JldHVybiExfX0pLG0uZWFjaChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXttLmZuW2JdPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKGIsbnVsbCxhLGMpOnRoaXMudHJpZ2dlcihiKX19KSxtLmZuLmV4dGVuZCh7aG92ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGEpLm1vdXNlbGVhdmUoYnx8YSl9LGJpbmQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLm9uKGEsbnVsbCxiLGMpfSx1bmJpbmQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5vZmYoYSxudWxsLGIpfSxkZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5vbihiLGEsYyxkKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGEsXCIqKlwiKTp0aGlzLm9mZihiLGF8fFwiKipcIixjKX19KTt2YXIgdmI9bS5ub3coKSx3Yj0vXFw/Lyx4Yj0vKCwpfChcXFt8eyl8KH18XSl8XCIoPzpbXlwiXFxcXFxcclxcbl18XFxcXFtcIlxcXFxcXC9iZm5ydF18XFxcXHVbXFxkYS1mQS1GXXs0fSkqXCJcXHMqOj98dHJ1ZXxmYWxzZXxudWxsfC0/KD8hMFxcZClcXGQrKD86XFwuXFxkK3wpKD86W2VFXVsrLV0/XFxkK3wpL2c7bS5wYXJzZUpTT049ZnVuY3Rpb24oYil7aWYoYS5KU09OJiZhLkpTT04ucGFyc2UpcmV0dXJuIGEuSlNPTi5wYXJzZShiK1wiXCIpO3ZhciBjLGQ9bnVsbCxlPW0udHJpbShiK1wiXCIpO3JldHVybiBlJiYhbS50cmltKGUucmVwbGFjZSh4YixmdW5jdGlvbihhLGIsZSxmKXtyZXR1cm4gYyYmYiYmKGQ9MCksMD09PWQ/YTooYz1lfHxiLGQrPSFmLSFlLFwiXCIpfSkpP0Z1bmN0aW9uKFwicmV0dXJuIFwiK2UpKCk6bS5lcnJvcihcIkludmFsaWQgSlNPTjogXCIrYil9LG0ucGFyc2VYTUw9ZnVuY3Rpb24oYil7dmFyIGMsZDtpZighYnx8XCJzdHJpbmdcIiE9dHlwZW9mIGIpcmV0dXJuIG51bGw7dHJ5e2EuRE9NUGFyc2VyPyhkPW5ldyBET01QYXJzZXIsYz1kLnBhcnNlRnJvbVN0cmluZyhiLFwidGV4dC94bWxcIikpOihjPW5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTERPTVwiKSxjLmFzeW5jPVwiZmFsc2VcIixjLmxvYWRYTUwoYikpfWNhdGNoKGUpe2M9dm9pZCAwfXJldHVybiBjJiZjLmRvY3VtZW50RWxlbWVudCYmIWMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGh8fG0uZXJyb3IoXCJJbnZhbGlkIFhNTDogXCIrYiksY307dmFyIHliLHpiLEFiPS8jLiokLyxCYj0vKFs/Jl0pXz1bXiZdKi8sQ2I9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopXFxyPyQvZ20sRGI9L14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sRWI9L14oPzpHRVR8SEVBRCkkLyxGYj0vXlxcL1xcLy8sR2I9L14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sSGI9e30sSWI9e30sSmI9XCIqL1wiLmNvbmNhdChcIipcIik7dHJ5e3piPWxvY2F0aW9uLmhyZWZ9Y2F0Y2goS2Ipe3piPXkuY3JlYXRlRWxlbWVudChcImFcIiksemIuaHJlZj1cIlwiLHpiPXpiLmhyZWZ9eWI9R2IuZXhlYyh6Yi50b0xvd2VyQ2FzZSgpKXx8W107ZnVuY3Rpb24gTGIoYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7XCJzdHJpbmdcIiE9dHlwZW9mIGImJihjPWIsYj1cIipcIik7dmFyIGQsZT0wLGY9Yi50b0xvd2VyQ2FzZSgpLm1hdGNoKEUpfHxbXTtpZihtLmlzRnVuY3Rpb24oYykpd2hpbGUoZD1mW2UrK10pXCIrXCI9PT1kLmNoYXJBdCgwKT8oZD1kLnNsaWNlKDEpfHxcIipcIiwoYVtkXT1hW2RdfHxbXSkudW5zaGlmdChjKSk6KGFbZF09YVtkXXx8W10pLnB1c2goYyl9fWZ1bmN0aW9uIE1iKGEsYixjLGQpe3ZhciBlPXt9LGY9YT09PUliO2Z1bmN0aW9uIGcoaCl7dmFyIGk7cmV0dXJuIGVbaF09ITAsbS5lYWNoKGFbaF18fFtdLGZ1bmN0aW9uKGEsaCl7dmFyIGo9aChiLGMsZCk7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGp8fGZ8fGVbal0/Zj8hKGk9aik6dm9pZCAwOihiLmRhdGFUeXBlcy51bnNoaWZ0KGopLGcoaiksITEpfSksaX1yZXR1cm4gZyhiLmRhdGFUeXBlc1swXSl8fCFlW1wiKlwiXSYmZyhcIipcIil9ZnVuY3Rpb24gTmIoYSxiKXt2YXIgYyxkLGU9bS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihkIGluIGIpdm9pZCAwIT09YltkXSYmKChlW2RdP2E6Y3x8KGM9e30pKVtkXT1iW2RdKTtyZXR1cm4gYyYmbS5leHRlbmQoITAsYSxjKSxhfWZ1bmN0aW9uIE9iKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuY29udGVudHMsaT1hLmRhdGFUeXBlczt3aGlsZShcIipcIj09PWlbMF0paS5zaGlmdCgpLHZvaWQgMD09PWUmJihlPWEubWltZVR5cGV8fGIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKGUpZm9yKGcgaW4gaClpZihoW2ddJiZoW2ddLnRlc3QoZSkpe2kudW5zaGlmdChnKTticmVha31pZihpWzBdaW4gYylmPWlbMF07ZWxzZXtmb3IoZyBpbiBjKXtpZighaVswXXx8YS5jb252ZXJ0ZXJzW2crXCIgXCIraVswXV0pe2Y9ZzticmVha31kfHwoZD1nKX1mPWZ8fGR9cmV0dXJuIGY/KGYhPT1pWzBdJiZpLnVuc2hpZnQoZiksY1tmXSk6dm9pZCAwfWZ1bmN0aW9uIFBiKGEsYixjLGQpe3ZhciBlLGYsZyxoLGksaj17fSxrPWEuZGF0YVR5cGVzLnNsaWNlKCk7aWYoa1sxXSlmb3IoZyBpbiBhLmNvbnZlcnRlcnMpaltnLnRvTG93ZXJDYXNlKCldPWEuY29udmVydGVyc1tnXTtmPWsuc2hpZnQoKTt3aGlsZShmKWlmKGEucmVzcG9uc2VGaWVsZHNbZl0mJihjW2EucmVzcG9uc2VGaWVsZHNbZl1dPWIpLCFpJiZkJiZhLmRhdGFGaWx0ZXImJihiPWEuZGF0YUZpbHRlcihiLGEuZGF0YVR5cGUpKSxpPWYsZj1rLnNoaWZ0KCkpaWYoXCIqXCI9PT1mKWY9aTtlbHNlIGlmKFwiKlwiIT09aSYmaSE9PWYpe2lmKGc9altpK1wiIFwiK2ZdfHxqW1wiKiBcIitmXSwhZylmb3IoZSBpbiBqKWlmKGg9ZS5zcGxpdChcIiBcIiksaFsxXT09PWYmJihnPWpbaStcIiBcIitoWzBdXXx8altcIiogXCIraFswXV0pKXtnPT09ITA/Zz1qW2VdOmpbZV0hPT0hMCYmKGY9aFswXSxrLnVuc2hpZnQoaFsxXSkpO2JyZWFrfWlmKGchPT0hMClpZihnJiZhW1widGhyb3dzXCJdKWI9ZyhiKTtlbHNlIHRyeXtiPWcoYil9Y2F0Y2gobCl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjpnP2w6XCJObyBjb252ZXJzaW9uIGZyb20gXCIraStcIiB0byBcIitmfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6Yn19bS5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOnpiLHR5cGU6XCJHRVRcIixpc0xvY2FsOkRiLnRlc3QoeWJbMV0pLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLGFjY2VwdHM6e1wiKlwiOkpiLHRleHQ6XCJ0ZXh0L3BsYWluXCIsaHRtbDpcInRleHQvaHRtbFwiLHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixqc29uOlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJ9LGNvbnRlbnRzOnt4bWw6L3htbC8saHRtbDovaHRtbC8sanNvbjovanNvbi99LHJlc3BvbnNlRmllbGRzOnt4bWw6XCJyZXNwb25zZVhNTFwiLHRleHQ6XCJyZXNwb25zZVRleHRcIixqc29uOlwicmVzcG9uc2VKU09OXCJ9LGNvbnZlcnRlcnM6e1wiKiB0ZXh0XCI6U3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjptLnBhcnNlSlNPTixcInRleHQgeG1sXCI6bS5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/TmIoTmIoYSxtLmFqYXhTZXR0aW5ncyksYik6TmIobS5hamF4U2V0dGluZ3MsYSl9LGFqYXhQcmVmaWx0ZXI6TGIoSGIpLGFqYXhUcmFuc3BvcnQ6TGIoSWIpLGFqYXg6ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiPT10eXBlb2YgYSYmKGI9YSxhPXZvaWQgMCksYj1ifHx7fTt2YXIgYyxkLGUsZixnLGgsaSxqLGs9bS5hamF4U2V0dXAoe30sYiksbD1rLmNvbnRleHR8fGssbj1rLmNvbnRleHQmJihsLm5vZGVUeXBlfHxsLmpxdWVyeSk/bShsKTptLmV2ZW50LG89bS5EZWZlcnJlZCgpLHA9bS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxxPWsuc3RhdHVzQ29kZXx8e30scj17fSxzPXt9LHQ9MCx1PVwiY2FuY2VsZWRcIix2PXtyZWFkeVN0YXRlOjAsZ2V0UmVzcG9uc2VIZWFkZXI6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoMj09PXQpe2lmKCFqKXtqPXt9O3doaWxlKGI9Q2IuZXhlYyhmKSlqW2JbMV0udG9Mb3dlckNhc2UoKV09YlsyXX1iPWpbYS50b0xvd2VyQ2FzZSgpXX1yZXR1cm4gbnVsbD09Yj9udWxsOmJ9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiAyPT09dD9mOm51bGx9LHNldFJlcXVlc3RIZWFkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnRvTG93ZXJDYXNlKCk7cmV0dXJuIHR8fChhPXNbY109c1tjXXx8YSxyW2FdPWIpLHRoaXN9LG92ZXJyaWRlTWltZVR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHR8fChrLm1pbWVUeXBlPWEpLHRoaXN9LHN0YXR1c0NvZGU6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoYSlpZigyPnQpZm9yKGIgaW4gYSlxW2JdPVtxW2JdLGFbYl1dO2Vsc2Ugdi5hbHdheXMoYVt2LnN0YXR1c10pO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihhKXt2YXIgYj1hfHx1O3JldHVybiBpJiZpLmFib3J0KGIpLHgoMCxiKSx0aGlzfX07aWYoby5wcm9taXNlKHYpLmNvbXBsZXRlPXAuYWRkLHYuc3VjY2Vzcz12LmRvbmUsdi5lcnJvcj12LmZhaWwsay51cmw9KChhfHxrLnVybHx8emIpK1wiXCIpLnJlcGxhY2UoQWIsXCJcIikucmVwbGFjZShGYix5YlsxXStcIi8vXCIpLGsudHlwZT1iLm1ldGhvZHx8Yi50eXBlfHxrLm1ldGhvZHx8ay50eXBlLGsuZGF0YVR5cGVzPW0udHJpbShrLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChFKXx8W1wiXCJdLG51bGw9PWsuY3Jvc3NEb21haW4mJihjPUdiLmV4ZWMoay51cmwudG9Mb3dlckNhc2UoKSksay5jcm9zc0RvbWFpbj0hKCFjfHxjWzFdPT09eWJbMV0mJmNbMl09PT15YlsyXSYmKGNbM118fChcImh0dHA6XCI9PT1jWzFdP1wiODBcIjpcIjQ0M1wiKSk9PT0oeWJbM118fChcImh0dHA6XCI9PT15YlsxXT9cIjgwXCI6XCI0NDNcIikpKSksay5kYXRhJiZrLnByb2Nlc3NEYXRhJiZcInN0cmluZ1wiIT10eXBlb2Ygay5kYXRhJiYoay5kYXRhPW0ucGFyYW0oay5kYXRhLGsudHJhZGl0aW9uYWwpKSxNYihIYixrLGIsdiksMj09PXQpcmV0dXJuIHY7aD1tLmV2ZW50JiZrLmdsb2JhbCxoJiYwPT09bS5hY3RpdmUrKyYmbS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpLGsudHlwZT1rLnR5cGUudG9VcHBlckNhc2UoKSxrLmhhc0NvbnRlbnQ9IUViLnRlc3Qoay50eXBlKSxlPWsudXJsLGsuaGFzQ29udGVudHx8KGsuZGF0YSYmKGU9ay51cmwrPSh3Yi50ZXN0KGUpP1wiJlwiOlwiP1wiKStrLmRhdGEsZGVsZXRlIGsuZGF0YSksay5jYWNoZT09PSExJiYoay51cmw9QmIudGVzdChlKT9lLnJlcGxhY2UoQmIsXCIkMV89XCIrdmIrKyk6ZSsod2IudGVzdChlKT9cIiZcIjpcIj9cIikrXCJfPVwiK3ZiKyspKSxrLmlmTW9kaWZpZWQmJihtLmxhc3RNb2RpZmllZFtlXSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIixtLmxhc3RNb2RpZmllZFtlXSksbS5ldGFnW2VdJiZ2LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsbS5ldGFnW2VdKSksKGsuZGF0YSYmay5oYXNDb250ZW50JiZrLmNvbnRlbnRUeXBlIT09ITF8fGIuY29udGVudFR5cGUpJiZ2LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixrLmNvbnRlbnRUeXBlKSx2LnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixrLmRhdGFUeXBlc1swXSYmay5hY2NlcHRzW2suZGF0YVR5cGVzWzBdXT9rLmFjY2VwdHNbay5kYXRhVHlwZXNbMF1dKyhcIipcIiE9PWsuZGF0YVR5cGVzWzBdP1wiLCBcIitKYitcIjsgcT0wLjAxXCI6XCJcIik6ay5hY2NlcHRzW1wiKlwiXSk7Zm9yKGQgaW4gay5oZWFkZXJzKXYuc2V0UmVxdWVzdEhlYWRlcihkLGsuaGVhZGVyc1tkXSk7aWYoay5iZWZvcmVTZW5kJiYoay5iZWZvcmVTZW5kLmNhbGwobCx2LGspPT09ITF8fDI9PT10KSlyZXR1cm4gdi5hYm9ydCgpO3U9XCJhYm9ydFwiO2ZvcihkIGlue3N1Y2Nlc3M6MSxlcnJvcjoxLGNvbXBsZXRlOjF9KXZbZF0oa1tkXSk7aWYoaT1NYihJYixrLGIsdikpe3YucmVhZHlTdGF0ZT0xLGgmJm4udHJpZ2dlcihcImFqYXhTZW5kXCIsW3Ysa10pLGsuYXN5bmMmJmsudGltZW91dD4wJiYoZz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7di5hYm9ydChcInRpbWVvdXRcIil9LGsudGltZW91dCkpO3RyeXt0PTEsaS5zZW5kKHIseCl9Y2F0Y2godyl7aWYoISgyPnQpKXRocm93IHc7eCgtMSx3KX19ZWxzZSB4KC0xLFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGoscixzLHUsdyx4PWI7MiE9PXQmJih0PTIsZyYmY2xlYXJUaW1lb3V0KGcpLGk9dm9pZCAwLGY9ZHx8XCJcIix2LnJlYWR5U3RhdGU9YT4wPzQ6MCxqPWE+PTIwMCYmMzAwPmF8fDMwND09PWEsYyYmKHU9T2Ioayx2LGMpKSx1PVBiKGssdSx2LGopLGo/KGsuaWZNb2RpZmllZCYmKHc9di5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIiksdyYmKG0ubGFzdE1vZGlmaWVkW2VdPXcpLHc9di5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIiksdyYmKG0uZXRhZ1tlXT13KSksMjA0PT09YXx8XCJIRUFEXCI9PT1rLnR5cGU/eD1cIm5vY29udGVudFwiOjMwND09PWE/eD1cIm5vdG1vZGlmaWVkXCI6KHg9dS5zdGF0ZSxyPXUuZGF0YSxzPXUuZXJyb3Isaj0hcykpOihzPXgsKGF8fCF4KSYmKHg9XCJlcnJvclwiLDA+YSYmKGE9MCkpKSx2LnN0YXR1cz1hLHYuc3RhdHVzVGV4dD0oYnx8eCkrXCJcIixqP28ucmVzb2x2ZVdpdGgobCxbcix4LHZdKTpvLnJlamVjdFdpdGgobCxbdix4LHNdKSx2LnN0YXR1c0NvZGUocSkscT12b2lkIDAsaCYmbi50cmlnZ2VyKGo/XCJhamF4U3VjY2Vzc1wiOlwiYWpheEVycm9yXCIsW3YsayxqP3I6c10pLHAuZmlyZVdpdGgobCxbdix4XSksaCYmKG4udHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFt2LGtdKSwtLW0uYWN0aXZlfHxtLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKSkpfXJldHVybiB2fSxnZXRKU09OOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbS5nZXQoYSxiLGMsXCJqc29uXCIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbS5nZXQoYSx2b2lkIDAsYixcInNjcmlwdFwiKX19KSxtLmVhY2goW1wiZ2V0XCIsXCJwb3N0XCJdLGZ1bmN0aW9uKGEsYil7bVtiXT1mdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gbS5pc0Z1bmN0aW9uKGMpJiYoZT1lfHxkLGQ9YyxjPXZvaWQgMCksbS5hamF4KHt1cmw6YSx0eXBlOmIsZGF0YVR5cGU6ZSxkYXRhOmMsc3VjY2VzczpkfSl9fSksbS5fZXZhbFVybD1mdW5jdGlvbihhKXtyZXR1cm4gbS5hamF4KHt1cmw6YSx0eXBlOlwiR0VUXCIsZGF0YVR5cGU6XCJzY3JpcHRcIixhc3luYzohMSxnbG9iYWw6ITEsXCJ0aHJvd3NcIjohMH0pfSxtLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihhKXtpZihtLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXttKHRoaXMpLndyYXBBbGwoYS5jYWxsKHRoaXMsYikpfSk7aWYodGhpc1swXSl7dmFyIGI9bShhLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApO3RoaXNbMF0ucGFyZW50Tm9kZSYmYi5pbnNlcnRCZWZvcmUodGhpc1swXSksYi5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzO3doaWxlKGEuZmlyc3RDaGlsZCYmMT09PWEuZmlyc3RDaGlsZC5ub2RlVHlwZSlhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX0pLmFwcGVuZCh0aGlzKX1yZXR1cm4gdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2gobS5pc0Z1bmN0aW9uKGEpP2Z1bmN0aW9uKGIpe20odGhpcykud3JhcElubmVyKGEuY2FsbCh0aGlzLGIpKX06ZnVuY3Rpb24oKXt2YXIgYj1tKHRoaXMpLGM9Yi5jb250ZW50cygpO2MubGVuZ3RoP2Mud3JhcEFsbChhKTpiLmFwcGVuZChhKX0pfSx3cmFwOmZ1bmN0aW9uKGEpe3ZhciBiPW0uaXNGdW5jdGlvbihhKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe20odGhpcykud3JhcEFsbChiP2EuY2FsbCh0aGlzLGMpOmEpfSl9LHVud3JhcDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKXttLm5vZGVOYW1lKHRoaXMsXCJib2R5XCIpfHxtKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KS5lbmQoKX19KSxtLmV4cHIuZmlsdGVycy5oaWRkZW49ZnVuY3Rpb24oYSl7cmV0dXJuIGEub2Zmc2V0V2lkdGg8PTAmJmEub2Zmc2V0SGVpZ2h0PD0wfHwhay5yZWxpYWJsZUhpZGRlbk9mZnNldHMoKSYmXCJub25lXCI9PT0oYS5zdHlsZSYmYS5zdHlsZS5kaXNwbGF5fHxtLmNzcyhhLFwiZGlzcGxheVwiKSl9LG0uZXhwci5maWx0ZXJzLnZpc2libGU9ZnVuY3Rpb24oYSl7cmV0dXJuIW0uZXhwci5maWx0ZXJzLmhpZGRlbihhKX07dmFyIFFiPS8lMjAvZyxSYj0vXFxbXFxdJC8sU2I9L1xccj9cXG4vZyxUYj0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksVWI9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIFZiKGEsYixjLGQpe3ZhciBlO2lmKG0uaXNBcnJheShiKSltLmVhY2goYixmdW5jdGlvbihiLGUpe2N8fFJiLnRlc3QoYSk/ZChhLGUpOlZiKGErXCJbXCIrKFwib2JqZWN0XCI9PXR5cGVvZiBlP2I6XCJcIikrXCJdXCIsZSxjLGQpfSk7ZWxzZSBpZihjfHxcIm9iamVjdFwiIT09bS50eXBlKGIpKWQoYSxiKTtlbHNlIGZvcihlIGluIGIpVmIoYStcIltcIitlK1wiXVwiLGJbZV0sYyxkKX1tLnBhcmFtPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPWZ1bmN0aW9uKGEsYil7Yj1tLmlzRnVuY3Rpb24oYik/YigpOm51bGw9PWI/XCJcIjpiLGRbZC5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChhKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQoYil9O2lmKHZvaWQgMD09PWImJihiPW0uYWpheFNldHRpbmdzJiZtLmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbCksbS5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIW0uaXNQbGFpbk9iamVjdChhKSltLmVhY2goYSxmdW5jdGlvbigpe2UodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoYyBpbiBhKVZiKGMsYVtjXSxiLGUpO3JldHVybiBkLmpvaW4oXCImXCIpLnJlcGxhY2UoUWIsXCIrXCIpfSxtLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIG0ucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT1tLnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBhP20ubWFrZUFycmF5KGEpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgYT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIW0odGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJlViLnRlc3QodGhpcy5ub2RlTmFtZSkmJiFUYi50ZXN0KGEpJiYodGhpcy5jaGVja2VkfHwhVy50ZXN0KGEpKX0pLm1hcChmdW5jdGlvbihhLGIpe3ZhciBjPW0odGhpcykudmFsKCk7cmV0dXJuIG51bGw9PWM/bnVsbDptLmlzQXJyYXkoYyk/bS5tYXAoYyxmdW5jdGlvbihhKXtyZXR1cm57bmFtZTpiLm5hbWUsdmFsdWU6YS5yZXBsYWNlKFNiLFwiXFxyXFxuXCIpfX0pOntuYW1lOmIubmFtZSx2YWx1ZTpjLnJlcGxhY2UoU2IsXCJcXHJcXG5cIil9fSkuZ2V0KCl9fSksbS5hamF4U2V0dGluZ3MueGhyPXZvaWQgMCE9PWEuQWN0aXZlWE9iamVjdD9mdW5jdGlvbigpe3JldHVybiF0aGlzLmlzTG9jYWwmJi9eKGdldHxwb3N0fGhlYWR8cHV0fGRlbGV0ZXxvcHRpb25zKSQvaS50ZXN0KHRoaXMudHlwZSkmJlpiKCl8fCRiKCl9OlpiO3ZhciBXYj0wLFhiPXt9LFliPW0uYWpheFNldHRpbmdzLnhocigpO2EuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIFhiKVhiW2FdKHZvaWQgMCwhMCl9KSxrLmNvcnM9ISFZYiYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIFliLFliPWsuYWpheD0hIVliLFliJiZtLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oYSl7aWYoIWEuY3Jvc3NEb21haW58fGsuY29ycyl7dmFyIGI7cmV0dXJue3NlbmQ6ZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEueGhyKCksZz0rK1diO2lmKGYub3BlbihhLnR5cGUsYS51cmwsYS5hc3luYyxhLnVzZXJuYW1lLGEucGFzc3dvcmQpLGEueGhyRmllbGRzKWZvcihlIGluIGEueGhyRmllbGRzKWZbZV09YS54aHJGaWVsZHNbZV07YS5taW1lVHlwZSYmZi5vdmVycmlkZU1pbWVUeXBlJiZmLm92ZXJyaWRlTWltZVR5cGUoYS5taW1lVHlwZSksYS5jcm9zc0RvbWFpbnx8Y1tcIlgtUmVxdWVzdGVkLVdpdGhcIl18fChjW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXT1cIlhNTEh0dHBSZXF1ZXN0XCIpO2ZvcihlIGluIGMpdm9pZCAwIT09Y1tlXSYmZi5zZXRSZXF1ZXN0SGVhZGVyKGUsY1tlXStcIlwiKTtmLnNlbmQoYS5oYXNDb250ZW50JiZhLmRhdGF8fG51bGwpLGI9ZnVuY3Rpb24oYyxlKXt2YXIgaCxpLGo7aWYoYiYmKGV8fDQ9PT1mLnJlYWR5U3RhdGUpKWlmKGRlbGV0ZSBYYltnXSxiPXZvaWQgMCxmLm9ucmVhZHlzdGF0ZWNoYW5nZT1tLm5vb3AsZSk0IT09Zi5yZWFkeVN0YXRlJiZmLmFib3J0KCk7ZWxzZXtqPXt9LGg9Zi5zdGF0dXMsXCJzdHJpbmdcIj09dHlwZW9mIGYucmVzcG9uc2VUZXh0JiYoai50ZXh0PWYucmVzcG9uc2VUZXh0KTt0cnl7aT1mLnN0YXR1c1RleHR9Y2F0Y2goayl7aT1cIlwifWh8fCFhLmlzTG9jYWx8fGEuY3Jvc3NEb21haW4/MTIyMz09PWgmJihoPTIwNCk6aD1qLnRleHQ/MjAwOjQwNH1qJiZkKGgsaSxqLGYuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpfSxhLmFzeW5jPzQ9PT1mLnJlYWR5U3RhdGU/c2V0VGltZW91dChiKTpmLm9ucmVhZHlzdGF0ZWNoYW5nZT1YYltnXT1iOmIoKX0sYWJvcnQ6ZnVuY3Rpb24oKXtiJiZiKHZvaWQgMCwhMCl9fX19KTtmdW5jdGlvbiBaYigpe3RyeXtyZXR1cm4gbmV3IGEuWE1MSHR0cFJlcXVlc3R9Y2F0Y2goYil7fX1mdW5jdGlvbiAkYigpe3RyeXtyZXR1cm4gbmV3IGEuQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpfWNhdGNoKGIpe319bS5hamF4U2V0dXAoe2FjY2VwdHM6e3NjcmlwdDpcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJ9LGNvbnRlbnRzOntzY3JpcHQ6Lyg/OmphdmF8ZWNtYSlzY3JpcHQvfSxjb252ZXJ0ZXJzOntcInRleHQgc2NyaXB0XCI6ZnVuY3Rpb24oYSl7cmV0dXJuIG0uZ2xvYmFsRXZhbChhKSxhfX19KSxtLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihhKXt2b2lkIDA9PT1hLmNhY2hlJiYoYS5jYWNoZT0hMSksYS5jcm9zc0RvbWFpbiYmKGEudHlwZT1cIkdFVFwiLGEuZ2xvYmFsPSExKX0pLG0uYWpheFRyYW5zcG9ydChcInNjcmlwdFwiLGZ1bmN0aW9uKGEpe2lmKGEuY3Jvc3NEb21haW4pe3ZhciBiLGM9eS5oZWFkfHxtKFwiaGVhZFwiKVswXXx8eS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJue3NlbmQ6ZnVuY3Rpb24oZCxlKXtiPXkuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxiLmFzeW5jPSEwLGEuc2NyaXB0Q2hhcnNldCYmKGIuY2hhcnNldD1hLnNjcmlwdENoYXJzZXQpLGIuc3JjPWEudXJsLGIub25sb2FkPWIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKGEsYyl7KGN8fCFiLnJlYWR5U3RhdGV8fC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoYi5yZWFkeVN0YXRlKSkmJihiLm9ubG9hZD1iLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLGIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLGI9bnVsbCxjfHxlKDIwMCxcInN1Y2Nlc3NcIikpfSxjLmluc2VydEJlZm9yZShiLGMuZmlyc3RDaGlsZCl9LGFib3J0OmZ1bmN0aW9uKCl7YiYmYi5vbmxvYWQodm9pZCAwLCEwKX19fX0pO3ZhciBfYj1bXSxhYz0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO20uYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBhPV9iLnBvcCgpfHxtLmV4cGFuZG8rXCJfXCIrdmIrKztyZXR1cm4gdGhpc1thXT0hMCxhfX0pLG0uYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbihiLGMsZCl7dmFyIGUsZixnLGg9Yi5qc29ucCE9PSExJiYoYWMudGVzdChiLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgYi5kYXRhJiYhKGIuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJmFjLnRlc3QoYi5kYXRhKSYmXCJkYXRhXCIpO3JldHVybiBofHxcImpzb25wXCI9PT1iLmRhdGFUeXBlc1swXT8oZT1iLmpzb25wQ2FsbGJhY2s9bS5pc0Z1bmN0aW9uKGIuanNvbnBDYWxsYmFjayk/Yi5qc29ucENhbGxiYWNrKCk6Yi5qc29ucENhbGxiYWNrLGg/YltoXT1iW2hdLnJlcGxhY2UoYWMsXCIkMVwiK2UpOmIuanNvbnAhPT0hMSYmKGIudXJsKz0od2IudGVzdChiLnVybCk/XCImXCI6XCI/XCIpK2IuanNvbnArXCI9XCIrZSksYi5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gZ3x8bS5lcnJvcihlK1wiIHdhcyBub3QgY2FsbGVkXCIpLGdbMF19LGIuZGF0YVR5cGVzWzBdPVwianNvblwiLGY9YVtlXSxhW2VdPWZ1bmN0aW9uKCl7Zz1hcmd1bWVudHN9LGQuYWx3YXlzKGZ1bmN0aW9uKCl7YVtlXT1mLGJbZV0mJihiLmpzb25wQ2FsbGJhY2s9Yy5qc29ucENhbGxiYWNrLF9iLnB1c2goZSkpLGcmJm0uaXNGdW5jdGlvbihmKSYmZihnWzBdKSxnPWY9dm9pZCAwfSksXCJzY3JpcHRcIik6dm9pZCAwfSksbS5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKCFhfHxcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gbnVsbDtcImJvb2xlYW5cIj09dHlwZW9mIGImJihjPWIsYj0hMSksYj1ifHx5O3ZhciBkPXUuZXhlYyhhKSxlPSFjJiZbXTtyZXR1cm4gZD9bYi5jcmVhdGVFbGVtZW50KGRbMV0pXTooZD1tLmJ1aWxkRnJhZ21lbnQoW2FdLGIsZSksZSYmZS5sZW5ndGgmJm0oZSkucmVtb3ZlKCksbS5tZXJnZShbXSxkLmNoaWxkTm9kZXMpKX07dmFyIGJjPW0uZm4ubG9hZDttLmZuLmxvYWQ9ZnVuY3Rpb24oYSxiLGMpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhJiZiYylyZXR1cm4gYmMuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBkLGUsZixnPXRoaXMsaD1hLmluZGV4T2YoXCIgXCIpO3JldHVybiBoPj0wJiYoZD1tLnRyaW0oYS5zbGljZShoLGEubGVuZ3RoKSksYT1hLnNsaWNlKDAsaCkpLG0uaXNGdW5jdGlvbihiKT8oYz1iLGI9dm9pZCAwKTpiJiZcIm9iamVjdFwiPT10eXBlb2YgYiYmKGY9XCJQT1NUXCIpLGcubGVuZ3RoPjAmJm0uYWpheCh7dXJsOmEsdHlwZTpmLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6Yn0pLmRvbmUoZnVuY3Rpb24oYSl7ZT1hcmd1bWVudHMsZy5odG1sKGQ/bShcIjxkaXY+XCIpLmFwcGVuZChtLnBhcnNlSFRNTChhKSkuZmluZChkKTphKX0pLmNvbXBsZXRlKGMmJmZ1bmN0aW9uKGEsYil7Zy5lYWNoKGMsZXx8W2EucmVzcG9uc2VUZXh0LGIsYV0pfSksdGhpc30sbS5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oYSxiKXttLmZuW2JdPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm9uKGIsYSl9fSksbS5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG0uZ3JlcChtLnRpbWVycyxmdW5jdGlvbihiKXtyZXR1cm4gYT09PWIuZWxlbX0pLmxlbmd0aH07dmFyIGNjPWEuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O2Z1bmN0aW9uIGRjKGEpe3JldHVybiBtLmlzV2luZG93KGEpP2E6OT09PWEubm9kZVR5cGU/YS5kZWZhdWx0Vmlld3x8YS5wYXJlbnRXaW5kb3c6ITF9bS5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosaz1tLmNzcyhhLFwicG9zaXRpb25cIiksbD1tKGEpLG49e307XCJzdGF0aWNcIj09PWsmJihhLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIiksaD1sLm9mZnNldCgpLGY9bS5jc3MoYSxcInRvcFwiKSxpPW0uY3NzKGEsXCJsZWZ0XCIpLGo9KFwiYWJzb2x1dGVcIj09PWt8fFwiZml4ZWRcIj09PWspJiZtLmluQXJyYXkoXCJhdXRvXCIsW2YsaV0pPi0xLGo/KGQ9bC5wb3NpdGlvbigpLGc9ZC50b3AsZT1kLmxlZnQpOihnPXBhcnNlRmxvYXQoZil8fDAsZT1wYXJzZUZsb2F0KGkpfHwwKSxtLmlzRnVuY3Rpb24oYikmJihiPWIuY2FsbChhLGMsaCkpLG51bGwhPWIudG9wJiYobi50b3A9Yi50b3AtaC50b3ArZyksbnVsbCE9Yi5sZWZ0JiYobi5sZWZ0PWIubGVmdC1oLmxlZnQrZSksXCJ1c2luZ1wiaW4gYj9iLnVzaW5nLmNhbGwoYSxuKTpsLmNzcyhuKX19LG0uZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXttLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkPXt0b3A6MCxsZWZ0OjB9LGU9dGhpc1swXSxmPWUmJmUub3duZXJEb2N1bWVudDtpZihmKXJldHVybiBiPWYuZG9jdW1lbnRFbGVtZW50LG0uY29udGFpbnMoYixlKT8odHlwZW9mIGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0IT09SyYmKGQ9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksYz1kYyhmKSx7dG9wOmQudG9wKyhjLnBhZ2VZT2Zmc2V0fHxiLnNjcm9sbFRvcCktKGIuY2xpZW50VG9wfHwwKSxsZWZ0OmQubGVmdCsoYy5wYWdlWE9mZnNldHx8Yi5zY3JvbGxMZWZ0KS0oYi5jbGllbnRMZWZ0fHwwKX0pOmR9LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGEsYixjPXt0b3A6MCxsZWZ0OjB9LGQ9dGhpc1swXTtyZXR1cm5cImZpeGVkXCI9PT1tLmNzcyhkLFwicG9zaXRpb25cIik/Yj1kLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOihhPXRoaXMub2Zmc2V0UGFyZW50KCksYj10aGlzLm9mZnNldCgpLG0ubm9kZU5hbWUoYVswXSxcImh0bWxcIil8fChjPWEub2Zmc2V0KCkpLGMudG9wKz1tLmNzcyhhWzBdLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksYy5sZWZ0Kz1tLmNzcyhhWzBdLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApKSx7dG9wOmIudG9wLWMudG9wLW0uY3NzKGQsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDpiLmxlZnQtYy5sZWZ0LW0uY3NzKGQsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXMub2Zmc2V0UGFyZW50fHxjYzt3aGlsZShhJiYhbS5ub2RlTmFtZShhLFwiaHRtbFwiKSYmXCJzdGF0aWNcIj09PW0uY3NzKGEsXCJwb3NpdGlvblwiKSlhPWEub2Zmc2V0UGFyZW50O3JldHVybiBhfHxjY30pfX0pLG0uZWFjaCh7c2Nyb2xsTGVmdDpcInBhZ2VYT2Zmc2V0XCIsc2Nyb2xsVG9wOlwicGFnZVlPZmZzZXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz0vWS8udGVzdChiKTttLmZuW2FdPWZ1bmN0aW9uKGQpe3JldHVybiBWKHRoaXMsZnVuY3Rpb24oYSxkLGUpe3ZhciBmPWRjKGEpO3JldHVybiB2b2lkIDA9PT1lP2Y/YiBpbiBmP2ZbYl06Zi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbZF06YVtkXTp2b2lkKGY/Zi5zY3JvbGxUbyhjP20oZikuc2Nyb2xsTGVmdCgpOmUsYz9lOm0oZikuc2Nyb2xsVG9wKCkpOmFbZF09ZSl9LGEsZCxhcmd1bWVudHMubGVuZ3RoLG51bGwpfX0pLG0uZWFjaChbXCJ0b3BcIixcImxlZnRcIl0sZnVuY3Rpb24oYSxiKXttLmNzc0hvb2tzW2JdPUxhKGsucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihhLGMpe3JldHVybiBjPyhjPUphKGEsYiksSGEudGVzdChjKT9tKGEpLnBvc2l0aW9uKClbYl0rXCJweFwiOmMpOnZvaWQgMH0pfSksbS5lYWNoKHtIZWlnaHQ6XCJoZWlnaHRcIixXaWR0aDpcIndpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7bS5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIithLGNvbnRlbnQ6YixcIlwiOlwib3V0ZXJcIithfSxmdW5jdGlvbihjLGQpe20uZm5bZF09ZnVuY3Rpb24oZCxlKXt2YXIgZj1hcmd1bWVudHMubGVuZ3RoJiYoY3x8XCJib29sZWFuXCIhPXR5cGVvZiBkKSxnPWN8fChkPT09ITB8fGU9PT0hMD9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiBWKHRoaXMsZnVuY3Rpb24oYixjLGQpe3ZhciBlO3JldHVybiBtLmlzV2luZG93KGIpP2IuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIrYV06OT09PWIubm9kZVR5cGU/KGU9Yi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoYi5ib2R5W1wic2Nyb2xsXCIrYV0sZVtcInNjcm9sbFwiK2FdLGIuYm9keVtcIm9mZnNldFwiK2FdLGVbXCJvZmZzZXRcIithXSxlW1wiY2xpZW50XCIrYV0pKTp2b2lkIDA9PT1kP20uY3NzKGIsYyxnKTptLnN0eWxlKGIsYyxkLGcpfSxiLGY/ZDp2b2lkIDAsZixudWxsKX19KX0pLG0uZm4uc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aH0sbS5mbi5hbmRTZWxmPW0uZm4uYWRkQmFjayxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZShcImpxdWVyeVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIG19KTt2YXIgZWM9YS5qUXVlcnksZmM9YS4kO3JldHVybiBtLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oYil7cmV0dXJuIGEuJD09PW0mJihhLiQ9ZmMpLGImJmEualF1ZXJ5PT09bSYmKGEualF1ZXJ5PWVjKSxtfSx0eXBlb2YgYj09PUsmJihhLmpRdWVyeT1hLiQ9bSksbX0pO1xuIiwiLyohXG4gKiBAYXV0aG9yICAgIEFuZ2VsbyBEaW5pXG4gKiBAdmVyc2lvbiAgIDEuMFxuICogQGNvcHlyaWdodCBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbigpe3ZhciBkPVwiMS4wXCI7dmFyIGM9d2luZG93LkNsYXNzO3ZhciBiPXdpbmRvdy5DbGFzcz1mdW5jdGlvbihuKXtuPW58fHt9O3ZhciBtPWZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuaW5pdGlhbGl6ZSk/dGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsYXJndW1lbnRzKTpqfTtpZihuLmltcGxlbWVudCl7dmFyIGo9d2luZG93PT09dGhpcz9nKG0ucHJvdG90eXBlKTp0aGlzO3ZhciBsPW4uaW1wbGVtZW50O2EobixcImltcGxlbWVudFwiKTtuPWYobixlKGwpKX1tLnByb3RvdHlwZT1nKG4pO20uY29uc3RydWN0b3I9bTttLl9wYXJlbnQ9ZyhuKTtmb3IodmFyIGs9MCxoPVtcImV4dGVuZFwiLFwiaW1wbGVtZW50XCIsXCJnZXRPcHRpb25zXCIsXCJzZXRPcHRpb25zXCJdO2s8aC5sZW5ndGg7aysrKXttW2hba11dPWJbaFtrXV19cmV0dXJuIG19O2IuZXh0ZW5kPWZ1bmN0aW9uKGope3ZhciBoPXRoaXM7aWYoai5pbXBsZW1lbnQpe3RoaXMucHJvdG90eXBlPWYodGhpcy5wcm90b3R5cGUsZShqLmltcGxlbWVudCkpO2EoaixcImltcGxlbWVudFwiKX1mb3IodmFyIGkgaW4gail7altpXT10eXBlb2YgaltpXT09PVwiZnVuY3Rpb25cIiYmL3BhcmVudC8udGVzdChqW2ldLnRvU3RyaW5nKCkpPyhmdW5jdGlvbihsLGspe3JldHVybiBmdW5jdGlvbigpe3RoaXMucGFyZW50PWguX3BhcmVudFtrXTtyZXR1cm4gbC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkoaltpXSxpKTpqW2ldfXRoaXMuX3BhcmVudD1mKHRoaXMuX3BhcmVudCxqLHRydWUpO3RoaXMucHJvdG90eXBlPWYodGhpcy5wcm90b3R5cGUsaik7cmV0dXJuIHRoaXN9O2IuaW1wbGVtZW50PWZ1bmN0aW9uKGgpe3JldHVybiB0aGlzLnByb3RvdHlwZT1mKHRoaXMucHJvdG90eXBlLGUoaCkpfTtiLmdldE9wdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm90b3R5cGUub3B0aW9uc3x8e319O2Iuc2V0T3B0aW9ucz1mdW5jdGlvbihoKXtyZXR1cm4gdGhpcy5wcm90b3R5cGUub3B0aW9ucz1mKHRoaXMucHJvdG90eXBlLm9wdGlvbnMsaCl9O2Iubm9Db25mbGljdD1mdW5jdGlvbigpe3dpbmRvdy5DbGFzcz1jO3JldHVybiBifTtiLnZlcnNpb249ZDtmdW5jdGlvbiBnKGkpe3ZhciBoPWZ1bmN0aW9uKCl7fTtoLnByb3RvdHlwZT1pLnByb3RvdHlwZXx8aTtyZXR1cm4gbmV3IGgoKX1mdW5jdGlvbiBhKGwsaSxrKXtpZihrKXt2YXIgaD17fTtmb3IodmFyIGogaW4gbCl7aWYoaiE9PWkpe2hbal09bFtqXX19fWVsc2V7ZGVsZXRlIGxbaV19cmV0dXJuIGh8fGx9ZnVuY3Rpb24gZihoLGksayl7aWYoIWh8fCFpKXtyZXR1cm4gaHx8aXx8e319aD1nKGgpO2k9ZyhpKTtmb3IodmFyIGogaW4gaSl7aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlbal0pPT09XCJbb2JqZWN0IE9iamVjdF1cIil7ZihoW2pdLGlbal0pfWVsc2V7aFtqXT0oayYmaFtqXSk/aFtqXTppW2pdfX1yZXR1cm4gaH1mdW5jdGlvbiBlKGwpe3ZhciBrPXt9O2Zvcih2YXIgaD0wO2g8bC5sZW5ndGg7aCsrKXtpZih0eXBlb2YobFtoXSk9PT1cImZ1bmN0aW9uXCIpe2xbaF09bFtoXS5wcm90b3R5cGV9dmFyIGo9YShsW2hdLFwiaW5pdGlhbGl6ZVwiLHRydWUpO2lmKGouaW1wbGVtZW50KXtrPWUoai5pbXBsZW1lbnQpfWVsc2V7az1mKGssail9fXJldHVybiBrfX0pKCk7IiwiLyohXG4gKiBQRVAgdjAuMy4wIHwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9QRVBcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwgaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIFRoaXMgZmlsZSBpcyBtb2RpZmllZCBmb3IgQ01TLiBBbGwgYHRvdWNoLWFjdGlvbmAgYXR0cmlidXRlcyBhcmUgbm93IGBkYXRhLXRvdWNoLWFjdGlvbmBcbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICBnbG9iYWwuUG9pbnRlckV2ZW50c1BvbHlmaWxsID0gZmFjdG9yeSgpXG59KHRoaXMsIGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1vZHVsZSBpbXBsZW1lbnRzIGFuIG1hcCBvZiBwb2ludGVyIHN0YXRlc1xuICAgKi9cbiAgdmFyIFVTRV9NQVAgPSB3aW5kb3cuTWFwICYmIHdpbmRvdy5NYXAucHJvdG90eXBlLmZvckVhY2g7XG4gIHZhciBQT0lOVEVSU19GTiA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnNpemU7IH07XG4gIGZ1bmN0aW9uIFBvaW50ZXJNYXAoKSB7XG4gICAgaWYgKFVTRV9NQVApIHtcbiAgICAgIHZhciBtID0gbmV3IE1hcCgpO1xuICAgICAgbS5wb2ludGVycyA9IFBPSU5URVJTX0ZOO1xuICAgICAgcmV0dXJuIG07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMua2V5cyA9IFtdO1xuICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICB9XG4gIH1cblxuICBQb2ludGVyTWFwLnByb3RvdHlwZSA9IHtcbiAgICBzZXQ6IGZ1bmN0aW9uKGluSWQsIGluRXZlbnQpIHtcbiAgICAgIHZhciBpID0gdGhpcy5rZXlzLmluZGV4T2YoaW5JZCk7XG4gICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW2ldID0gaW5FdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMua2V5cy5wdXNoKGluSWQpO1xuICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKGluRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbihpbklkKSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXlzLmluZGV4T2YoaW5JZCkgPiAtMTtcbiAgICB9LFxuICAgICdkZWxldGUnOiBmdW5jdGlvbihpbklkKSB7XG4gICAgICB2YXIgaSA9IHRoaXMua2V5cy5pbmRleE9mKGluSWQpO1xuICAgICAgaWYgKGkgPiAtMSkge1xuICAgICAgICB0aGlzLmtleXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB0aGlzLnZhbHVlcy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGluSWQpIHtcbiAgICAgIHZhciBpID0gdGhpcy5rZXlzLmluZGV4T2YoaW5JZCk7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbaV07XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmtleXMubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMudmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgfSxcbiAgICAvLyByZXR1cm4gdmFsdWUsIGtleSwgbWFwXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHRoaXMudmFsdWVzLmZvckVhY2goZnVuY3Rpb24odiwgaSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHYsIHRoaXMua2V5c1tpXSwgdGhpcyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LFxuICAgIHBvaW50ZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleXMubGVuZ3RoO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX3BvaW50ZXJtYXAgPSBQb2ludGVyTWFwO1xuXG4gIHZhciBDTE9ORV9QUk9QUyA9IFtcbiAgICAvLyBNb3VzZUV2ZW50XG4gICAgJ2J1YmJsZXMnLFxuICAgICdjYW5jZWxhYmxlJyxcbiAgICAndmlldycsXG4gICAgJ2RldGFpbCcsXG4gICAgJ3NjcmVlblgnLFxuICAgICdzY3JlZW5ZJyxcbiAgICAnY2xpZW50WCcsXG4gICAgJ2NsaWVudFknLFxuICAgICdjdHJsS2V5JyxcbiAgICAnYWx0S2V5JyxcbiAgICAnc2hpZnRLZXknLFxuICAgICdtZXRhS2V5JyxcbiAgICAnYnV0dG9uJyxcbiAgICAncmVsYXRlZFRhcmdldCcsXG4gICAgLy8gRE9NIExldmVsIDNcbiAgICAnYnV0dG9ucycsXG4gICAgLy8gUG9pbnRlckV2ZW50XG4gICAgJ3BvaW50ZXJJZCcsXG4gICAgJ3dpZHRoJyxcbiAgICAnaGVpZ2h0JyxcbiAgICAncHJlc3N1cmUnLFxuICAgICd0aWx0WCcsXG4gICAgJ3RpbHRZJyxcbiAgICAncG9pbnRlclR5cGUnLFxuICAgICdod1RpbWVzdGFtcCcsXG4gICAgJ2lzUHJpbWFyeScsXG4gICAgLy8gZXZlbnQgaW5zdGFuY2VcbiAgICAndHlwZScsXG4gICAgJ3RhcmdldCcsXG4gICAgJ2N1cnJlbnRUYXJnZXQnLFxuICAgICd3aGljaCcsXG4gICAgJ3BhZ2VYJyxcbiAgICAncGFnZVknLFxuICAgICd0aW1lU3RhbXAnXG4gIF07XG5cbiAgdmFyIENMT05FX0RFRkFVTFRTID0gW1xuICAgIC8vIE1vdXNlRXZlbnRcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICAwLFxuICAgIG51bGwsXG4gICAgLy8gRE9NIExldmVsIDNcbiAgICAwLFxuICAgIC8vIFBvaW50ZXJFdmVudFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgICcnLFxuICAgIDAsXG4gICAgZmFsc2UsXG4gICAgLy8gZXZlbnQgaW5zdGFuY2VcbiAgICAnJyxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMFxuICBdO1xuXG4gIHZhciBIQVNfU1ZHX0lOU1RBTkNFID0gKHR5cGVvZiBTVkdFbGVtZW50SW5zdGFuY2UgIT09ICd1bmRlZmluZWQnKTtcblxuICAvKipcbiAgICogVGhpcyBtb2R1bGUgaXMgZm9yIG5vcm1hbGl6aW5nIGV2ZW50cy4gTW91c2UgYW5kIFRvdWNoIGV2ZW50cyB3aWxsIGJlXG4gICAqIGNvbGxlY3RlZCBoZXJlLCBhbmQgZmlyZSBQb2ludGVyRXZlbnRzIHRoYXQgaGF2ZSB0aGUgc2FtZSBzZW1hbnRpY3MsIG5vXG4gICAqIG1hdHRlciB0aGUgc291cmNlLlxuICAgKiBFdmVudHMgZmlyZWQ6XG4gICAqICAgLSBwb2ludGVyZG93bjogYSBwb2ludGluZyBpcyBhZGRlZFxuICAgKiAgIC0gcG9pbnRlcnVwOiBhIHBvaW50ZXIgaXMgcmVtb3ZlZFxuICAgKiAgIC0gcG9pbnRlcm1vdmU6IGEgcG9pbnRlciBpcyBtb3ZlZFxuICAgKiAgIC0gcG9pbnRlcm92ZXI6IGEgcG9pbnRlciBjcm9zc2VzIGludG8gYW4gZWxlbWVudFxuICAgKiAgIC0gcG9pbnRlcm91dDogYSBwb2ludGVyIGxlYXZlcyBhbiBlbGVtZW50XG4gICAqICAgLSBwb2ludGVyY2FuY2VsOiBhIHBvaW50ZXIgd2lsbCBubyBsb25nZXIgZ2VuZXJhdGUgZXZlbnRzXG4gICAqL1xuICB2YXIgZGlzcGF0Y2hlciA9IHtcbiAgICBwb2ludGVybWFwOiBuZXcgX3BvaW50ZXJtYXAoKSxcbiAgICBldmVudE1hcDogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBjYXB0dXJlSW5mbzogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAvLyBTY29wZSBvYmplY3RzIGZvciBuYXRpdmUgZXZlbnRzLlxuICAgIC8vIFRoaXMgZXhpc3RzIGZvciBlYXNlIG9mIHRlc3RpbmcuXG4gICAgZXZlbnRTb3VyY2VzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgIGV2ZW50U291cmNlTGlzdDogW10sXG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IGV2ZW50IHNvdXJjZSB0aGF0IHdpbGwgZ2VuZXJhdGUgcG9pbnRlciBldmVudHMuXG4gICAgICpcbiAgICAgKiBgaW5Tb3VyY2VgIG11c3QgY29udGFpbiBhbiBhcnJheSBvZiBldmVudCBuYW1lcyBuYW1lZCBgZXZlbnRzYCwgYW5kXG4gICAgICogZnVuY3Rpb25zIHdpdGggdGhlIG5hbWVzIHNwZWNpZmllZCBpbiB0aGUgYGV2ZW50c2AgYXJyYXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIGZvciB0aGUgZXZlbnQgc291cmNlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBBIG5ldyBzb3VyY2Ugb2YgcGxhdGZvcm0gZXZlbnRzLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyU291cmNlOiBmdW5jdGlvbihuYW1lLCBzb3VyY2UpIHtcbiAgICAgIHZhciBzID0gc291cmNlO1xuICAgICAgdmFyIG5ld0V2ZW50cyA9IHMuZXZlbnRzO1xuICAgICAgaWYgKG5ld0V2ZW50cykge1xuICAgICAgICBuZXdFdmVudHMuZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKHNbZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRNYXBbZV0gPSBzW2VdLmJpbmQocyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5ldmVudFNvdXJjZXNbbmFtZV0gPSBzO1xuICAgICAgICB0aGlzLmV2ZW50U291cmNlTGlzdC5wdXNoKHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciBsID0gdGhpcy5ldmVudFNvdXJjZUxpc3QubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGVzOyAoaSA8IGwpICYmIChlcyA9IHRoaXMuZXZlbnRTb3VyY2VMaXN0W2ldKTsgaSsrKSB7XG4gICAgICAgIC8vIGNhbGwgZXZlbnRzb3VyY2UgcmVnaXN0ZXJcbiAgICAgICAgZXMucmVnaXN0ZXIuY2FsbChlcywgZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgbCA9IHRoaXMuZXZlbnRTb3VyY2VMaXN0Lmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlczsgKGkgPCBsKSAmJiAoZXMgPSB0aGlzLmV2ZW50U291cmNlTGlzdFtpXSk7IGkrKykge1xuICAgICAgICAvLyBjYWxsIGV2ZW50c291cmNlIHJlZ2lzdGVyXG4gICAgICAgIGVzLnVucmVnaXN0ZXIuY2FsbChlcywgZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjb250YWluczogLypzY29wZS5leHRlcm5hbC5jb250YWlucyB8fCAqL2Z1bmN0aW9uKGNvbnRhaW5lciwgY29udGFpbmVkKSB7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNvbnRhaW5zKGNvbnRhaW5lZCk7XG4gICAgfSxcbiAgICAvLyBFVkVOVFNcbiAgICBkb3duOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICBpbkV2ZW50LmJ1YmJsZXMgPSB0cnVlO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ3BvaW50ZXJkb3duJywgaW5FdmVudCk7XG4gICAgfSxcbiAgICBtb3ZlOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICBpbkV2ZW50LmJ1YmJsZXMgPSB0cnVlO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ3BvaW50ZXJtb3ZlJywgaW5FdmVudCk7XG4gICAgfSxcbiAgICB1cDogZnVuY3Rpb24oaW5FdmVudCkge1xuICAgICAgaW5FdmVudC5idWJibGVzID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdwb2ludGVydXAnLCBpbkV2ZW50KTtcbiAgICB9LFxuICAgIGVudGVyOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICBpbkV2ZW50LmJ1YmJsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdwb2ludGVyZW50ZXInLCBpbkV2ZW50KTtcbiAgICB9LFxuICAgIGxlYXZlOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICBpbkV2ZW50LmJ1YmJsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdwb2ludGVybGVhdmUnLCBpbkV2ZW50KTtcbiAgICB9LFxuICAgIG92ZXI6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIGluRXZlbnQuYnViYmxlcyA9IHRydWU7XG4gICAgICB0aGlzLmZpcmVFdmVudCgncG9pbnRlcm92ZXInLCBpbkV2ZW50KTtcbiAgICB9LFxuICAgIG91dDogZnVuY3Rpb24oaW5FdmVudCkge1xuICAgICAgaW5FdmVudC5idWJibGVzID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdwb2ludGVyb3V0JywgaW5FdmVudCk7XG4gICAgfSxcbiAgICBjYW5jZWw6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIGluRXZlbnQuYnViYmxlcyA9IHRydWU7XG4gICAgICB0aGlzLmZpcmVFdmVudCgncG9pbnRlcmNhbmNlbCcsIGluRXZlbnQpO1xuICAgIH0sXG4gICAgbGVhdmVPdXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB0aGlzLm91dChldmVudCk7XG4gICAgICBpZiAoIXRoaXMuY29udGFpbnMoZXZlbnQudGFyZ2V0LCBldmVudC5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgICB0aGlzLmxlYXZlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVudGVyT3ZlcjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHRoaXMub3ZlcihldmVudCk7XG4gICAgICBpZiAoIXRoaXMuY29udGFpbnMoZXZlbnQudGFyZ2V0LCBldmVudC5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgICB0aGlzLmVudGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIExJU1RFTkVSIExPR0lDXG4gICAgZXZlbnRIYW5kbGVyOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gcHJldmVudCBtdWx0aXBsZSBkaXNwYXRjaCBvZiBwb2ludGVyZXZlbnRzIGZyb21cbiAgICAgIC8vIHBsYXRmb3JtIGV2ZW50cy4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gdHdvIGVsZW1lbnRzIGluIGRpZmZlcmVudCBzY29wZXNcbiAgICAgIC8vIGFyZSBzZXQgdXAgdG8gY3JlYXRlIHBvaW50ZXIgZXZlbnRzLCB3aGljaCBpcyByZWxldmFudCB0byBTaGFkb3cgRE9NLlxuICAgICAgaWYgKGluRXZlbnQuX2hhbmRsZWRCeVBFKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gaW5FdmVudC50eXBlO1xuICAgICAgdmFyIGZuID0gdGhpcy5ldmVudE1hcCAmJiB0aGlzLmV2ZW50TWFwW3R5cGVdO1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGZuKGluRXZlbnQpO1xuICAgICAgfVxuICAgICAgaW5FdmVudC5faGFuZGxlZEJ5UEUgPSB0cnVlO1xuICAgIH0sXG4gICAgLy8gc2V0IHVwIGV2ZW50IGxpc3RlbmVyc1xuICAgIGxpc3RlbjogZnVuY3Rpb24odGFyZ2V0LCBldmVudHMpIHtcbiAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudCh0YXJnZXQsIGUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSxcbiAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG4gICAgdW5saXN0ZW46IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnRzKSB7XG4gICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnQodGFyZ2V0LCBlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG4gICAgYWRkRXZlbnQ6IC8qc2NvcGUuZXh0ZXJuYWwuYWRkRXZlbnQgfHwgKi9mdW5jdGlvbih0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLmJvdW5kSGFuZGxlcik7XG4gICAgfSxcbiAgICByZW1vdmVFdmVudDogLypzY29wZS5leHRlcm5hbC5yZW1vdmVFdmVudCB8fCAqL2Z1bmN0aW9uKHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuYm91bmRIYW5kbGVyKTtcbiAgICB9LFxuICAgIC8vIEVWRU5UIENSRUFUSU9OIEFORCBUUkFDS0lOR1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRXZlbnQgb2YgdHlwZSBgaW5UeXBlYCwgYmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIGluXG4gICAgICogYGluRXZlbnRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGluVHlwZSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHR5cGUgb2YgZXZlbnQgdG8gY3JlYXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gaW5FdmVudCBBIHBsYXRmb3JtIGV2ZW50IHdpdGggYSB0YXJnZXRcbiAgICAgKiBAcmV0dXJuIHtFdmVudH0gQSBQb2ludGVyRXZlbnQgb2YgdHlwZSBgaW5UeXBlYFxuICAgICAqL1xuICAgIG1ha2VFdmVudDogZnVuY3Rpb24oaW5UeXBlLCBpbkV2ZW50KSB7XG4gICAgICAvLyByZWxhdGVkVGFyZ2V0IG11c3QgYmUgbnVsbCBpZiBwb2ludGVyIGlzIGNhcHR1cmVkXG4gICAgICBpZiAodGhpcy5jYXB0dXJlSW5mb1tpbkV2ZW50LnBvaW50ZXJJZF0pIHtcbiAgICAgICAgaW5FdmVudC5yZWxhdGVkVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBlID0gbmV3IFBvaW50ZXJFdmVudChpblR5cGUsIGluRXZlbnQpO1xuICAgICAgaWYgKGluRXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCA9IGluRXZlbnQucHJldmVudERlZmF1bHQ7XG4gICAgICB9XG4gICAgICBlLl90YXJnZXQgPSBlLl90YXJnZXQgfHwgaW5FdmVudC50YXJnZXQ7XG4gICAgICByZXR1cm4gZTtcbiAgICB9LFxuICAgIC8vIG1ha2UgYW5kIGRpc3BhdGNoIGFuIGV2ZW50IGluIG9uZSBjYWxsXG4gICAgZmlyZUV2ZW50OiBmdW5jdGlvbihpblR5cGUsIGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gdGhpcy5tYWtlRXZlbnQoaW5UeXBlLCBpbkV2ZW50KTtcbiAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc25hcHNob3Qgb2YgaW5FdmVudCwgd2l0aCB3cml0YWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH0gaW5FdmVudCBBbiBldmVudCB0aGF0IGNvbnRhaW5zIHByb3BlcnRpZXMgdG8gY29weS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHNoYWxsb3cgY29waWVzIG9mIGBpbkV2ZW50YCdzXG4gICAgICogICAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBjbG9uZUV2ZW50OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICB2YXIgZXZlbnRDb3B5ID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgcDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ0xPTkVfUFJPUFMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcCA9IENMT05FX1BST1BTW2ldO1xuICAgICAgICBldmVudENvcHlbcF0gPSBpbkV2ZW50W3BdIHx8IENMT05FX0RFRkFVTFRTW2ldO1xuICAgICAgICAvLyBXb3JrIGFyb3VuZCBTVkdJbnN0YW5jZUVsZW1lbnQgc2hhZG93IHRyZWVcbiAgICAgICAgLy8gUmV0dXJuIHRoZSA8dXNlPiBlbGVtZW50IHRoYXQgaXMgcmVwcmVzZW50ZWQgYnkgdGhlIGluc3RhbmNlIGZvciBTYWZhcmksIENocm9tZSwgSUUuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGJlaGF2aW9yIGltcGxlbWVudGVkIGJ5IEZpcmVmb3guXG4gICAgICAgIGlmIChIQVNfU1ZHX0lOU1RBTkNFICYmIChwID09PSAndGFyZ2V0JyB8fCBwID09PSAncmVsYXRlZFRhcmdldCcpKSB7XG4gICAgICAgICAgaWYgKGV2ZW50Q29weVtwXSBpbnN0YW5jZW9mIFNWR0VsZW1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgZXZlbnRDb3B5W3BdID0gZXZlbnRDb3B5W3BdLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8ga2VlcCB0aGUgc2VtYW50aWNzIG9mIHByZXZlbnREZWZhdWx0XG4gICAgICBpZiAoaW5FdmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudENvcHkucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpbkV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZlbnRDb3B5O1xuICAgIH0sXG4gICAgZ2V0VGFyZ2V0OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICAvLyBpZiBwb2ludGVyIGNhcHR1cmUgaXMgc2V0LCByb3V0ZSBhbGwgZXZlbnRzIGZvciB0aGUgc3BlY2lmaWVkIHBvaW50ZXJJZFxuICAgICAgLy8gdG8gdGhlIGNhcHR1cmUgdGFyZ2V0XG4gICAgICByZXR1cm4gdGhpcy5jYXB0dXJlSW5mb1tpbkV2ZW50LnBvaW50ZXJJZF0gfHwgaW5FdmVudC5fdGFyZ2V0O1xuICAgIH0sXG4gICAgc2V0Q2FwdHVyZTogZnVuY3Rpb24oaW5Qb2ludGVySWQsIGluVGFyZ2V0KSB7XG4gICAgICBpZiAodGhpcy5jYXB0dXJlSW5mb1tpblBvaW50ZXJJZF0pIHtcbiAgICAgICAgdGhpcy5yZWxlYXNlQ2FwdHVyZShpblBvaW50ZXJJZCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhcHR1cmVJbmZvW2luUG9pbnRlcklkXSA9IGluVGFyZ2V0O1xuICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGUuaW5pdEV2ZW50KCdnb3Rwb2ludGVyY2FwdHVyZScsIHRydWUsIGZhbHNlKTtcbiAgICAgIGUucG9pbnRlcklkID0gaW5Qb2ludGVySWQ7XG4gICAgICB0aGlzLmltcGxpY2l0UmVsZWFzZSA9IHRoaXMucmVsZWFzZUNhcHR1cmUuYmluZCh0aGlzLCBpblBvaW50ZXJJZCk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLmltcGxpY2l0UmVsZWFzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgdGhpcy5pbXBsaWNpdFJlbGVhc2UpO1xuICAgICAgZS5fdGFyZ2V0ID0gaW5UYXJnZXQ7XG4gICAgICB0aGlzLmFzeW5jRGlzcGF0Y2hFdmVudChlKTtcbiAgICB9LFxuICAgIHJlbGVhc2VDYXB0dXJlOiBmdW5jdGlvbihpblBvaW50ZXJJZCkge1xuICAgICAgdmFyIHQgPSB0aGlzLmNhcHR1cmVJbmZvW2luUG9pbnRlcklkXTtcbiAgICAgIGlmICh0KSB7XG4gICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGUuaW5pdEV2ZW50KCdsb3N0cG9pbnRlcmNhcHR1cmUnLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIGUucG9pbnRlcklkID0gaW5Qb2ludGVySWQ7XG4gICAgICAgIHRoaXMuY2FwdHVyZUluZm9baW5Qb2ludGVySWRdID0gdW5kZWZpbmVkO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLmltcGxpY2l0UmVsZWFzZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLmltcGxpY2l0UmVsZWFzZSk7XG4gICAgICAgIGUuX3RhcmdldCA9IHQ7XG4gICAgICAgIHRoaXMuYXN5bmNEaXNwYXRjaEV2ZW50KGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyB0aGUgZXZlbnQgdG8gaXRzIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGluRXZlbnQgVGhlIGV2ZW50IHRvIGJlIGRpc3BhdGNoZWQuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBhbiBldmVudCBoYW5kbGVyIHJldHVybnMgdHJ1ZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGRpc3BhdGNoRXZlbnQ6IC8qc2NvcGUuZXh0ZXJuYWwuZGlzcGF0Y2hFdmVudCB8fCAqL2Z1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciB0ID0gdGhpcy5nZXRUYXJnZXQoaW5FdmVudCk7XG4gICAgICBpZiAodCkge1xuICAgICAgICByZXR1cm4gdC5kaXNwYXRjaEV2ZW50KGluRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmNEaXNwYXRjaEV2ZW50OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5kaXNwYXRjaEV2ZW50LmJpbmQodGhpcywgaW5FdmVudCkpO1xuICAgIH1cbiAgfTtcbiAgZGlzcGF0Y2hlci5ib3VuZEhhbmRsZXIgPSBkaXNwYXRjaGVyLmV2ZW50SGFuZGxlci5iaW5kKGRpc3BhdGNoZXIpO1xuXG4gIHZhciBfZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG5cbiAgdmFyIHRhcmdldGluZyA9IHtcbiAgICBzaGFkb3c6IGZ1bmN0aW9uKGluRWwpIHtcbiAgICAgIGlmIChpbkVsKSB7XG4gICAgICAgIHJldHVybiBpbkVsLnNoYWRvd1Jvb3QgfHwgaW5FbC53ZWJraXRTaGFkb3dSb290O1xuICAgICAgfVxuICAgIH0sXG4gICAgY2FuVGFyZ2V0OiBmdW5jdGlvbihzaGFkb3cpIHtcbiAgICAgIHJldHVybiBzaGFkb3cgJiYgQm9vbGVhbihzaGFkb3cuZWxlbWVudEZyb21Qb2ludCk7XG4gICAgfSxcbiAgICB0YXJnZXRpbmdTaGFkb3c6IGZ1bmN0aW9uKGluRWwpIHtcbiAgICAgIHZhciBzID0gdGhpcy5zaGFkb3coaW5FbCk7XG4gICAgICBpZiAodGhpcy5jYW5UYXJnZXQocykpIHtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbGRlclNoYWRvdzogZnVuY3Rpb24oc2hhZG93KSB7XG4gICAgICB2YXIgb3MgPSBzaGFkb3cub2xkZXJTaGFkb3dSb290O1xuICAgICAgaWYgKCFvcykge1xuICAgICAgICB2YXIgc2UgPSBzaGFkb3cucXVlcnlTZWxlY3Rvcignc2hhZG93Jyk7XG4gICAgICAgIGlmIChzZSkge1xuICAgICAgICAgIG9zID0gc2Uub2xkZXJTaGFkb3dSb290O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3M7XG4gICAgfSxcbiAgICBhbGxTaGFkb3dzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgc2hhZG93cyA9IFtdLCBzID0gdGhpcy5zaGFkb3coZWxlbWVudCk7XG4gICAgICB3aGlsZShzKSB7XG4gICAgICAgIHNoYWRvd3MucHVzaChzKTtcbiAgICAgICAgcyA9IHRoaXMub2xkZXJTaGFkb3cocyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hhZG93cztcbiAgICB9LFxuICAgIHNlYXJjaFJvb3Q6IGZ1bmN0aW9uKGluUm9vdCwgeCwgeSkge1xuICAgICAgaWYgKGluUm9vdCkge1xuICAgICAgICB2YXIgdCA9IGluUm9vdC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgICB2YXIgc3QsIHNyLCBvcztcbiAgICAgICAgLy8gaXMgZWxlbWVudCBhIHNoYWRvdyBob3N0P1xuICAgICAgICBzciA9IHRoaXMudGFyZ2V0aW5nU2hhZG93KHQpO1xuICAgICAgICB3aGlsZSAoc3IpIHtcbiAgICAgICAgICAvLyBmaW5kIHRoZSB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIHNoYWRvdyByb290XG4gICAgICAgICAgc3QgPSBzci5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgICAgIGlmICghc3QpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBvbGRlciBzaGFkb3dzXG4gICAgICAgICAgICBzciA9IHRoaXMub2xkZXJTaGFkb3coc3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzaGFkb3dlZCBlbGVtZW50IG1heSBjb250YWluIGEgc2hhZG93IHJvb3RcbiAgICAgICAgICAgIHZhciBzc3IgPSB0aGlzLnRhcmdldGluZ1NoYWRvdyhzdCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hSb290KHNzciwgeCwgeSkgfHwgc3Q7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGxpZ2h0IGRvbSBlbGVtZW50IGlzIHRoZSB0YXJnZXRcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBvd25lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgdmFyIHMgPSBlbGVtZW50O1xuICAgICAgLy8gd2FsayB1cCB1bnRpbCB5b3UgaGl0IHRoZSBzaGFkb3cgcm9vdCBvciBkb2N1bWVudFxuICAgICAgd2hpbGUgKHMucGFyZW50Tm9kZSkge1xuICAgICAgICBzID0gcy5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgLy8gdGhlIG93bmVyIGVsZW1lbnQgaXMgZXhwZWN0ZWQgdG8gYmUgYSBEb2N1bWVudCBvciBTaGFkb3dSb290XG4gICAgICBpZiAocy5ub2RlVHlwZSAhPSBOb2RlLkRPQ1VNRU5UX05PREUgJiYgcy5ub2RlVHlwZSAhPSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcbiAgICAgICAgcyA9IGRvY3VtZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHM7XG4gICAgfSxcbiAgICBmaW5kVGFyZ2V0OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICB2YXIgeCA9IGluRXZlbnQuY2xpZW50WCwgeSA9IGluRXZlbnQuY2xpZW50WTtcbiAgICAgIC8vIGlmIHRoZSBsaXN0ZW5lciBpcyBpbiB0aGUgc2hhZG93IHJvb3QsIGl0IGlzIG11Y2ggZmFzdGVyIHRvIHN0YXJ0IHRoZXJlXG4gICAgICB2YXIgcyA9IHRoaXMub3duZXIoaW5FdmVudC50YXJnZXQpO1xuICAgICAgLy8gaWYgeCwgeSBpcyBub3QgaW4gdGhpcyByb290LCBmYWxsIGJhY2sgdG8gZG9jdW1lbnQgc2VhcmNoXG4gICAgICBpZiAoIXMuZWxlbWVudEZyb21Qb2ludCh4LCB5KSkge1xuICAgICAgICBzID0gZG9jdW1lbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zZWFyY2hSb290KHMsIHgsIHkpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogVGhpcyBtb2R1bGUgdXNlcyBNdXRhdGlvbiBPYnNlcnZlcnMgdG8gZHluYW1pY2FsbHkgYWRqdXN0IHdoaWNoIG5vZGVzIHdpbGxcbiAgICogZ2VuZXJhdGUgUG9pbnRlciBFdmVudHMuXG4gICAqXG4gICAqIEFsbCBub2RlcyB0aGF0IHdpc2ggdG8gZ2VuZXJhdGUgUG9pbnRlciBFdmVudHMgbXVzdCBoYXZlIHRoZSBhdHRyaWJ1dGVcbiAgICogYGRhdGEtdG91Y2gtYWN0aW9uYCBzZXQgdG8gYG5vbmVgLlxuICAgKi9cbiAgdmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpO1xuICB2YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLm1hcCk7XG4gIHZhciB0b0FycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuc2xpY2UpO1xuICB2YXIgZmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLmZpbHRlcik7XG4gIHZhciBNTyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICB2YXIgU0VMRUNUT1IgPSAnW2RhdGEtdG91Y2gtYWN0aW9uXSc7XG4gIHZhciBPQlNFUlZFUl9JTklUID0ge1xuICAgIHN1YnRyZWU6IHRydWUsXG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUsXG4gICAgYXR0cmlidXRlRmlsdGVyOiBbJ2RhdGEtdG91Y2gtYWN0aW9uJ11cbiAgfTtcblxuICBmdW5jdGlvbiBJbnN0YWxsZXIoYWRkLCByZW1vdmUsIGNoYW5nZWQsIGJpbmRlcikge1xuICAgIHRoaXMuYWRkQ2FsbGJhY2sgPSBhZGQuYmluZChiaW5kZXIpO1xuICAgIHRoaXMucmVtb3ZlQ2FsbGJhY2sgPSByZW1vdmUuYmluZChiaW5kZXIpO1xuICAgIHRoaXMuY2hhbmdlZENhbGxiYWNrID0gY2hhbmdlZC5iaW5kKGJpbmRlcik7XG4gICAgaWYgKE1PKSB7XG4gICAgICB0aGlzLm9ic2VydmVyID0gbmV3IE1PKHRoaXMubXV0YXRpb25XYXRjaGVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIEluc3RhbGxlci5wcm90b3R5cGUgPSB7XG4gICAgd2F0Y2hTdWJ0cmVlOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIC8vIE9ubHkgd2F0Y2ggc2NvcGVzIHRoYXQgY2FuIHRhcmdldCBmaW5kLCBhcyB0aGVzZSBhcmUgdG9wLWxldmVsLlxuICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbiBzZWUgZHVwbGljYXRlIGFkZGl0aW9ucyBhbmQgcmVtb3ZhbHMgdGhhdCBhZGQgbm9pc2UuXG4gICAgICAvL1xuICAgICAgLy8gVE9ETyhkZnJlZWRtYW4pOiBGb3Igc29tZSBpbnN0YW5jZXMgd2l0aCBTaGFkb3dET01Qb2x5ZmlsbCwgd2UgY2FuIHNlZVxuICAgICAgLy8gYSByZW1vdmFsIHdpdGhvdXQgYW4gaW5zZXJ0aW9uIHdoZW4gYSBub2RlIGlzIHJlZGlzdHJpYnV0ZWQgYW1vbmdcbiAgICAgIC8vIHNoYWRvd3MuIFNpbmNlIGl0IGFsbCBlbmRzIHVwIGNvcnJlY3QgaW4gdGhlIGRvY3VtZW50LCB3YXRjaGluZyBvbmx5XG4gICAgICAvLyB0aGUgZG9jdW1lbnQgd2lsbCB5aWVsZCB0aGUgY29ycmVjdCBtdXRhdGlvbnMgdG8gd2F0Y2guXG4gICAgICBpZiAodGFyZ2V0aW5nLmNhblRhcmdldCh0YXJnZXQpKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIE9CU0VSVkVSX0lOSVQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW5hYmxlT25TdWJ0cmVlOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIHRoaXMud2F0Y2hTdWJ0cmVlKHRhcmdldCk7XG4gICAgICBpZiAodGFyZ2V0ID09PSBkb2N1bWVudCAmJiBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnY29tcGxldGUnKSB7XG4gICAgICAgIHRoaXMuaW5zdGFsbE9uTG9hZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnN0YWxsTmV3U3VidHJlZSh0YXJnZXQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5zdGFsbE5ld1N1YnRyZWU6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgZm9yRWFjaCh0aGlzLmZpbmRFbGVtZW50cyh0YXJnZXQpLCB0aGlzLmFkZEVsZW1lbnQsIHRoaXMpO1xuICAgIH0sXG4gICAgZmluZEVsZW1lbnRzOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIGlmICh0YXJnZXQucXVlcnlTZWxlY3RvckFsbCkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG4gICAgcmVtb3ZlRWxlbWVudDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2FsbGJhY2soZWwpO1xuICAgIH0sXG4gICAgYWRkRWxlbWVudDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHRoaXMuYWRkQ2FsbGJhY2soZWwpO1xuICAgIH0sXG4gICAgZWxlbWVudENoYW5nZWQ6IGZ1bmN0aW9uKGVsLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5jaGFuZ2VkQ2FsbGJhY2soZWwsIG9sZFZhbHVlKTtcbiAgICB9LFxuICAgIGNvbmNhdExpc3RzOiBmdW5jdGlvbihhY2N1bSwgbGlzdCkge1xuICAgICAgcmV0dXJuIGFjY3VtLmNvbmNhdCh0b0FycmF5KGxpc3QpKTtcbiAgICB9LFxuICAgIC8vIHJlZ2lzdGVyIGFsbCBkYXRhLXRvdWNoLWFjdGlvbiA9IG5vbmUgbm9kZXMgb24gZG9jdW1lbnQgbG9hZFxuICAgIGluc3RhbGxPbkxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgIHRoaXMuaW5zdGFsbE5ld1N1YnRyZWUoZG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG4gICAgaXNFbGVtZW50OiBmdW5jdGlvbihuKSB7XG4gICAgICByZXR1cm4gbi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG4gICAgfSxcbiAgICBmbGF0dGVuTXV0YXRpb25UcmVlOiBmdW5jdGlvbihpbk5vZGVzKSB7XG4gICAgICAvLyBmaW5kIGNoaWxkcmVuIHdpdGggZGF0YS10b3VjaC1hY3Rpb25cbiAgICAgIHZhciB0cmVlID0gbWFwKGluTm9kZXMsIHRoaXMuZmluZEVsZW1lbnRzLCB0aGlzKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYWRkZWQgbm9kZXMgYXJlIGFjY291bnRlZCBmb3JcbiAgICAgIHRyZWUucHVzaChmaWx0ZXIoaW5Ob2RlcywgdGhpcy5pc0VsZW1lbnQpKTtcbiAgICAgIC8vIGZsYXR0ZW4gdGhlIGxpc3RcbiAgICAgIHJldHVybiB0cmVlLnJlZHVjZSh0aGlzLmNvbmNhdExpc3RzLCBbXSk7XG4gICAgfSxcbiAgICBtdXRhdGlvbldhdGNoZXI6IGZ1bmN0aW9uKG11dGF0aW9ucykge1xuICAgICAgbXV0YXRpb25zLmZvckVhY2godGhpcy5tdXRhdGlvbkhhbmRsZXIsIHRoaXMpO1xuICAgIH0sXG4gICAgbXV0YXRpb25IYW5kbGVyOiBmdW5jdGlvbihtKSB7XG4gICAgICBpZiAobS50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICB2YXIgYWRkZWQgPSB0aGlzLmZsYXR0ZW5NdXRhdGlvblRyZWUobS5hZGRlZE5vZGVzKTtcbiAgICAgICAgYWRkZWQuZm9yRWFjaCh0aGlzLmFkZEVsZW1lbnQsIHRoaXMpO1xuICAgICAgICB2YXIgcmVtb3ZlZCA9IHRoaXMuZmxhdHRlbk11dGF0aW9uVHJlZShtLnJlbW92ZWROb2Rlcyk7XG4gICAgICAgIHJlbW92ZWQuZm9yRWFjaCh0aGlzLnJlbW92ZUVsZW1lbnQsIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChtLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xuICAgICAgICB0aGlzLmVsZW1lbnRDaGFuZ2VkKG0udGFyZ2V0LCBtLm9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKCFNTykge1xuICAgIEluc3RhbGxlci5wcm90b3R5cGUud2F0Y2hTdWJ0cmVlID0gZnVuY3Rpb24oKXtcbiAgICAgIGNvbnNvbGUud2FybignUG9pbnRlckV2ZW50c1BvbHlmaWxsOiBNdXRhdGlvbk9ic2VydmVycyBub3QgZm91bmQsIGRhdGEtdG91Y2gtYWN0aW9uIHdpbGwgbm90IGJlIGR5bmFtaWNhbGx5IGRldGVjdGVkJyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnN0YWxsZXIgPSBJbnN0YWxsZXI7XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGNvbnN0cnVjdG9yIGZvciBuZXcgUG9pbnRlckV2ZW50cy5cbiAgICpcbiAgICogTmV3IFBvaW50ZXIgRXZlbnRzIG11c3QgYmUgZ2l2ZW4gYSB0eXBlLCBhbmQgYW4gb3B0aW9uYWwgZGljdGlvbmFyeSBvZlxuICAgKiBpbml0aWFsaXphdGlvbiBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBEdWUgdG8gY2VydGFpbiBwbGF0Zm9ybSByZXF1aXJlbWVudHMsIGV2ZW50cyByZXR1cm5lZCBmcm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgKiBpZGVudGlmeSBhcyBNb3VzZUV2ZW50cy5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpblR5cGUgVGhlIHR5cGUgb2YgdGhlIGV2ZW50IHRvIGNyZWF0ZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtpbkRpY3RdIEFuIG9wdGlvbmFsIGRpY3Rpb25hcnkgb2YgaW5pdGlhbCBldmVudCBwcm9wZXJ0aWVzLlxuICAgKiBAcmV0dXJuIHtFdmVudH0gQSBuZXcgUG9pbnRlckV2ZW50IG9mIHR5cGUgYGluVHlwZWAgYW5kIGluaXRpYWxpemVkIHdpdGggcHJvcGVydGllcyBmcm9tIGBpbkRpY3RgLlxuICAgKi9cbiAgdmFyIE1PVVNFX1BST1BTID0gW1xuICAgICdidWJibGVzJyxcbiAgICAnY2FuY2VsYWJsZScsXG4gICAgJ3ZpZXcnLFxuICAgICdkZXRhaWwnLFxuICAgICdzY3JlZW5YJyxcbiAgICAnc2NyZWVuWScsXG4gICAgJ2NsaWVudFgnLFxuICAgICdjbGllbnRZJyxcbiAgICAnY3RybEtleScsXG4gICAgJ2FsdEtleScsXG4gICAgJ3NoaWZ0S2V5JyxcbiAgICAnbWV0YUtleScsXG4gICAgJ2J1dHRvbicsXG4gICAgJ3JlbGF0ZWRUYXJnZXQnLFxuICAgICdwYWdlWCcsXG4gICAgJ3BhZ2VZJ1xuICBdO1xuXG4gIHZhciBNT1VTRV9ERUZBVUxUUyA9IFtcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICBmYWxzZSxcbiAgICAwLFxuICAgIG51bGwsXG4gICAgMCxcbiAgICAwXG4gIF07XG5cbiAgZnVuY3Rpb24gX1BvaW50ZXJFdmVudF9fUG9pbnRlckV2ZW50KGluVHlwZSwgaW5EaWN0KSB7XG4gICAgaW5EaWN0ID0gaW5EaWN0IHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGUuaW5pdEV2ZW50KGluVHlwZSwgaW5EaWN0LmJ1YmJsZXMgfHwgZmFsc2UsIGluRGljdC5jYW5jZWxhYmxlIHx8IGZhbHNlKTtcblxuICAgIC8vIGRlZmluZSBpbmhlcml0ZWQgTW91c2VFdmVudCBwcm9wZXJ0aWVzXG4gICAgLy8gc2tpcCBidWJibGVzIGFuZCBjYW5jZWxhYmxlIHNpbmNlIHRoZXkncmUgc2V0IGFib3ZlIGluIGluaXRFdmVudCgpXG4gICAgZm9yKHZhciBpID0gMiwgcDsgaSA8IE1PVVNFX1BST1BTLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwID0gTU9VU0VfUFJPUFNbaV07XG4gICAgICBlW3BdID0gaW5EaWN0W3BdIHx8IE1PVVNFX0RFRkFVTFRTW2ldO1xuICAgIH1cbiAgICBlLmJ1dHRvbnMgPSBpbkRpY3QuYnV0dG9ucyB8fCAwO1xuXG4gICAgLy8gU3BlYyByZXF1aXJlcyB0aGF0IHBvaW50ZXJzIHdpdGhvdXQgcHJlc3N1cmUgc3BlY2lmaWVkIHVzZSAwLjUgZm9yIGRvd25cbiAgICAvLyBzdGF0ZSBhbmQgMCBmb3IgdXAgc3RhdGUuXG4gICAgdmFyIHByZXNzdXJlID0gMDtcbiAgICBpZiAoaW5EaWN0LnByZXNzdXJlKSB7XG4gICAgICBwcmVzc3VyZSA9IGluRGljdC5wcmVzc3VyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlc3N1cmUgPSBlLmJ1dHRvbnMgPyAwLjUgOiAwO1xuICAgIH1cblxuICAgIC8vIGFkZCB4L3kgcHJvcGVydGllcyBhbGlhc2VkIHRvIGNsaWVudFgvWVxuICAgIGUueCA9IGUuY2xpZW50WDtcbiAgICBlLnkgPSBlLmNsaWVudFk7XG5cbiAgICAvLyBkZWZpbmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIFBvaW50ZXJFdmVudCBpbnRlcmZhY2VcbiAgICBlLnBvaW50ZXJJZCA9IGluRGljdC5wb2ludGVySWQgfHwgMDtcbiAgICBlLndpZHRoID0gaW5EaWN0LndpZHRoIHx8IDA7XG4gICAgZS5oZWlnaHQgPSBpbkRpY3QuaGVpZ2h0IHx8IDA7XG4gICAgZS5wcmVzc3VyZSA9IHByZXNzdXJlO1xuICAgIGUudGlsdFggPSBpbkRpY3QudGlsdFggfHwgMDtcbiAgICBlLnRpbHRZID0gaW5EaWN0LnRpbHRZIHx8IDA7XG4gICAgZS5wb2ludGVyVHlwZSA9IGluRGljdC5wb2ludGVyVHlwZSB8fCAnJztcbiAgICBlLmh3VGltZXN0YW1wID0gaW5EaWN0Lmh3VGltZXN0YW1wIHx8IDA7XG4gICAgZS5pc1ByaW1hcnkgPSBpbkRpY3QuaXNQcmltYXJ5IHx8IGZhbHNlO1xuICAgIHJldHVybiBlO1xuICB9XG5cbiAgdmFyIF9Qb2ludGVyRXZlbnQgPSBfUG9pbnRlckV2ZW50X19Qb2ludGVyRXZlbnQ7XG5cbiAgZnVuY3Rpb24gc2hhZG93U2VsZWN0b3Iodikge1xuICAgIHJldHVybiAnYm9keSAvc2hhZG93LWRlZXAvICcgKyBzZWxlY3Rvcih2KTtcbiAgfVxuICBmdW5jdGlvbiBzZWxlY3Rvcih2KSB7XG4gICAgcmV0dXJuICdbZGF0YS10b3VjaC1hY3Rpb249XCInICsgdiArICdcIl0nO1xuICB9XG4gIGZ1bmN0aW9uIHJ1bGUodikge1xuICAgIHJldHVybiAneyAtbXMtdG91Y2gtYWN0aW9uOiAnICsgdiArICc7IHRvdWNoLWFjdGlvbjogJyArIHYgKyAnOyB0b3VjaC1hY3Rpb24tZGVsYXk6IG5vbmU7IH0nO1xuICB9XG4gIHZhciBhdHRyaWIyY3NzID0gW1xuICAgICdub25lJyxcbiAgICAnYXV0bycsXG4gICAgJ3Bhbi14JyxcbiAgICAncGFuLXknLFxuICAgIHtcbiAgICAgIHJ1bGU6ICdwYW4teCBwYW4teScsXG4gICAgICBzZWxlY3RvcnM6IFtcbiAgICAgICAgJ3Bhbi14IHBhbi15JyxcbiAgICAgICAgJ3Bhbi15IHBhbi14J1xuICAgICAgXVxuICAgIH1cbiAgXTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICAvLyBvbmx5IGluc3RhbGwgc3R5bGVzaGVldCBpZiB0aGUgYnJvd3NlciBoYXMgdG91Y2ggYWN0aW9uIHN1cHBvcnRcbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICB2YXIgaGFzTmF0aXZlUEUgPSB3aW5kb3cuUG9pbnRlckV2ZW50IHx8IHdpbmRvdy5NU1BvaW50ZXJFdmVudDtcbiAgLy8gb25seSBhZGQgc2hhZG93IHNlbGVjdG9ycyBpZiBzaGFkb3dkb20gaXMgc3VwcG9ydGVkXG4gIHZhciBoYXNTaGFkb3dSb290ID0gIXdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCAmJiBkb2N1bWVudC5oZWFkLmNyZWF0ZVNoYWRvd1Jvb3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHlBdHRyaWJ1dGVTdHlsZXMoKSB7XG4gICAgaWYgKGhhc05hdGl2ZVBFKSB7XG4gICAgICBhdHRyaWIyY3NzLmZvckVhY2goZnVuY3Rpb24ocikge1xuICAgICAgICBpZiAoU3RyaW5nKHIpID09PSByKSB7XG4gICAgICAgICAgc3R5bGVzICs9IHNlbGVjdG9yKHIpICsgcnVsZShyKSArICdcXG4nO1xuICAgICAgICAgIGlmIChoYXNTaGFkb3dSb290KSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gc2hhZG93U2VsZWN0b3IocikgKyBydWxlKHIpICsgJ1xcbic7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlcyArPSByLnNlbGVjdG9ycy5tYXAoc2VsZWN0b3IpICsgcnVsZShyLnJ1bGUpICsgJ1xcbic7XG4gICAgICAgICAgaWYgKGhhc1NoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSByLnNlbGVjdG9ycy5tYXAoc2hhZG93U2VsZWN0b3IpICsgcnVsZShyLnJ1bGUpICsgJ1xcbic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIGVsLnRleHRDb250ZW50ID0gc3R5bGVzO1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1vdXNlX19wb2ludGVybWFwID0gX2Rpc3BhdGNoZXIucG9pbnRlcm1hcDtcbiAgLy8gcmFkaXVzIGFyb3VuZCB0b3VjaGVuZCB0aGF0IHN3YWxsb3dzIG1vdXNlIGV2ZW50c1xuICB2YXIgREVEVVBfRElTVCA9IDI1O1xuXG4gIHZhciBXSElDSF9UT19CVVRUT05TID0gWzAsIDEsIDQsIDJdO1xuXG4gIHZhciBIQVNfQlVUVE9OUyA9IGZhbHNlO1xuICB0cnkge1xuICAgIEhBU19CVVRUT05TID0gbmV3IE1vdXNlRXZlbnQoJ3Rlc3QnLCB7YnV0dG9uczogMX0pLmJ1dHRvbnMgPT09IDE7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgLy8gaGFuZGxlciBibG9jayBmb3IgbmF0aXZlIG1vdXNlIGV2ZW50c1xuICB2YXIgbW91c2VFdmVudHMgPSB7XG4gICAgUE9JTlRFUl9JRDogMSxcbiAgICBQT0lOVEVSX1RZUEU6ICdtb3VzZScsXG4gICAgZXZlbnRzOiBbXG4gICAgICAnbW91c2Vkb3duJyxcbiAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgJ21vdXNldXAnLFxuICAgICAgJ21vdXNlb3ZlcicsXG4gICAgICAnbW91c2VvdXQnXG4gICAgXSxcbiAgICByZWdpc3RlcjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICBfZGlzcGF0Y2hlci5saXN0ZW4odGFyZ2V0LCB0aGlzLmV2ZW50cyk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIF9kaXNwYXRjaGVyLnVubGlzdGVuKHRhcmdldCwgdGhpcy5ldmVudHMpO1xuICAgIH0sXG4gICAgbGFzdFRvdWNoZXM6IFtdLFxuICAgIC8vIGNvbGxpZGUgd2l0aCB0aGUgZ2xvYmFsIG1vdXNlIGxpc3RlbmVyXG4gICAgaXNFdmVudFNpbXVsYXRlZEZyb21Ub3VjaDogZnVuY3Rpb24oaW5FdmVudCkge1xuICAgICAgdmFyIGx0cyA9IHRoaXMubGFzdFRvdWNoZXM7XG4gICAgICB2YXIgeCA9IGluRXZlbnQuY2xpZW50WCwgeSA9IGluRXZlbnQuY2xpZW50WTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbHRzLmxlbmd0aCwgdDsgaSA8IGwgJiYgKHQgPSBsdHNbaV0pOyBpKyspIHtcbiAgICAgICAgLy8gc2ltdWxhdGVkIG1vdXNlIGV2ZW50cyB3aWxsIGJlIHN3YWxsb3dlZCBuZWFyIGEgcHJpbWFyeSB0b3VjaGVuZFxuICAgICAgICB2YXIgZHggPSBNYXRoLmFicyh4IC0gdC54KSwgZHkgPSBNYXRoLmFicyh5IC0gdC55KTtcbiAgICAgICAgaWYgKGR4IDw9IERFRFVQX0RJU1QgJiYgZHkgPD0gREVEVVBfRElTVCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVwYXJlRXZlbnQ6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gX2Rpc3BhdGNoZXIuY2xvbmVFdmVudChpbkV2ZW50KTtcbiAgICAgIC8vIGZvcndhcmQgbW91c2UgcHJldmVudERlZmF1bHRcbiAgICAgIHZhciBwZCA9IGUucHJldmVudERlZmF1bHQ7XG4gICAgICBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGluRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcGQoKTtcbiAgICAgIH07XG4gICAgICBlLnBvaW50ZXJJZCA9IHRoaXMuUE9JTlRFUl9JRDtcbiAgICAgIGUuaXNQcmltYXJ5ID0gdHJ1ZTtcbiAgICAgIGUucG9pbnRlclR5cGUgPSB0aGlzLlBPSU5URVJfVFlQRTtcbiAgICAgIGlmICghSEFTX0JVVFRPTlMpIHtcbiAgICAgICAgZS5idXR0b25zID0gV0hJQ0hfVE9fQlVUVE9OU1tlLndoaWNoXSB8fCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGU7XG4gICAgfSxcbiAgICBtb3VzZWRvd246IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5pc0V2ZW50U2ltdWxhdGVkRnJvbVRvdWNoKGluRXZlbnQpKSB7XG4gICAgICAgIHZhciBwID0gbW91c2VfX3BvaW50ZXJtYXAuaGFzKHRoaXMuUE9JTlRFUl9JRCk7XG4gICAgICAgIC8vIFRPRE8oZGZyZWVkbWFuKSB3b3JrYXJvdW5kIGZvciBzb21lIGVsZW1lbnRzIG5vdCBzZW5kaW5nIG1vdXNldXBcbiAgICAgICAgLy8gaHR0cDovL2NyYnVnLzE0OTA5MVxuICAgICAgICBpZiAocCkge1xuICAgICAgICAgIHRoaXMuY2FuY2VsKGluRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICAgIG1vdXNlX19wb2ludGVybWFwLnNldCh0aGlzLlBPSU5URVJfSUQsIGluRXZlbnQpO1xuICAgICAgICBfZGlzcGF0Y2hlci5kb3duKGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW91c2Vtb3ZlOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuaXNFdmVudFNpbXVsYXRlZEZyb21Ub3VjaChpbkV2ZW50KSkge1xuICAgICAgICB2YXIgZSA9IHRoaXMucHJlcGFyZUV2ZW50KGluRXZlbnQpO1xuICAgICAgICBfZGlzcGF0Y2hlci5tb3ZlKGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW91c2V1cDogZnVuY3Rpb24oaW5FdmVudCkge1xuICAgICAgaWYgKCF0aGlzLmlzRXZlbnRTaW11bGF0ZWRGcm9tVG91Y2goaW5FdmVudCkpIHtcbiAgICAgICAgdmFyIHAgPSBtb3VzZV9fcG9pbnRlcm1hcC5nZXQodGhpcy5QT0lOVEVSX0lEKTtcbiAgICAgICAgaWYgKHAgJiYgcC5idXR0b24gPT09IGluRXZlbnQuYnV0dG9uKSB7XG4gICAgICAgICAgdmFyIGUgPSB0aGlzLnByZXBhcmVFdmVudChpbkV2ZW50KTtcbiAgICAgICAgICBfZGlzcGF0Y2hlci51cChlKTtcbiAgICAgICAgICB0aGlzLmNsZWFudXBNb3VzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VzZW92ZXI6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5pc0V2ZW50U2ltdWxhdGVkRnJvbVRvdWNoKGluRXZlbnQpKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICAgIF9kaXNwYXRjaGVyLmVudGVyT3ZlcihlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdXNlb3V0OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuaXNFdmVudFNpbXVsYXRlZEZyb21Ub3VjaChpbkV2ZW50KSkge1xuICAgICAgICB2YXIgZSA9IHRoaXMucHJlcGFyZUV2ZW50KGluRXZlbnQpO1xuICAgICAgICBfZGlzcGF0Y2hlci5sZWF2ZU91dChlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhbmNlbDogZnVuY3Rpb24oaW5FdmVudCkge1xuICAgICAgdmFyIGUgPSB0aGlzLnByZXBhcmVFdmVudChpbkV2ZW50KTtcbiAgICAgIF9kaXNwYXRjaGVyLmNhbmNlbChlKTtcbiAgICAgIHRoaXMuY2xlYW51cE1vdXNlKCk7XG4gICAgfSxcbiAgICBjbGVhbnVwTW91c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgbW91c2VfX3BvaW50ZXJtYXBbJ2RlbGV0ZSddKHRoaXMuUE9JTlRFUl9JRCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBtb3VzZSA9IG1vdXNlRXZlbnRzO1xuXG4gIHZhciBjYXB0dXJlSW5mbyA9IF9kaXNwYXRjaGVyLmNhcHR1cmVJbmZvO1xuICB2YXIgZmluZFRhcmdldCA9IHRhcmdldGluZy5maW5kVGFyZ2V0LmJpbmQodGFyZ2V0aW5nKTtcbiAgdmFyIGFsbFNoYWRvd3MgPSB0YXJnZXRpbmcuYWxsU2hhZG93cy5iaW5kKHRhcmdldGluZyk7XG4gIHZhciB0b3VjaF9fcG9pbnRlcm1hcCA9IF9kaXNwYXRjaGVyLnBvaW50ZXJtYXA7XG4gIHZhciB0b3VjaE1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5tYXApO1xuICAvLyBUaGlzIHNob3VsZCBiZSBsb25nIGVub3VnaCB0byBpZ25vcmUgY29tcGF0IG1vdXNlIGV2ZW50cyBtYWRlIGJ5IHRvdWNoXG4gIHZhciBERURVUF9USU1FT1VUID0gMjUwMDtcbiAgdmFyIENMSUNLX0NPVU5UX1RJTUVPVVQgPSAyMDA7XG4gIHZhciBBVFRSSUIgPSAnZGF0YS10b3VjaC1hY3Rpb24nO1xuICB2YXIgSU5TVEFMTEVSO1xuICAvLyBUaGUgcHJlc2VuY2Ugb2YgdG91Y2ggZXZlbnQgaGFuZGxlcnMgYmxvY2tzIHNjcm9sbGluZywgYW5kIHNvIHdlIG11c3QgYmUgY2FyZWZ1bCB0b1xuICAvLyBhdm9pZCBhZGRpbmcgaGFuZGxlcnMgdW5uZWNlc3NhcmlseS4gIENocm9tZSBwbGFucyB0byBhZGQgYSB0b3VjaC1hY3Rpb24tZGVsYXkgcHJvcGVydHlcbiAgLy8gKGNyYnVnLmNvbS8zMjk1NTkpIHRvIGFkZHJlc3MgdGhpcywgYW5kIG9uY2Ugd2UgaGF2ZSB0aGF0IHdlIGNhbiBvcHQtaW4gdG8gYSBzaW1wbGVyXG4gIC8vIGhhbmRsZXIgcmVnaXN0cmF0aW9uIG1lY2hhbmlzbS4gIFJhdGhlciB0aGFuIHRyeSB0byBwcmVkaWN0IGhvdyBleGFjdGx5IHRvIG9wdC1pbiB0b1xuICAvLyB0aGF0IHdlJ2xsIGp1c3QgbGVhdmUgdGhpcyBkaXNhYmxlZCB1bnRpbCB0aGVyZSBpcyBhIGJ1aWxkIG9mIENocm9tZSB0byB0ZXN0LlxuICB2YXIgSEFTX1RPVUNIX0FDVElPTl9ERUxBWSA9IGZhbHNlO1xuXG4gIC8vIGhhbmRsZXIgYmxvY2sgZm9yIG5hdGl2ZSB0b3VjaCBldmVudHNcbiAgdmFyIHRvdWNoRXZlbnRzID0ge1xuICAgIGV2ZW50czogW1xuICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgJ3RvdWNobW92ZScsXG4gICAgICAndG91Y2hlbmQnLFxuICAgICAgJ3RvdWNoY2FuY2VsJ1xuICAgIF0sXG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgaWYgKEhBU19UT1VDSF9BQ1RJT05fREVMQVkpIHtcbiAgICAgICAgX2Rpc3BhdGNoZXIubGlzdGVuKHRhcmdldCwgdGhpcy5ldmVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgSU5TVEFMTEVSLmVuYWJsZU9uU3VidHJlZSh0YXJnZXQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5yZWdpc3RlcjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICBpZiAoSEFTX1RPVUNIX0FDVElPTl9ERUxBWSkge1xuICAgICAgICBfZGlzcGF0Y2hlci51bmxpc3Rlbih0YXJnZXQsIHRoaXMuZXZlbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE8oZGZyZWVkbWFuKTogaXMgaXQgd29ydGggaXQgdG8gZGlzY29ubmVjdCB0aGUgTU8/XG4gICAgICB9XG4gICAgfSxcbiAgICBlbGVtZW50QWRkZWQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgYSA9IGVsLmdldEF0dHJpYnV0ZShBVFRSSUIpO1xuICAgICAgdmFyIHN0ID0gdGhpcy50b3VjaEFjdGlvblRvU2Nyb2xsVHlwZShhKTtcbiAgICAgIGlmIChzdCkge1xuICAgICAgICBlbC5fc2Nyb2xsVHlwZSA9IHN0O1xuICAgICAgICBfZGlzcGF0Y2hlci5saXN0ZW4oZWwsIHRoaXMuZXZlbnRzKTtcbiAgICAgICAgLy8gc2V0IGRhdGEtdG91Y2gtYWN0aW9uIG9uIHNoYWRvd3MgYXMgd2VsbFxuICAgICAgICBhbGxTaGFkb3dzKGVsKS5mb3JFYWNoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICBzLl9zY3JvbGxUeXBlID0gc3Q7XG4gICAgICAgICAgX2Rpc3BhdGNoZXIubGlzdGVuKHMsIHRoaXMuZXZlbnRzKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbGVtZW50UmVtb3ZlZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIGVsLl9zY3JvbGxUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgX2Rpc3BhdGNoZXIudW5saXN0ZW4oZWwsIHRoaXMuZXZlbnRzKTtcbiAgICAgIC8vIHJlbW92ZSBkYXRhLXRvdWNoLWFjdGlvbiBmcm9tIHNoYWRvd1xuICAgICAgYWxsU2hhZG93cyhlbCkuZm9yRWFjaChmdW5jdGlvbihzKSB7XG4gICAgICAgIHMuX3Njcm9sbFR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIF9kaXNwYXRjaGVyLnVubGlzdGVuKHMsIHRoaXMuZXZlbnRzKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG4gICAgZWxlbWVudENoYW5nZWQ6IGZ1bmN0aW9uKGVsLCBvbGRWYWx1ZSkge1xuICAgICAgdmFyIGEgPSBlbC5nZXRBdHRyaWJ1dGUoQVRUUklCKTtcbiAgICAgIHZhciBzdCA9IHRoaXMudG91Y2hBY3Rpb25Ub1Njcm9sbFR5cGUoYSk7XG4gICAgICB2YXIgb2xkU3QgPSB0aGlzLnRvdWNoQWN0aW9uVG9TY3JvbGxUeXBlKG9sZFZhbHVlKTtcbiAgICAgIC8vIHNpbXBseSB1cGRhdGUgc2Nyb2xsVHlwZSBpZiBsaXN0ZW5lcnMgYXJlIGFscmVhZHkgZXN0YWJsaXNoZWRcbiAgICAgIGlmIChzdCAmJiBvbGRTdCkge1xuICAgICAgICBlbC5fc2Nyb2xsVHlwZSA9IHN0O1xuICAgICAgICBhbGxTaGFkb3dzKGVsKS5mb3JFYWNoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICBzLl9zY3JvbGxUeXBlID0gc3Q7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChvbGRTdCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRSZW1vdmVkKGVsKTtcbiAgICAgIH0gZWxzZSBpZiAoc3QpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50QWRkZWQoZWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2Nyb2xsVHlwZXM6IHtcbiAgICAgIEVNSVRURVI6ICdub25lJyxcbiAgICAgIFhTQ1JPTExFUjogJ3Bhbi14JyxcbiAgICAgIFlTQ1JPTExFUjogJ3Bhbi15JyxcbiAgICAgIFNDUk9MTEVSOiAvXig/OnBhbi14IHBhbi15KXwoPzpwYW4teSBwYW4teCl8YXV0byQvXG4gICAgfSxcbiAgICB0b3VjaEFjdGlvblRvU2Nyb2xsVHlwZTogZnVuY3Rpb24odG91Y2hBY3Rpb24pIHtcbiAgICAgIHZhciB0ID0gdG91Y2hBY3Rpb247XG4gICAgICB2YXIgc3QgPSB0aGlzLnNjcm9sbFR5cGVzO1xuICAgICAgaWYgKHQgPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgfSBlbHNlIGlmICh0ID09PSBzdC5YU0NST0xMRVIpIHtcbiAgICAgICAgcmV0dXJuICdYJztcbiAgICAgIH0gZWxzZSBpZiAodCA9PT0gc3QuWVNDUk9MTEVSKSB7XG4gICAgICAgIHJldHVybiAnWSc7XG4gICAgICB9IGVsc2UgaWYgKHN0LlNDUk9MTEVSLmV4ZWModCkpIHtcbiAgICAgICAgcmV0dXJuICdYWSc7XG4gICAgICB9XG4gICAgfSxcbiAgICBQT0lOVEVSX1RZUEU6ICd0b3VjaCcsXG4gICAgZmlyc3RUb3VjaDogbnVsbCxcbiAgICBpc1ByaW1hcnlUb3VjaDogZnVuY3Rpb24oaW5Ub3VjaCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlyc3RUb3VjaCA9PT0gaW5Ub3VjaC5pZGVudGlmaWVyO1xuICAgIH0sXG4gICAgc2V0UHJpbWFyeVRvdWNoOiBmdW5jdGlvbihpblRvdWNoKSB7XG4gICAgICAvLyBzZXQgcHJpbWFyeSB0b3VjaCBpZiB0aGVyZSBubyBwb2ludGVycywgb3IgdGhlIG9ubHkgcG9pbnRlciBpcyB0aGUgbW91c2VcbiAgICAgIGlmICh0b3VjaF9fcG9pbnRlcm1hcC5wb2ludGVycygpID09PSAwIHx8ICh0b3VjaF9fcG9pbnRlcm1hcC5wb2ludGVycygpID09PSAxICYmIHRvdWNoX19wb2ludGVybWFwLmhhcygxKSkpIHtcbiAgICAgICAgdGhpcy5maXJzdFRvdWNoID0gaW5Ub3VjaC5pZGVudGlmaWVyO1xuICAgICAgICB0aGlzLmZpcnN0WFkgPSB7WDogaW5Ub3VjaC5jbGllbnRYLCBZOiBpblRvdWNoLmNsaWVudFl9O1xuICAgICAgICB0aGlzLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbmNlbFJlc2V0Q2xpY2tDb3VudCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlUHJpbWFyeVBvaW50ZXI6IGZ1bmN0aW9uKGluUG9pbnRlcikge1xuICAgICAgaWYgKGluUG9pbnRlci5pc1ByaW1hcnkpIHtcbiAgICAgICAgdGhpcy5maXJzdFRvdWNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5maXJzdFhZID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZXNldENsaWNrQ291bnQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsaWNrQ291bnQ6IDAsXG4gICAgcmVzZXRJZDogbnVsbCxcbiAgICByZXNldENsaWNrQ291bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2xpY2tDb3VudCA9IDA7XG4gICAgICAgIHRoaXMucmVzZXRJZCA9IG51bGw7XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnJlc2V0SWQgPSBzZXRUaW1lb3V0KGZuLCBDTElDS19DT1VOVF9USU1FT1VUKTtcbiAgICB9LFxuICAgIGNhbmNlbFJlc2V0Q2xpY2tDb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5yZXNldElkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc2V0SWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHlwZVRvQnV0dG9uczogZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIHJldCA9IDA7XG4gICAgICBpZiAodHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IHR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgIHJldCA9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgdG91Y2hUb1BvaW50ZXI6IGZ1bmN0aW9uKGluVG91Y2gpIHtcbiAgICAgIHZhciBjdGUgPSB0aGlzLmN1cnJlbnRUb3VjaEV2ZW50O1xuICAgICAgdmFyIGUgPSBfZGlzcGF0Y2hlci5jbG9uZUV2ZW50KGluVG91Y2gpO1xuICAgICAgLy8gU3BlYyBzcGVjaWZpZXMgdGhhdCBwb2ludGVySWQgMSBpcyByZXNlcnZlZCBmb3IgTW91c2UuXG4gICAgICAvLyBUb3VjaCBpZGVudGlmaWVycyBjYW4gc3RhcnQgYXQgMC5cbiAgICAgIC8vIEFkZCAyIHRvIHRoZSB0b3VjaCBpZGVudGlmaWVyIGZvciBjb21wYXRpYmlsaXR5LlxuICAgICAgdmFyIGlkID0gZS5wb2ludGVySWQgPSBpblRvdWNoLmlkZW50aWZpZXIgKyAyO1xuICAgICAgZS50YXJnZXQgPSBjYXB0dXJlSW5mb1tpZF0gfHwgZmluZFRhcmdldChlKTtcbiAgICAgIGUuYnViYmxlcyA9IHRydWU7XG4gICAgICBlLmNhbmNlbGFibGUgPSB0cnVlO1xuICAgICAgZS5kZXRhaWwgPSB0aGlzLmNsaWNrQ291bnQ7XG4gICAgICBlLmJ1dHRvbiA9IDA7XG4gICAgICBlLmJ1dHRvbnMgPSB0aGlzLnR5cGVUb0J1dHRvbnMoY3RlLnR5cGUpO1xuICAgICAgZS53aWR0aCA9IGluVG91Y2gud2Via2l0UmFkaXVzWCB8fCBpblRvdWNoLnJhZGl1c1ggfHwgMDtcbiAgICAgIGUuaGVpZ2h0ID0gaW5Ub3VjaC53ZWJraXRSYWRpdXNZIHx8IGluVG91Y2gucmFkaXVzWSB8fCAwO1xuICAgICAgZS5wcmVzc3VyZSA9IGluVG91Y2gud2Via2l0Rm9yY2UgfHwgaW5Ub3VjaC5mb3JjZSB8fCAwLjU7XG4gICAgICBlLmlzUHJpbWFyeSA9IHRoaXMuaXNQcmltYXJ5VG91Y2goaW5Ub3VjaCk7XG4gICAgICBlLnBvaW50ZXJUeXBlID0gdGhpcy5QT0lOVEVSX1RZUEU7XG4gICAgICAvLyBmb3J3YXJkIHRvdWNoIHByZXZlbnREZWZhdWx0c1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICBzZWxmLmZpcnN0WFkgPSBudWxsO1xuICAgICAgICBjdGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gZTtcbiAgICB9LFxuICAgIHByb2Nlc3NUb3VjaGVzOiBmdW5jdGlvbihpbkV2ZW50LCBpbkZ1bmN0aW9uKSB7XG4gICAgICB2YXIgdGwgPSBpbkV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgICAgdGhpcy5jdXJyZW50VG91Y2hFdmVudCA9IGluRXZlbnQ7XG4gICAgICBmb3IgKHZhciBpID0gMCwgdDsgaSA8IHRsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHQgPSB0bFtpXTtcbiAgICAgICAgaW5GdW5jdGlvbi5jYWxsKHRoaXMsIHRoaXMudG91Y2hUb1BvaW50ZXIodCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gRm9yIHNpbmdsZSBheGlzIHNjcm9sbGVycywgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBlbGVtZW50IHNob3VsZCBlbWl0XG4gICAgLy8gcG9pbnRlciBldmVudHMgb3IgYmVoYXZlIGFzIGEgc2Nyb2xsZXJcbiAgICBzaG91bGRTY3JvbGw6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmZpcnN0WFkpIHtcbiAgICAgICAgdmFyIHJldDtcbiAgICAgICAgdmFyIHNjcm9sbEF4aXMgPSBpbkV2ZW50LmN1cnJlbnRUYXJnZXQuX3Njcm9sbFR5cGU7XG4gICAgICAgIGlmIChzY3JvbGxBeGlzID09PSAnbm9uZScpIHtcbiAgICAgICAgICAvLyB0aGlzIGVsZW1lbnQgaXMgYSB0b3VjaC1hY3Rpb246IG5vbmUsIHNob3VsZCBuZXZlciBzY3JvbGxcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxBeGlzID09PSAnWFknKSB7XG4gICAgICAgICAgLy8gdGhpcyBlbGVtZW50IHNob3VsZCBhbHdheXMgc2Nyb2xsXG4gICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdCA9IGluRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgICAgLy8gY2hlY2sgdGhlIGludGVuZGVkIHNjcm9sbCBheGlzLCBhbmQgb3RoZXIgYXhpc1xuICAgICAgICAgIHZhciBhID0gc2Nyb2xsQXhpcztcbiAgICAgICAgICB2YXIgb2EgPSBzY3JvbGxBeGlzID09PSAnWScgPyAnWCcgOiAnWSc7XG4gICAgICAgICAgdmFyIGRhID0gTWF0aC5hYnModFsnY2xpZW50JyArIGFdIC0gdGhpcy5maXJzdFhZW2FdKTtcbiAgICAgICAgICB2YXIgZG9hID0gTWF0aC5hYnModFsnY2xpZW50JyArIG9hXSAtIHRoaXMuZmlyc3RYWVtvYV0pO1xuICAgICAgICAgIC8vIGlmIGRlbHRhIGluIHRoZSBzY3JvbGwgYXhpcyA+IGRlbHRhIG90aGVyIGF4aXMsIHNjcm9sbCBpbnN0ZWFkIG9mXG4gICAgICAgICAgLy8gbWFraW5nIGV2ZW50c1xuICAgICAgICAgIHJldCA9IGRhID49IGRvYTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpcnN0WFkgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sXG4gICAgZmluZFRvdWNoOiBmdW5jdGlvbihpblRMLCBpbklkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGluVEwubGVuZ3RoLCB0OyBpIDwgbCAmJiAodCA9IGluVExbaV0pOyBpKyspIHtcbiAgICAgICAgaWYgKHQuaWRlbnRpZmllciA9PT0gaW5JZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBJbiBzb21lIGluc3RhbmNlcywgYSB0b3VjaHN0YXJ0IGNhbiBoYXBwZW4gd2l0aG91dCBhIHRvdWNoZW5kLiBUaGlzXG4gICAgLy8gbGVhdmVzIHRoZSBwb2ludGVybWFwIGluIGEgYnJva2VuIHN0YXRlLlxuICAgIC8vIFRoZXJlZm9yZSwgb24gZXZlcnkgdG91Y2hzdGFydCwgd2UgcmVtb3ZlIHRoZSB0b3VjaGVzIHRoYXQgZGlkIG5vdCBmaXJlIGFcbiAgICAvLyB0b3VjaGVuZCBldmVudC5cbiAgICAvLyBUbyBrZWVwIHN0YXRlIGdsb2JhbGx5IGNvbnNpc3RlbnQsIHdlIGZpcmUgYVxuICAgIC8vIHBvaW50ZXJjYW5jZWwgZm9yIHRoaXMgXCJhYmFuZG9uZWRcIiB0b3VjaFxuICAgIHZhY3V1bVRvdWNoZXM6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciB0bCA9IGluRXZlbnQudG91Y2hlcztcbiAgICAgIC8vIHBvaW50ZXJtYXAucG9pbnRlcnMoKSBzaG91bGQgYmUgPCB0bC5sZW5ndGggaGVyZSwgYXMgdGhlIHRvdWNoc3RhcnQgaGFzIG5vdFxuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQgeWV0LlxuICAgICAgaWYgKHRvdWNoX19wb2ludGVybWFwLnBvaW50ZXJzKCkgPj0gdGwubGVuZ3RoKSB7XG4gICAgICAgIHZhciBkID0gW107XG4gICAgICAgIHRvdWNoX19wb2ludGVybWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgIC8vIE5ldmVyIHJlbW92ZSBwb2ludGVySWQgPT0gMSwgd2hpY2ggaXMgbW91c2UuXG4gICAgICAgICAgLy8gVG91Y2ggaWRlbnRpZmllcnMgYXJlIDIgc21hbGxlciB0aGFuIHRoZWlyIHBvaW50ZXJJZCwgd2hpY2ggaXMgdGhlXG4gICAgICAgICAgLy8gaW5kZXggaW4gcG9pbnRlcm1hcC5cbiAgICAgICAgICBpZiAoa2V5ICE9PSAxICYmICF0aGlzLmZpbmRUb3VjaCh0bCwga2V5IC0gMikpIHtcbiAgICAgICAgICAgIHZhciBwID0gdmFsdWUub3V0O1xuICAgICAgICAgICAgZC5wdXNoKHApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIGQuZm9yRWFjaCh0aGlzLmNhbmNlbE91dCwgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b3VjaHN0YXJ0OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICB0aGlzLnZhY3V1bVRvdWNoZXMoaW5FdmVudCk7XG4gICAgICB0aGlzLnNldFByaW1hcnlUb3VjaChpbkV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgICAgIHRoaXMuZGVkdXBTeW50aE1vdXNlKGluRXZlbnQpO1xuICAgICAgaWYgKCF0aGlzLnNjcm9sbGluZykge1xuICAgICAgICB0aGlzLmNsaWNrQ291bnQrKztcbiAgICAgICAgdGhpcy5wcm9jZXNzVG91Y2hlcyhpbkV2ZW50LCB0aGlzLm92ZXJEb3duKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG92ZXJEb3duOiBmdW5jdGlvbihpblBvaW50ZXIpIHtcbiAgICAgIHZhciBwID0gdG91Y2hfX3BvaW50ZXJtYXAuc2V0KGluUG9pbnRlci5wb2ludGVySWQsIHtcbiAgICAgICAgdGFyZ2V0OiBpblBvaW50ZXIudGFyZ2V0LFxuICAgICAgICBvdXQ6IGluUG9pbnRlcixcbiAgICAgICAgb3V0VGFyZ2V0OiBpblBvaW50ZXIudGFyZ2V0XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaGVyLm92ZXIoaW5Qb2ludGVyKTtcbiAgICAgIF9kaXNwYXRjaGVyLmVudGVyKGluUG9pbnRlcik7XG4gICAgICBfZGlzcGF0Y2hlci5kb3duKGluUG9pbnRlcik7XG4gICAgfSxcbiAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5zY3JvbGxpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkU2Nyb2xsKGluRXZlbnQpKSB7XG4gICAgICAgICAgdGhpcy5zY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgIHRoaXMudG91Y2hjYW5jZWwoaW5FdmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5FdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMucHJvY2Vzc1RvdWNoZXMoaW5FdmVudCwgdGhpcy5tb3ZlT3Zlck91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdmVPdmVyT3V0OiBmdW5jdGlvbihpblBvaW50ZXIpIHtcbiAgICAgIHZhciBldmVudCA9IGluUG9pbnRlcjtcbiAgICAgIHZhciBwb2ludGVyID0gdG91Y2hfX3BvaW50ZXJtYXAuZ2V0KGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAvLyBhIGZpbmdlciBkcmlmdGVkIG9mZiB0aGUgc2NyZWVuLCBpZ25vcmUgaXRcbiAgICAgIGlmICghcG9pbnRlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgb3V0RXZlbnQgPSBwb2ludGVyLm91dDtcbiAgICAgIHZhciBvdXRUYXJnZXQgPSBwb2ludGVyLm91dFRhcmdldDtcbiAgICAgIF9kaXNwYXRjaGVyLm1vdmUoZXZlbnQpO1xuICAgICAgaWYgKG91dEV2ZW50ICYmIG91dFRhcmdldCAhPT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgIG91dEV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBvdXRUYXJnZXQ7XG4gICAgICAgIC8vIHJlY292ZXIgZnJvbSByZXRhcmdldGluZyBieSBzaGFkb3dcbiAgICAgICAgb3V0RXZlbnQudGFyZ2V0ID0gb3V0VGFyZ2V0O1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgX2Rpc3BhdGNoZXIubGVhdmVPdXQob3V0RXZlbnQpO1xuICAgICAgICAgIF9kaXNwYXRjaGVyLmVudGVyT3ZlcihldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2xlYW4gdXAgY2FzZSB3aGVuIGZpbmdlciBsZWF2ZXMgdGhlIHNjcmVlblxuICAgICAgICAgIGV2ZW50LnRhcmdldCA9IG91dFRhcmdldDtcbiAgICAgICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLmNhbmNlbE91dChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBvaW50ZXIub3V0ID0gZXZlbnQ7XG4gICAgICBwb2ludGVyLm91dFRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICB9LFxuICAgIHRvdWNoZW5kOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICB0aGlzLmRlZHVwU3ludGhNb3VzZShpbkV2ZW50KTtcbiAgICAgIHRoaXMucHJvY2Vzc1RvdWNoZXMoaW5FdmVudCwgdGhpcy51cE91dCk7XG4gICAgfSxcbiAgICB1cE91dDogZnVuY3Rpb24oaW5Qb2ludGVyKSB7XG4gICAgICBpZiAoIXRoaXMuc2Nyb2xsaW5nKSB7XG4gICAgICAgIF9kaXNwYXRjaGVyLnVwKGluUG9pbnRlcik7XG4gICAgICAgIF9kaXNwYXRjaGVyLm91dChpblBvaW50ZXIpO1xuICAgICAgICBfZGlzcGF0Y2hlci5sZWF2ZShpblBvaW50ZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5jbGVhblVwUG9pbnRlcihpblBvaW50ZXIpO1xuICAgIH0sXG4gICAgdG91Y2hjYW5jZWw6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHRoaXMucHJvY2Vzc1RvdWNoZXMoaW5FdmVudCwgdGhpcy5jYW5jZWxPdXQpO1xuICAgIH0sXG4gICAgY2FuY2VsT3V0OiBmdW5jdGlvbihpblBvaW50ZXIpIHtcbiAgICAgIF9kaXNwYXRjaGVyLmNhbmNlbChpblBvaW50ZXIpO1xuICAgICAgX2Rpc3BhdGNoZXIub3V0KGluUG9pbnRlcik7XG4gICAgICBfZGlzcGF0Y2hlci5sZWF2ZShpblBvaW50ZXIpO1xuICAgICAgdGhpcy5jbGVhblVwUG9pbnRlcihpblBvaW50ZXIpO1xuICAgIH0sXG4gICAgY2xlYW5VcFBvaW50ZXI6IGZ1bmN0aW9uKGluUG9pbnRlcikge1xuICAgICAgdG91Y2hfX3BvaW50ZXJtYXBbJ2RlbGV0ZSddKGluUG9pbnRlci5wb2ludGVySWQpO1xuICAgICAgdGhpcy5yZW1vdmVQcmltYXJ5UG9pbnRlcihpblBvaW50ZXIpO1xuICAgIH0sXG4gICAgLy8gcHJldmVudCBzeW50aCBtb3VzZSBldmVudHMgZnJvbSBjcmVhdGluZyBwb2ludGVyIGV2ZW50c1xuICAgIGRlZHVwU3ludGhNb3VzZTogZnVuY3Rpb24oaW5FdmVudCkge1xuICAgICAgdmFyIGx0cyA9IG1vdXNlLmxhc3RUb3VjaGVzO1xuICAgICAgdmFyIHQgPSBpbkV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgLy8gb25seSB0aGUgcHJpbWFyeSBmaW5nZXIgd2lsbCBzeW50aCBtb3VzZSBldmVudHNcbiAgICAgIGlmICh0aGlzLmlzUHJpbWFyeVRvdWNoKHQpKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyIHgveSBvZiBsYXN0IHRvdWNoXG4gICAgICAgIHZhciBsdCA9IHt4OiB0LmNsaWVudFgsIHk6IHQuY2xpZW50WX07XG4gICAgICAgIGx0cy5wdXNoKGx0KTtcbiAgICAgICAgdmFyIGZuID0gKGZ1bmN0aW9uKGx0cywgbHQpe1xuICAgICAgICAgIHZhciBpID0gbHRzLmluZGV4T2YobHQpO1xuICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgIGx0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5iaW5kKG51bGwsIGx0cywgbHQpO1xuICAgICAgICBzZXRUaW1lb3V0KGZuLCBERURVUF9USU1FT1VUKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKCFIQVNfVE9VQ0hfQUNUSU9OX0RFTEFZKSB7XG4gICAgSU5TVEFMTEVSID0gbmV3IGluc3RhbGxlcih0b3VjaEV2ZW50cy5lbGVtZW50QWRkZWQsIHRvdWNoRXZlbnRzLmVsZW1lbnRSZW1vdmVkLCB0b3VjaEV2ZW50cy5lbGVtZW50Q2hhbmdlZCwgdG91Y2hFdmVudHMpO1xuICB9XG5cbiAgdmFyIHRvdWNoID0gdG91Y2hFdmVudHM7XG5cbiAgdmFyIG1zX19wb2ludGVybWFwID0gX2Rpc3BhdGNoZXIucG9pbnRlcm1hcDtcbiAgdmFyIEhBU19CSVRNQVBfVFlQRSA9IHdpbmRvdy5NU1BvaW50ZXJFdmVudCAmJiB0eXBlb2Ygd2luZG93Lk1TUG9pbnRlckV2ZW50Lk1TUE9JTlRFUl9UWVBFX01PVVNFID09PSAnbnVtYmVyJztcbiAgdmFyIG1zRXZlbnRzID0ge1xuICAgIGV2ZW50czogW1xuICAgICAgJ01TUG9pbnRlckRvd24nLFxuICAgICAgJ01TUG9pbnRlck1vdmUnLFxuICAgICAgJ01TUG9pbnRlclVwJyxcbiAgICAgICdNU1BvaW50ZXJPdXQnLFxuICAgICAgJ01TUG9pbnRlck92ZXInLFxuICAgICAgJ01TUG9pbnRlckNhbmNlbCcsXG4gICAgICAnTVNHb3RQb2ludGVyQ2FwdHVyZScsXG4gICAgICAnTVNMb3N0UG9pbnRlckNhcHR1cmUnXG4gICAgXSxcbiAgICByZWdpc3RlcjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICBfZGlzcGF0Y2hlci5saXN0ZW4odGFyZ2V0LCB0aGlzLmV2ZW50cyk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIF9kaXNwYXRjaGVyLnVubGlzdGVuKHRhcmdldCwgdGhpcy5ldmVudHMpO1xuICAgIH0sXG4gICAgUE9JTlRFUl9UWVBFUzogW1xuICAgICAgJycsXG4gICAgICAndW5hdmFpbGFibGUnLFxuICAgICAgJ3RvdWNoJyxcbiAgICAgICdwZW4nLFxuICAgICAgJ21vdXNlJ1xuICAgIF0sXG4gICAgcHJlcGFyZUV2ZW50OiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICB2YXIgZSA9IGluRXZlbnQ7XG4gICAgICBpZiAoSEFTX0JJVE1BUF9UWVBFKSB7XG4gICAgICAgIGUgPSBfZGlzcGF0Y2hlci5jbG9uZUV2ZW50KGluRXZlbnQpO1xuICAgICAgICBlLnBvaW50ZXJUeXBlID0gdGhpcy5QT0lOVEVSX1RZUEVTW2luRXZlbnQucG9pbnRlclR5cGVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGU7XG4gICAgfSxcbiAgICBjbGVhbnVwOiBmdW5jdGlvbihpZCkge1xuICAgICAgbXNfX3BvaW50ZXJtYXBbJ2RlbGV0ZSddKGlkKTtcbiAgICB9LFxuICAgIE1TUG9pbnRlckRvd246IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIG1zX19wb2ludGVybWFwLnNldChpbkV2ZW50LnBvaW50ZXJJZCwgaW5FdmVudCk7XG4gICAgICB2YXIgZSA9IHRoaXMucHJlcGFyZUV2ZW50KGluRXZlbnQpO1xuICAgICAgX2Rpc3BhdGNoZXIuZG93bihlKTtcbiAgICB9LFxuICAgIE1TUG9pbnRlck1vdmU6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICBfZGlzcGF0Y2hlci5tb3ZlKGUpO1xuICAgIH0sXG4gICAgTVNQb2ludGVyVXA6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICBfZGlzcGF0Y2hlci51cChlKTtcbiAgICAgIHRoaXMuY2xlYW51cChpbkV2ZW50LnBvaW50ZXJJZCk7XG4gICAgfSxcbiAgICBNU1BvaW50ZXJPdXQ6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICBfZGlzcGF0Y2hlci5sZWF2ZU91dChlKTtcbiAgICB9LFxuICAgIE1TUG9pbnRlck92ZXI6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICBfZGlzcGF0Y2hlci5lbnRlck92ZXIoZSk7XG4gICAgfSxcbiAgICBNU1BvaW50ZXJDYW5jZWw6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gdGhpcy5wcmVwYXJlRXZlbnQoaW5FdmVudCk7XG4gICAgICBfZGlzcGF0Y2hlci5jYW5jZWwoZSk7XG4gICAgICB0aGlzLmNsZWFudXAoaW5FdmVudC5wb2ludGVySWQpO1xuICAgIH0sXG4gICAgTVNMb3N0UG9pbnRlckNhcHR1cmU6IGZ1bmN0aW9uKGluRXZlbnQpIHtcbiAgICAgIHZhciBlID0gX2Rpc3BhdGNoZXIubWFrZUV2ZW50KCdsb3N0cG9pbnRlcmNhcHR1cmUnLCBpbkV2ZW50KTtcbiAgICAgIF9kaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgfSxcbiAgICBNU0dvdFBvaW50ZXJDYXB0dXJlOiBmdW5jdGlvbihpbkV2ZW50KSB7XG4gICAgICB2YXIgZSA9IF9kaXNwYXRjaGVyLm1ha2VFdmVudCgnZ290cG9pbnRlcmNhcHR1cmUnLCBpbkV2ZW50KTtcbiAgICAgIF9kaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBtcyA9IG1zRXZlbnRzO1xuXG4gIGZ1bmN0aW9uIHBsYXRmb3JtX2V2ZW50c19fYXBwbHlQb2x5ZmlsbCgpIHtcbiAgICAvLyBvbmx5IGFjdGl2YXRlIGlmIHRoaXMgcGxhdGZvcm0gZG9lcyBub3QgaGF2ZSBwb2ludGVyIGV2ZW50c1xuICAgIGlmICghd2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgICAgd2luZG93LlBvaW50ZXJFdmVudCA9IF9Qb2ludGVyRXZlbnQ7XG5cbiAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpIHtcbiAgICAgICAgdmFyIHRwID0gd2luZG93Lm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93Lm5hdmlnYXRvciwgJ21heFRvdWNoUG9pbnRzJywge1xuICAgICAgICAgIHZhbHVlOiB0cCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBfZGlzcGF0Y2hlci5yZWdpc3RlclNvdXJjZSgnbXMnLCBtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZGlzcGF0Y2hlci5yZWdpc3RlclNvdXJjZSgnbW91c2UnLCBtb3VzZSk7XG4gICAgICAgIGlmICh3aW5kb3cub250b3VjaHN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfZGlzcGF0Y2hlci5yZWdpc3RlclNvdXJjZSgndG91Y2gnLCB0b3VjaCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2Rpc3BhdGNoZXIucmVnaXN0ZXIoZG9jdW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBuID0gd2luZG93Lm5hdmlnYXRvcjtcbiAgdmFyIHMsIHI7XG4gIGZ1bmN0aW9uIGFzc2VydERvd24oaWQpIHtcbiAgICBpZiAoIV9kaXNwYXRjaGVyLnBvaW50ZXJtYXAuaGFzKGlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkUG9pbnRlcklkJyk7XG4gICAgfVxuICB9XG4gIGlmIChuLm1zUG9pbnRlckVuYWJsZWQpIHtcbiAgICBzID0gZnVuY3Rpb24ocG9pbnRlcklkKSB7XG4gICAgICBhc3NlcnREb3duKHBvaW50ZXJJZCk7XG4gICAgICB0aGlzLm1zU2V0UG9pbnRlckNhcHR1cmUocG9pbnRlcklkKTtcbiAgICB9O1xuICAgIHIgPSBmdW5jdGlvbihwb2ludGVySWQpIHtcbiAgICAgIGFzc2VydERvd24ocG9pbnRlcklkKTtcbiAgICAgIHRoaXMubXNSZWxlYXNlUG9pbnRlckNhcHR1cmUocG9pbnRlcklkKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHMgPSBmdW5jdGlvbiBzZXRQb2ludGVyQ2FwdHVyZShwb2ludGVySWQpIHtcbiAgICAgIGFzc2VydERvd24ocG9pbnRlcklkKTtcbiAgICAgIF9kaXNwYXRjaGVyLnNldENhcHR1cmUocG9pbnRlcklkLCB0aGlzKTtcbiAgICB9O1xuICAgIHIgPSBmdW5jdGlvbiByZWxlYXNlUG9pbnRlckNhcHR1cmUocG9pbnRlcklkKSB7XG4gICAgICBhc3NlcnREb3duKHBvaW50ZXJJZCk7XG4gICAgICBfZGlzcGF0Y2hlci5yZWxlYXNlQ2FwdHVyZShwb2ludGVySWQsIHRoaXMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjYXB0dXJlX19hcHBseVBvbHlmaWxsKCkge1xuICAgIGlmICh3aW5kb3cuRWxlbWVudCAmJiAhRWxlbWVudC5wcm90b3R5cGUuc2V0UG9pbnRlckNhcHR1cmUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsZW1lbnQucHJvdG90eXBlLCB7XG4gICAgICAgICdzZXRQb2ludGVyQ2FwdHVyZSc6IHtcbiAgICAgICAgICB2YWx1ZTogc1xuICAgICAgICB9LFxuICAgICAgICAncmVsZWFzZVBvaW50ZXJDYXB0dXJlJzoge1xuICAgICAgICAgIHZhbHVlOiByXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFwcGx5QXR0cmlidXRlU3R5bGVzKCk7XG4gIHBsYXRmb3JtX2V2ZW50c19fYXBwbHlQb2x5ZmlsbCgpO1xuICBjYXB0dXJlX19hcHBseVBvbHlmaWxsKCk7XG5cbiAgdmFyIHBvaW50ZXJldmVudHMgPSB7XG4gICAgZGlzcGF0Y2hlcjogX2Rpc3BhdGNoZXIsXG4gICAgSW5zdGFsbGVyOiBpbnN0YWxsZXIsXG4gICAgUG9pbnRlckV2ZW50OiBfUG9pbnRlckV2ZW50LFxuICAgIFBvaW50ZXJNYXA6IF9wb2ludGVybWFwLFxuICAgIHRhcmdldEZpbmRpbmc6IHRhcmdldGluZ1xuICB9O1xuXG4gIHJldHVybiBwb2ludGVyZXZlbnRzO1xuXG59KSk7XG4iLCIvKiEgalF1ZXJ5IFVJIC0gdjEuMTEuNCAtIDIwMTUtMTEtMTNcbiogaHR0cDovL2pxdWVyeXVpLmNvbVxuKiBJbmNsdWRlczogY29yZS5qcywgd2lkZ2V0LmpzLCBtb3VzZS5qcywgc29ydGFibGUuanMsIGVmZmVjdC5qc1xuKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yczsgTGljZW5zZWQgTUlUICovXG5cbihmdW5jdGlvbihlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxlKTplKGpRdWVyeSl9KShmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscyl7dmFyIG4sYSxvLHI9dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiYXJlYVwiPT09cj8obj10LnBhcmVudE5vZGUsYT1uLm5hbWUsdC5ocmVmJiZhJiZcIm1hcFwiPT09bi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPyhvPWUoXCJpbWdbdXNlbWFwPScjXCIrYStcIiddXCIpWzBdLCEhbyYmaShvKSk6ITEpOigvXihpbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkLy50ZXN0KHIpPyF0LmRpc2FibGVkOlwiYVwiPT09cj90LmhyZWZ8fHM6cykmJmkodCl9ZnVuY3Rpb24gaSh0KXtyZXR1cm4gZS5leHByLmZpbHRlcnMudmlzaWJsZSh0KSYmIWUodCkucGFyZW50cygpLmFkZEJhY2soKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm5cImhpZGRlblwiPT09ZS5jc3ModGhpcyxcInZpc2liaWxpdHlcIil9KS5sZW5ndGh9ZS51aT1lLnVpfHx7fSxlLmV4dGVuZChlLnVpLHt2ZXJzaW9uOlwiMS4xMS40XCIsa2V5Q29kZTp7QkFDS1NQQUNFOjgsQ09NTUE6MTg4LERFTEVURTo0NixET1dOOjQwLEVORDozNSxFTlRFUjoxMyxFU0NBUEU6MjcsSE9NRTozNixMRUZUOjM3LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU1BBQ0U6MzIsVEFCOjksVVA6Mzh9fSksZS5mbi5leHRlbmQoe3Njcm9sbFBhcmVudDpmdW5jdGlvbih0KXt2YXIgaT10aGlzLmNzcyhcInBvc2l0aW9uXCIpLHM9XCJhYnNvbHV0ZVwiPT09aSxuPXQ/LyhhdXRvfHNjcm9sbHxoaWRkZW4pLzovKGF1dG98c2Nyb2xsKS8sYT10aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpO3JldHVybiBzJiZcInN0YXRpY1wiPT09dC5jc3MoXCJwb3NpdGlvblwiKT8hMTpuLnRlc3QodC5jc3MoXCJvdmVyZmxvd1wiKSt0LmNzcyhcIm92ZXJmbG93LXlcIikrdC5jc3MoXCJvdmVyZmxvdy14XCIpKX0pLmVxKDApO3JldHVyblwiZml4ZWRcIiE9PWkmJmEubGVuZ3RoP2E6ZSh0aGlzWzBdLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KX0sdW5pcXVlSWQ6ZnVuY3Rpb24oKXt2YXIgZT0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt0aGlzLmlkfHwodGhpcy5pZD1cInVpLWlkLVwiKyArK2UpfSl9fSgpLHJlbW92ZVVuaXF1ZUlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpey9edWktaWQtXFxkKyQvLnRlc3QodGhpcy5pZCkmJmUodGhpcykucmVtb3ZlQXR0cihcImlkXCIpfSl9fSksZS5leHRlbmQoZS5leHByW1wiOlwiXSx7ZGF0YTplLmV4cHIuY3JlYXRlUHNldWRvP2UuZXhwci5jcmVhdGVQc2V1ZG8oZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiEhZS5kYXRhKGksdCl9fSk6ZnVuY3Rpb24odCxpLHMpe3JldHVybiEhZS5kYXRhKHQsc1szXSl9LGZvY3VzYWJsZTpmdW5jdGlvbihpKXtyZXR1cm4gdChpLCFpc05hTihlLmF0dHIoaSxcInRhYmluZGV4XCIpKSl9LHRhYmJhYmxlOmZ1bmN0aW9uKGkpe3ZhciBzPWUuYXR0cihpLFwidGFiaW5kZXhcIiksbj1pc05hTihzKTtyZXR1cm4obnx8cz49MCkmJnQoaSwhbil9fSksZShcIjxhPlwiKS5vdXRlcldpZHRoKDEpLmpxdWVyeXx8ZS5lYWNoKFtcIldpZHRoXCIsXCJIZWlnaHRcIl0sZnVuY3Rpb24odCxpKXtmdW5jdGlvbiBzKHQsaSxzLGEpe3JldHVybiBlLmVhY2gobixmdW5jdGlvbigpe2ktPXBhcnNlRmxvYXQoZS5jc3ModCxcInBhZGRpbmdcIit0aGlzKSl8fDAscyYmKGktPXBhcnNlRmxvYXQoZS5jc3ModCxcImJvcmRlclwiK3RoaXMrXCJXaWR0aFwiKSl8fDApLGEmJihpLT1wYXJzZUZsb2F0KGUuY3NzKHQsXCJtYXJnaW5cIit0aGlzKSl8fDApfSksaX12YXIgbj1cIldpZHRoXCI9PT1pP1tcIkxlZnRcIixcIlJpZ2h0XCJdOltcIlRvcFwiLFwiQm90dG9tXCJdLGE9aS50b0xvd2VyQ2FzZSgpLG89e2lubmVyV2lkdGg6ZS5mbi5pbm5lcldpZHRoLGlubmVySGVpZ2h0OmUuZm4uaW5uZXJIZWlnaHQsb3V0ZXJXaWR0aDplLmZuLm91dGVyV2lkdGgsb3V0ZXJIZWlnaHQ6ZS5mbi5vdXRlckhlaWdodH07ZS5mbltcImlubmVyXCIraV09ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQ/b1tcImlubmVyXCIraV0uY2FsbCh0aGlzKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtlKHRoaXMpLmNzcyhhLHModGhpcyx0KStcInB4XCIpfSl9LGUuZm5bXCJvdXRlclwiK2ldPWZ1bmN0aW9uKHQsbil7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIHQ/b1tcIm91dGVyXCIraV0uY2FsbCh0aGlzLHQpOnRoaXMuZWFjaChmdW5jdGlvbigpe2UodGhpcykuY3NzKGEscyh0aGlzLHQsITAsbikrXCJweFwiKX0pfX0pLGUuZm4uYWRkQmFja3x8KGUuZm4uYWRkQmFjaz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9KSxlKFwiPGE+XCIpLmRhdGEoXCJhLWJcIixcImFcIikucmVtb3ZlRGF0YShcImEtYlwiKS5kYXRhKFwiYS1iXCIpJiYoZS5mbi5yZW1vdmVEYXRhPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihpKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90LmNhbGwodGhpcyxlLmNhbWVsQ2FzZShpKSk6dC5jYWxsKHRoaXMpfX0oZS5mbi5yZW1vdmVEYXRhKSksZS51aS5pZT0hIS9tc2llIFtcXHcuXSsvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKSxlLmZuLmV4dGVuZCh7Zm9jdXM6ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGkscyl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGk/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZSh0KS5mb2N1cygpLHMmJnMuY2FsbCh0KX0saSl9KTp0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KGUuZm4uZm9jdXMpLGRpc2FibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXt2YXIgZT1cIm9uc2VsZWN0c3RhcnRcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik/XCJzZWxlY3RzdGFydFwiOlwibW91c2Vkb3duXCI7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmluZChlK1wiLnVpLWRpc2FibGVTZWxlY3Rpb25cIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCl9KX19KCksZW5hYmxlU2VsZWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudW5iaW5kKFwiLnVpLWRpc2FibGVTZWxlY3Rpb25cIil9LHpJbmRleDpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10KXJldHVybiB0aGlzLmNzcyhcInpJbmRleFwiLHQpO2lmKHRoaXMubGVuZ3RoKWZvcih2YXIgaSxzLG49ZSh0aGlzWzBdKTtuLmxlbmd0aCYmblswXSE9PWRvY3VtZW50Oyl7aWYoaT1uLmNzcyhcInBvc2l0aW9uXCIpLChcImFic29sdXRlXCI9PT1pfHxcInJlbGF0aXZlXCI9PT1pfHxcImZpeGVkXCI9PT1pKSYmKHM9cGFyc2VJbnQobi5jc3MoXCJ6SW5kZXhcIiksMTApLCFpc05hTihzKSYmMCE9PXMpKXJldHVybiBzO249bi5wYXJlbnQoKX1yZXR1cm4gMH19KSxlLnVpLnBsdWdpbj17YWRkOmZ1bmN0aW9uKHQsaSxzKXt2YXIgbixhPWUudWlbdF0ucHJvdG90eXBlO2ZvcihuIGluIHMpYS5wbHVnaW5zW25dPWEucGx1Z2luc1tuXXx8W10sYS5wbHVnaW5zW25dLnB1c2goW2ksc1tuXV0pfSxjYWxsOmZ1bmN0aW9uKGUsdCxpLHMpe3ZhciBuLGE9ZS5wbHVnaW5zW3RdO2lmKGEmJihzfHxlLmVsZW1lbnRbMF0ucGFyZW50Tm9kZSYmMTEhPT1lLmVsZW1lbnRbMF0ucGFyZW50Tm9kZS5ub2RlVHlwZSkpZm9yKG49MDthLmxlbmd0aD5uO24rKyllLm9wdGlvbnNbYVtuXVswXV0mJmFbbl1bMV0uYXBwbHkoZS5lbGVtZW50LGkpfX07dmFyIHM9MCxuPUFycmF5LnByb3RvdHlwZS5zbGljZTtlLmNsZWFuRGF0YT1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oaSl7dmFyIHMsbixhO2ZvcihhPTA7bnVsbCE9KG49aVthXSk7YSsrKXRyeXtzPWUuX2RhdGEobixcImV2ZW50c1wiKSxzJiZzLnJlbW92ZSYmZShuKS50cmlnZ2VySGFuZGxlcihcInJlbW92ZVwiKX1jYXRjaChvKXt9dChpKX19KGUuY2xlYW5EYXRhKSxlLndpZGdldD1mdW5jdGlvbih0LGkscyl7dmFyIG4sYSxvLHIsaD17fSxsPXQuc3BsaXQoXCIuXCIpWzBdO3JldHVybiB0PXQuc3BsaXQoXCIuXCIpWzFdLG49bCtcIi1cIit0LHN8fChzPWksaT1lLldpZGdldCksZS5leHByW1wiOlwiXVtuLnRvTG93ZXJDYXNlKCldPWZ1bmN0aW9uKHQpe3JldHVybiEhZS5kYXRhKHQsbil9LGVbbF09ZVtsXXx8e30sYT1lW2xdW3RdLG89ZVtsXVt0XT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9jcmVhdGVXaWRnZXQ/KGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuX2NyZWF0ZVdpZGdldChlLHQpLHZvaWQgMCk6bmV3IG8oZSx0KX0sZS5leHRlbmQobyxhLHt2ZXJzaW9uOnMudmVyc2lvbixfcHJvdG86ZS5leHRlbmQoe30scyksX2NoaWxkQ29uc3RydWN0b3JzOltdfSkscj1uZXcgaSxyLm9wdGlvbnM9ZS53aWRnZXQuZXh0ZW5kKHt9LHIub3B0aW9ucyksZS5lYWNoKHMsZnVuY3Rpb24odCxzKXtyZXR1cm4gZS5pc0Z1bmN0aW9uKHMpPyhoW3RdPWZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGVbdF0uYXBwbHkodGhpcyxhcmd1bWVudHMpfSxuPWZ1bmN0aW9uKGUpe3JldHVybiBpLnByb3RvdHlwZVt0XS5hcHBseSh0aGlzLGUpfTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdCxpPXRoaXMuX3N1cGVyLGE9dGhpcy5fc3VwZXJBcHBseTtyZXR1cm4gdGhpcy5fc3VwZXI9ZSx0aGlzLl9zdXBlckFwcGx5PW4sdD1zLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9zdXBlcj1pLHRoaXMuX3N1cGVyQXBwbHk9YSx0fX0oKSx2b2lkIDApOihoW3RdPXMsdm9pZCAwKX0pLG8ucHJvdG90eXBlPWUud2lkZ2V0LmV4dGVuZChyLHt3aWRnZXRFdmVudFByZWZpeDphP3Iud2lkZ2V0RXZlbnRQcmVmaXh8fHQ6dH0saCx7Y29uc3RydWN0b3I6byxuYW1lc3BhY2U6bCx3aWRnZXROYW1lOnQsd2lkZ2V0RnVsbE5hbWU6bn0pLGE/KGUuZWFjaChhLl9jaGlsZENvbnN0cnVjdG9ycyxmdW5jdGlvbih0LGkpe3ZhciBzPWkucHJvdG90eXBlO2Uud2lkZ2V0KHMubmFtZXNwYWNlK1wiLlwiK3Mud2lkZ2V0TmFtZSxvLGkuX3Byb3RvKX0pLGRlbGV0ZSBhLl9jaGlsZENvbnN0cnVjdG9ycyk6aS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaChvKSxlLndpZGdldC5icmlkZ2UodCxvKSxvfSxlLndpZGdldC5leHRlbmQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBpLHMsYT1uLmNhbGwoYXJndW1lbnRzLDEpLG89MCxyPWEubGVuZ3RoO3I+bztvKyspZm9yKGkgaW4gYVtvXSlzPWFbb11baV0sYVtvXS5oYXNPd25Qcm9wZXJ0eShpKSYmdm9pZCAwIT09cyYmKHRbaV09ZS5pc1BsYWluT2JqZWN0KHMpP2UuaXNQbGFpbk9iamVjdCh0W2ldKT9lLndpZGdldC5leHRlbmQoe30sdFtpXSxzKTplLndpZGdldC5leHRlbmQoe30scyk6cyk7cmV0dXJuIHR9LGUud2lkZ2V0LmJyaWRnZT1mdW5jdGlvbih0LGkpe3ZhciBzPWkucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lfHx0O2UuZm5bdF09ZnVuY3Rpb24oYSl7dmFyIG89XCJzdHJpbmdcIj09dHlwZW9mIGEscj1uLmNhbGwoYXJndW1lbnRzLDEpLGg9dGhpcztyZXR1cm4gbz90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgaSxuPWUuZGF0YSh0aGlzLHMpO3JldHVyblwiaW5zdGFuY2VcIj09PWE/KGg9biwhMSk6bj9lLmlzRnVuY3Rpb24oblthXSkmJlwiX1wiIT09YS5jaGFyQXQoMCk/KGk9blthXS5hcHBseShuLHIpLGkhPT1uJiZ2b2lkIDAhPT1pPyhoPWkmJmkuanF1ZXJ5P2gucHVzaFN0YWNrKGkuZ2V0KCkpOmksITEpOnZvaWQgMCk6ZS5lcnJvcihcIm5vIHN1Y2ggbWV0aG9kICdcIithK1wiJyBmb3IgXCIrdCtcIiB3aWRnZXQgaW5zdGFuY2VcIik6ZS5lcnJvcihcImNhbm5vdCBjYWxsIG1ldGhvZHMgb24gXCIrdCtcIiBwcmlvciB0byBpbml0aWFsaXphdGlvbjsgXCIrXCJhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgJ1wiK2ErXCInXCIpfSk6KHIubGVuZ3RoJiYoYT1lLndpZGdldC5leHRlbmQuYXBwbHkobnVsbCxbYV0uY29uY2F0KHIpKSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5kYXRhKHRoaXMscyk7dD8odC5vcHRpb24oYXx8e30pLHQuX2luaXQmJnQuX2luaXQoKSk6ZS5kYXRhKHRoaXMscyxuZXcgaShhLHRoaXMpKX0pKSxofX0sZS5XaWRnZXQ9ZnVuY3Rpb24oKXt9LGUuV2lkZ2V0Ll9jaGlsZENvbnN0cnVjdG9ycz1bXSxlLldpZGdldC5wcm90b3R5cGU9e3dpZGdldE5hbWU6XCJ3aWRnZXRcIix3aWRnZXRFdmVudFByZWZpeDpcIlwiLGRlZmF1bHRFbGVtZW50OlwiPGRpdj5cIixvcHRpb25zOntkaXNhYmxlZDohMSxjcmVhdGU6bnVsbH0sX2NyZWF0ZVdpZGdldDpmdW5jdGlvbih0LGkpe2k9ZShpfHx0aGlzLmRlZmF1bHRFbGVtZW50fHx0aGlzKVswXSx0aGlzLmVsZW1lbnQ9ZShpKSx0aGlzLnV1aWQ9cysrLHRoaXMuZXZlbnROYW1lc3BhY2U9XCIuXCIrdGhpcy53aWRnZXROYW1lK3RoaXMudXVpZCx0aGlzLmJpbmRpbmdzPWUoKSx0aGlzLmhvdmVyYWJsZT1lKCksdGhpcy5mb2N1c2FibGU9ZSgpLGkhPT10aGlzJiYoZS5kYXRhKGksdGhpcy53aWRnZXRGdWxsTmFtZSx0aGlzKSx0aGlzLl9vbighMCx0aGlzLmVsZW1lbnQse3JlbW92ZTpmdW5jdGlvbihlKXtlLnRhcmdldD09PWkmJnRoaXMuZGVzdHJveSgpfX0pLHRoaXMuZG9jdW1lbnQ9ZShpLnN0eWxlP2kub3duZXJEb2N1bWVudDppLmRvY3VtZW50fHxpKSx0aGlzLndpbmRvdz1lKHRoaXMuZG9jdW1lbnRbMF0uZGVmYXVsdFZpZXd8fHRoaXMuZG9jdW1lbnRbMF0ucGFyZW50V2luZG93KSksdGhpcy5vcHRpb25zPWUud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMsdGhpcy5fZ2V0Q3JlYXRlT3B0aW9ucygpLHQpLHRoaXMuX2NyZWF0ZSgpLHRoaXMuX3RyaWdnZXIoXCJjcmVhdGVcIixudWxsLHRoaXMuX2dldENyZWF0ZUV2ZW50RGF0YSgpKSx0aGlzLl9pbml0KCl9LF9nZXRDcmVhdGVPcHRpb25zOmUubm9vcCxfZ2V0Q3JlYXRlRXZlbnREYXRhOmUubm9vcCxfY3JlYXRlOmUubm9vcCxfaW5pdDplLm5vb3AsZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX2Rlc3Ryb3koKSx0aGlzLmVsZW1lbnQudW5iaW5kKHRoaXMuZXZlbnROYW1lc3BhY2UpLnJlbW92ZURhdGEodGhpcy53aWRnZXRGdWxsTmFtZSkucmVtb3ZlRGF0YShlLmNhbWVsQ2FzZSh0aGlzLndpZGdldEZ1bGxOYW1lKSksdGhpcy53aWRnZXQoKS51bmJpbmQodGhpcy5ldmVudE5hbWVzcGFjZSkucmVtb3ZlQXR0cihcImFyaWEtZGlzYWJsZWRcIikucmVtb3ZlQ2xhc3ModGhpcy53aWRnZXRGdWxsTmFtZStcIi1kaXNhYmxlZCBcIitcInVpLXN0YXRlLWRpc2FibGVkXCIpLHRoaXMuYmluZGluZ3MudW5iaW5kKHRoaXMuZXZlbnROYW1lc3BhY2UpLHRoaXMuaG92ZXJhYmxlLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIiksdGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoXCJ1aS1zdGF0ZS1mb2N1c1wiKX0sX2Rlc3Ryb3k6ZS5ub29wLHdpZGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnR9LG9wdGlvbjpmdW5jdGlvbih0LGkpe3ZhciBzLG4sYSxvPXQ7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGUud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KWlmKG89e30scz10LnNwbGl0KFwiLlwiKSx0PXMuc2hpZnQoKSxzLmxlbmd0aCl7Zm9yKG49b1t0XT1lLndpZGdldC5leHRlbmQoe30sdGhpcy5vcHRpb25zW3RdKSxhPTA7cy5sZW5ndGgtMT5hO2ErKyluW3NbYV1dPW5bc1thXV18fHt9LG49bltzW2FdXTtpZih0PXMucG9wKCksMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PW5bdF0/bnVsbDpuW3RdO25bdF09aX1lbHNle2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB2b2lkIDA9PT10aGlzLm9wdGlvbnNbdF0/bnVsbDp0aGlzLm9wdGlvbnNbdF07b1t0XT1pfXJldHVybiB0aGlzLl9zZXRPcHRpb25zKG8pLHRoaXN9LF9zZXRPcHRpb25zOmZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUpdGhpcy5fc2V0T3B0aW9uKHQsZVt0XSk7cmV0dXJuIHRoaXN9LF9zZXRPcHRpb246ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vcHRpb25zW2VdPXQsXCJkaXNhYmxlZFwiPT09ZSYmKHRoaXMud2lkZ2V0KCkudG9nZ2xlQ2xhc3ModGhpcy53aWRnZXRGdWxsTmFtZStcIi1kaXNhYmxlZFwiLCEhdCksdCYmKHRoaXMuaG92ZXJhYmxlLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIiksdGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoXCJ1aS1zdGF0ZS1mb2N1c1wiKSkpLHRoaXN9LGVuYWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXRPcHRpb25zKHtkaXNhYmxlZDohMX0pfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoe2Rpc2FibGVkOiEwfSl9LF9vbjpmdW5jdGlvbih0LGkscyl7dmFyIG4sYT10aGlzO1wiYm9vbGVhblwiIT10eXBlb2YgdCYmKHM9aSxpPXQsdD0hMSkscz8oaT1uPWUoaSksdGhpcy5iaW5kaW5ncz10aGlzLmJpbmRpbmdzLmFkZChpKSk6KHM9aSxpPXRoaXMuZWxlbWVudCxuPXRoaXMud2lkZ2V0KCkpLGUuZWFjaChzLGZ1bmN0aW9uKHMsbyl7ZnVuY3Rpb24gcigpe3JldHVybiB0fHxhLm9wdGlvbnMuZGlzYWJsZWQhPT0hMCYmIWUodGhpcykuaGFzQ2xhc3MoXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKT8oXCJzdHJpbmdcIj09dHlwZW9mIG8/YVtvXTpvKS5hcHBseShhLGFyZ3VtZW50cyk6dm9pZCAwfVwic3RyaW5nXCIhPXR5cGVvZiBvJiYoci5ndWlkPW8uZ3VpZD1vLmd1aWR8fHIuZ3VpZHx8ZS5ndWlkKyspO3ZhciBoPXMubWF0Y2goL14oW1xcdzotXSopXFxzKiguKikkLyksbD1oWzFdK2EuZXZlbnROYW1lc3BhY2UsdT1oWzJdO3U/bi5kZWxlZ2F0ZSh1LGwscik6aS5iaW5kKGwscil9KX0sX29mZjpmdW5jdGlvbih0LGkpe2k9KGl8fFwiXCIpLnNwbGl0KFwiIFwiKS5qb2luKHRoaXMuZXZlbnROYW1lc3BhY2UrXCIgXCIpK3RoaXMuZXZlbnROYW1lc3BhY2UsdC51bmJpbmQoaSkudW5kZWxlZ2F0ZShpKSx0aGlzLmJpbmRpbmdzPWUodGhpcy5iaW5kaW5ncy5ub3QodCkuZ2V0KCkpLHRoaXMuZm9jdXNhYmxlPWUodGhpcy5mb2N1c2FibGUubm90KHQpLmdldCgpKSx0aGlzLmhvdmVyYWJsZT1lKHRoaXMuaG92ZXJhYmxlLm5vdCh0KS5nZXQoKSl9LF9kZWxheTpmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIGkoKXtyZXR1cm4oXCJzdHJpbmdcIj09dHlwZW9mIGU/c1tlXTplKS5hcHBseShzLGFyZ3VtZW50cyl9dmFyIHM9dGhpcztyZXR1cm4gc2V0VGltZW91dChpLHR8fDApfSxfaG92ZXJhYmxlOmZ1bmN0aW9uKHQpe3RoaXMuaG92ZXJhYmxlPXRoaXMuaG92ZXJhYmxlLmFkZCh0KSx0aGlzLl9vbih0LHttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UodC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcInVpLXN0YXRlLWhvdmVyXCIpfSxtb3VzZWxlYXZlOmZ1bmN0aW9uKHQpe2UodC5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcyhcInVpLXN0YXRlLWhvdmVyXCIpfX0pfSxfZm9jdXNhYmxlOmZ1bmN0aW9uKHQpe3RoaXMuZm9jdXNhYmxlPXRoaXMuZm9jdXNhYmxlLmFkZCh0KSx0aGlzLl9vbih0LHtmb2N1c2luOmZ1bmN0aW9uKHQpe2UodC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcInVpLXN0YXRlLWZvY3VzXCIpfSxmb2N1c291dDpmdW5jdGlvbih0KXtlKHQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoXCJ1aS1zdGF0ZS1mb2N1c1wiKX19KX0sX3RyaWdnZXI6ZnVuY3Rpb24odCxpLHMpe3ZhciBuLGEsbz10aGlzLm9wdGlvbnNbdF07aWYocz1zfHx7fSxpPWUuRXZlbnQoaSksaS50eXBlPSh0PT09dGhpcy53aWRnZXRFdmVudFByZWZpeD90OnRoaXMud2lkZ2V0RXZlbnRQcmVmaXgrdCkudG9Mb3dlckNhc2UoKSxpLnRhcmdldD10aGlzLmVsZW1lbnRbMF0sYT1pLm9yaWdpbmFsRXZlbnQpZm9yKG4gaW4gYSluIGluIGl8fChpW25dPWFbbl0pO3JldHVybiB0aGlzLmVsZW1lbnQudHJpZ2dlcihpLHMpLCEoZS5pc0Z1bmN0aW9uKG8pJiZvLmFwcGx5KHRoaXMuZWxlbWVudFswXSxbaV0uY29uY2F0KHMpKT09PSExfHxpLmlzRGVmYXVsdFByZXZlbnRlZCgpKX19LGUuZWFjaCh7c2hvdzpcImZhZGVJblwiLGhpZGU6XCJmYWRlT3V0XCJ9LGZ1bmN0aW9uKHQsaSl7ZS5XaWRnZXQucHJvdG90eXBlW1wiX1wiK3RdPWZ1bmN0aW9uKHMsbixhKXtcInN0cmluZ1wiPT10eXBlb2YgbiYmKG49e2VmZmVjdDpufSk7dmFyIG8scj1uP249PT0hMHx8XCJudW1iZXJcIj09dHlwZW9mIG4/aTpuLmVmZmVjdHx8aTp0O249bnx8e30sXCJudW1iZXJcIj09dHlwZW9mIG4mJihuPXtkdXJhdGlvbjpufSksbz0hZS5pc0VtcHR5T2JqZWN0KG4pLG4uY29tcGxldGU9YSxuLmRlbGF5JiZzLmRlbGF5KG4uZGVsYXkpLG8mJmUuZWZmZWN0cyYmZS5lZmZlY3RzLmVmZmVjdFtyXT9zW3RdKG4pOnIhPT10JiZzW3JdP3Nbcl0obi5kdXJhdGlvbixuLmVhc2luZyxhKTpzLnF1ZXVlKGZ1bmN0aW9uKGkpe2UodGhpcylbdF0oKSxhJiZhLmNhbGwoc1swXSksaSgpfSl9fSksZS53aWRnZXQ7dmFyIGE9ITE7ZShkb2N1bWVudCkubW91c2V1cChmdW5jdGlvbigpe2E9ITF9KSxlLndpZGdldChcInVpLm1vdXNlXCIse3ZlcnNpb246XCIxLjExLjRcIixvcHRpb25zOntjYW5jZWw6XCJpbnB1dCx0ZXh0YXJlYSxidXR0b24sc2VsZWN0LG9wdGlvblwiLGRpc3RhbmNlOjEsZGVsYXk6MH0sX21vdXNlSW5pdDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5lbGVtZW50LmJpbmQoXCJtb3VzZWRvd24uXCIrdGhpcy53aWRnZXROYW1lLGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9tb3VzZURvd24oZSl9KS5iaW5kKFwiY2xpY2suXCIrdGhpcy53aWRnZXROYW1lLGZ1bmN0aW9uKGkpe3JldHVybiEwPT09ZS5kYXRhKGkudGFyZ2V0LHQud2lkZ2V0TmFtZStcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKT8oZS5yZW1vdmVEYXRhKGkudGFyZ2V0LHQud2lkZ2V0TmFtZStcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKSxpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCExKTp2b2lkIDB9KSx0aGlzLnN0YXJ0ZWQ9ITF9LF9tb3VzZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQudW5iaW5kKFwiLlwiK3RoaXMud2lkZ2V0TmFtZSksdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUmJnRoaXMuZG9jdW1lbnQudW5iaW5kKFwibW91c2Vtb3ZlLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkudW5iaW5kKFwibW91c2V1cC5cIit0aGlzLndpZGdldE5hbWUsdGhpcy5fbW91c2VVcERlbGVnYXRlKX0sX21vdXNlRG93bjpmdW5jdGlvbih0KXtpZighYSl7dGhpcy5fbW91c2VNb3ZlZD0hMSx0aGlzLl9tb3VzZVN0YXJ0ZWQmJnRoaXMuX21vdXNlVXAodCksdGhpcy5fbW91c2VEb3duRXZlbnQ9dDt2YXIgaT10aGlzLHM9MT09PXQud2hpY2gsbj1cInN0cmluZ1wiPT10eXBlb2YgdGhpcy5vcHRpb25zLmNhbmNlbCYmdC50YXJnZXQubm9kZU5hbWU/ZSh0LnRhcmdldCkuY2xvc2VzdCh0aGlzLm9wdGlvbnMuY2FuY2VsKS5sZW5ndGg6ITE7cmV0dXJuIHMmJiFuJiZ0aGlzLl9tb3VzZUNhcHR1cmUodCk/KHRoaXMubW91c2VEZWxheU1ldD0hdGhpcy5vcHRpb25zLmRlbGF5LHRoaXMubW91c2VEZWxheU1ldHx8KHRoaXMuX21vdXNlRGVsYXlUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5tb3VzZURlbGF5TWV0PSEwfSx0aGlzLm9wdGlvbnMuZGVsYXkpKSx0aGlzLl9tb3VzZURpc3RhbmNlTWV0KHQpJiZ0aGlzLl9tb3VzZURlbGF5TWV0KHQpJiYodGhpcy5fbW91c2VTdGFydGVkPXRoaXMuX21vdXNlU3RhcnQodCkhPT0hMSwhdGhpcy5fbW91c2VTdGFydGVkKT8odC5wcmV2ZW50RGVmYXVsdCgpLCEwKTooITA9PT1lLmRhdGEodC50YXJnZXQsdGhpcy53aWRnZXROYW1lK1wiLnByZXZlbnRDbGlja0V2ZW50XCIpJiZlLnJlbW92ZURhdGEodC50YXJnZXQsdGhpcy53aWRnZXROYW1lK1wiLnByZXZlbnRDbGlja0V2ZW50XCIpLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBpLl9tb3VzZU1vdmUoZSl9LHRoaXMuX21vdXNlVXBEZWxlZ2F0ZT1mdW5jdGlvbihlKXtyZXR1cm4gaS5fbW91c2VVcChlKX0sdGhpcy5kb2N1bWVudC5iaW5kKFwibW91c2Vtb3ZlLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkuYmluZChcIm1vdXNldXAuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSksdC5wcmV2ZW50RGVmYXVsdCgpLGE9ITAsITApKTohMH19LF9tb3VzZU1vdmU6ZnVuY3Rpb24odCl7aWYodGhpcy5fbW91c2VNb3ZlZCl7aWYoZS51aS5pZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk+ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSYmIXQuYnV0dG9uKXJldHVybiB0aGlzLl9tb3VzZVVwKHQpO2lmKCF0LndoaWNoKXJldHVybiB0aGlzLl9tb3VzZVVwKHQpfXJldHVybih0LndoaWNofHx0LmJ1dHRvbikmJih0aGlzLl9tb3VzZU1vdmVkPSEwKSx0aGlzLl9tb3VzZVN0YXJ0ZWQ/KHRoaXMuX21vdXNlRHJhZyh0KSx0LnByZXZlbnREZWZhdWx0KCkpOih0aGlzLl9tb3VzZURpc3RhbmNlTWV0KHQpJiZ0aGlzLl9tb3VzZURlbGF5TWV0KHQpJiYodGhpcy5fbW91c2VTdGFydGVkPXRoaXMuX21vdXNlU3RhcnQodGhpcy5fbW91c2VEb3duRXZlbnQsdCkhPT0hMSx0aGlzLl9tb3VzZVN0YXJ0ZWQ/dGhpcy5fbW91c2VEcmFnKHQpOnRoaXMuX21vdXNlVXAodCkpLCF0aGlzLl9tb3VzZVN0YXJ0ZWQpfSxfbW91c2VVcDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kb2N1bWVudC51bmJpbmQoXCJtb3VzZW1vdmUuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS51bmJpbmQoXCJtb3VzZXVwLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZVVwRGVsZWdhdGUpLHRoaXMuX21vdXNlU3RhcnRlZCYmKHRoaXMuX21vdXNlU3RhcnRlZD0hMSx0LnRhcmdldD09PXRoaXMuX21vdXNlRG93bkV2ZW50LnRhcmdldCYmZS5kYXRhKHQudGFyZ2V0LHRoaXMud2lkZ2V0TmFtZStcIi5wcmV2ZW50Q2xpY2tFdmVudFwiLCEwKSx0aGlzLl9tb3VzZVN0b3AodCkpLGE9ITEsITF9LF9tb3VzZURpc3RhbmNlTWV0OmZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLm1heChNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWC1lLnBhZ2VYKSxNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWS1lLnBhZ2VZKSk+PXRoaXMub3B0aW9ucy5kaXN0YW5jZX0sX21vdXNlRGVsYXlNZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb3VzZURlbGF5TWV0fSxfbW91c2VTdGFydDpmdW5jdGlvbigpe30sX21vdXNlRHJhZzpmdW5jdGlvbigpe30sX21vdXNlU3RvcDpmdW5jdGlvbigpe30sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbigpe3JldHVybiEwfX0pLGUud2lkZ2V0KFwidWkuc29ydGFibGVcIixlLnVpLm1vdXNlLHt2ZXJzaW9uOlwiMS4xMS40XCIsd2lkZ2V0RXZlbnRQcmVmaXg6XCJzb3J0XCIscmVhZHk6ITEsb3B0aW9uczp7YXBwZW5kVG86XCJwYXJlbnRcIixheGlzOiExLGNvbm5lY3RXaXRoOiExLGNvbnRhaW5tZW50OiExLGN1cnNvcjpcImF1dG9cIixjdXJzb3JBdDohMSxkcm9wT25FbXB0eTohMCxmb3JjZVBsYWNlaG9sZGVyU2l6ZTohMSxmb3JjZUhlbHBlclNpemU6ITEsZ3JpZDohMSxoYW5kbGU6ITEsaGVscGVyOlwib3JpZ2luYWxcIixpdGVtczpcIj4gKlwiLG9wYWNpdHk6ITEscGxhY2Vob2xkZXI6ITEscmV2ZXJ0OiExLHNjcm9sbDohMCxzY3JvbGxTZW5zaXRpdml0eToyMCxzY3JvbGxTcGVlZDoyMCxzY29wZTpcImRlZmF1bHRcIix0b2xlcmFuY2U6XCJpbnRlcnNlY3RcIix6SW5kZXg6MWUzLGFjdGl2YXRlOm51bGwsYmVmb3JlU3RvcDpudWxsLGNoYW5nZTpudWxsLGRlYWN0aXZhdGU6bnVsbCxvdXQ6bnVsbCxvdmVyOm51bGwscmVjZWl2ZTpudWxsLHJlbW92ZTpudWxsLHNvcnQ6bnVsbCxzdGFydDpudWxsLHN0b3A6bnVsbCx1cGRhdGU6bnVsbH0sX2lzT3ZlckF4aXM6ZnVuY3Rpb24oZSx0LGkpe3JldHVybiBlPj10JiZ0K2k+ZX0sX2lzRmxvYXRpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuL2xlZnR8cmlnaHQvLnRlc3QoZS5jc3MoXCJmbG9hdFwiKSl8fC9pbmxpbmV8dGFibGUtY2VsbC8udGVzdChlLmNzcyhcImRpc3BsYXlcIikpfSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXJDYWNoZT17fSx0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoXCJ1aS1zb3J0YWJsZVwiKSx0aGlzLnJlZnJlc2goKSx0aGlzLm9mZnNldD10aGlzLmVsZW1lbnQub2Zmc2V0KCksdGhpcy5fbW91c2VJbml0KCksdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5yZWFkeT0hMH0sX3NldE9wdGlvbjpmdW5jdGlvbihlLHQpe3RoaXMuX3N1cGVyKGUsdCksXCJoYW5kbGVcIj09PWUmJnRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpfSxfc2V0SGFuZGxlQ2xhc3NOYW1lOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmZpbmQoXCIudWktc29ydGFibGUtaGFuZGxlXCIpLnJlbW92ZUNsYXNzKFwidWktc29ydGFibGUtaGFuZGxlXCIpLGUuZWFjaCh0aGlzLml0ZW1zLGZ1bmN0aW9uKCl7KHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oYW5kbGU/dGhpcy5pdGVtLmZpbmQodGhpcy5pbnN0YW5jZS5vcHRpb25zLmhhbmRsZSk6dGhpcy5pdGVtKS5hZGRDbGFzcyhcInVpLXNvcnRhYmxlLWhhbmRsZVwiKX0pfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyhcInVpLXNvcnRhYmxlIHVpLXNvcnRhYmxlLWRpc2FibGVkXCIpLmZpbmQoXCIudWktc29ydGFibGUtaGFuZGxlXCIpLnJlbW92ZUNsYXNzKFwidWktc29ydGFibGUtaGFuZGxlXCIpLHRoaXMuX21vdXNlRGVzdHJveSgpO2Zvcih2YXIgZT10aGlzLml0ZW1zLmxlbmd0aC0xO2U+PTA7ZS0tKXRoaXMuaXRlbXNbZV0uaXRlbS5yZW1vdmVEYXRhKHRoaXMud2lkZ2V0TmFtZStcIi1pdGVtXCIpO3JldHVybiB0aGlzfSxfbW91c2VDYXB0dXJlOmZ1bmN0aW9uKHQsaSl7dmFyIHM9bnVsbCxuPSExLGE9dGhpcztyZXR1cm4gdGhpcy5yZXZlcnRpbmc/ITE6dGhpcy5vcHRpb25zLmRpc2FibGVkfHxcInN0YXRpY1wiPT09dGhpcy5vcHRpb25zLnR5cGU/ITE6KHRoaXMuX3JlZnJlc2hJdGVtcyh0KSxlKHQudGFyZ2V0KS5wYXJlbnRzKCkuZWFjaChmdW5jdGlvbigpe3JldHVybiBlLmRhdGEodGhpcyxhLndpZGdldE5hbWUrXCItaXRlbVwiKT09PWE/KHM9ZSh0aGlzKSwhMSk6dm9pZCAwfSksZS5kYXRhKHQudGFyZ2V0LGEud2lkZ2V0TmFtZStcIi1pdGVtXCIpPT09YSYmKHM9ZSh0LnRhcmdldCkpLHM/IXRoaXMub3B0aW9ucy5oYW5kbGV8fGl8fChlKHRoaXMub3B0aW9ucy5oYW5kbGUscykuZmluZChcIipcIikuYWRkQmFjaygpLmVhY2goZnVuY3Rpb24oKXt0aGlzPT09dC50YXJnZXQmJihuPSEwKX0pLG4pPyh0aGlzLmN1cnJlbnRJdGVtPXMsdGhpcy5fcmVtb3ZlQ3VycmVudHNGcm9tSXRlbXMoKSwhMCk6ITE6ITEpfSxfbW91c2VTdGFydDpmdW5jdGlvbih0LGkscyl7dmFyIG4sYSxvPXRoaXMub3B0aW9ucztpZih0aGlzLmN1cnJlbnRDb250YWluZXI9dGhpcyx0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKSx0aGlzLmhlbHBlcj10aGlzLl9jcmVhdGVIZWxwZXIodCksdGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpLHRoaXMuX2NhY2hlTWFyZ2lucygpLHRoaXMuc2Nyb2xsUGFyZW50PXRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCgpLHRoaXMub2Zmc2V0PXRoaXMuY3VycmVudEl0ZW0ub2Zmc2V0KCksdGhpcy5vZmZzZXQ9e3RvcDp0aGlzLm9mZnNldC50b3AtdGhpcy5tYXJnaW5zLnRvcCxsZWZ0OnRoaXMub2Zmc2V0LmxlZnQtdGhpcy5tYXJnaW5zLmxlZnR9LGUuZXh0ZW5kKHRoaXMub2Zmc2V0LHtjbGljazp7bGVmdDp0LnBhZ2VYLXRoaXMub2Zmc2V0LmxlZnQsdG9wOnQucGFnZVktdGhpcy5vZmZzZXQudG9wfSxwYXJlbnQ6dGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCkscmVsYXRpdmU6dGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKX0pLHRoaXMuaGVscGVyLmNzcyhcInBvc2l0aW9uXCIsXCJhYnNvbHV0ZVwiKSx0aGlzLmNzc1Bvc2l0aW9uPXRoaXMuaGVscGVyLmNzcyhcInBvc2l0aW9uXCIpLHRoaXMub3JpZ2luYWxQb3NpdGlvbj10aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKHQpLHRoaXMub3JpZ2luYWxQYWdlWD10LnBhZ2VYLHRoaXMub3JpZ2luYWxQYWdlWT10LnBhZ2VZLG8uY3Vyc29yQXQmJnRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoby5jdXJzb3JBdCksdGhpcy5kb21Qb3NpdGlvbj17cHJldjp0aGlzLmN1cnJlbnRJdGVtLnByZXYoKVswXSxwYXJlbnQ6dGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVswXX0sdGhpcy5oZWxwZXJbMF0hPT10aGlzLmN1cnJlbnRJdGVtWzBdJiZ0aGlzLmN1cnJlbnRJdGVtLmhpZGUoKSx0aGlzLl9jcmVhdGVQbGFjZWhvbGRlcigpLG8uY29udGFpbm1lbnQmJnRoaXMuX3NldENvbnRhaW5tZW50KCksby5jdXJzb3ImJlwiYXV0b1wiIT09by5jdXJzb3ImJihhPXRoaXMuZG9jdW1lbnQuZmluZChcImJvZHlcIiksdGhpcy5zdG9yZWRDdXJzb3I9YS5jc3MoXCJjdXJzb3JcIiksYS5jc3MoXCJjdXJzb3JcIixvLmN1cnNvciksdGhpcy5zdG9yZWRTdHlsZXNoZWV0PWUoXCI8c3R5bGU+KnsgY3Vyc29yOiBcIitvLmN1cnNvcitcIiAhaW1wb3J0YW50OyB9PC9zdHlsZT5cIikuYXBwZW5kVG8oYSkpLG8ub3BhY2l0eSYmKHRoaXMuaGVscGVyLmNzcyhcIm9wYWNpdHlcIikmJih0aGlzLl9zdG9yZWRPcGFjaXR5PXRoaXMuaGVscGVyLmNzcyhcIm9wYWNpdHlcIikpLHRoaXMuaGVscGVyLmNzcyhcIm9wYWNpdHlcIixvLm9wYWNpdHkpKSxvLnpJbmRleCYmKHRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiKSYmKHRoaXMuX3N0b3JlZFpJbmRleD10aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIikpLHRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiLG8uekluZGV4KSksdGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZcIkhUTUxcIiE9PXRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUmJih0aGlzLm92ZXJmbG93T2Zmc2V0PXRoaXMuc2Nyb2xsUGFyZW50Lm9mZnNldCgpKSx0aGlzLl90cmlnZ2VyKFwic3RhcnRcIix0LHRoaXMuX3VpSGFzaCgpKSx0aGlzLl9wcmVzZXJ2ZUhlbHBlclByb3BvcnRpb25zfHx0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksIXMpZm9yKG49dGhpcy5jb250YWluZXJzLmxlbmd0aC0xO24+PTA7bi0tKXRoaXMuY29udGFpbmVyc1tuXS5fdHJpZ2dlcihcImFjdGl2YXRlXCIsdCx0aGlzLl91aUhhc2godGhpcykpO3JldHVybiBlLnVpLmRkbWFuYWdlciYmKGUudWkuZGRtYW5hZ2VyLmN1cnJlbnQ9dGhpcyksZS51aS5kZG1hbmFnZXImJiFvLmRyb3BCZWhhdmlvdXImJmUudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsdCksdGhpcy5kcmFnZ2luZz0hMCx0aGlzLmhlbHBlci5hZGRDbGFzcyhcInVpLXNvcnRhYmxlLWhlbHBlclwiKSx0aGlzLl9tb3VzZURyYWcodCksITB9LF9tb3VzZURyYWc6ZnVuY3Rpb24odCl7dmFyIGkscyxuLGEsbz10aGlzLm9wdGlvbnMscj0hMTtmb3IodGhpcy5wb3NpdGlvbj10aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKHQpLHRoaXMucG9zaXRpb25BYnM9dGhpcy5fY29udmVydFBvc2l0aW9uVG8oXCJhYnNvbHV0ZVwiKSx0aGlzLmxhc3RQb3NpdGlvbkFic3x8KHRoaXMubGFzdFBvc2l0aW9uQWJzPXRoaXMucG9zaXRpb25BYnMpLHRoaXMub3B0aW9ucy5zY3JvbGwmJih0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJlwiSFRNTFwiIT09dGhpcy5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZT8odGhpcy5vdmVyZmxvd09mZnNldC50b3ArdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0SGVpZ2h0LXQucGFnZVk8by5zY3JvbGxTZW5zaXRpdml0eT90aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3A9cj10aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3Arby5zY3JvbGxTcGVlZDp0LnBhZ2VZLXRoaXMub3ZlcmZsb3dPZmZzZXQudG9wPG8uc2Nyb2xsU2Vuc2l0aXZpdHkmJih0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3A9cj10aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3Atby5zY3JvbGxTcGVlZCksdGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0K3RoaXMuc2Nyb2xsUGFyZW50WzBdLm9mZnNldFdpZHRoLXQucGFnZVg8by5zY3JvbGxTZW5zaXRpdml0eT90aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0PXI9dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCtvLnNjcm9sbFNwZWVkOnQucGFnZVgtdGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0PG8uc2Nyb2xsU2Vuc2l0aXZpdHkmJih0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0PXI9dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdC1vLnNjcm9sbFNwZWVkKSk6KHQucGFnZVktdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKTxvLnNjcm9sbFNlbnNpdGl2aXR5P3I9dGhpcy5kb2N1bWVudC5zY3JvbGxUb3AodGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKS1vLnNjcm9sbFNwZWVkKTp0aGlzLndpbmRvdy5oZWlnaHQoKS0odC5wYWdlWS10aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpKTxvLnNjcm9sbFNlbnNpdGl2aXR5JiYocj10aGlzLmRvY3VtZW50LnNjcm9sbFRvcCh0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpK28uc2Nyb2xsU3BlZWQpKSx0LnBhZ2VYLXRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpPG8uc2Nyb2xsU2Vuc2l0aXZpdHk/cj10aGlzLmRvY3VtZW50LnNjcm9sbExlZnQodGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCktby5zY3JvbGxTcGVlZCk6dGhpcy53aW5kb3cud2lkdGgoKS0odC5wYWdlWC10aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKSk8by5zY3JvbGxTZW5zaXRpdml0eSYmKHI9dGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpK28uc2Nyb2xsU3BlZWQpKSksciE9PSExJiZlLnVpLmRkbWFuYWdlciYmIW8uZHJvcEJlaGF2aW91ciYmZS51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcyx0KSksdGhpcy5wb3NpdGlvbkFicz10aGlzLl9jb252ZXJ0UG9zaXRpb25UbyhcImFic29sdXRlXCIpLHRoaXMub3B0aW9ucy5heGlzJiZcInlcIj09PXRoaXMub3B0aW9ucy5heGlzfHwodGhpcy5oZWxwZXJbMF0uc3R5bGUubGVmdD10aGlzLnBvc2l0aW9uLmxlZnQrXCJweFwiKSx0aGlzLm9wdGlvbnMuYXhpcyYmXCJ4XCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8KHRoaXMuaGVscGVyWzBdLnN0eWxlLnRvcD10aGlzLnBvc2l0aW9uLnRvcCtcInB4XCIpLGk9dGhpcy5pdGVtcy5sZW5ndGgtMTtpPj0wO2ktLSlpZihzPXRoaXMuaXRlbXNbaV0sbj1zLml0ZW1bMF0sYT10aGlzLl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIocyksYSYmcy5pbnN0YW5jZT09PXRoaXMuY3VycmVudENvbnRhaW5lciYmbiE9PXRoaXMuY3VycmVudEl0ZW1bMF0mJnRoaXMucGxhY2Vob2xkZXJbMT09PWE/XCJuZXh0XCI6XCJwcmV2XCJdKClbMF0hPT1uJiYhZS5jb250YWlucyh0aGlzLnBsYWNlaG9sZGVyWzBdLG4pJiYoXCJzZW1pLWR5bmFtaWNcIj09PXRoaXMub3B0aW9ucy50eXBlPyFlLmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSxuKTohMCkpe2lmKHRoaXMuZGlyZWN0aW9uPTE9PT1hP1wiZG93blwiOlwidXBcIixcInBvaW50ZXJcIiE9PXRoaXMub3B0aW9ucy50b2xlcmFuY2UmJiF0aGlzLl9pbnRlcnNlY3RzV2l0aFNpZGVzKHMpKWJyZWFrO3RoaXMuX3JlYXJyYW5nZSh0LHMpLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIix0LHRoaXMuX3VpSGFzaCgpKTticmVha31yZXR1cm4gdGhpcy5fY29udGFjdENvbnRhaW5lcnModCksZS51aS5kZG1hbmFnZXImJmUudWkuZGRtYW5hZ2VyLmRyYWcodGhpcyx0KSx0aGlzLl90cmlnZ2VyKFwic29ydFwiLHQsdGhpcy5fdWlIYXNoKCkpLHRoaXMubGFzdFBvc2l0aW9uQWJzPXRoaXMucG9zaXRpb25BYnMsITF9LF9tb3VzZVN0b3A6ZnVuY3Rpb24odCxpKXtpZih0KXtpZihlLnVpLmRkbWFuYWdlciYmIXRoaXMub3B0aW9ucy5kcm9wQmVoYXZpb3VyJiZlLnVpLmRkbWFuYWdlci5kcm9wKHRoaXMsdCksdGhpcy5vcHRpb25zLnJldmVydCl7dmFyIHM9dGhpcyxuPXRoaXMucGxhY2Vob2xkZXIub2Zmc2V0KCksYT10aGlzLm9wdGlvbnMuYXhpcyxvPXt9O2EmJlwieFwiIT09YXx8KG8ubGVmdD1uLmxlZnQtdGhpcy5vZmZzZXQucGFyZW50LmxlZnQtdGhpcy5tYXJnaW5zLmxlZnQrKHRoaXMub2Zmc2V0UGFyZW50WzBdPT09dGhpcy5kb2N1bWVudFswXS5ib2R5PzA6dGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsTGVmdCkpLGEmJlwieVwiIT09YXx8KG8udG9wPW4udG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3AtdGhpcy5tYXJnaW5zLnRvcCsodGhpcy5vZmZzZXRQYXJlbnRbMF09PT10aGlzLmRvY3VtZW50WzBdLmJvZHk/MDp0aGlzLm9mZnNldFBhcmVudFswXS5zY3JvbGxUb3ApKSx0aGlzLnJldmVydGluZz0hMCxlKHRoaXMuaGVscGVyKS5hbmltYXRlKG8scGFyc2VJbnQodGhpcy5vcHRpb25zLnJldmVydCwxMCl8fDUwMCxmdW5jdGlvbigpe3MuX2NsZWFyKHQpfSl9ZWxzZSB0aGlzLl9jbGVhcih0LGkpO3JldHVybiExfX0sY2FuY2VsOmZ1bmN0aW9uKCl7aWYodGhpcy5kcmFnZ2luZyl7dGhpcy5fbW91c2VVcCh7dGFyZ2V0Om51bGx9KSxcIm9yaWdpbmFsXCI9PT10aGlzLm9wdGlvbnMuaGVscGVyP3RoaXMuY3VycmVudEl0ZW0uY3NzKHRoaXMuX3N0b3JlZENTUykucmVtb3ZlQ2xhc3MoXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIik6dGhpcy5jdXJyZW50SXRlbS5zaG93KCk7Zm9yKHZhciB0PXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTt0Pj0wO3QtLSl0aGlzLmNvbnRhaW5lcnNbdF0uX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsbnVsbCx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY29udGFpbmVyc1t0XS5jb250YWluZXJDYWNoZS5vdmVyJiYodGhpcy5jb250YWluZXJzW3RdLl90cmlnZ2VyKFwib3V0XCIsbnVsbCx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY29udGFpbmVyc1t0XS5jb250YWluZXJDYWNoZS5vdmVyPTApfXJldHVybiB0aGlzLnBsYWNlaG9sZGVyJiYodGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlJiZ0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSksXCJvcmlnaW5hbFwiIT09dGhpcy5vcHRpb25zLmhlbHBlciYmdGhpcy5oZWxwZXImJnRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUmJnRoaXMuaGVscGVyLnJlbW92ZSgpLGUuZXh0ZW5kKHRoaXMse2hlbHBlcjpudWxsLGRyYWdnaW5nOiExLHJldmVydGluZzohMSxfbm9GaW5hbFNvcnQ6bnVsbH0pLHRoaXMuZG9tUG9zaXRpb24ucHJldj9lKHRoaXMuZG9tUG9zaXRpb24ucHJldikuYWZ0ZXIodGhpcy5jdXJyZW50SXRlbSk6ZSh0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCkucHJlcGVuZCh0aGlzLmN1cnJlbnRJdGVtKSksdGhpc30sc2VyaWFsaXplOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuX2dldEl0ZW1zQXNqUXVlcnkodCYmdC5jb25uZWN0ZWQpLHM9W107cmV0dXJuIHQ9dHx8e30sZShpKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9KGUodC5pdGVtfHx0aGlzKS5hdHRyKHQuYXR0cmlidXRlfHxcImlkXCIpfHxcIlwiKS5tYXRjaCh0LmV4cHJlc3Npb258fC8oLispW1xcLT1fXSguKykvKTtpJiZzLnB1c2goKHQua2V5fHxpWzFdK1wiW11cIikrXCI9XCIrKHQua2V5JiZ0LmV4cHJlc3Npb24/aVsxXTppWzJdKSl9KSwhcy5sZW5ndGgmJnQua2V5JiZzLnB1c2godC5rZXkrXCI9XCIpLHMuam9pbihcIiZcIil9LHRvQXJyYXk6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5fZ2V0SXRlbXNBc2pRdWVyeSh0JiZ0LmNvbm5lY3RlZCkscz1bXTtyZXR1cm4gdD10fHx7fSxpLmVhY2goZnVuY3Rpb24oKXtzLnB1c2goZSh0Lml0ZW18fHRoaXMpLmF0dHIodC5hdHRyaWJ1dGV8fFwiaWRcIil8fFwiXCIpfSksc30sX2ludGVyc2VjdHNXaXRoOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucG9zaXRpb25BYnMubGVmdCxpPXQrdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCxzPXRoaXMucG9zaXRpb25BYnMudG9wLG49cyt0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxhPWUubGVmdCxvPWErZS53aWR0aCxyPWUudG9wLGg9citlLmhlaWdodCxsPXRoaXMub2Zmc2V0LmNsaWNrLnRvcCx1PXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsZD1cInhcIj09PXRoaXMub3B0aW9ucy5heGlzfHxzK2w+ciYmaD5zK2wsYz1cInlcIj09PXRoaXMub3B0aW9ucy5heGlzfHx0K3U+YSYmbz50K3UscD1kJiZjO3JldHVyblwicG9pbnRlclwiPT09dGhpcy5vcHRpb25zLnRvbGVyYW5jZXx8dGhpcy5vcHRpb25zLmZvcmNlUG9pbnRlckZvckNvbnRhaW5lcnN8fFwicG9pbnRlclwiIT09dGhpcy5vcHRpb25zLnRvbGVyYW5jZSYmdGhpcy5oZWxwZXJQcm9wb3J0aW9uc1t0aGlzLmZsb2F0aW5nP1wid2lkdGhcIjpcImhlaWdodFwiXT5lW3RoaXMuZmxvYXRpbmc/XCJ3aWR0aFwiOlwiaGVpZ2h0XCJdP3A6dCt0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLzI+YSYmbz5pLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgvMiYmcyt0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yPnImJmg+bi10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yfSxfaW50ZXJzZWN0c1dpdGhQb2ludGVyOmZ1bmN0aW9uKGUpe3ZhciB0PVwieFwiPT09dGhpcy5vcHRpb25zLmF4aXN8fHRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy50b3ArdGhpcy5vZmZzZXQuY2xpY2sudG9wLGUudG9wLGUuaGVpZ2h0KSxpPVwieVwiPT09dGhpcy5vcHRpb25zLmF4aXN8fHRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0K3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQsZS5sZWZ0LGUud2lkdGgpLHM9dCYmaSxuPXRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLGE9dGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKTtyZXR1cm4gcz90aGlzLmZsb2F0aW5nP2EmJlwicmlnaHRcIj09PWF8fFwiZG93blwiPT09bj8yOjE6biYmKFwiZG93blwiPT09bj8yOjEpOiExfSxfaW50ZXJzZWN0c1dpdGhTaWRlczpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9pc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMudG9wK3RoaXMub2Zmc2V0LmNsaWNrLnRvcCxlLnRvcCtlLmhlaWdodC8yLGUuaGVpZ2h0KSxpPXRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0K3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQsZS5sZWZ0K2Uud2lkdGgvMixlLndpZHRoKSxzPXRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLG49dGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKTtyZXR1cm4gdGhpcy5mbG9hdGluZyYmbj9cInJpZ2h0XCI9PT1uJiZpfHxcImxlZnRcIj09PW4mJiFpOnMmJihcImRvd25cIj09PXMmJnR8fFwidXBcIj09PXMmJiF0KX0sX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMucG9zaXRpb25BYnMudG9wLXRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDtyZXR1cm4gMCE9PWUmJihlPjA/XCJkb3duXCI6XCJ1cFwiKX0sX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wb3NpdGlvbkFicy5sZWZ0LXRoaXMubGFzdFBvc2l0aW9uQWJzLmxlZnQ7cmV0dXJuIDAhPT1lJiYoZT4wP1wicmlnaHRcIjpcImxlZnRcIil9LHJlZnJlc2g6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3JlZnJlc2hJdGVtcyhlKSx0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKSx0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKSx0aGlzfSxfY29ubmVjdFdpdGg6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnM7cmV0dXJuIGUuY29ubmVjdFdpdGguY29uc3RydWN0b3I9PT1TdHJpbmc/W2UuY29ubmVjdFdpdGhdOmUuY29ubmVjdFdpdGh9LF9nZXRJdGVtc0FzalF1ZXJ5OmZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGkoKXtyLnB1c2godGhpcyl9dmFyIHMsbixhLG8scj1bXSxoPVtdLGw9dGhpcy5fY29ubmVjdFdpdGgoKTtpZihsJiZ0KWZvcihzPWwubGVuZ3RoLTE7cz49MDtzLS0pZm9yKGE9ZShsW3NdLHRoaXMuZG9jdW1lbnRbMF0pLG49YS5sZW5ndGgtMTtuPj0wO24tLSlvPWUuZGF0YShhW25dLHRoaXMud2lkZ2V0RnVsbE5hbWUpLG8mJm8hPT10aGlzJiYhby5vcHRpb25zLmRpc2FibGVkJiZoLnB1c2goW2UuaXNGdW5jdGlvbihvLm9wdGlvbnMuaXRlbXMpP28ub3B0aW9ucy5pdGVtcy5jYWxsKG8uZWxlbWVudCk6ZShvLm9wdGlvbnMuaXRlbXMsby5lbGVtZW50KS5ub3QoXCIudWktc29ydGFibGUtaGVscGVyXCIpLm5vdChcIi51aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiKSxvXSk7Zm9yKGgucHVzaChbZS5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcyk/dGhpcy5vcHRpb25zLml0ZW1zLmNhbGwodGhpcy5lbGVtZW50LG51bGwse29wdGlvbnM6dGhpcy5vcHRpb25zLGl0ZW06dGhpcy5jdXJyZW50SXRlbX0pOmUodGhpcy5vcHRpb25zLml0ZW1zLHRoaXMuZWxlbWVudCkubm90KFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiKS5ub3QoXCIudWktc29ydGFibGUtcGxhY2Vob2xkZXJcIiksdGhpc10pLHM9aC5sZW5ndGgtMTtzPj0wO3MtLSloW3NdWzBdLmVhY2goaSk7cmV0dXJuIGUocil9LF9yZW1vdmVDdXJyZW50c0Zyb21JdGVtczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY3VycmVudEl0ZW0uZmluZChcIjpkYXRhKFwiK3RoaXMud2lkZ2V0TmFtZStcIi1pdGVtKVwiKTt0aGlzLml0ZW1zPWUuZ3JlcCh0aGlzLml0ZW1zLGZ1bmN0aW9uKGUpe2Zvcih2YXIgaT0wO3QubGVuZ3RoPmk7aSsrKWlmKHRbaV09PT1lLml0ZW1bMF0pcmV0dXJuITE7cmV0dXJuITB9KX0sX3JlZnJlc2hJdGVtczpmdW5jdGlvbih0KXt0aGlzLml0ZW1zPVtdLHRoaXMuY29udGFpbmVycz1bdGhpc107dmFyIGkscyxuLGEsbyxyLGgsbCx1PXRoaXMuaXRlbXMsZD1bW2UuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuaXRlbXMpP3RoaXMub3B0aW9ucy5pdGVtcy5jYWxsKHRoaXMuZWxlbWVudFswXSx0LHtpdGVtOnRoaXMuY3VycmVudEl0ZW19KTplKHRoaXMub3B0aW9ucy5pdGVtcyx0aGlzLmVsZW1lbnQpLHRoaXNdXSxjPXRoaXMuX2Nvbm5lY3RXaXRoKCk7aWYoYyYmdGhpcy5yZWFkeSlmb3IoaT1jLmxlbmd0aC0xO2k+PTA7aS0tKWZvcihuPWUoY1tpXSx0aGlzLmRvY3VtZW50WzBdKSxzPW4ubGVuZ3RoLTE7cz49MDtzLS0pYT1lLmRhdGEobltzXSx0aGlzLndpZGdldEZ1bGxOYW1lKSxhJiZhIT09dGhpcyYmIWEub3B0aW9ucy5kaXNhYmxlZCYmKGQucHVzaChbZS5pc0Z1bmN0aW9uKGEub3B0aW9ucy5pdGVtcyk/YS5vcHRpb25zLml0ZW1zLmNhbGwoYS5lbGVtZW50WzBdLHQse2l0ZW06dGhpcy5jdXJyZW50SXRlbX0pOmUoYS5vcHRpb25zLml0ZW1zLGEuZWxlbWVudCksYV0pLHRoaXMuY29udGFpbmVycy5wdXNoKGEpKTtmb3IoaT1kLmxlbmd0aC0xO2k+PTA7aS0tKWZvcihvPWRbaV1bMV0scj1kW2ldWzBdLHM9MCxsPXIubGVuZ3RoO2w+cztzKyspaD1lKHJbc10pLGguZGF0YSh0aGlzLndpZGdldE5hbWUrXCItaXRlbVwiLG8pLHUucHVzaCh7aXRlbTpoLGluc3RhbmNlOm8sd2lkdGg6MCxoZWlnaHQ6MCxsZWZ0OjAsdG9wOjB9KX0scmVmcmVzaFBvc2l0aW9uczpmdW5jdGlvbih0KXt0aGlzLmZsb2F0aW5nPXRoaXMuaXRlbXMubGVuZ3RoP1wieFwiPT09dGhpcy5vcHRpb25zLmF4aXN8fHRoaXMuX2lzRmxvYXRpbmcodGhpcy5pdGVtc1swXS5pdGVtKTohMSx0aGlzLm9mZnNldFBhcmVudCYmdGhpcy5oZWxwZXImJih0aGlzLm9mZnNldC5wYXJlbnQ9dGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCkpO3ZhciBpLHMsbixhO2ZvcihpPXRoaXMuaXRlbXMubGVuZ3RoLTE7aT49MDtpLS0pcz10aGlzLml0ZW1zW2ldLHMuaW5zdGFuY2UhPT10aGlzLmN1cnJlbnRDb250YWluZXImJnRoaXMuY3VycmVudENvbnRhaW5lciYmcy5pdGVtWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXXx8KG49dGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQ/ZSh0aGlzLm9wdGlvbnMudG9sZXJhbmNlRWxlbWVudCxzLml0ZW0pOnMuaXRlbSx0fHwocy53aWR0aD1uLm91dGVyV2lkdGgoKSxzLmhlaWdodD1uLm91dGVySGVpZ2h0KCkpLGE9bi5vZmZzZXQoKSxzLmxlZnQ9YS5sZWZ0LHMudG9wPWEudG9wKTtpZih0aGlzLm9wdGlvbnMuY3VzdG9tJiZ0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzKXRoaXMub3B0aW9ucy5jdXN0b20ucmVmcmVzaENvbnRhaW5lcnMuY2FsbCh0aGlzKTtlbHNlIGZvcihpPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtpPj0wO2ktLSlhPXRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50Lm9mZnNldCgpLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5sZWZ0PWEubGVmdCx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUudG9wPWEudG9wLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS53aWR0aD10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlcldpZHRoKCksdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLmhlaWdodD10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlckhlaWdodCgpO3JldHVybiB0aGlzfSxfY3JlYXRlUGxhY2Vob2xkZXI6ZnVuY3Rpb24odCl7dD10fHx0aGlzO3ZhciBpLHM9dC5vcHRpb25zO3MucGxhY2Vob2xkZXImJnMucGxhY2Vob2xkZXIuY29uc3RydWN0b3IhPT1TdHJpbmd8fChpPXMucGxhY2Vob2xkZXIscy5wbGFjZWhvbGRlcj17ZWxlbWVudDpmdW5jdGlvbigpe3ZhciBzPXQuY3VycmVudEl0ZW1bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxuPWUoXCI8XCIrcytcIj5cIix0LmRvY3VtZW50WzBdKS5hZGRDbGFzcyhpfHx0LmN1cnJlbnRJdGVtWzBdLmNsYXNzTmFtZStcIiB1aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiKS5yZW1vdmVDbGFzcyhcInVpLXNvcnRhYmxlLWhlbHBlclwiKTtyZXR1cm5cInRib2R5XCI9PT1zP3QuX2NyZWF0ZVRyUGxhY2Vob2xkZXIodC5jdXJyZW50SXRlbS5maW5kKFwidHJcIikuZXEoMCksZShcIjx0cj5cIix0LmRvY3VtZW50WzBdKS5hcHBlbmRUbyhuKSk6XCJ0clwiPT09cz90Ll9jcmVhdGVUclBsYWNlaG9sZGVyKHQuY3VycmVudEl0ZW0sbik6XCJpbWdcIj09PXMmJm4uYXR0cihcInNyY1wiLHQuY3VycmVudEl0ZW0uYXR0cihcInNyY1wiKSksaXx8bi5jc3MoXCJ2aXNpYmlsaXR5XCIsXCJoaWRkZW5cIiksbn0sdXBkYXRlOmZ1bmN0aW9uKGUsbil7KCFpfHxzLmZvcmNlUGxhY2Vob2xkZXJTaXplKSYmKG4uaGVpZ2h0KCl8fG4uaGVpZ2h0KHQuY3VycmVudEl0ZW0uaW5uZXJIZWlnaHQoKS1wYXJzZUludCh0LmN1cnJlbnRJdGVtLmNzcyhcInBhZGRpbmdUb3BcIil8fDAsMTApLXBhcnNlSW50KHQuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ0JvdHRvbVwiKXx8MCwxMCkpLG4ud2lkdGgoKXx8bi53aWR0aCh0LmN1cnJlbnRJdGVtLmlubmVyV2lkdGgoKS1wYXJzZUludCh0LmN1cnJlbnRJdGVtLmNzcyhcInBhZGRpbmdMZWZ0XCIpfHwwLDEwKS1wYXJzZUludCh0LmN1cnJlbnRJdGVtLmNzcyhcInBhZGRpbmdSaWdodFwiKXx8MCwxMCkpKX19KSx0LnBsYWNlaG9sZGVyPWUocy5wbGFjZWhvbGRlci5lbGVtZW50LmNhbGwodC5lbGVtZW50LHQuY3VycmVudEl0ZW0pKSx0LmN1cnJlbnRJdGVtLmFmdGVyKHQucGxhY2Vob2xkZXIpLHMucGxhY2Vob2xkZXIudXBkYXRlKHQsdC5wbGFjZWhvbGRlcil9LF9jcmVhdGVUclBsYWNlaG9sZGVyOmZ1bmN0aW9uKHQsaSl7dmFyIHM9dGhpczt0LmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbigpe2UoXCI8dGQ+JiMxNjA7PC90ZD5cIixzLmRvY3VtZW50WzBdKS5hdHRyKFwiY29sc3BhblwiLGUodGhpcykuYXR0cihcImNvbHNwYW5cIil8fDEpLmFwcGVuZFRvKGkpfSl9LF9jb250YWN0Q29udGFpbmVyczpmdW5jdGlvbih0KXt2YXIgaSxzLG4sYSxvLHIsaCxsLHUsZCxjPW51bGwscD1udWxsO2ZvcihpPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtpPj0wO2ktLSlpZighZS5jb250YWlucyh0aGlzLmN1cnJlbnRJdGVtWzBdLHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50WzBdKSlpZih0aGlzLl9pbnRlcnNlY3RzV2l0aCh0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUpKXtpZihjJiZlLmNvbnRhaW5zKHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50WzBdLGMuZWxlbWVudFswXSkpY29udGludWU7Yz10aGlzLmNvbnRhaW5lcnNbaV0scD1pfWVsc2UgdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXImJih0aGlzLmNvbnRhaW5lcnNbaV0uX3RyaWdnZXIoXCJvdXRcIix0LHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXI9MCk7aWYoYylpZigxPT09dGhpcy5jb250YWluZXJzLmxlbmd0aCl0aGlzLmNvbnRhaW5lcnNbcF0uY29udGFpbmVyQ2FjaGUub3Zlcnx8KHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcihcIm92ZXJcIix0LHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW3BdLmNvbnRhaW5lckNhY2hlLm92ZXI9MSk7ZWxzZXtmb3Iobj0xZTQsYT1udWxsLHU9Yy5mbG9hdGluZ3x8dGhpcy5faXNGbG9hdGluZyh0aGlzLmN1cnJlbnRJdGVtKSxvPXU/XCJsZWZ0XCI6XCJ0b3BcIixyPXU/XCJ3aWR0aFwiOlwiaGVpZ2h0XCIsZD11P1wiY2xpZW50WFwiOlwiY2xpZW50WVwiLHM9dGhpcy5pdGVtcy5sZW5ndGgtMTtzPj0wO3MtLSllLmNvbnRhaW5zKHRoaXMuY29udGFpbmVyc1twXS5lbGVtZW50WzBdLHRoaXMuaXRlbXNbc10uaXRlbVswXSkmJnRoaXMuaXRlbXNbc10uaXRlbVswXSE9PXRoaXMuY3VycmVudEl0ZW1bMF0mJihoPXRoaXMuaXRlbXNbc10uaXRlbS5vZmZzZXQoKVtvXSxsPSExLHRbZF0taD50aGlzLml0ZW1zW3NdW3JdLzImJihsPSEwKSxuPk1hdGguYWJzKHRbZF0taCkmJihuPU1hdGguYWJzKHRbZF0taCksYT10aGlzLml0ZW1zW3NdLHRoaXMuZGlyZWN0aW9uPWw/XCJ1cFwiOlwiZG93blwiKSk7aWYoIWEmJiF0aGlzLm9wdGlvbnMuZHJvcE9uRW1wdHkpcmV0dXJuO2lmKHRoaXMuY3VycmVudENvbnRhaW5lcj09PXRoaXMuY29udGFpbmVyc1twXSlyZXR1cm4gdGhpcy5jdXJyZW50Q29udGFpbmVyLmNvbnRhaW5lckNhY2hlLm92ZXJ8fCh0aGlzLmNvbnRhaW5lcnNbcF0uX3RyaWdnZXIoXCJvdmVyXCIsdCx0aGlzLl91aUhhc2goKSksdGhpcy5jdXJyZW50Q29udGFpbmVyLmNvbnRhaW5lckNhY2hlLm92ZXI9MSksdm9pZCAwO2E/dGhpcy5fcmVhcnJhbmdlKHQsYSxudWxsLCEwKTp0aGlzLl9yZWFycmFuZ2UodCxudWxsLHRoaXMuY29udGFpbmVyc1twXS5lbGVtZW50LCEwKSx0aGlzLl90cmlnZ2VyKFwiY2hhbmdlXCIsdCx0aGlzLl91aUhhc2goKSksdGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKFwiY2hhbmdlXCIsdCx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY3VycmVudENvbnRhaW5lcj10aGlzLmNvbnRhaW5lcnNbcF0sdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyLnVwZGF0ZSh0aGlzLmN1cnJlbnRDb250YWluZXIsdGhpcy5wbGFjZWhvbGRlciksdGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKFwib3ZlclwiLHQsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbcF0uY29udGFpbmVyQ2FjaGUub3Zlcj0xfX0sX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbih0KXt2YXIgaT10aGlzLm9wdGlvbnMscz1lLmlzRnVuY3Rpb24oaS5oZWxwZXIpP2UoaS5oZWxwZXIuYXBwbHkodGhpcy5lbGVtZW50WzBdLFt0LHRoaXMuY3VycmVudEl0ZW1dKSk6XCJjbG9uZVwiPT09aS5oZWxwZXI/dGhpcy5jdXJyZW50SXRlbS5jbG9uZSgpOnRoaXMuY3VycmVudEl0ZW07cmV0dXJuIHMucGFyZW50cyhcImJvZHlcIikubGVuZ3RofHxlKFwicGFyZW50XCIhPT1pLmFwcGVuZFRvP2kuYXBwZW5kVG86dGhpcy5jdXJyZW50SXRlbVswXS5wYXJlbnROb2RlKVswXS5hcHBlbmRDaGlsZChzWzBdKSxzWzBdPT09dGhpcy5jdXJyZW50SXRlbVswXSYmKHRoaXMuX3N0b3JlZENTUz17d2lkdGg6dGhpcy5jdXJyZW50SXRlbVswXS5zdHlsZS53aWR0aCxoZWlnaHQ6dGhpcy5jdXJyZW50SXRlbVswXS5zdHlsZS5oZWlnaHQscG9zaXRpb246dGhpcy5jdXJyZW50SXRlbS5jc3MoXCJwb3NpdGlvblwiKSx0b3A6dGhpcy5jdXJyZW50SXRlbS5jc3MoXCJ0b3BcIiksbGVmdDp0aGlzLmN1cnJlbnRJdGVtLmNzcyhcImxlZnRcIil9KSwoIXNbMF0uc3R5bGUud2lkdGh8fGkuZm9yY2VIZWxwZXJTaXplKSYmcy53aWR0aCh0aGlzLmN1cnJlbnRJdGVtLndpZHRoKCkpLCghc1swXS5zdHlsZS5oZWlnaHR8fGkuZm9yY2VIZWxwZXJTaXplKSYmcy5oZWlnaHQodGhpcy5jdXJyZW50SXRlbS5oZWlnaHQoKSksc30sX2FkanVzdE9mZnNldEZyb21IZWxwZXI6ZnVuY3Rpb24odCl7XCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PXQuc3BsaXQoXCIgXCIpKSxlLmlzQXJyYXkodCkmJih0PXtsZWZ0Oit0WzBdLHRvcDordFsxXXx8MH0pLFwibGVmdFwiaW4gdCYmKHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ9dC5sZWZ0K3RoaXMubWFyZ2lucy5sZWZ0KSxcInJpZ2h0XCJpbiB0JiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXQucmlnaHQrdGhpcy5tYXJnaW5zLmxlZnQpLFwidG9wXCJpbiB0JiYodGhpcy5vZmZzZXQuY2xpY2sudG9wPXQudG9wK3RoaXMubWFyZ2lucy50b3ApLFwiYm90dG9tXCJpbiB0JiYodGhpcy5vZmZzZXQuY2xpY2sudG9wPXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXQuYm90dG9tK3RoaXMubWFyZ2lucy50b3ApfSxfZ2V0UGFyZW50T2Zmc2V0OmZ1bmN0aW9uKCl7dGhpcy5vZmZzZXRQYXJlbnQ9dGhpcy5oZWxwZXIub2Zmc2V0UGFyZW50KCk7dmFyIHQ9dGhpcy5vZmZzZXRQYXJlbnQub2Zmc2V0KCk7cmV0dXJuXCJhYnNvbHV0ZVwiPT09dGhpcy5jc3NQb3NpdGlvbiYmdGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZlLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKSYmKHQubGVmdCs9dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpLHQudG9wKz10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSksKHRoaXMub2Zmc2V0UGFyZW50WzBdPT09dGhpcy5kb2N1bWVudFswXS5ib2R5fHx0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lJiZcImh0bWxcIj09PXRoaXMub2Zmc2V0UGFyZW50WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmZS51aS5pZSkmJih0PXt0b3A6MCxsZWZ0OjB9KSx7dG9wOnQudG9wKyhwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwxMCl8fDApLGxlZnQ6dC5sZWZ0KyhwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksMTApfHwwKX19LF9nZXRSZWxhdGl2ZU9mZnNldDpmdW5jdGlvbigpe2lmKFwicmVsYXRpdmVcIj09PXRoaXMuY3NzUG9zaXRpb24pe3ZhciBlPXRoaXMuY3VycmVudEl0ZW0ucG9zaXRpb24oKTtyZXR1cm57dG9wOmUudG9wLShwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJ0b3BcIiksMTApfHwwKSt0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSxsZWZ0OmUubGVmdC0ocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKFwibGVmdFwiKSwxMCl8fDApK3RoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKX19cmV0dXJue3RvcDowLGxlZnQ6MH19LF9jYWNoZU1hcmdpbnM6ZnVuY3Rpb24oKXt0aGlzLm1hcmdpbnM9e2xlZnQ6cGFyc2VJbnQodGhpcy5jdXJyZW50SXRlbS5jc3MoXCJtYXJnaW5MZWZ0XCIpLDEwKXx8MCx0b3A6cGFyc2VJbnQodGhpcy5jdXJyZW50SXRlbS5jc3MoXCJtYXJnaW5Ub3BcIiksMTApfHwwfX0sX2NhY2hlSGVscGVyUHJvcG9ydGlvbnM6ZnVuY3Rpb24oKXt0aGlzLmhlbHBlclByb3BvcnRpb25zPXt3aWR0aDp0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksaGVpZ2h0OnRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCl9fSxfc2V0Q29udGFpbm1lbnQ6ZnVuY3Rpb24oKXt2YXIgdCxpLHMsbj10aGlzLm9wdGlvbnM7XCJwYXJlbnRcIj09PW4uY29udGFpbm1lbnQmJihuLmNvbnRhaW5tZW50PXRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUpLChcImRvY3VtZW50XCI9PT1uLmNvbnRhaW5tZW50fHxcIndpbmRvd1wiPT09bi5jb250YWlubWVudCkmJih0aGlzLmNvbnRhaW5tZW50PVswLXRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQtdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsMC10aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AtdGhpcy5vZmZzZXQucGFyZW50LnRvcCxcImRvY3VtZW50XCI9PT1uLmNvbnRhaW5tZW50P3RoaXMuZG9jdW1lbnQud2lkdGgoKTp0aGlzLndpbmRvdy53aWR0aCgpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgtdGhpcy5tYXJnaW5zLmxlZnQsKFwiZG9jdW1lbnRcIj09PW4uY29udGFpbm1lbnQ/dGhpcy5kb2N1bWVudC53aWR0aCgpOnRoaXMud2luZG93LmhlaWdodCgpfHx0aGlzLmRvY3VtZW50WzBdLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXRoaXMubWFyZ2lucy50b3BdKSwvXihkb2N1bWVudHx3aW5kb3d8cGFyZW50KSQvLnRlc3Qobi5jb250YWlubWVudCl8fCh0PWUobi5jb250YWlubWVudClbMF0saT1lKG4uY29udGFpbm1lbnQpLm9mZnNldCgpLHM9XCJoaWRkZW5cIiE9PWUodCkuY3NzKFwib3ZlcmZsb3dcIiksdGhpcy5jb250YWlubWVudD1baS5sZWZ0KyhwYXJzZUludChlKHQpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCl8fDApKyhwYXJzZUludChlKHQpLmNzcyhcInBhZGRpbmdMZWZ0XCIpLDEwKXx8MCktdGhpcy5tYXJnaW5zLmxlZnQsaS50b3ArKHBhcnNlSW50KGUodCkuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApfHwwKSsocGFyc2VJbnQoZSh0KS5jc3MoXCJwYWRkaW5nVG9wXCIpLDEwKXx8MCktdGhpcy5tYXJnaW5zLnRvcCxpLmxlZnQrKHM/TWF0aC5tYXgodC5zY3JvbGxXaWR0aCx0Lm9mZnNldFdpZHRoKTp0Lm9mZnNldFdpZHRoKS0ocGFyc2VJbnQoZSh0KS5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksMTApfHwwKS0ocGFyc2VJbnQoZSh0KS5jc3MoXCJwYWRkaW5nUmlnaHRcIiksMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LGkudG9wKyhzP01hdGgubWF4KHQuc2Nyb2xsSGVpZ2h0LHQub2Zmc2V0SGVpZ2h0KTp0Lm9mZnNldEhlaWdodCktKHBhcnNlSW50KGUodCkuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApfHwwKS0ocGFyc2VJbnQoZSh0KS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLDEwKXx8MCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtdGhpcy5tYXJnaW5zLnRvcF0pXG59LF9jb252ZXJ0UG9zaXRpb25UbzpmdW5jdGlvbih0LGkpe2l8fChpPXRoaXMucG9zaXRpb24pO3ZhciBzPVwiYWJzb2x1dGVcIj09PXQ/MTotMSxuPVwiYWJzb2x1dGVcIiE9PXRoaXMuY3NzUG9zaXRpb258fHRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmZS5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSx0aGlzLm9mZnNldFBhcmVudFswXSk/dGhpcy5zY3JvbGxQYXJlbnQ6dGhpcy5vZmZzZXRQYXJlbnQsYT0vKGh0bWx8Ym9keSkvaS50ZXN0KG5bMF0udGFnTmFtZSk7cmV0dXJue3RvcDppLnRvcCt0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3Aqcyt0aGlzLm9mZnNldC5wYXJlbnQudG9wKnMtKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOmE/MDpuLnNjcm9sbFRvcCgpKSpzLGxlZnQ6aS5sZWZ0K3RoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQqcyt0aGlzLm9mZnNldC5wYXJlbnQubGVmdCpzLShcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk6YT8wOm4uc2Nyb2xsTGVmdCgpKSpzfX0sX2dlbmVyYXRlUG9zaXRpb246ZnVuY3Rpb24odCl7dmFyIGkscyxuPXRoaXMub3B0aW9ucyxhPXQucGFnZVgsbz10LnBhZ2VZLHI9XCJhYnNvbHV0ZVwiIT09dGhpcy5jc3NQb3NpdGlvbnx8dGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZlLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKT90aGlzLnNjcm9sbFBhcmVudDp0aGlzLm9mZnNldFBhcmVudCxoPS8oaHRtbHxib2R5KS9pLnRlc3QoclswXS50YWdOYW1lKTtyZXR1cm5cInJlbGF0aXZlXCIhPT10aGlzLmNzc1Bvc2l0aW9ufHx0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJnRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5vZmZzZXRQYXJlbnRbMF18fCh0aGlzLm9mZnNldC5yZWxhdGl2ZT10aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpKSx0aGlzLm9yaWdpbmFsUG9zaXRpb24mJih0aGlzLmNvbnRhaW5tZW50JiYodC5wYWdlWC10aGlzLm9mZnNldC5jbGljay5sZWZ0PHRoaXMuY29udGFpbm1lbnRbMF0mJihhPXRoaXMuY29udGFpbm1lbnRbMF0rdGhpcy5vZmZzZXQuY2xpY2subGVmdCksdC5wYWdlWS10aGlzLm9mZnNldC5jbGljay50b3A8dGhpcy5jb250YWlubWVudFsxXSYmKG89dGhpcy5jb250YWlubWVudFsxXSt0aGlzLm9mZnNldC5jbGljay50b3ApLHQucGFnZVgtdGhpcy5vZmZzZXQuY2xpY2subGVmdD50aGlzLmNvbnRhaW5tZW50WzJdJiYoYT10aGlzLmNvbnRhaW5tZW50WzJdK3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLHQucGFnZVktdGhpcy5vZmZzZXQuY2xpY2sudG9wPnRoaXMuY29udGFpbm1lbnRbM10mJihvPXRoaXMuY29udGFpbm1lbnRbM10rdGhpcy5vZmZzZXQuY2xpY2sudG9wKSksbi5ncmlkJiYoaT10aGlzLm9yaWdpbmFsUGFnZVkrTWF0aC5yb3VuZCgoby10aGlzLm9yaWdpbmFsUGFnZVkpL24uZ3JpZFsxXSkqbi5ncmlkWzFdLG89dGhpcy5jb250YWlubWVudD9pLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49dGhpcy5jb250YWlubWVudFsxXSYmaS10aGlzLm9mZnNldC5jbGljay50b3A8PXRoaXMuY29udGFpbm1lbnRbM10/aTppLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49dGhpcy5jb250YWlubWVudFsxXT9pLW4uZ3JpZFsxXTppK24uZ3JpZFsxXTppLHM9dGhpcy5vcmlnaW5hbFBhZ2VYK01hdGgucm91bmQoKGEtdGhpcy5vcmlnaW5hbFBhZ2VYKS9uLmdyaWRbMF0pKm4uZ3JpZFswXSxhPXRoaXMuY29udGFpbm1lbnQ/cy10aGlzLm9mZnNldC5jbGljay5sZWZ0Pj10aGlzLmNvbnRhaW5tZW50WzBdJiZzLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ8PXRoaXMuY29udGFpbm1lbnRbMl0/czpzLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+PXRoaXMuY29udGFpbm1lbnRbMF0/cy1uLmdyaWRbMF06cytuLmdyaWRbMF06cykpLHt0b3A6by10aGlzLm9mZnNldC5jbGljay50b3AtdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3ArKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOmg/MDpyLnNjcm9sbFRvcCgpKSxsZWZ0OmEtdGhpcy5vZmZzZXQuY2xpY2subGVmdC10aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0LXRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0KyhcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk6aD8wOnIuc2Nyb2xsTGVmdCgpKX19LF9yZWFycmFuZ2U6ZnVuY3Rpb24oZSx0LGkscyl7aT9pWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOnQuaXRlbVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyWzBdLFwiZG93blwiPT09dGhpcy5kaXJlY3Rpb24/dC5pdGVtWzBdOnQuaXRlbVswXS5uZXh0U2libGluZyksdGhpcy5jb3VudGVyPXRoaXMuY291bnRlcj8rK3RoaXMuY291bnRlcjoxO3ZhciBuPXRoaXMuY291bnRlcjt0aGlzLl9kZWxheShmdW5jdGlvbigpe249PT10aGlzLmNvdW50ZXImJnRoaXMucmVmcmVzaFBvc2l0aW9ucyghcyl9KX0sX2NsZWFyOmZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gaShlLHQsaSl7cmV0dXJuIGZ1bmN0aW9uKHMpe2kuX3RyaWdnZXIoZSxzLHQuX3VpSGFzaCh0KSl9fXRoaXMucmV2ZXJ0aW5nPSExO3ZhciBzLG49W107aWYoIXRoaXMuX25vRmluYWxTb3J0JiZ0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpLmxlbmd0aCYmdGhpcy5wbGFjZWhvbGRlci5iZWZvcmUodGhpcy5jdXJyZW50SXRlbSksdGhpcy5fbm9GaW5hbFNvcnQ9bnVsbCx0aGlzLmhlbHBlclswXT09PXRoaXMuY3VycmVudEl0ZW1bMF0pe2ZvcihzIGluIHRoaXMuX3N0b3JlZENTUykoXCJhdXRvXCI9PT10aGlzLl9zdG9yZWRDU1Nbc118fFwic3RhdGljXCI9PT10aGlzLl9zdG9yZWRDU1Nbc10pJiYodGhpcy5fc3RvcmVkQ1NTW3NdPVwiXCIpO3RoaXMuY3VycmVudEl0ZW0uY3NzKHRoaXMuX3N0b3JlZENTUykucmVtb3ZlQ2xhc3MoXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIil9ZWxzZSB0aGlzLmN1cnJlbnRJdGVtLnNob3coKTtmb3IodGhpcy5mcm9tT3V0c2lkZSYmIXQmJm4ucHVzaChmdW5jdGlvbihlKXt0aGlzLl90cmlnZ2VyKFwicmVjZWl2ZVwiLGUsdGhpcy5fdWlIYXNoKHRoaXMuZnJvbU91dHNpZGUpKX0pLCF0aGlzLmZyb21PdXRzaWRlJiZ0aGlzLmRvbVBvc2l0aW9uLnByZXY9PT10aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoXCIudWktc29ydGFibGUtaGVscGVyXCIpWzBdJiZ0aGlzLmRvbVBvc2l0aW9uLnBhcmVudD09PXRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbMF18fHR8fG4ucHVzaChmdW5jdGlvbihlKXt0aGlzLl90cmlnZ2VyKFwidXBkYXRlXCIsZSx0aGlzLl91aUhhc2goKSl9KSx0aGlzIT09dGhpcy5jdXJyZW50Q29udGFpbmVyJiYodHx8KG4ucHVzaChmdW5jdGlvbihlKXt0aGlzLl90cmlnZ2VyKFwicmVtb3ZlXCIsZSx0aGlzLl91aUhhc2goKSl9KSxuLnB1c2goZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2UuX3RyaWdnZXIoXCJyZWNlaXZlXCIsdCx0aGlzLl91aUhhc2godGhpcykpfX0uY2FsbCh0aGlzLHRoaXMuY3VycmVudENvbnRhaW5lcikpLG4ucHVzaChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7ZS5fdHJpZ2dlcihcInVwZGF0ZVwiLHQsdGhpcy5fdWlIYXNoKHRoaXMpKX19LmNhbGwodGhpcyx0aGlzLmN1cnJlbnRDb250YWluZXIpKSkpLHM9dGhpcy5jb250YWluZXJzLmxlbmd0aC0xO3M+PTA7cy0tKXR8fG4ucHVzaChpKFwiZGVhY3RpdmF0ZVwiLHRoaXMsdGhpcy5jb250YWluZXJzW3NdKSksdGhpcy5jb250YWluZXJzW3NdLmNvbnRhaW5lckNhY2hlLm92ZXImJihuLnB1c2goaShcIm91dFwiLHRoaXMsdGhpcy5jb250YWluZXJzW3NdKSksdGhpcy5jb250YWluZXJzW3NdLmNvbnRhaW5lckNhY2hlLm92ZXI9MCk7aWYodGhpcy5zdG9yZWRDdXJzb3ImJih0aGlzLmRvY3VtZW50LmZpbmQoXCJib2R5XCIpLmNzcyhcImN1cnNvclwiLHRoaXMuc3RvcmVkQ3Vyc29yKSx0aGlzLnN0b3JlZFN0eWxlc2hlZXQucmVtb3ZlKCkpLHRoaXMuX3N0b3JlZE9wYWNpdHkmJnRoaXMuaGVscGVyLmNzcyhcIm9wYWNpdHlcIix0aGlzLl9zdG9yZWRPcGFjaXR5KSx0aGlzLl9zdG9yZWRaSW5kZXgmJnRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiLFwiYXV0b1wiPT09dGhpcy5fc3RvcmVkWkluZGV4P1wiXCI6dGhpcy5fc3RvcmVkWkluZGV4KSx0aGlzLmRyYWdnaW5nPSExLHR8fHRoaXMuX3RyaWdnZXIoXCJiZWZvcmVTdG9wXCIsZSx0aGlzLl91aUhhc2goKSksdGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pLHRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbHx8KHRoaXMuaGVscGVyWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXSYmdGhpcy5oZWxwZXIucmVtb3ZlKCksdGhpcy5oZWxwZXI9bnVsbCksIXQpe2ZvcihzPTA7bi5sZW5ndGg+cztzKyspbltzXS5jYWxsKHRoaXMsZSk7dGhpcy5fdHJpZ2dlcihcInN0b3BcIixlLHRoaXMuX3VpSGFzaCgpKX1yZXR1cm4gdGhpcy5mcm9tT3V0c2lkZT0hMSwhdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsfSxfdHJpZ2dlcjpmdW5jdGlvbigpe2UuV2lkZ2V0LnByb3RvdHlwZS5fdHJpZ2dlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk9PT0hMSYmdGhpcy5jYW5jZWwoKX0sX3VpSGFzaDpmdW5jdGlvbih0KXt2YXIgaT10fHx0aGlzO3JldHVybntoZWxwZXI6aS5oZWxwZXIscGxhY2Vob2xkZXI6aS5wbGFjZWhvbGRlcnx8ZShbXSkscG9zaXRpb246aS5wb3NpdGlvbixvcmlnaW5hbFBvc2l0aW9uOmkub3JpZ2luYWxQb3NpdGlvbixvZmZzZXQ6aS5wb3NpdGlvbkFicyxpdGVtOmkuY3VycmVudEl0ZW0sc2VuZGVyOnQ/dC5lbGVtZW50Om51bGx9fX0pO3ZhciBvPVwidWktZWZmZWN0cy1cIixyPWU7ZS5lZmZlY3RzPXtlZmZlY3Q6e319LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gaShlLHQsaSl7dmFyIHM9ZFt0LnR5cGVdfHx7fTtyZXR1cm4gbnVsbD09ZT9pfHwhdC5kZWY/bnVsbDp0LmRlZjooZT1zLmZsb29yP35+ZTpwYXJzZUZsb2F0KGUpLGlzTmFOKGUpP3QuZGVmOnMubW9kPyhlK3MubW9kKSVzLm1vZDowPmU/MDplPnMubWF4P3MubWF4OmUpfWZ1bmN0aW9uIHMoaSl7dmFyIHM9bCgpLG49cy5fcmdiYT1bXTtyZXR1cm4gaT1pLnRvTG93ZXJDYXNlKCksZihoLGZ1bmN0aW9uKGUsYSl7dmFyIG8scj1hLnJlLmV4ZWMoaSksaD1yJiZhLnBhcnNlKHIpLGw9YS5zcGFjZXx8XCJyZ2JhXCI7cmV0dXJuIGg/KG89c1tsXShoKSxzW3VbbF0uY2FjaGVdPW9bdVtsXS5jYWNoZV0sbj1zLl9yZ2JhPW8uX3JnYmEsITEpOnR9KSxuLmxlbmd0aD8oXCIwLDAsMCwwXCI9PT1uLmpvaW4oKSYmZS5leHRlbmQobixhLnRyYW5zcGFyZW50KSxzKTphW2ldfWZ1bmN0aW9uIG4oZSx0LGkpe3JldHVybiBpPShpKzEpJTEsMT42Kmk/ZSs2Kih0LWUpKmk6MT4yKmk/dDoyPjMqaT9lKzYqKHQtZSkqKDIvMy1pKTplfXZhciBhLG89XCJiYWNrZ3JvdW5kQ29sb3IgYm9yZGVyQm90dG9tQ29sb3IgYm9yZGVyTGVmdENvbG9yIGJvcmRlclJpZ2h0Q29sb3IgYm9yZGVyVG9wQ29sb3IgY29sb3IgY29sdW1uUnVsZUNvbG9yIG91dGxpbmVDb2xvciB0ZXh0RGVjb3JhdGlvbkNvbG9yIHRleHRFbXBoYXNpc0NvbG9yXCIscj0vXihbXFwtK10pPVxccyooXFxkK1xcLj9cXGQqKS8saD1be3JlOi9yZ2JhP1xcKFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqKD86LFxccyooXFxkPyg/OlxcLlxcZCspPylcXHMqKT9cXCkvLHBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybltlWzFdLGVbMl0sZVszXSxlWzRdXX19LHtyZTovcmdiYT9cXChcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKig/OixcXHMqKFxcZD8oPzpcXC5cXGQrKT8pXFxzKik/XFwpLyxwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm5bMi41NSplWzFdLDIuNTUqZVsyXSwyLjU1KmVbM10sZVs0XV19fSx7cmU6LyMoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkvLHBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybltwYXJzZUludChlWzFdLDE2KSxwYXJzZUludChlWzJdLDE2KSxwYXJzZUludChlWzNdLDE2KV19fSx7cmU6LyMoW2EtZjAtOV0pKFthLWYwLTldKShbYS1mMC05XSkvLHBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybltwYXJzZUludChlWzFdK2VbMV0sMTYpLHBhcnNlSW50KGVbMl0rZVsyXSwxNikscGFyc2VJbnQoZVszXStlWzNdLDE2KV19fSx7cmU6L2hzbGE/XFwoXFxzKihcXGQrKD86XFwuXFxkKyk/KVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyooPzosXFxzKihcXGQ/KD86XFwuXFxkKyk/KVxccyopP1xcKS8sc3BhY2U6XCJoc2xhXCIscGFyc2U6ZnVuY3Rpb24oZSl7cmV0dXJuW2VbMV0sZVsyXS8xMDAsZVszXS8xMDAsZVs0XV19fV0sbD1lLkNvbG9yPWZ1bmN0aW9uKHQsaSxzLG4pe3JldHVybiBuZXcgZS5Db2xvci5mbi5wYXJzZSh0LGkscyxuKX0sdT17cmdiYTp7cHJvcHM6e3JlZDp7aWR4OjAsdHlwZTpcImJ5dGVcIn0sZ3JlZW46e2lkeDoxLHR5cGU6XCJieXRlXCJ9LGJsdWU6e2lkeDoyLHR5cGU6XCJieXRlXCJ9fX0saHNsYTp7cHJvcHM6e2h1ZTp7aWR4OjAsdHlwZTpcImRlZ3JlZXNcIn0sc2F0dXJhdGlvbjp7aWR4OjEsdHlwZTpcInBlcmNlbnRcIn0sbGlnaHRuZXNzOntpZHg6Mix0eXBlOlwicGVyY2VudFwifX19fSxkPXtcImJ5dGVcIjp7Zmxvb3I6ITAsbWF4OjI1NX0scGVyY2VudDp7bWF4OjF9LGRlZ3JlZXM6e21vZDozNjAsZmxvb3I6ITB9fSxjPWwuc3VwcG9ydD17fSxwPWUoXCI8cD5cIilbMF0sZj1lLmVhY2g7cC5zdHlsZS5jc3NUZXh0PVwiYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEsMSwxLC41KVwiLGMucmdiYT1wLnN0eWxlLmJhY2tncm91bmRDb2xvci5pbmRleE9mKFwicmdiYVwiKT4tMSxmKHUsZnVuY3Rpb24oZSx0KXt0LmNhY2hlPVwiX1wiK2UsdC5wcm9wcy5hbHBoYT17aWR4OjMsdHlwZTpcInBlcmNlbnRcIixkZWY6MX19KSxsLmZuPWUuZXh0ZW5kKGwucHJvdG90eXBlLHtwYXJzZTpmdW5jdGlvbihuLG8scixoKXtpZihuPT09dClyZXR1cm4gdGhpcy5fcmdiYT1bbnVsbCxudWxsLG51bGwsbnVsbF0sdGhpczsobi5qcXVlcnl8fG4ubm9kZVR5cGUpJiYobj1lKG4pLmNzcyhvKSxvPXQpO3ZhciBkPXRoaXMsYz1lLnR5cGUobikscD10aGlzLl9yZ2JhPVtdO3JldHVybiBvIT09dCYmKG49W24sbyxyLGhdLGM9XCJhcnJheVwiKSxcInN0cmluZ1wiPT09Yz90aGlzLnBhcnNlKHMobil8fGEuX2RlZmF1bHQpOlwiYXJyYXlcIj09PWM/KGYodS5yZ2JhLnByb3BzLGZ1bmN0aW9uKGUsdCl7cFt0LmlkeF09aShuW3QuaWR4XSx0KX0pLHRoaXMpOlwib2JqZWN0XCI9PT1jPyhuIGluc3RhbmNlb2YgbD9mKHUsZnVuY3Rpb24oZSx0KXtuW3QuY2FjaGVdJiYoZFt0LmNhY2hlXT1uW3QuY2FjaGVdLnNsaWNlKCkpfSk6Zih1LGZ1bmN0aW9uKHQscyl7dmFyIGE9cy5jYWNoZTtmKHMucHJvcHMsZnVuY3Rpb24oZSx0KXtpZighZFthXSYmcy50byl7aWYoXCJhbHBoYVwiPT09ZXx8bnVsbD09bltlXSlyZXR1cm47ZFthXT1zLnRvKGQuX3JnYmEpfWRbYV1bdC5pZHhdPWkobltlXSx0LCEwKX0pLGRbYV0mJjA+ZS5pbkFycmF5KG51bGwsZFthXS5zbGljZSgwLDMpKSYmKGRbYV1bM109MSxzLmZyb20mJihkLl9yZ2JhPXMuZnJvbShkW2FdKSkpfSksdGhpcyk6dH0saXM6ZnVuY3Rpb24oZSl7dmFyIGk9bChlKSxzPSEwLG49dGhpcztyZXR1cm4gZih1LGZ1bmN0aW9uKGUsYSl7dmFyIG8scj1pW2EuY2FjaGVdO3JldHVybiByJiYobz1uW2EuY2FjaGVdfHxhLnRvJiZhLnRvKG4uX3JnYmEpfHxbXSxmKGEucHJvcHMsZnVuY3Rpb24oZSxpKXtyZXR1cm4gbnVsbCE9cltpLmlkeF0/cz1yW2kuaWR4XT09PW9baS5pZHhdOnR9KSksc30pLHN9LF9zcGFjZTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcztyZXR1cm4gZih1LGZ1bmN0aW9uKGkscyl7dFtzLmNhY2hlXSYmZS5wdXNoKGkpfSksZS5wb3AoKX0sdHJhbnNpdGlvbjpmdW5jdGlvbihlLHQpe3ZhciBzPWwoZSksbj1zLl9zcGFjZSgpLGE9dVtuXSxvPTA9PT10aGlzLmFscGhhKCk/bChcInRyYW5zcGFyZW50XCIpOnRoaXMscj1vW2EuY2FjaGVdfHxhLnRvKG8uX3JnYmEpLGg9ci5zbGljZSgpO3JldHVybiBzPXNbYS5jYWNoZV0sZihhLnByb3BzLGZ1bmN0aW9uKGUsbil7dmFyIGE9bi5pZHgsbz1yW2FdLGw9c1thXSx1PWRbbi50eXBlXXx8e307bnVsbCE9PWwmJihudWxsPT09bz9oW2FdPWw6KHUubW9kJiYobC1vPnUubW9kLzI/bys9dS5tb2Q6by1sPnUubW9kLzImJihvLT11Lm1vZCkpLGhbYV09aSgobC1vKSp0K28sbikpKX0pLHRoaXNbbl0oaCl9LGJsZW5kOmZ1bmN0aW9uKHQpe2lmKDE9PT10aGlzLl9yZ2JhWzNdKXJldHVybiB0aGlzO3ZhciBpPXRoaXMuX3JnYmEuc2xpY2UoKSxzPWkucG9wKCksbj1sKHQpLl9yZ2JhO3JldHVybiBsKGUubWFwKGksZnVuY3Rpb24oZSx0KXtyZXR1cm4oMS1zKSpuW3RdK3MqZX0pKX0sdG9SZ2JhU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9XCJyZ2JhKFwiLGk9ZS5tYXAodGhpcy5fcmdiYSxmdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT1lP3Q+Mj8xOjA6ZX0pO3JldHVybiAxPT09aVszXSYmKGkucG9wKCksdD1cInJnYihcIiksdCtpLmpvaW4oKStcIilcIn0sdG9Ic2xhU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9XCJoc2xhKFwiLGk9ZS5tYXAodGhpcy5oc2xhKCksZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09ZSYmKGU9dD4yPzE6MCksdCYmMz50JiYoZT1NYXRoLnJvdW5kKDEwMCplKStcIiVcIiksZX0pO3JldHVybiAxPT09aVszXSYmKGkucG9wKCksdD1cImhzbChcIiksdCtpLmpvaW4oKStcIilcIn0sdG9IZXhTdHJpbmc6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5fcmdiYS5zbGljZSgpLHM9aS5wb3AoKTtyZXR1cm4gdCYmaS5wdXNoKH5+KDI1NSpzKSksXCIjXCIrZS5tYXAoaSxmdW5jdGlvbihlKXtyZXR1cm4gZT0oZXx8MCkudG9TdHJpbmcoMTYpLDE9PT1lLmxlbmd0aD9cIjBcIitlOmV9KS5qb2luKFwiXCIpfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5fcmdiYVszXT9cInRyYW5zcGFyZW50XCI6dGhpcy50b1JnYmFTdHJpbmcoKX19KSxsLmZuLnBhcnNlLnByb3RvdHlwZT1sLmZuLHUuaHNsYS50bz1mdW5jdGlvbihlKXtpZihudWxsPT1lWzBdfHxudWxsPT1lWzFdfHxudWxsPT1lWzJdKXJldHVybltudWxsLG51bGwsbnVsbCxlWzNdXTt2YXIgdCxpLHM9ZVswXS8yNTUsbj1lWzFdLzI1NSxhPWVbMl0vMjU1LG89ZVszXSxyPU1hdGgubWF4KHMsbixhKSxoPU1hdGgubWluKHMsbixhKSxsPXItaCx1PXIraCxkPS41KnU7cmV0dXJuIHQ9aD09PXI/MDpzPT09cj82MCoobi1hKS9sKzM2MDpuPT09cj82MCooYS1zKS9sKzEyMDo2MCoocy1uKS9sKzI0MCxpPTA9PT1sPzA6LjU+PWQ/bC91OmwvKDItdSksW01hdGgucm91bmQodCklMzYwLGksZCxudWxsPT1vPzE6b119LHUuaHNsYS5mcm9tPWZ1bmN0aW9uKGUpe2lmKG51bGw9PWVbMF18fG51bGw9PWVbMV18fG51bGw9PWVbMl0pcmV0dXJuW251bGwsbnVsbCxudWxsLGVbM11dO3ZhciB0PWVbMF0vMzYwLGk9ZVsxXSxzPWVbMl0sYT1lWzNdLG89LjU+PXM/cyooMStpKTpzK2ktcyppLHI9MipzLW87cmV0dXJuW01hdGgucm91bmQoMjU1Km4ocixvLHQrMS8zKSksTWF0aC5yb3VuZCgyNTUqbihyLG8sdCkpLE1hdGgucm91bmQoMjU1Km4ocixvLHQtMS8zKSksYV19LGYodSxmdW5jdGlvbihzLG4pe3ZhciBhPW4ucHJvcHMsbz1uLmNhY2hlLGg9bi50byx1PW4uZnJvbTtsLmZuW3NdPWZ1bmN0aW9uKHMpe2lmKGgmJiF0aGlzW29dJiYodGhpc1tvXT1oKHRoaXMuX3JnYmEpKSxzPT09dClyZXR1cm4gdGhpc1tvXS5zbGljZSgpO3ZhciBuLHI9ZS50eXBlKHMpLGQ9XCJhcnJheVwiPT09cnx8XCJvYmplY3RcIj09PXI/czphcmd1bWVudHMsYz10aGlzW29dLnNsaWNlKCk7cmV0dXJuIGYoYSxmdW5jdGlvbihlLHQpe3ZhciBzPWRbXCJvYmplY3RcIj09PXI/ZTp0LmlkeF07bnVsbD09cyYmKHM9Y1t0LmlkeF0pLGNbdC5pZHhdPWkocyx0KX0pLHU/KG49bCh1KGMpKSxuW29dPWMsbik6bChjKX0sZihhLGZ1bmN0aW9uKHQsaSl7bC5mblt0XXx8KGwuZm5bdF09ZnVuY3Rpb24obil7dmFyIGEsbz1lLnR5cGUobiksaD1cImFscGhhXCI9PT10P3RoaXMuX2hzbGE/XCJoc2xhXCI6XCJyZ2JhXCI6cyxsPXRoaXNbaF0oKSx1PWxbaS5pZHhdO3JldHVyblwidW5kZWZpbmVkXCI9PT1vP3U6KFwiZnVuY3Rpb25cIj09PW8mJihuPW4uY2FsbCh0aGlzLHUpLG89ZS50eXBlKG4pKSxudWxsPT1uJiZpLmVtcHR5P3RoaXM6KFwic3RyaW5nXCI9PT1vJiYoYT1yLmV4ZWMobiksYSYmKG49dStwYXJzZUZsb2F0KGFbMl0pKihcIitcIj09PWFbMV0/MTotMSkpKSxsW2kuaWR4XT1uLHRoaXNbaF0obCkpKX0pfSl9KSxsLmhvb2s9ZnVuY3Rpb24odCl7dmFyIGk9dC5zcGxpdChcIiBcIik7ZihpLGZ1bmN0aW9uKHQsaSl7ZS5jc3NIb29rc1tpXT17c2V0OmZ1bmN0aW9uKHQsbil7dmFyIGEsbyxyPVwiXCI7aWYoXCJ0cmFuc3BhcmVudFwiIT09biYmKFwic3RyaW5nXCIhPT1lLnR5cGUobil8fChhPXMobikpKSl7aWYobj1sKGF8fG4pLCFjLnJnYmEmJjEhPT1uLl9yZ2JhWzNdKXtmb3Iobz1cImJhY2tncm91bmRDb2xvclwiPT09aT90LnBhcmVudE5vZGU6dDsoXCJcIj09PXJ8fFwidHJhbnNwYXJlbnRcIj09PXIpJiZvJiZvLnN0eWxlOyl0cnl7cj1lLmNzcyhvLFwiYmFja2dyb3VuZENvbG9yXCIpLG89by5wYXJlbnROb2RlfWNhdGNoKGgpe31uPW4uYmxlbmQociYmXCJ0cmFuc3BhcmVudFwiIT09cj9yOlwiX2RlZmF1bHRcIil9bj1uLnRvUmdiYVN0cmluZygpfXRyeXt0LnN0eWxlW2ldPW59Y2F0Y2goaCl7fX19LGUuZnguc3RlcFtpXT1mdW5jdGlvbih0KXt0LmNvbG9ySW5pdHx8KHQuc3RhcnQ9bCh0LmVsZW0saSksdC5lbmQ9bCh0LmVuZCksdC5jb2xvckluaXQ9ITApLGUuY3NzSG9va3NbaV0uc2V0KHQuZWxlbSx0LnN0YXJ0LnRyYW5zaXRpb24odC5lbmQsdC5wb3MpKX19KX0sbC5ob29rKG8pLGUuY3NzSG9va3MuYm9yZGVyQ29sb3I9e2V4cGFuZDpmdW5jdGlvbihlKXt2YXIgdD17fTtyZXR1cm4gZihbXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sZnVuY3Rpb24oaSxzKXt0W1wiYm9yZGVyXCIrcytcIkNvbG9yXCJdPWV9KSx0fX0sYT1lLkNvbG9yLm5hbWVzPXthcXVhOlwiIzAwZmZmZlwiLGJsYWNrOlwiIzAwMDAwMFwiLGJsdWU6XCIjMDAwMGZmXCIsZnVjaHNpYTpcIiNmZjAwZmZcIixncmF5OlwiIzgwODA4MFwiLGdyZWVuOlwiIzAwODAwMFwiLGxpbWU6XCIjMDBmZjAwXCIsbWFyb29uOlwiIzgwMDAwMFwiLG5hdnk6XCIjMDAwMDgwXCIsb2xpdmU6XCIjODA4MDAwXCIscHVycGxlOlwiIzgwMDA4MFwiLHJlZDpcIiNmZjAwMDBcIixzaWx2ZXI6XCIjYzBjMGMwXCIsdGVhbDpcIiMwMDgwODBcIix3aGl0ZTpcIiNmZmZmZmZcIix5ZWxsb3c6XCIjZmZmZjAwXCIsdHJhbnNwYXJlbnQ6W251bGwsbnVsbCxudWxsLDBdLF9kZWZhdWx0OlwiI2ZmZmZmZlwifX0ociksZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3ZhciBpLHMsbj10Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc/dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodCxudWxsKTp0LmN1cnJlbnRTdHlsZSxhPXt9O2lmKG4mJm4ubGVuZ3RoJiZuWzBdJiZuW25bMF1dKWZvcihzPW4ubGVuZ3RoO3MtLTspaT1uW3NdLFwic3RyaW5nXCI9PXR5cGVvZiBuW2ldJiYoYVtlLmNhbWVsQ2FzZShpKV09bltpXSk7ZWxzZSBmb3IoaSBpbiBuKVwic3RyaW5nXCI9PXR5cGVvZiBuW2ldJiYoYVtpXT1uW2ldKTtyZXR1cm4gYX1mdW5jdGlvbiBpKHQsaSl7dmFyIHMsYSxvPXt9O2ZvcihzIGluIGkpYT1pW3NdLHRbc10hPT1hJiYobltzXXx8KGUuZnguc3RlcFtzXXx8IWlzTmFOKHBhcnNlRmxvYXQoYSkpKSYmKG9bc109YSkpO3JldHVybiBvfXZhciBzPVtcImFkZFwiLFwicmVtb3ZlXCIsXCJ0b2dnbGVcIl0sbj17Ym9yZGVyOjEsYm9yZGVyQm90dG9tOjEsYm9yZGVyQ29sb3I6MSxib3JkZXJMZWZ0OjEsYm9yZGVyUmlnaHQ6MSxib3JkZXJUb3A6MSxib3JkZXJXaWR0aDoxLG1hcmdpbjoxLHBhZGRpbmc6MX07ZS5lYWNoKFtcImJvcmRlckxlZnRTdHlsZVwiLFwiYm9yZGVyUmlnaHRTdHlsZVwiLFwiYm9yZGVyQm90dG9tU3R5bGVcIixcImJvcmRlclRvcFN0eWxlXCJdLGZ1bmN0aW9uKHQsaSl7ZS5meC5zdGVwW2ldPWZ1bmN0aW9uKGUpeyhcIm5vbmVcIiE9PWUuZW5kJiYhZS5zZXRBdHRyfHwxPT09ZS5wb3MmJiFlLnNldEF0dHIpJiYoci5zdHlsZShlLmVsZW0saSxlLmVuZCksZS5zZXRBdHRyPSEwKX19KSxlLmZuLmFkZEJhY2t8fChlLmZuLmFkZEJhY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWU/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoZSkpfSksZS5lZmZlY3RzLmFuaW1hdGVDbGFzcz1mdW5jdGlvbihuLGEsbyxyKXt2YXIgaD1lLnNwZWVkKGEsbyxyKTtyZXR1cm4gdGhpcy5xdWV1ZShmdW5jdGlvbigpe3ZhciBhLG89ZSh0aGlzKSxyPW8uYXR0cihcImNsYXNzXCIpfHxcIlwiLGw9aC5jaGlsZHJlbj9vLmZpbmQoXCIqXCIpLmFkZEJhY2soKTpvO2w9bC5tYXAoZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpO3JldHVybntlbDppLHN0YXJ0OnQodGhpcyl9fSksYT1mdW5jdGlvbigpe2UuZWFjaChzLGZ1bmN0aW9uKGUsdCl7blt0XSYmb1t0K1wiQ2xhc3NcIl0oblt0XSl9KX0sYSgpLGw9bC5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmQ9dCh0aGlzLmVsWzBdKSx0aGlzLmRpZmY9aSh0aGlzLnN0YXJ0LHRoaXMuZW5kKSx0aGlzfSksby5hdHRyKFwiY2xhc3NcIixyKSxsPWwubWFwKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxpPWUuRGVmZXJyZWQoKSxzPWUuZXh0ZW5kKHt9LGgse3F1ZXVlOiExLGNvbXBsZXRlOmZ1bmN0aW9uKCl7aS5yZXNvbHZlKHQpfX0pO3JldHVybiB0aGlzLmVsLmFuaW1hdGUodGhpcy5kaWZmLHMpLGkucHJvbWlzZSgpfSksZS53aGVuLmFwcGx5KGUsbC5nZXQoKSkuZG9uZShmdW5jdGlvbigpe2EoKSxlLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lbDtlLmVhY2godGhpcy5kaWZmLGZ1bmN0aW9uKGUpe3QuY3NzKGUsXCJcIil9KX0pLGguY29tcGxldGUuY2FsbChvWzBdKX0pfSl9LGUuZm4uZXh0ZW5kKHthZGRDbGFzczpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oaSxzLG4sYSl7cmV0dXJuIHM/ZS5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMse2FkZDppfSxzLG4sYSk6dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fShlLmZuLmFkZENsYXNzKSxyZW1vdmVDbGFzczpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oaSxzLG4sYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MT9lLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwodGhpcyx7cmVtb3ZlOml9LHMsbixhKTp0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KGUuZm4ucmVtb3ZlQ2xhc3MpLHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihpLHMsbixhLG8pe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2Ygc3x8dm9pZCAwPT09cz9uP2UuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLHM/e2FkZDppfTp7cmVtb3ZlOml9LG4sYSxvKTp0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTplLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwodGhpcyx7dG9nZ2xlOml9LHMsbixhKX19KGUuZm4udG9nZ2xlQ2xhc3MpLHN3aXRjaENsYXNzOmZ1bmN0aW9uKHQsaSxzLG4sYSl7cmV0dXJuIGUuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLHthZGQ6aSxyZW1vdmU6dH0scyxuLGEpfX0pfSgpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGkscyxuKXtyZXR1cm4gZS5pc1BsYWluT2JqZWN0KHQpJiYoaT10LHQ9dC5lZmZlY3QpLHQ9e2VmZmVjdDp0fSxudWxsPT1pJiYoaT17fSksZS5pc0Z1bmN0aW9uKGkpJiYobj1pLHM9bnVsbCxpPXt9KSwoXCJudW1iZXJcIj09dHlwZW9mIGl8fGUuZnguc3BlZWRzW2ldKSYmKG49cyxzPWksaT17fSksZS5pc0Z1bmN0aW9uKHMpJiYobj1zLHM9bnVsbCksaSYmZS5leHRlbmQodCxpKSxzPXN8fGkuZHVyYXRpb24sdC5kdXJhdGlvbj1lLmZ4Lm9mZj8wOlwibnVtYmVyXCI9PXR5cGVvZiBzP3M6cyBpbiBlLmZ4LnNwZWVkcz9lLmZ4LnNwZWVkc1tzXTplLmZ4LnNwZWVkcy5fZGVmYXVsdCx0LmNvbXBsZXRlPW58fGkuY29tcGxldGUsdH1mdW5jdGlvbiBpKHQpe3JldHVybiF0fHxcIm51bWJlclwiPT10eXBlb2YgdHx8ZS5meC5zcGVlZHNbdF0/ITA6XCJzdHJpbmdcIiE9dHlwZW9mIHR8fGUuZWZmZWN0cy5lZmZlY3RbdF0/ZS5pc0Z1bmN0aW9uKHQpPyEwOlwib2JqZWN0XCIhPXR5cGVvZiB0fHx0LmVmZmVjdD8hMTohMDohMH1lLmV4dGVuZChlLmVmZmVjdHMse3ZlcnNpb246XCIxLjExLjRcIixzYXZlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpPTA7dC5sZW5ndGg+aTtpKyspbnVsbCE9PXRbaV0mJmUuZGF0YShvK3RbaV0sZVswXS5zdHlsZVt0W2ldXSl9LHJlc3RvcmU6ZnVuY3Rpb24oZSx0KXt2YXIgaSxzO2ZvcihzPTA7dC5sZW5ndGg+cztzKyspbnVsbCE9PXRbc10mJihpPWUuZGF0YShvK3Rbc10pLHZvaWQgMD09PWkmJihpPVwiXCIpLGUuY3NzKHRbc10saSkpfSxzZXRNb2RlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJ0b2dnbGVcIj09PXQmJih0PWUuaXMoXCI6aGlkZGVuXCIpP1wic2hvd1wiOlwiaGlkZVwiKSx0fSxnZXRCYXNlbGluZTpmdW5jdGlvbihlLHQpe3ZhciBpLHM7c3dpdGNoKGVbMF0pe2Nhc2VcInRvcFwiOmk9MDticmVhaztjYXNlXCJtaWRkbGVcIjppPS41O2JyZWFrO2Nhc2VcImJvdHRvbVwiOmk9MTticmVhaztkZWZhdWx0Omk9ZVswXS90LmhlaWdodH1zd2l0Y2goZVsxXSl7Y2FzZVwibGVmdFwiOnM9MDticmVhaztjYXNlXCJjZW50ZXJcIjpzPS41O2JyZWFrO2Nhc2VcInJpZ2h0XCI6cz0xO2JyZWFrO2RlZmF1bHQ6cz1lWzFdL3Qud2lkdGh9cmV0dXJue3g6cyx5Oml9fSxjcmVhdGVXcmFwcGVyOmZ1bmN0aW9uKHQpe2lmKHQucGFyZW50KCkuaXMoXCIudWktZWZmZWN0cy13cmFwcGVyXCIpKXJldHVybiB0LnBhcmVudCgpO3ZhciBpPXt3aWR0aDp0Lm91dGVyV2lkdGgoITApLGhlaWdodDp0Lm91dGVySGVpZ2h0KCEwKSxcImZsb2F0XCI6dC5jc3MoXCJmbG9hdFwiKX0scz1lKFwiPGRpdj48L2Rpdj5cIikuYWRkQ2xhc3MoXCJ1aS1lZmZlY3RzLXdyYXBwZXJcIikuY3NzKHtmb250U2l6ZTpcIjEwMCVcIixiYWNrZ3JvdW5kOlwidHJhbnNwYXJlbnRcIixib3JkZXI6XCJub25lXCIsbWFyZ2luOjAscGFkZGluZzowfSksbj17d2lkdGg6dC53aWR0aCgpLGhlaWdodDp0LmhlaWdodCgpfSxhPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7dHJ5e2EuaWR9Y2F0Y2gobyl7YT1kb2N1bWVudC5ib2R5fXJldHVybiB0LndyYXAocyksKHRbMF09PT1hfHxlLmNvbnRhaW5zKHRbMF0sYSkpJiZlKGEpLmZvY3VzKCkscz10LnBhcmVudCgpLFwic3RhdGljXCI9PT10LmNzcyhcInBvc2l0aW9uXCIpPyhzLmNzcyh7cG9zaXRpb246XCJyZWxhdGl2ZVwifSksdC5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIn0pKTooZS5leHRlbmQoaSx7cG9zaXRpb246dC5jc3MoXCJwb3NpdGlvblwiKSx6SW5kZXg6dC5jc3MoXCJ6LWluZGV4XCIpfSksZS5lYWNoKFtcInRvcFwiLFwibGVmdFwiLFwiYm90dG9tXCIsXCJyaWdodFwiXSxmdW5jdGlvbihlLHMpe2lbc109dC5jc3MocyksaXNOYU4ocGFyc2VJbnQoaVtzXSwxMCkpJiYoaVtzXT1cImF1dG9cIil9KSx0LmNzcyh7cG9zaXRpb246XCJyZWxhdGl2ZVwiLHRvcDowLGxlZnQ6MCxyaWdodDpcImF1dG9cIixib3R0b206XCJhdXRvXCJ9KSksdC5jc3Mobikscy5jc3MoaSkuc2hvdygpfSxyZW1vdmVXcmFwcGVyOmZ1bmN0aW9uKHQpe3ZhciBpPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7cmV0dXJuIHQucGFyZW50KCkuaXMoXCIudWktZWZmZWN0cy13cmFwcGVyXCIpJiYodC5wYXJlbnQoKS5yZXBsYWNlV2l0aCh0KSwodFswXT09PWl8fGUuY29udGFpbnModFswXSxpKSkmJmUoaSkuZm9jdXMoKSksdH0sc2V0VHJhbnNpdGlvbjpmdW5jdGlvbih0LGkscyxuKXtyZXR1cm4gbj1ufHx7fSxlLmVhY2goaSxmdW5jdGlvbihlLGkpe3ZhciBhPXQuY3NzVW5pdChpKTthWzBdPjAmJihuW2ldPWFbMF0qcythWzFdKX0pLG59fSksZS5mbi5leHRlbmQoe2VmZmVjdDpmdW5jdGlvbigpe2Z1bmN0aW9uIGkodCl7ZnVuY3Rpb24gaSgpe2UuaXNGdW5jdGlvbihhKSYmYS5jYWxsKG5bMF0pLGUuaXNGdW5jdGlvbih0KSYmdCgpfXZhciBuPWUodGhpcyksYT1zLmNvbXBsZXRlLHI9cy5tb2RlOyhuLmlzKFwiOmhpZGRlblwiKT9cImhpZGVcIj09PXI6XCJzaG93XCI9PT1yKT8obltyXSgpLGkoKSk6by5jYWxsKG5bMF0scyxpKX12YXIgcz10LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxuPXMubW9kZSxhPXMucXVldWUsbz1lLmVmZmVjdHMuZWZmZWN0W3MuZWZmZWN0XTtyZXR1cm4gZS5meC5vZmZ8fCFvP24/dGhpc1tuXShzLmR1cmF0aW9uLHMuY29tcGxldGUpOnRoaXMuZWFjaChmdW5jdGlvbigpe3MuY29tcGxldGUmJnMuY29tcGxldGUuY2FsbCh0aGlzKX0pOmE9PT0hMT90aGlzLmVhY2goaSk6dGhpcy5xdWV1ZShhfHxcImZ4XCIsaSl9LHNob3c6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHMpe2lmKGkocykpcmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBuLm1vZGU9XCJzaG93XCIsdGhpcy5lZmZlY3QuY2FsbCh0aGlzLG4pfX0oZS5mbi5zaG93KSxoaWRlOmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihzKXtpZihpKHMpKXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgbj10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbi5tb2RlPVwiaGlkZVwiLHRoaXMuZWZmZWN0LmNhbGwodGhpcyxuKX19KGUuZm4uaGlkZSksdG9nZ2xlOmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihzKXtpZihpKHMpfHxcImJvb2xlYW5cIj09dHlwZW9mIHMpcmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBuLm1vZGU9XCJ0b2dnbGVcIix0aGlzLmVmZmVjdC5jYWxsKHRoaXMsbil9fShlLmZuLnRvZ2dsZSksY3NzVW5pdDpmdW5jdGlvbih0KXt2YXIgaT10aGlzLmNzcyh0KSxzPVtdO3JldHVybiBlLmVhY2goW1wiZW1cIixcInB4XCIsXCIlXCIsXCJwdFwiXSxmdW5jdGlvbihlLHQpe2kuaW5kZXhPZih0KT4wJiYocz1bcGFyc2VGbG9hdChpKSx0XSl9KSxzfX0pfSgpLGZ1bmN0aW9uKCl7dmFyIHQ9e307ZS5lYWNoKFtcIlF1YWRcIixcIkN1YmljXCIsXCJRdWFydFwiLFwiUXVpbnRcIixcIkV4cG9cIl0sZnVuY3Rpb24oZSxpKXt0W2ldPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LGUrMil9fSksZS5leHRlbmQodCx7U2luZTpmdW5jdGlvbihlKXtyZXR1cm4gMS1NYXRoLmNvcyhlKk1hdGguUEkvMil9LENpcmM6ZnVuY3Rpb24oZSl7cmV0dXJuIDEtTWF0aC5zcXJ0KDEtZSplKX0sRWxhc3RpYzpmdW5jdGlvbihlKXtyZXR1cm4gMD09PWV8fDE9PT1lP2U6LU1hdGgucG93KDIsOCooZS0xKSkqTWF0aC5zaW4oKDgwKihlLTEpLTcuNSkqTWF0aC5QSS8xNSl9LEJhY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIGUqZSooMyplLTIpfSxCb3VuY2U6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LGk9NDsoKHQ9TWF0aC5wb3coMiwtLWkpKS0xKS8xMT5lOyk7cmV0dXJuIDEvTWF0aC5wb3coNCwzLWkpLTcuNTYyNSpNYXRoLnBvdygoMyp0LTIpLzIyLWUsMil9fSksZS5lYWNoKHQsZnVuY3Rpb24odCxpKXtlLmVhc2luZ1tcImVhc2VJblwiK3RdPWksZS5lYXNpbmdbXCJlYXNlT3V0XCIrdF09ZnVuY3Rpb24oZSl7cmV0dXJuIDEtaSgxLWUpfSxlLmVhc2luZ1tcImVhc2VJbk91dFwiK3RdPWZ1bmN0aW9uKGUpe3JldHVybi41PmU/aSgyKmUpLzI6MS1pKC0yKmUrMikvMn19KX0oKSxlLmVmZmVjdHN9KTtcbiIsIi8qIVxuICogalF1ZXJ5IFVJIFRvdWNoIFB1bmNoIDAuMi4zXG4gKlxuICogQ29weXJpZ2h0IDIwMTHigJMyMDE0LCBEYXZlIEZ1cmZlcm9cbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxuICpcbiAqIERlcGVuZHM6XG4gKiAganF1ZXJ5LnVpLndpZGdldC5qc1xuICogIGpxdWVyeS51aS5tb3VzZS5qc1xuICovXG4hZnVuY3Rpb24oYSl7ZnVuY3Rpb24gZihhLGIpe2lmKCEoYS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoPjEpKXthLnByZXZlbnREZWZhdWx0KCk7dmFyIGM9YS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLGQ9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtkLmluaXRNb3VzZUV2ZW50KGIsITAsITAsd2luZG93LDEsYy5zY3JlZW5YLGMuc2NyZWVuWSxjLmNsaWVudFgsYy5jbGllbnRZLCExLCExLCExLCExLDAsbnVsbCksYS50YXJnZXQuZGlzcGF0Y2hFdmVudChkKX19aWYoYS5zdXBwb3J0LnRvdWNoPVwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQsYS5zdXBwb3J0LnRvdWNoKXt2YXIgZSxiPWEudWkubW91c2UucHJvdG90eXBlLGM9Yi5fbW91c2VJbml0LGQ9Yi5fbW91c2VEZXN0cm95O2IuX3RvdWNoU3RhcnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczshZSYmYi5fbW91c2VDYXB0dXJlKGEub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXSkmJihlPSEwLGIuX3RvdWNoTW92ZWQ9ITEsZihhLFwibW91c2VvdmVyXCIpLGYoYSxcIm1vdXNlbW92ZVwiKSxmKGEsXCJtb3VzZWRvd25cIikpfSxiLl90b3VjaE1vdmU9ZnVuY3Rpb24oYSl7ZSYmKHRoaXMuX3RvdWNoTW92ZWQ9ITAsZihhLFwibW91c2Vtb3ZlXCIpKX0sYi5fdG91Y2hFbmQ9ZnVuY3Rpb24oYSl7ZSYmKGYoYSxcIm1vdXNldXBcIiksZihhLFwibW91c2VvdXRcIiksdGhpcy5fdG91Y2hNb3ZlZHx8ZihhLFwiY2xpY2tcIiksZT0hMSl9LGIuX21vdXNlSW5pdD1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi5lbGVtZW50LmJpbmQoe3RvdWNoc3RhcnQ6YS5wcm94eShiLFwiX3RvdWNoU3RhcnRcIiksdG91Y2htb3ZlOmEucHJveHkoYixcIl90b3VjaE1vdmVcIiksdG91Y2hlbmQ6YS5wcm94eShiLFwiX3RvdWNoRW5kXCIpfSksYy5jYWxsKGIpfSxiLl9tb3VzZURlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2IuZWxlbWVudC51bmJpbmQoe3RvdWNoc3RhcnQ6YS5wcm94eShiLFwiX3RvdWNoU3RhcnRcIiksdG91Y2htb3ZlOmEucHJveHkoYixcIl90b3VjaE1vdmVcIiksdG91Y2hlbmQ6YS5wcm94eShiLFwiX3RvdWNoRW5kXCIpfSksZC5jYWxsKGIpfX19KGpRdWVyeSk7XG4iLCIvKlxuICogalF1ZXJ5IFVJIE5lc3RlZCBTb3J0YWJsZVxuICogdiAyLjAgLyAyOSBvY3QgMjAxMlxuICogaHR0cDovL21qc2FyZmF0dGkuY29tL3NhbmRib3gvbmVzdGVkU29ydGFibGVcbiAqXG4gKiBEZXBlbmRzIG9uOlxuICoganF1ZXJ5LnVpLnNvcnRhYmxlLmpzIDEuMTArXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLTIwMTMgTWFudWVsZSBKIFNhcmZhdHRpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gKi9cblxuKGZ1bmN0aW9uKCQpIHtcblxuICAgIGZ1bmN0aW9uIGlzT3ZlckF4aXMoIHgsIHJlZmVyZW5jZSwgc2l6ZSApIHtcbiAgICAgICAgcmV0dXJuICggeCA+IHJlZmVyZW5jZSApICYmICggeCA8ICggcmVmZXJlbmNlICsgc2l6ZSApICk7XG4gICAgfVxuXG4gICAgJC53aWRnZXQoXCJtanMubmVzdGVkU29ydGFibGVcIiwgJC5leHRlbmQoe30sICQudWkuc29ydGFibGUucHJvdG90eXBlLCB7XG5cbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZG9Ob3RDbGVhcjogZmFsc2UsXG4gICAgICAgICAgICBleHBhbmRPbkhvdmVyOiA3MDAsXG4gICAgICAgICAgICBpc0FsbG93ZWQ6IGZ1bmN0aW9uKHBsYWNlaG9sZGVyLCBwbGFjZWhvbGRlclBhcmVudCwgb3JpZ2luYWxJdGVtKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgaXNUcmVlOiBmYWxzZSxcbiAgICAgICAgICAgIGxpc3RUeXBlOiAnb2wnLFxuICAgICAgICAgICAgbWF4TGV2ZWxzOiAwLFxuICAgICAgICAgICAgcHJvdGVjdFJvb3Q6IGZhbHNlLFxuICAgICAgICAgICAgcm9vdElEOiBudWxsLFxuICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgIHN0YXJ0Q29sbGFwc2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHRhYlNpemU6IDIwLFxuXG4gICAgICAgICAgICBicmFuY2hDbGFzczogJ21qcy1uZXN0ZWRTb3J0YWJsZS1icmFuY2gnLFxuICAgICAgICAgICAgY29sbGFwc2VkQ2xhc3M6ICdtanMtbmVzdGVkU29ydGFibGUtY29sbGFwc2VkJyxcbiAgICAgICAgICAgIGRpc2FibGVOZXN0aW5nQ2xhc3M6ICdtanMtbmVzdGVkU29ydGFibGUtbm8tbmVzdGluZycsXG4gICAgICAgICAgICBlcnJvckNsYXNzOiAnbWpzLW5lc3RlZFNvcnRhYmxlLWVycm9yJyxcbiAgICAgICAgICAgIGV4cGFuZGVkQ2xhc3M6ICdtanMtbmVzdGVkU29ydGFibGUtZXhwYW5kZWQnLFxuICAgICAgICAgICAgaG92ZXJpbmdDbGFzczogJ21qcy1uZXN0ZWRTb3J0YWJsZS1ob3ZlcmluZycsXG4gICAgICAgICAgICBsZWFmQ2xhc3M6ICdtanMtbmVzdGVkU29ydGFibGUtbGVhZidcbiAgICAgICAgfSxcblxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5kYXRhKCd1aS1zb3J0YWJsZScsIHRoaXMuZWxlbWVudC5kYXRhKCdtanMtbmVzdGVkU29ydGFibGUnKSk7XG5cbiAgICAgICAgICAgIC8vIG1qcyAtIHByZXZlbnQgYnJvd3NlciBmcm9tIGZyZWV6aW5nIGlmIHRoZSBIVE1MIGlzIG5vdCBjb3JyZWN0XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudC5pcyh0aGlzLm9wdGlvbnMubGlzdFR5cGUpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmVzdGVkU29ydGFibGU6IFBsZWFzZSBjaGVjayB0aGF0IHRoZSBsaXN0VHlwZSBvcHRpb24gaXMgc2V0IHRvIHlvdXIgYWN0dWFsIGxpc3QgdHlwZScpO1xuXG4gICAgICAgICAgICAvLyBtanMgLSBmb3JjZSAnaW50ZXJzZWN0JyB0b2xlcmFuY2UgbWV0aG9kIGlmIHdlIGhhdmUgYSB0cmVlIHdpdGggZXhwYW5kaW5nL2NvbGxhcHNpbmcgZnVuY3Rpb25hbGl0eVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1RyZWUgJiYgdGhpcy5vcHRpb25zLmV4cGFuZE9uSG92ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudG9sZXJhbmNlID0gJ2ludGVyc2VjdCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQudWkuc29ydGFibGUucHJvdG90eXBlLl9jcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgLy8gbWpzIC0gcHJlcGFyZSB0aGUgdHJlZSBieSBhcHBseWluZyB0aGUgcmlnaHQgY2xhc3NlcyAodGhlIENTUyBpcyByZXNwb25zaWJsZSBmb3IgYWN0dWFsIGhpZGUvc2hvdyBmdW5jdGlvbmFsaXR5KVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1RyZWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgJCh0aGlzLml0ZW1zKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGxpID0gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJGxpLmNoaWxkcmVuKHNlbGYub3B0aW9ucy5saXN0VHlwZSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbGkuYWRkQ2xhc3Moc2VsZi5vcHRpb25zLmJyYW5jaENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cGFuZC9jb2xsYXBzZSBjbGFzcyBvbmx5IGlmIHRoZXkgaGF2ZSBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5zdGFydENvbGxhcHNlZCkgJGxpLmFkZENsYXNzKHNlbGYub3B0aW9ucy5jb2xsYXBzZWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlICRsaS5hZGRDbGFzcyhzZWxmLm9wdGlvbnMuZXhwYW5kZWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbGkuYWRkQ2xhc3Moc2VsZi5vcHRpb25zLmxlYWZDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgIC5yZW1vdmVEYXRhKFwibWpzLW5lc3RlZFNvcnRhYmxlXCIpXG4gICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoXCJ1aS1zb3J0YWJsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiAkLnVpLnNvcnRhYmxlLnByb3RvdHlwZS5fZGVzdHJveS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9tb3VzZURyYWc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaSwgaXRlbSwgaXRlbUVsZW1lbnQsIGludGVyc2VjdGlvbixcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHNjcm9sbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vQ29tcHV0ZSB0aGUgaGVscGVycyBwb3NpdGlvblxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIik7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5sYXN0UG9zaXRpb25BYnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vRG8gc2Nyb2xsaW5nXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT0gZG9jdW1lbnQgJiYgdGhpcy5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSAhPSAnSFRNTCcpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZigodGhpcy5vdmVyZmxvd09mZnNldC50b3AgKyB0aGlzLnNjcm9sbFBhcmVudFswXS5vZmZzZXRIZWlnaHQpIC0gZXZlbnQucGFnZVkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCArIG8uc2Nyb2xsU3BlZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihldmVudC5wYWdlWSAtIHRoaXMub3ZlcmZsb3dPZmZzZXQudG9wIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wID0gc2Nyb2xsZWQgPSB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgLSBvLnNjcm9sbFNwZWVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoKHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCArIHRoaXMuc2Nyb2xsUGFyZW50WzBdLm9mZnNldFdpZHRoKSAtIGV2ZW50LnBhZ2VYIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID0gdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCArIG8uc2Nyb2xsU3BlZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihldmVudC5wYWdlWCAtIHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgLSBvLnNjcm9sbFNwZWVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50LnBhZ2VZIC0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxlZCA9ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSAtIG8uc2Nyb2xsU3BlZWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoJCh3aW5kb3cpLmhlaWdodCgpIC0gKGV2ZW50LnBhZ2VZIC0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgKyBvLnNjcm9sbFNwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50LnBhZ2VYIC0gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoJCh3aW5kb3cpLndpZHRoKCkgLSAoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSArIG8uc2Nyb2xsU3BlZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihzY3JvbGxlZCAhPT0gZmFsc2UgJiYgJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cilcbiAgICAgICAgICAgICAgICAgICAgJC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL1JlZ2VuZXJhdGUgdGhlIGFic29sdXRlIHBvc2l0aW9uIHVzZWQgZm9yIHBvc2l0aW9uIGNoZWNrc1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIik7XG5cbiAgICAgICAgICAgIC8vIG1qcyAtIGZpbmQgdGhlIHRvcCBvZmZzZXQgYmVmb3JlIHJlYXJyYW5nZW1lbnQsXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNUb3BPZmZzZXQgPSB0aGlzLnBsYWNlaG9sZGVyLm9mZnNldCgpLnRvcDtcblxuICAgICAgICAgICAgLy9TZXQgdGhlIGhlbHBlciBwb3NpdGlvblxuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMub3B0aW9ucy5heGlzICE9PSBcInlcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyWzBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQrXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMub3B0aW9ucy5heGlzICE9PSBcInhcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyWzBdLnN0eWxlLnRvcCA9IHRoaXMucG9zaXRpb24udG9wK1wicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWpzIC0gY2hlY2sgYW5kIHJlc2V0IGhvdmVyaW5nIHN0YXRlIGF0IGVhY2ggY3ljbGVcbiAgICAgICAgICAgIHRoaXMuaG92ZXJpbmcgPSB0aGlzLmhvdmVyaW5nID8gdGhpcy5ob3ZlcmluZyA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1vdXNlZW50ZXJlZCA9IHRoaXMubW91c2VlbnRlcmVkID8gdGhpcy5tb3VzZWVudGVyZWQgOiBmYWxzZTtcblxuICAgICAgICAgICAgLy8gbWpzIC0gbGV0J3Mgc3RhcnQgY2FjaGluZyBzb21lIHZhcmlhYmxlc1xuICAgICAgICAgICAgdmFyIHBhcmVudEl0ZW0gPSAodGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnBhcmVudE5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUucGFyZW50Tm9kZSkuY2xvc2VzdCgnLnVpLXNvcnRhYmxlJykubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQodGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICBsZXZlbCA9IHRoaXMuX2dldExldmVsKHRoaXMucGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgIGNoaWxkTGV2ZWxzID0gdGhpcy5fZ2V0Q2hpbGRMZXZlbHModGhpcy5oZWxwZXIpO1xuXG4gICAgICAgICAgICB2YXIgbmV3TGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoby5saXN0VHlwZSk7XG5cbiAgICAgICAgICAgIC8vUmVhcnJhbmdlXG4gICAgICAgICAgICBmb3IgKGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cbiAgICAgICAgICAgICAgICAvL0NhY2hlIHZhcmlhYmxlcyBhbmQgaW50ZXJzZWN0aW9uLCBjb250aW51ZSBpZiBubyBpbnRlcnNlY3Rpb25cbiAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpdGVtRWxlbWVudCA9IGl0ZW0uaXRlbVswXTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24gPSB0aGlzLl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIoaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gT25seSBwdXQgdGhlIHBsYWNlaG9sZGVyIGluc2lkZSB0aGUgY3VycmVudCBDb250YWluZXIsIHNraXAgYWxsXG4gICAgICAgICAgICAgICAgLy8gaXRlbXMgZm9ybSBvdGhlciBjb250YWluZXJzLiBUaGlzIHdvcmtzIGJlY2F1c2Ugd2hlbiBtb3ZpbmdcbiAgICAgICAgICAgICAgICAvLyBhbiBpdGVtIGZyb20gb25lIGNvbnRhaW5lciB0byBhbm90aGVyIHRoZVxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRDb250YWluZXIgaXMgc3dpdGNoZWQgYmVmb3JlIHRoZSBwbGFjZWhvbGRlciBpcyBtb3ZlZC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcyBtb3ZpbmcgaXRlbXMgaW4gXCJzdWItc29ydGFibGVzXCIgY2FuIGNhdXNlIHRoZSBwbGFjZWhvbGRlciB0byBqaXR0ZXJcbiAgICAgICAgICAgICAgICAvLyBiZWV0d2VlbiB0aGUgb3V0ZXIgYW5kIGlubmVyIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5pbnN0YW5jZSAhPT0gdGhpcy5jdXJyZW50Q29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNhbm5vdCBpbnRlcnNlY3Qgd2l0aCBpdHNlbGZcbiAgICAgICAgICAgICAgICAvLyBubyB1c2VsZXNzIGFjdGlvbnMgdGhhdCBoYXZlIGJlZW4gZG9uZSBiZWZvcmVcbiAgICAgICAgICAgICAgICAvLyBubyBhY3Rpb24gaWYgdGhlIGl0ZW0gbW92ZWQgaXMgdGhlIHBhcmVudCBvZiB0aGUgaXRlbSBjaGVja2VkXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1FbGVtZW50ICE9PSB0aGlzLmN1cnJlbnRJdGVtWzBdICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXJbaW50ZXJzZWN0aW9uID09PSAxID8gXCJuZXh0XCIgOiBcInByZXZcIl0oKVswXSAhPT0gaXRlbUVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgISQuY29udGFpbnModGhpcy5wbGFjZWhvbGRlclswXSwgaXRlbUVsZW1lbnQpICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzZW1pLWR5bmFtaWNcIiA/ICEkLmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSwgaXRlbUVsZW1lbnQpIDogdHJ1ZSlcbiAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBtanMgLSB3ZSBhcmUgaW50ZXJzZWN0aW5nIGFuIGVsZW1lbnQ6IHRyaWdnZXIgdGhlIG1vdXNlZW50ZXIgZXZlbnQgYW5kIHN0b3JlIHRoaXMgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vdXNlZW50ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChpdGVtRWxlbWVudCkubW91c2VlbnRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZWVudGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbWpzIC0gaWYgdGhlIGVsZW1lbnQgaGFzIGNoaWxkcmVuIGFuZCB0aGV5IGFyZSBoaWRkZW4sIHNob3cgdGhlbSBhZnRlciBhIGRlbGF5IChDU1MgcmVzcG9uc2libGUpXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmlzVHJlZSAmJiAkKGl0ZW1FbGVtZW50KS5oYXNDbGFzcyhvLmNvbGxhcHNlZENsYXNzKSAmJiBvLmV4cGFuZE9uSG92ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ob3ZlcmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoaXRlbUVsZW1lbnQpLmFkZENsYXNzKG8uaG92ZXJpbmdDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJpbmcgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChpdGVtRWxlbWVudCkucmVtb3ZlQ2xhc3Moby5jb2xsYXBzZWRDbGFzcykuYWRkQ2xhc3Moby5leHBhbmRlZENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWZyZXNoUG9zaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyaWdnZXIoXCJleHBhbmRcIiwgZXZlbnQsIHNlbGYuX3VpSGFzaCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvLmV4cGFuZE9uSG92ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBpbnRlcnNlY3Rpb24gPT0gMSA/IFwiZG93blwiIDogXCJ1cFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1qcyAtIHJlYXJyYW5nZSB0aGUgZWxlbWVudHMgYW5kIHJlc2V0IHRpbWVvdXRzIGFuZCBob3ZlcmluZyBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvbGVyYW5jZSA9PSBcInBvaW50ZXJcIiB8fCB0aGlzLl9pbnRlcnNlY3RzV2l0aFNpZGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGl0ZW1FbGVtZW50KS5tb3VzZWxlYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlZW50ZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChpdGVtRWxlbWVudCkucmVtb3ZlQ2xhc3Moby5ob3ZlcmluZ0NsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJpbmcgJiYgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmhvdmVyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJpbmcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtanMgLSBkbyBub3Qgc3dpdGNoIGNvbnRhaW5lciBpZiBpdCdzIGEgcm9vdCBpdGVtIGFuZCAncHJvdGVjdFJvb3QnIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIGlmIGl0J3Mgbm90IGEgcm9vdCBpdGVtIGJ1dCB3ZSBhcmUgdHJ5aW5nIHRvIG1ha2UgaXQgcm9vdFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8ucHJvdGVjdFJvb3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAhICh0aGlzLmN1cnJlbnRJdGVtWzBdLnBhcmVudE5vZGUgPT0gdGhpcy5lbGVtZW50WzBdIC8vIGl0J3MgYSByb290IGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBpdGVtRWxlbWVudC5wYXJlbnROb2RlICE9IHRoaXMuZWxlbWVudFswXSkgLy8gaXQncyBpbnRlcnNlY3RpbmcgYSBub24tcm9vdCBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50SXRlbVswXS5wYXJlbnROb2RlICE9IHRoaXMuZWxlbWVudFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBpdGVtRWxlbWVudC5wYXJlbnROb2RlID09IHRoaXMuZWxlbWVudFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISAkKGl0ZW1FbGVtZW50KS5jaGlsZHJlbihvLmxpc3RUeXBlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1FbGVtZW50LmFwcGVuZENoaWxkKG5ld0xpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5pc1RyZWUgJiYgJChpdGVtRWxlbWVudCkucmVtb3ZlQ2xhc3Moby5sZWFmQ2xhc3MpLmFkZENsYXNzKG8uYnJhbmNoQ2xhc3MgKyAnICcgKyBvLmV4cGFuZGVkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmRpcmVjdGlvbiA9PT0gXCJkb3duXCIgPyAkKGl0ZW1FbGVtZW50KS5wcmV2KCkuY2hpbGRyZW4oby5saXN0VHlwZSkgOiAkKGl0ZW1FbGVtZW50KS5jaGlsZHJlbihvLmxpc3RUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFbMF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBudWxsLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhIG8ucHJvdGVjdFJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFycmFuZ2UoZXZlbnQsIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBlbXRweSB1bCdzL29sJ3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJFbXB0eShpdGVtRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1qcyAtIHRvIGZpbmQgdGhlIHByZXZpb3VzIHNpYmxpbmcgaW4gdGhlIGxpc3QsIGtlZXAgYmFja3RyYWNraW5nIHVudGlsIHdlIGhpdCBhIHZhbGlkIGxpc3QgaXRlbS5cbiAgICAgICAgICAgIHZhciBwcmV2aW91c0l0ZW0gPSB0aGlzLnBsYWNlaG9sZGVyWzBdLnByZXZpb3VzU2libGluZyA/ICQodGhpcy5wbGFjZWhvbGRlclswXS5wcmV2aW91c1NpYmxpbmcpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0l0ZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2aW91c0l0ZW1bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPSAkKG8ubGlzdFR5cGUpWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgfHwgcHJldmlvdXNJdGVtWzBdID09IHRoaXMuY3VycmVudEl0ZW1bMF0gfHwgcHJldmlvdXNJdGVtWzBdID09IHRoaXMuaGVscGVyWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c0l0ZW1bMF0ucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0l0ZW0gPSAkKHByZXZpb3VzSXRlbVswXS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNJdGVtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtanMgLSB0byBmaW5kIHRoZSBuZXh0IHNpYmxpbmcgaW4gdGhlIGxpc3QsIGtlZXAgc3RlcHBpbmcgZm9yd2FyZCB1bnRpbCB3ZSBoaXQgYSB2YWxpZCBsaXN0IGl0ZW0uXG4gICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSB0aGlzLnBsYWNlaG9sZGVyWzBdLm5leHRTaWJsaW5nID8gJCh0aGlzLnBsYWNlaG9sZGVyWzBdLm5leHRTaWJsaW5nKSA6IG51bGw7XG4gICAgICAgICAgICBpZiAobmV4dEl0ZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0SXRlbVswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9ICQoby5saXN0VHlwZSlbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSB8fCBuZXh0SXRlbVswXSA9PSB0aGlzLmN1cnJlbnRJdGVtWzBdIHx8IG5leHRJdGVtWzBdID09IHRoaXMuaGVscGVyWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0SXRlbVswXS5uZXh0U2libGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0gPSAkKG5leHRJdGVtWzBdLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmJleW9uZE1heExldmVscyA9IDA7XG5cbiAgICAgICAgICAgIC8vIG1qcyAtIGlmIHRoZSBpdGVtIGlzIG1vdmVkIHRvIHRoZSBsZWZ0LCBzZW5kIGl0IG9uZSBsZXZlbCB1cCBidXQgb25seSBpZiBpdCdzIGF0IHRoZSBib3R0b20gb2YgdGhlIGxpc3RcbiAgICAgICAgICAgIGlmIChwYXJlbnRJdGVtICE9IG51bGxcbiAgICAgICAgICAgICAgICAmJiBuZXh0SXRlbSA9PSBudWxsXG4gICAgICAgICAgICAgICAgJiYgISAoby5wcm90ZWN0Um9vdCAmJiBwYXJlbnRJdGVtWzBdLnBhcmVudE5vZGUgPT0gdGhpcy5lbGVtZW50WzBdKVxuICAgICAgICAgICAgICAgICYmXG4gICAgICAgICAgICAgICAgICAgIChvLnJ0bCAmJiAodGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5oZWxwZXIub3V0ZXJXaWR0aCgpID4gcGFyZW50SXRlbS5vZmZzZXQoKS5sZWZ0ICsgcGFyZW50SXRlbS5vdXRlcldpZHRoKCkpXG4gICAgICAgICAgICAgICAgICAgICB8fCAhIG8ucnRsICYmICh0aGlzLnBvc2l0aW9uQWJzLmxlZnQgPCBwYXJlbnRJdGVtLm9mZnNldCgpLmxlZnQpKVxuICAgICAgICAgICAgKSB7XG5cbiAgICAgICAgICAgICAgICBwYXJlbnRJdGVtLmFmdGVyKHRoaXMucGxhY2Vob2xkZXJbMF0pO1xuICAgICAgICAgICAgICAgIGlmIChvLmlzVHJlZSAmJiBwYXJlbnRJdGVtLmNoaWxkcmVuKG8ubGlzdEl0ZW0pLmNoaWxkcmVuKG8ubGlzdEl0ZW0gKyAnOnZpc2libGU6bm90KC51aS1zb3J0YWJsZS1oZWxwZXIpJykubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJdGVtLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5icmFuY2hDbGFzcyArICcgJyArIHRoaXMub3B0aW9ucy5leHBhbmRlZENsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMub3B0aW9ucy5sZWFmQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckVtcHR5KHBhcmVudEl0ZW1bMF0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1qcyAtIGlmIHRoZSBpdGVtIGlzIGJlbG93IGEgc2libGluZyBhbmQgaXMgbW92ZWQgdG8gdGhlIHJpZ2h0LCBtYWtlIGl0IGEgY2hpbGQgb2YgdGhhdCBzaWJsaW5nXG4gICAgICAgICAgICBlbHNlIGlmIChwcmV2aW91c0l0ZW0gIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgJiYgISBwcmV2aW91c0l0ZW0uaGFzQ2xhc3Moby5kaXNhYmxlTmVzdGluZ0NsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcmV2aW91c0l0ZW0uY2hpbGRyZW4oby5saXN0VHlwZSkubGVuZ3RoICYmIHByZXZpb3VzSXRlbS5jaGlsZHJlbihvLmxpc3RUeXBlKS5pcygnOnZpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIHx8ICEgcHJldmlvdXNJdGVtLmNoaWxkcmVuKG8ubGlzdFR5cGUpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICYmICEgKG8ucHJvdGVjdFJvb3QgJiYgdGhpcy5jdXJyZW50SXRlbVswXS5wYXJlbnROb2RlID09IHRoaXMuZWxlbWVudFswXSlcbiAgICAgICAgICAgICAgICAgICAgICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5ydGwgJiYgKHRoaXMucG9zaXRpb25BYnMubGVmdCArIHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSA8IHByZXZpb3VzSXRlbS5vZmZzZXQoKS5sZWZ0ICsgcHJldmlvdXNJdGVtLm91dGVyV2lkdGgoKSAtIG8udGFiU2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICB8fCAhIG8ucnRsICYmICh0aGlzLnBvc2l0aW9uQWJzLmxlZnQgPiBwcmV2aW91c0l0ZW0ub2Zmc2V0KCkubGVmdCArIG8udGFiU2l6ZSkpXG4gICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWxsb3dlZChwcmV2aW91c0l0ZW0sIGxldmVsLCBsZXZlbCtjaGlsZExldmVscysxKTtcblxuICAgICAgICAgICAgICAgIGlmICghcHJldmlvdXNJdGVtLmNoaWxkcmVuKG8ubGlzdFR5cGUpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0l0ZW1bMF0uYXBwZW5kQ2hpbGQobmV3TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIG8uaXNUcmVlICYmIHByZXZpb3VzSXRlbS5yZW1vdmVDbGFzcyhvLmxlYWZDbGFzcykuYWRkQ2xhc3Moby5icmFuY2hDbGFzcyArICcgJyArIG8uZXhwYW5kZWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbWpzIC0gaWYgdGhpcyBpdGVtIGlzIGJlaW5nIG1vdmVkIGZyb20gdGhlIHRvcCwgYWRkIGl0IHRvIHRoZSB0b3Agb2YgdGhlIGxpc3QuXG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVG9wT2Zmc2V0ICYmIChwcmV2aW91c1RvcE9mZnNldCA8PSBwcmV2aW91c0l0ZW0ub2Zmc2V0KCkudG9wKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0l0ZW0uY2hpbGRyZW4oby5saXN0VHlwZSkucHJlcGVuZCh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbWpzIC0gb3RoZXJ3aXNlLCBhZGQgaXQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdC5cbiAgICAgICAgICAgICAgICBlbHNlIGlmKHByZXZpb3VzSXRlbS5jaGlsZHJlbihvLmxpc3RUeXBlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNJdGVtLmNoaWxkcmVuKG8ubGlzdFR5cGUpWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQWxsb3dlZChwYXJlbnRJdGVtLCBsZXZlbCwgbGV2ZWwrY2hpbGRMZXZlbHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL1Bvc3QgZXZlbnRzIHRvIGNvbnRhaW5lcnNcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhY3RDb250YWluZXJzKGV2ZW50KTtcblxuICAgICAgICAgICAgLy9JbnRlcmNvbm5lY3Qgd2l0aCBkcm9wcGFibGVzXG4gICAgICAgICAgICBpZigkLnVpLmRkbWFuYWdlcikge1xuICAgICAgICAgICAgICAgICQudWkuZGRtYW5hZ2VyLmRyYWcodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0NhbGwgY2FsbGJhY2tzXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdzb3J0JywgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTtcblxuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb25BYnMgPSB0aGlzLnBvc2l0aW9uQWJzO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgX21vdXNlU3RvcDogZnVuY3Rpb24oZXZlbnQsIG5vUHJvcGFnYXRpb24pIHtcblxuICAgICAgICAgICAgLy8gbWpzIC0gaWYgdGhlIGl0ZW0gaXMgaW4gYSBwb3NpdGlvbiBub3QgYWxsb3dlZCwgc2VuZCBpdCBiYWNrXG4gICAgICAgICAgICBpZiAodGhpcy5iZXlvbmRNYXhMZXZlbHMpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmVycm9yQ2xhc3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9tUG9zaXRpb24ucHJldikge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuZG9tUG9zaXRpb24ucHJldikuYWZ0ZXIodGhpcy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCkucHJlcGVuZCh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwicmV2ZXJ0XCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7XG5cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvLyBtanMgLSBjbGVhciB0aGUgaG92ZXJpbmcgdGltZW91dCwganVzdCB0byBiZSBzdXJlXG4gICAgICAgICAgICAkKCcuJyt0aGlzLm9wdGlvbnMuaG92ZXJpbmdDbGFzcykubW91c2VsZWF2ZSgpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ob3ZlcmluZ0NsYXNzKTtcbiAgICAgICAgICAgIHRoaXMubW91c2VlbnRlcmVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmhvdmVyaW5nICYmIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5ob3ZlcmluZyk7XG4gICAgICAgICAgICB0aGlzLmhvdmVyaW5nID0gbnVsbDtcblxuICAgICAgICAgICAgJC51aS5zb3J0YWJsZS5wcm90b3R5cGUuX21vdXNlU3RvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gbWpzIC0gdGhpcyBmdW5jdGlvbiBpcyBzbGlnaHRseSBtb2RpZmllZCB0byBtYWtlIGl0IGVhc2llciB0byBob3ZlciBvdmVyIGEgY29sbGFwc2VkIGVsZW1lbnQgYW5kIGhhdmUgaXQgZXhwYW5kXG4gICAgICAgIF9pbnRlcnNlY3RzV2l0aFNpZGVzOiBmdW5jdGlvbihpdGVtKSB7XG5cbiAgICAgICAgICAgIHZhciBoYWxmID0gdGhpcy5vcHRpb25zLmlzVHJlZSA/IC44IDogLjU7XG5cbiAgICAgICAgICAgIHZhciBpc092ZXJCb3R0b21IYWxmID0gaXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AgKyAoaXRlbS5oZWlnaHQqaGFsZiksIGl0ZW0uaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBpc092ZXJUb3BIYWxmID0gaXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AgLSAoaXRlbS5oZWlnaHQqaGFsZiksIGl0ZW0uaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBpc092ZXJSaWdodEhhbGYgPSBpc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMubGVmdCArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsIGl0ZW0ubGVmdCArIChpdGVtLndpZHRoLzIpLCBpdGVtLndpZHRoKSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxEaXJlY3Rpb24gPSB0aGlzLl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5mbG9hdGluZyAmJiBob3Jpem9udGFsRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoaG9yaXpvbnRhbERpcmVjdGlvbiA9PSBcInJpZ2h0XCIgJiYgaXNPdmVyUmlnaHRIYWxmKSB8fCAoaG9yaXpvbnRhbERpcmVjdGlvbiA9PSBcImxlZnRcIiAmJiAhaXNPdmVyUmlnaHRIYWxmKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0aWNhbERpcmVjdGlvbiAmJiAoKHZlcnRpY2FsRGlyZWN0aW9uID09IFwiZG93blwiICYmIGlzT3ZlckJvdHRvbUhhbGYpIHx8ICh2ZXJ0aWNhbERpcmVjdGlvbiA9PSBcInVwXCIgJiYgaXNPdmVyVG9wSGFsZikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NvbnRhY3RDb250YWluZXJzOiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb3RlY3RSb290ICYmIHRoaXMuY3VycmVudEl0ZW1bMF0ucGFyZW50Tm9kZSA9PSB0aGlzLmVsZW1lbnRbMF0gKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkLnVpLnNvcnRhYmxlLnByb3RvdHlwZS5fY29udGFjdENvbnRhaW5lcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIF9jbGVhcjogZnVuY3Rpb24oZXZlbnQsIG5vUHJvcGFnYXRpb24pIHtcblxuICAgICAgICAgICAgJC51aS5zb3J0YWJsZS5wcm90b3R5cGUuX2NsZWFyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgIC8vIG1qcyAtIGNsZWFuIGxhc3QgZW1wdHkgdWwvb2xcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldLml0ZW1bMF07XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJFbXB0eShpdGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgICAgICAgICB2YXIgbyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5fZ2V0SXRlbXNBc2pRdWVyeShvICYmIG8uY29ubmVjdGVkKSxcbiAgICAgICAgICAgICAgICBzdHIgPSBbXTtcblxuICAgICAgICAgICAgJChpdGVtcykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gKCQoby5pdGVtIHx8IHRoaXMpLmF0dHIoby5hdHRyaWJ1dGUgfHwgJ2lkJykgfHwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goby5leHByZXNzaW9uIHx8ICgvKC4rKVstPV9dKC4rKS8pKSxcbiAgICAgICAgICAgICAgICAgICAgcGlkID0gKCQoby5pdGVtIHx8IHRoaXMpLnBhcmVudChvLmxpc3RUeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudChvLml0ZW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoby5hdHRyaWJ1dGUgfHwgJ2lkJykgfHwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goby5leHByZXNzaW9uIHx8ICgvKC4rKVstPV9dKC4rKS8pKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyLnB1c2goKChvLmtleSB8fCByZXNbMV0pICsgJ1snICsgKG8ua2V5ICYmIG8uZXhwcmVzc2lvbiA/IHJlc1sxXSA6IHJlc1syXSkgKyAnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICArICc9J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAocGlkID8gKG8ua2V5ICYmIG8uZXhwcmVzc2lvbiA/IHBpZFsxXSA6IHBpZFsyXSkgOiBvLnJvb3RJRCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZighc3RyLmxlbmd0aCAmJiBvLmtleSkge1xuICAgICAgICAgICAgICAgIHN0ci5wdXNoKG8ua2V5ICsgJz0nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0ci5qb2luKCcmJyk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICB0b0hpZXJhcmNoeTogZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgICAgICAgICB2YXIgbyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIHNEZXB0aCA9IG8uc3RhcnREZXB0aENvdW50IHx8IDAsXG4gICAgICAgICAgICAgICAgcmV0ID0gW107XG5cbiAgICAgICAgICAgICQodGhpcy5lbGVtZW50KS5jaGlsZHJlbihvLml0ZW1zKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWwgPSBfcmVjdXJzaXZlSXRlbXModGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2gobGV2ZWwpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9yZWN1cnNpdmVJdGVtcyhpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gKCQoaXRlbSkuYXR0cihvLmF0dHJpYnV0ZSB8fCAnaWQnKSB8fCAnJykubWF0Y2goby5leHByZXNzaW9uIHx8ICgvKC4rKVstPV9dKC4rKS8pKTtcbiAgICAgICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRJdGVtID0ge1wiaWRcIiA6IGlkWzJdfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoaXRlbSkuY2hpbGRyZW4oby5saXN0VHlwZSkuY2hpbGRyZW4oby5pdGVtcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEl0ZW0uY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoaXRlbSkuY2hpbGRyZW4oby5saXN0VHlwZSkuY2hpbGRyZW4oby5pdGVtcykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGV2ZWwgPSBfcmVjdXJzaXZlSXRlbXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEl0ZW0uY2hpbGRyZW4ucHVzaChsZXZlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEl0ZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRvQXJyYXk6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgdmFyIG8gPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICBzRGVwdGggPSBvLnN0YXJ0RGVwdGhDb3VudCB8fCAwLFxuICAgICAgICAgICAgICAgIHJldCA9IFtdLFxuICAgICAgICAgICAgICAgIGxlZnQgPSAxO1xuXG4gICAgICAgICAgICBpZiAoIW8uZXhjbHVkZVJvb3QpIHtcbiAgICAgICAgICAgICAgICByZXQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIFwiaXRlbV9pZFwiOiBvLnJvb3RJRCxcbiAgICAgICAgICAgICAgICAgICAgXCJwYXJlbnRfaWRcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJkZXB0aFwiOiBzRGVwdGgsXG4gICAgICAgICAgICAgICAgICAgIFwibGVmdFwiOiBsZWZ0LFxuICAgICAgICAgICAgICAgICAgICBcInJpZ2h0XCI6ICgkKG8uaXRlbXMsIHRoaXMuZWxlbWVudCkubGVuZ3RoICsgMSkgKiAyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGVmdCsrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQodGhpcy5lbGVtZW50KS5jaGlsZHJlbihvLml0ZW1zKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gX3JlY3Vyc2l2ZUFycmF5KHRoaXMsIHNEZXB0aCArIDEsIGxlZnQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldCA9IHJldC5zb3J0KGZ1bmN0aW9uKGEsYil7IHJldHVybiAoYS5sZWZ0IC0gYi5sZWZ0KTsgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9yZWN1cnNpdmVBcnJheShpdGVtLCBkZXB0aCwgbGVmdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIDEsXG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICBwaWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoJChpdGVtKS5jaGlsZHJlbihvLmxpc3RUeXBlKS5jaGlsZHJlbihvLml0ZW1zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcHRoICsrO1xuICAgICAgICAgICAgICAgICAgICAkKGl0ZW0pLmNoaWxkcmVuKG8ubGlzdFR5cGUpLmNoaWxkcmVuKG8uaXRlbXMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBfcmVjdXJzaXZlQXJyYXkoJCh0aGlzKSwgZGVwdGgsIHJpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRlcHRoIC0tO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlkID0gKCQoaXRlbSkuYXR0cihvLmF0dHJpYnV0ZSB8fCAnaWQnKSkubWF0Y2goby5leHByZXNzaW9uIHx8ICgvKC4rKVstPV9dKC4rKS8pKTtcblxuICAgICAgICAgICAgICAgIGlmIChkZXB0aCA9PT0gc0RlcHRoICsgMSkge1xuICAgICAgICAgICAgICAgICAgICBwaWQgPSBvLnJvb3RJRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50SXRlbSA9ICgkKGl0ZW0pLnBhcmVudChvLmxpc3RUeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudChvLml0ZW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoby5hdHRyaWJ1dGUgfHwgJ2lkJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goby5leHByZXNzaW9uIHx8ICgvKC4rKVstPV9dKC4rKS8pKTtcbiAgICAgICAgICAgICAgICAgICAgcGlkID0gcGFyZW50SXRlbVsyXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHtcIml0ZW1faWRcIjogaWRbMl0sIFwicGFyZW50X2lkXCI6IHBpZCwgXCJkZXB0aFwiOiBkZXB0aCwgXCJsZWZ0XCI6IGxlZnQsIFwicmlnaHRcIjogcmlnaHR9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZWZ0ID0gcmlnaHQgKyAxO1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NsZWFyRW1wdHk6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgICAgICB2YXIgZW1wdHlMaXN0ID0gJChpdGVtKS5jaGlsZHJlbihvLmxpc3RUeXBlKTtcblxuICAgICAgICAgICAgaWYgKGVtcHR5TGlzdC5sZW5ndGggJiYgIWVtcHR5TGlzdC5jaGlsZHJlbigpLmxlbmd0aCAmJiAhby5kb05vdENsZWFyKSB7XG4gICAgICAgICAgICAgICAgby5pc1RyZWUgJiYgJChpdGVtKS5yZW1vdmVDbGFzcyhvLmJyYW5jaENsYXNzICsgJyAnICsgby5leHBhbmRlZENsYXNzKS5hZGRDbGFzcyhvLmxlYWZDbGFzcyk7XG4gICAgICAgICAgICAgICAgZW1wdHlMaXN0LnJlbW92ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvLmlzVHJlZSAmJiBlbXB0eUxpc3QubGVuZ3RoICYmIGVtcHR5TGlzdC5jaGlsZHJlbigpLmxlbmd0aCAmJiBlbXB0eUxpc3QuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAkKGl0ZW0pLnJlbW92ZUNsYXNzKG8ubGVhZkNsYXNzKS5hZGRDbGFzcyhvLmJyYW5jaENsYXNzICsgJyAnICsgby5leHBhbmRlZENsYXNzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoby5pc1RyZWUgJiYgZW1wdHlMaXN0Lmxlbmd0aCAmJiBlbXB0eUxpc3QuY2hpbGRyZW4oKS5sZW5ndGggJiYgIWVtcHR5TGlzdC5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICQoaXRlbSkucmVtb3ZlQ2xhc3Moby5sZWFmQ2xhc3MpLmFkZENsYXNzKG8uYnJhbmNoQ2xhc3MgKyAnICcgKyBvLmNvbGxhcHNlZENsYXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIF9nZXRMZXZlbDogZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgICAgICAgICB2YXIgbGV2ZWwgPSAxO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxpc3RUeXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBpdGVtLmNsb3Nlc3QodGhpcy5vcHRpb25zLmxpc3RUeXBlKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobGlzdCAmJiBsaXN0Lmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFsaXN0LmlzKCcudWktc29ydGFibGUnKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXZlbCsrO1xuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gbGlzdC5wYXJlbnQoKS5jbG9zZXN0KHRoaXMub3B0aW9ucy5saXN0VHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbGV2ZWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2dldENoaWxkTGV2ZWxzOiBmdW5jdGlvbihwYXJlbnQsIGRlcHRoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAwO1xuICAgICAgICAgICAgZGVwdGggPSBkZXB0aCB8fCAwO1xuXG4gICAgICAgICAgICAkKHBhcmVudCkuY2hpbGRyZW4oby5saXN0VHlwZSkuY2hpbGRyZW4oby5pdGVtcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IE1hdGgubWF4KHNlbGYuX2dldENoaWxkTGV2ZWxzKGNoaWxkLCBkZXB0aCArIDEpLCByZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZXB0aCA/IHJlc3VsdCArIDEgOiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2lzQWxsb3dlZDogZnVuY3Rpb24ocGFyZW50SXRlbSwgbGV2ZWwsIGxldmVscykge1xuICAgICAgICAgICAgdmFyIG8gPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgbWF4TGV2ZWxzID0gdGhpcy5wbGFjZWhvbGRlci5jbG9zZXN0KCcudWktc29ydGFibGUnKS5uZXN0ZWRTb3J0YWJsZSgnb3B0aW9uJywgJ21heExldmVscycpOyAvLyB0aGlzIHRha2VzIGludG8gYWNjb3VudCB0aGUgbWF4TGV2ZWxzIHNldCB0byB0aGUgcmVjaXBpZW50IGxpc3RcblxuICAgICAgICAgICAgLy8gbWpzIC0gaXMgdGhlIHJvb3QgcHJvdGVjdGVkP1xuICAgICAgICAgICAgLy8gbWpzIC0gYXJlIHdlIG5lc3RpbmcgdG9vIGRlZXA/XG4gICAgICAgICAgICBpZiAoICEgby5pc0FsbG93ZWQodGhpcy5wbGFjZWhvbGRlciwgcGFyZW50SXRlbSwgdGhpcy5jdXJyZW50SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlci5hZGRDbGFzcyhvLmVycm9yQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF4TGV2ZWxzIDwgbGV2ZWxzICYmIG1heExldmVscyAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJleW9uZE1heExldmVscyA9IGxldmVscyAtIG1heExldmVscztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmV5b25kTWF4TGV2ZWxzID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4TGV2ZWxzIDwgbGV2ZWxzICYmIG1heExldmVscyAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIuYWRkQ2xhc3Moby5lcnJvckNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iZXlvbmRNYXhMZXZlbHMgPSBsZXZlbHMgLSBtYXhMZXZlbHM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlci5yZW1vdmVDbGFzcyhvLmVycm9yQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJleW9uZE1heExldmVscyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9KSk7XG5cbiAgICAkLm1qcy5uZXN0ZWRTb3J0YWJsZS5wcm90b3R5cGUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLnVpLnNvcnRhYmxlLnByb3RvdHlwZS5vcHRpb25zLCAkLm1qcy5uZXN0ZWRTb3J0YWJsZS5wcm90b3R5cGUub3B0aW9ucyk7XG59KShqUXVlcnkpOyIsIi8qIVxuICogQ01TLkFQSS5IZWxwZXJzXG4gKiBNdWx0aXBsZSBoZWxwZXJzIHVzZWQgYWNjcm9zcyBhbGwgQ01TIGZlYXR1cmVzXG4gKi9cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIENPTVBBVElCSUxJVFlcblxuLy8gZW5zdXJpbmcgZGphbmdvIG5hbWVzcGFjZSBpcyBzZXQgY29ycmVjdGx5XG53aW5kb3cuZGphbmdvID0gd2luZG93LmRqYW5nbyB8fCB1bmRlZmluZWQ7XG5cbi8vIGVuc3VyaW5nIGpRdWVyeSBuYW1lc3BhY2UgaXMgc2V0IGNvcnJlY3RseVxud2luZG93LmpRdWVyeSA9ICh3aW5kb3cuZGphbmdvICYmIHdpbmRvdy5kamFuZ28ualF1ZXJ5KSA/IHdpbmRvdy5kamFuZ28ualF1ZXJ5IDogd2luZG93LmpRdWVyeSB8fCB1bmRlZmluZWQ7XG5cbi8vIGVuc3VyaW5nIENsYXNzIG5hbWVzcGFjZSBpcyBzZXQgY29ycmVjdGx5XG53aW5kb3cuQ2xhc3MgPSB3aW5kb3cuQ2xhc3MgfHwgdW5kZWZpbmVkO1xuXG4vLyBlbnN1cmluZyBDTVMgbmFtZXNwYWNlIGlzIHNldCBjb3JyZWN0bHlcbi8qKlxuICogQG1vZHVsZSBDTVNcbiAqL1xudmFyIENNUyA9IHtcbiAgICAkOiAodHlwZW9mIHdpbmRvdy5qUXVlcnkgPT09ICdmdW5jdGlvbicpID8gd2luZG93LmpRdWVyeSA6IHVuZGVmaW5lZCxcbiAgICBDbGFzczogKHR5cGVvZiB3aW5kb3cuQ2xhc3MgPT09ICdmdW5jdGlvbicpID8gd2luZG93LkNsYXNzIDogdW5kZWZpbmVkLFxuICAgIC8qKlxuICAgICAqIEBtb2R1bGUgQ01TXG4gICAgICogQHN1Ym1vZHVsZSBDTVMuQVBJXG4gICAgICovXG4gICAgQVBJOiB7fSxcbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBrZXkgY29kZXMgZm9yIGNvbW1vbiBrZXlzLlxuICAgICAqXG4gICAgICogQG1vZHVsZSBDTVNcbiAgICAgKiBAc3VibW9kdWxlIENNUy5LRVlTXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICAgaWYgKGUua2V5Q29kZSA9PT0gQ01TLktFWVMuRU5URVIpIHsgLi4uIH07XG4gICAgICovXG4gICAgS0VZUzoge1xuICAgICAgICBTSElGVDogMTYsXG4gICAgICAgIFRBQjogOSxcbiAgICAgICAgVVA6IDM4LFxuICAgICAgICBET1dOOiA0MCxcbiAgICAgICAgRU5URVI6IDEzLFxuICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgIEVTQzogMjcsXG4gICAgICAgIENNRF9MRUZUOiA5MSxcbiAgICAgICAgQ01EX1JJR0hUOiA5MyxcbiAgICAgICAgQ01EX0ZJUkVGT1g6IDIyNCxcbiAgICAgICAgQ1RSTDogMTdcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGJyZWFrcG9pbnRzIGZvciBjZXJ0YWluIGRldmljZSB3aWR0aHNcbiAgICAgKlxuICAgICAqIEBtb2R1bGUgQ01TXG4gICAgICogQHN1Ym1vZHVsZSBDTVMuQlJFQUtQT0lOVFNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgICBpZiAod2luZG93LndpZHRoID49IENNUy5CUkVBS1BPSU5UUy5tb2JpbGUpIHsgLi4uIH07XG4gICAgICovXG4gICAgQlJFQUtQT0lOVFM6IHtcbiAgICAgICAgbW9iaWxlOiA0MjBcbiAgICB9XG59O1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gQ01TLkFQSVxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIHNob3J0aGFuZCBmb3IgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSgpO1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcm9vdCA9ICQoJyNjbXMtdG9wJyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb24gX25zXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHMgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzIHRvIGJlIG5hbWVzcGFjZXNcbiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBzdHJpbmcgY29udGFpbmluZyBzcGFjZSBzZXBhcmF0ZWQgbmFtZXNwYWNlZCBldmVudCBuYW1lc1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIF9ucyA9IGZ1bmN0aW9uIG5hbWVTcGFjZUV2ZW50KGV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50cy5zcGxpdCgvXFxzKy9nKS5tYXAoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnY21zLScgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICB9KS5qb2luKCcgJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3ZpZGVzIHZhcmlvdXMgaGVscGVycyB0aGF0IGFyZSBtaXhlZCBpbiBhbGwgQ01TIGNsYXNzZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBjbGFzcyBIZWxwZXJzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQG1vZHVsZSBDTVNcbiAgICAgICAgICogQHN1Ym1vZHVsZSBDTVMuQVBJXG4gICAgICAgICAqIEBuYW1lc3BhY2UgQ01TLkFQSVxuICAgICAgICAgKi9cbiAgICAgICAgQ01TLkFQSS5IZWxwZXJzID0ge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlZGlyZWN0cyB0byBhIHNwZWNpZmljIHVybCBvciByZWxvYWRzIGJyb3dzZXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCByZWxvYWRCcm93c2VyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIHdoZXJlIHRvIHJlZGlyZWN0LiBpZiBlcXVhbCB0byBgUkVGUkVTSF9QQUdFYCB3aWxsIHJlbG9hZCBwYWdlIGluc3RlYWRcbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0PTAgdGltZW91dCBpbiBtc1xuICAgICAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBhamF4IGlmIHNldCB0byB0cnVlIGZpcnN0IGluaXRpYXRlcyAqKnN5bmNocm9ub3VzKipcbiAgICAgICAgICAgICAqICAgICBhamF4IHJlcXVlc3QgdG8gZmlndXJlIG91dCBpZiB0aGUgYnJvd3NlciBzaG91bGQgcmVsb2FkIGN1cnJlbnQgcGFnZSxcbiAgICAgICAgICAgICAqICAgICBtb3ZlIHRvIGFub3RoZXIgb25lLCBvciBkbyBub3RoaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZWxvYWRCcm93c2VyOiBmdW5jdGlvbiAodXJsLCB0aW1lb3V0LCBhamF4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vIGlzIHRoZXJlIGEgcGFyZW50IHdpbmRvdz9cbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gKHdpbmRvdy5wYXJlbnQpID8gd2luZG93LnBhcmVudCA6IHdpbmRvdztcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFuIGFqYXggcmVsb2FkLCBwcmlvcml0aXplXG4gICAgICAgICAgICAgICAgaWYgKGFqYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LkNNUy5BUEkubG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHVybCBoYXMgY2hhbmdlZCwgaWYgdHJ1ZSByZWRpcmVjdCB0byB0aGUgbmV3IHBhdGhcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyByZXF1aXJlcyBhbiBhamF4IHJlcXVlc3RcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwYXJlbnQuQ01TLmNvbmZpZy5yZXF1ZXN0LnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogcGFyZW50LkNNUy5jb25maWcucmVxdWVzdC5tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwazogcGFyZW50LkNNUy5jb25maWcucmVxdWVzdC5wa1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5DTVMuQVBJLmxvY2tlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09PSAnJyAmJiAhdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiByZXNwb25zZSBpcyBlbXB0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJlbnQubG9jYXRpb24ucGF0aG5hbWUgIT09IHJlc3BvbnNlICYmIHJlc3BvbnNlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcGkgY2FsbCB0byB0aGUgYmFja2VuZCB0byBjaGVjayBpZiB0aGUgY3VycmVudCBwYXRoIGlzIHN0aWxsIHRoZSBzYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQucmVsb2FkQnJvd3NlcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwgPT09ICdSRUZSRVNIX1BBR0UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIG9uX2Nsb3NlIHByb3ZpZGVzIFJFRlJFU0hfUEFHRSwgb25seSBkbyBhIHJlbG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlbG9hZEJyb3dzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbl9jbG9zZSBjYW4gYWxzbyBwcm92aWRlIGEgdXJsLCByZWxvYWQgdG8gdGhlIG5ldyBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlbG9hZEJyb3dzZXIodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBmdXJ0aGVyIG9wZXJhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGFkZCB0aW1lb3V0IGlmIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgcGFyZW50LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICYmIHVybCAhPT0gcGFyZW50LmxvY2F0aW9uLmhyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvY2F0aW9uLnJlbG9hZCgpIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGlzLCBzbyB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3Qgd2FudCB0byByZWxvYWQgdGhlIHBhZ2UgaWYgd2UgbmVlZCBhIHJlZGlyZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBwYWdlIGlzIGFsd2F5cyByZWxvYWRlZCAjMzQxM1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCB8fCAwKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXNzaWducyBhbiBldmVudCBoYW5kbGVyIHRvIGZvcm1zIGxvY2F0ZWQgaW4gdGhlIHRvb2xiYXJcbiAgICAgICAgICAgICAqIHRvIHByZXZlbnQgbXVsdGlwbGUgc3VibWlzc2lvbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBwcmV2ZW50U3VibWl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHByZXZlbnRTdWJtaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybXMgPSAkKCcuY21zLXRvb2xiYXInKS5maW5kKCdmb3JtJyk7XG4gICAgICAgICAgICAgICAgZm9ybXMuc3VibWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBsb2FkZXJcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLnNob3dMb2FkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgY2Fubm90IHVzZSBkaXNhYmxlZCBhcyB0aGUgbmFtZSBhY3Rpb24gd2lsbCBiZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9KS5jc3MoJ29wYWNpdHknLCAwLjUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXRzIGNzcmYgdG9rZW4gaGVhZGVyIG9uIGFqYXggcmVxdWVzdHMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBjc3JmXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY3NyZl90b2tlblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjc3JmOiBmdW5jdGlvbiAoY3NyZl90b2tlbikge1xuICAgICAgICAgICAgICAgICQuYWpheFNldHVwKHtcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKHhocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtQ1NSRlRva2VuJywgY3NyZl90b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2VuZHMgb3IgcmV0cmlldmVzIGEgSlNPTiBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgICogb3IgdGhlIHNlc3Npb24gKHRocm91Z2ggc3luY2hyb25vdXMgYWpheCByZXF1ZXN0KVxuICAgICAgICAgICAgICogaWYgbG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBzZXRTZXR0aW5nc1xuICAgICAgICAgICAgICogQHBhcmFtIHNldHRpbmdzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldFNldHRpbmdzOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAvLyBtZXJnZSBzZXR0aW5nc1xuICAgICAgICAgICAgICAgIHNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkoJC5leHRlbmQoe30sIENNUy5jb25maWcuc2V0dGluZ3MsIHNldHRpbmdzKSk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IGxvYWRlclxuICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJLlRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLnNob3dMb2FkZXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB1c2UgbG9jYWwgc3RvcmFnZSBvciBzZXNzaW9uXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzU3RvcmFnZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHdpdGhpbiBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjbXNfY29va2llJywgc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ01TLkFQSS5Ub29sYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLlRvb2xiYXIuaGlkZUxvYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSB3aXRoaW4gc2Vzc2lvblxuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLmxvY2tlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogQ01TLmNvbmZpZy51cmxzLnNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcmZtaWRkbGV3YXJldG9rZW46IENNUy5jb25maWcuY3NyZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczogc2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGxvZ2dlZCBpbiBvciBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IChkYXRhKSA/IEpTT04ucGFyc2UoZGF0YSkgOiBDTVMuY29uZmlnLnNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJLlRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLmhpZGVMb2FkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChqcVhIUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpxWEhSLnJlc3BvbnNlICsgJyB8ICcgKyBqcVhIUi5zdGF0dXMgKyAnICcgKyBqcVhIUi5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzYXZlIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzID0gdHlwZW9mIHNldHRpbmdzID09PSAnb2JqZWN0JyA/IHNldHRpbmdzIDogSlNPTi5wYXJzZShzZXR0aW5ncyk7XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgbmV3IHNldHRpbmdzIGFyZSByZXR1cm5lZFxuICAgICAgICAgICAgICAgIHJldHVybiBDTVMuc2V0dGluZ3M7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldHMgdXNlciBzZXR0aW5ncyAoZnJvbSBKU09OIG9yIHRoZSBzZXNzaW9uKVxuICAgICAgICAgICAgICogaW4gdGhlIHNhbWUgd2F5IGFzIHNldFNldHRpbmdzIHNldHMgdGhlbS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGdldFNldHRpbmdzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldFNldHRpbmdzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzO1xuICAgICAgICAgICAgICAgIC8vIHNldCBsb2FkZXJcbiAgICAgICAgICAgICAgICBpZiAoQ01TLkFQSS5Ub29sYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5zaG93TG9hZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdXNlIGxvY2FsIHN0b3JhZ2Ugb3Igc2Vzc2lvblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1N0b3JhZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGZyb20gbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Ntc19jb29raWUnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJLlRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5oaWRlTG9hZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdldCBmcm9tIHNlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBDTVMuY29uZmlnLnVybHMuc2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGxvZ2dlZCBpbiBvciBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IChkYXRhKSA/IEpTT04ucGFyc2UoZGF0YSkgOiBDTVMuY29uZmlnLnNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJLlRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLmhpZGVMb2FkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChqcVhIUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpxWEhSLnJlc3BvbnNlICsgJyB8ICcgKyBqcVhIUi5zdGF0dXMgKyAnICcgKyBqcVhIUi5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gdGhpcy5zZXRTZXR0aW5ncyhDTVMuY29uZmlnLnNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzYXZlIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgbmV3IHNldHRpbmdzIGFyZSByZXR1cm5lZFxuICAgICAgICAgICAgICAgIHJldHVybiBDTVMuc2V0dGluZ3M7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1vZGlmaWVzIHRoZSB1cmwgd2l0aCBuZXcgcGFyYW1zIGFuZCBzYW5pdGlzZXNcbiAgICAgICAgICAgICAqIHRoZSBhbXBlcnNhbmQgd2l0aGluIHRoZSB1cmwgZm9yICMzNDA0LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgbWFrZVVSTFxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBvcmlnaW5hbCB1cmxcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nW119IFtwYXJhbXNdIGFycmF5IG9mIGBwYXJhbT12YWx1ZWAgc3RyaW5ncyB0byB1cGRhdGUgdGhlIHVybFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtYWtlVVJMOiBmdW5jdGlvbiBtYWtlVVJMKHVybCwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0bXAgPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgdXJsQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsUGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHVybDtcblxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB1cmwgaWYgdGhlcmUgaXMgbm8gcGFyYW1cbiAgICAgICAgICAgICAgICBpZiAoISh1cmwuc3BsaXQoJz8nKS5sZW5ndGggPD0gMSB8fCB3aW5kb3cuSlNPTiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXR1cCBsb2NhbCB2YXJzXG4gICAgICAgICAgICAgICAgICAgIHVybEFycmF5ID0gdXJsLnNwbGl0KCc/Jyk7XG4gICAgICAgICAgICAgICAgICAgIHVybFBhcmFtcyA9IHVybEFycmF5WzFdLnNwbGl0KCcmJyk7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbiA9IHVybEFycmF5WzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYXZhaWxhYmxlIHBhcmFtc1xuICAgICAgICAgICAgICAgICQuZWFjaCh1cmxQYXJhbXMsIGZ1bmN0aW9uIChpbmRleCwgcGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW06IHBhcmFtLnNwbGl0KCc9JylbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyYW0uc3BsaXQoJz0nKVsxXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIG5ldyBwYXJhbXNcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHBhcmFtcywgZnVuY3Rpb24gKGluZGV4LCBwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtOiBwYXJhbS5zcGxpdCgnPScpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJhbS5zcGxpdCgnPScpWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbWVyZ2UgbWFudWFsbHkgYmVjYXVzZSBqcXVlcnkuLi5cbiAgICAgICAgICAgICAgICAkLmVhY2goYXJyLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkLmluQXJyYXkoaXRlbS5wYXJhbSwga2V5cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goaXRlbS5wYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChpdGVtLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIG1lcmdlIG5ldyB1cmxcbiAgICAgICAgICAgICAgICAkLmVhY2goa2V5cywgZnVuY3Rpb24gKGluZGV4LCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG1wICs9ICcmJyArIGtleSArICc9JyArIHZhbHVlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG1wID0gdG1wLnJlcGxhY2UoJyYnLCAnPycpO1xuICAgICAgICAgICAgICAgIHVybCA9IG9yaWdpbiArIHRtcDtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnJicsICcmYW1wOycpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2BcbiAgICAgICAgICAgICAqIHVudGlsIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICAgICAgICAgKiB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzIGludm9rZWQuXG4gICAgICAgICAgICAgKiBPcHRpb25hbGx5IGNhbiBiZSBpbnZva2VkIGZpcnN0IHRpbWUgaW1tZWRpYXRlbHkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBkZWJvdW5jZVxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBmdW5jdGlvbiB0byBkZWJvdW5jZVxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHdhaXQgdGltZSBpbiBtcyB0byB3YWl0XG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmltbWVkaWF0ZV0gdHJpZ2dlciBmdW5jIGltbWVkaWF0ZWx5P1xuICAgICAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlYm91bmNlOiBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cyB8fCAhb3B0cy5pbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbE5vdyA9IG9wdHMgJiYgb3B0cy5pbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgICAgICAgICogYXQgbW9zdCBvbmNlIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlXG4gICAgICAgICAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW4gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlclxuICAgICAgICAgICAgICogZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbiwgYnV0IGlmIHlvdeKAmWQgbGlrZSB0b1xuICAgICAgICAgICAgICogZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3MgYHtsZWFkaW5nOiBmYWxzZX1gLlxuICAgICAgICAgICAgICogVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgdGhyb3R0bGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgZnVuY3Rpb24gdG8gdGhyb3R0bGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0IHRpbWUgd2luZG93XG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmxlYWRpbmc9dHJ1ZV0gZXhlY3V0ZSBvbiB0aGUgbGVhZGluZyBlZGdlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLnRyYWlsaW5nPXRydWVdIGV4ZWN1dGUgb24gdGhlIHRyYWlsaW5nIGVkZ2VcbiAgICAgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aHJvdHRsZTogZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0cykge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyA9IG9wdHMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogJC5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gJC5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRzLmxlYWRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0cy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQnJvd3NlcnMgYWxsb3cgdG8gXCJQcmV2ZW50IHRoaXMgcGFnZSBmb3JtIGNyZWF0aW5nIGFkZGl0aW9uYWxcbiAgICAgICAgICAgICAqIGRpYWxvZ3MuXCIgY2hlY2tib3ggd2hpY2ggcHJldmVudHMgZnVydGhlciBpbnB1dCBmcm9tIGNvbmZpcm0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBUaGlzIG1ldGhvZCBmYWxscyBiYWNrIHRvIFwidHJ1ZVwiIG9uY2UgdGhlIHVzZXIgY2hvb3NlcyB0aGlzIG9wdGlvbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIHNlY3VyZUNvbmZpcm1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZFxuICAgICAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2VjdXJlQ29uZmlybTogZnVuY3Rpb24gc2VjdXJlQ29uZmlybShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb25maXJtKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGVuZCA8IChzdGFydCArIDEwKSB8fCByZXN1bHQgPT09IHRydWUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJcyBsb2NhbFN0b3JhZ2UgdHJ1bHkgc3VwcG9ydGVkP1xuICAgICAgICAgICAgICogQ2hlY2sgaXMgdGFrZW4gZnJvbSBtb2Rlcm5penIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHByb3BlcnR5IF9pc1N0b3JhZ2VTdXBwb3J0ZWRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2lzU3RvcmFnZVN1cHBvcnRlZDogKGZ1bmN0aW9uIGxvY2FsU3RvcmFnZUNoZWNrKCkge1xuICAgICAgICAgICAgICAgIHZhciBtb2QgPSAnbW9kZXJuaXpyJztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShtb2QsIG1vZCk7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKG1vZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0oKSksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byB0aGUgXCJDTVNcIi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGFkZEV2ZW50TGlzdGVuZXJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgc3RyaW5nIGNvbnRhaW5pbmcgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgZXZlbnQgaGFwcGVuc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm9vdC5vbihfbnMoZXZlbnROYW1lKSwgZm4pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lciBmcm9tIHRoZSBcIkNNU1wiLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIC0gcmVtb3ZlcyBvbmx5IHRoYXQgY2FsbGJhY2suXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBhZGRFdmVudExpc3RlbmVyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lIHN0cmluZyBjb250YWluaW5nIHNwYWNlIHNlcGFyYXRlZCBldmVudCBuYW1lc1xuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXSBzcGVjaWZpYyBjYWxsYmFjayB0byBiZSByZW1vdmVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbikge1xuICAgICAgICAgICAgICAgIHJldHVybiByb290Lm9mZihfbnMoZXZlbnROYW1lKSwgZm4pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50XG4gICAgICAgICAgICAgKiBAbWV0aG9kIGRpc3BhdGNoRXZlbnRcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgIHN0cmluZyBjb250YWluaW5nIHNwYWNlIHNlcGFyYXRlZCBldmVudCBuYW1lc1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgd2hhdGV2ZXIgcGF5bG9hZCByZXF1aXJlZCBmb3IgdGhlIGNvbnN1bWVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZXZlbnROYW1lLCBwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvb3QudHJpZ2dlcihfbnMoZXZlbnROYW1lKSwgW3BheWxvYWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBhdXRvaW5pdHNcbiAgICAgICAgQ01TLkFQSS5IZWxwZXJzLnByZXZlbnRTdWJtaXQoKTtcblxuICAgIH0pO1xufSkoQ01TLiQpO1xuIiwiLyohPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBPcmlnaW5hbGx5IHRha2VuIGZyb21cbiAqIEJvb3RzdHJhcDogdHJhbnNpdGlvbi5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RyYW5zaXRpb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyogZ2xvYmFsIENNUyAqL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLylcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NtcycpO1xuXG4gICAgICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICAgICBPVHJhbnNpdGlvbjogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICAgICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGV4cGxpY2l0IGZvciBpZTggKCAgLl8uKVxuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xuICAgICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgJGVsID0gdGhpcztcbiAgICAgICAgJCh0aGlzKS5vbmUoJ2Ntc1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgZHVyYXRpb24gKyAxMCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKCk7XG5cbiAgICAgICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJC5ldmVudC5zcGVjaWFsLmNtc1RyYW5zaXRpb25FbmQgPSB7XG4gICAgICAgICAgICBiaW5kVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgICAgICAgZGVsZWdhdGVUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICAgICAgICBoYW5kbGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gaGFzIHRvIGJlIGF0dGFjaGVkIHRvIENNU1xufShDTVMuJCkpO1xuIiwiLypcbiAqIENvcHlyaWdodCBodHRwczovL2dpdGh1Yi5jb20vZGl2aW8vZGphbmdvLWNtc1xuICovXG5cbi8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBOQU1FU1BBQ0VTXG4vKipcbiAqIEBtb2R1bGUgQ01TXG4gKi9cbnZhciBDTVMgPSB3aW5kb3cuQ01TIHx8IHt9O1xuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gTU9EQUxcbihmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIHNob3J0aGFuZCBmb3IgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSgpO1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzcGxheXMgYSBtZXNzYWdlIHVuZGVybmVhdGggdGhlIHRvb2xiYXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBjbGFzcyBNZXNzYWdlc1xuICAgICAgICAgKiBAbmFtZXNwYWNlIENNU1xuICAgICAgICAgKi9cbiAgICAgICAgQ01TLk1lc3NhZ2VzID0gbmV3IENNUy5DbGFzcyh7XG5cbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlRHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlRGVsYXk6IDMwMDBcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gc3RhdGVzIGFuZCBldmVudHNcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrID0gJ2NsaWNrLmNtcy5tZXNzYWdlJztcblxuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBVSSgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdG9yZXMgYWxsIGpRdWVyeSByZWZlcmVuY2VzIHdpdGhpbiBgdGhpcy51aWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBVSVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwVUk6IGZ1bmN0aW9uIF9zZXR1cFVJKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCcuY21zJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICQoJ2h0bWwnKSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhcjogY29udGFpbmVyLmZpbmQoJy5jbXMtdG9vbGJhcicpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogY29udGFpbmVyLmZpbmQoJy5jbXMtbWVzc2FnZXMnKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9wZW5zIGEgbWVzc2FnZSB3aW5kb3cgdW5kZXJuZWF0aCB0aGUgdG9vbGJhci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIG9wZW5cbiAgICAgICAgICAgICAqIEBwYXJhbSBvcHRzXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xIVE1MTm9kZX0gb3B0cy5tZXNzYWdlIG1lc3NhZ2UgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZGlyPSdjZW50ZXInXSBkaXJlY3Rpb24gdG8gYmUgZGlzcGxheWVkIGBjZW50ZXJgIGBsZWZ0YCBvciBgcmlnaHRgXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdHMuZGVsYXk9dGhpcy5vcHRpb25zLm1lc3NhZ2VEZWxheV0gZGVsYXkgdW50aWwgbWVzc2FnZSBpcyBjbG9zZWQsIDAgbGVhdmVzIGl0IG9wZW5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZXJyb3JdIGlmIHRydWUgc2V0cyB0aGUgc3R5bGUgdG8gYC5jbXMtbWVzc2FnZXMtZXJyb3JgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4ob3B0cykge1xuICAgICAgICAgICAgICAgIGlmICghKG9wdHMgJiYgb3B0cy5tZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhcmd1bWVudHMgcGFzc2VkIHRvIFwib3BlblwiIHdlcmUgaW52YWxpZC4nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gb3B0cy5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIHZhciBkaXIgPSBvcHRzLmRpciA9PT0gdW5kZWZpbmVkID8gJ2NlbnRlcicgOiBvcHRzLmRpcjtcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSBvcHRzLmRlbGF5ID09PSB1bmRlZmluZWQgPyB0aGlzLm9wdGlvbnMubWVzc2FnZURlbGF5IDogb3B0cy5kZWxheTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBvcHRzLmVycm9yID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdHMuZXJyb3I7XG5cbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSAzMjA7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMudWkubWVzc2FnZXMub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIHRvcCA9IHRoaXMudWkudG9vbGJhci5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2UgPSB0aGlzLnVpLm1lc3NhZ2VzLmZpbmQoJy5jbXMtbWVzc2FnZXMtY2xvc2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCBjb250ZW50IHRvIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1lc3NhZ2VzLmZpbmQoJy5jbXMtbWVzc2FnZXMtaW5uZXInKS5odG1sKG1zZyk7XG5cbiAgICAgICAgICAgICAgICAvLyBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgICAgICAgIHRoaXMudWkubWVzc2FnZXMucmVtb3ZlQ2xhc3MoJ2Ntcy1tZXNzYWdlcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm1lc3NhZ2VzLmFkZENsYXNzKCdjbXMtbWVzc2FnZXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aW1lb3V0XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuXG4gICAgICAgICAgICAgICAgY2xvc2UuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGNsb3NlLm9mZih0aGlzLmNsaWNrKS5vbih0aGlzLmNsaWNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0b3AgdG8gMCBpZiB0b29sYmFyIGlzIGNvbGxhcHNlZFxuICAgICAgICAgICAgICAgIGlmIChDTVMuc2V0dGluZ3MudG9vbGJhciA9PT0gJ2NvbGxhcHNlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBkbyB3ZSBuZWVkIHRvIGFkZCBkZWJ1ZyBzdHlsZXM/XG4gICAgICAgICAgICAgICAgaWYgKENNUy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gdG9wICsgNTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgY29ycmVjdCBwb3NpdGlvbiBhbmQgc2hvd1xuICAgICAgICAgICAgICAgIHRoaXMudWkubWVzc2FnZXMuY3NzKCd0b3AnLCAtaGVpZ2h0KS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgY29ycmVjdCBkaXJlY3Rpb24gYW5kIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZGlyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5tZXNzYWdlcy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3AnOiB0b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAtd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JpZ2h0JzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXJnaW4tbGVmdCc6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5tZXNzYWdlcy5hbmltYXRlKHsgJ2xlZnQnOiAwIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkubWVzc2FnZXMuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG9wJzogdG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyaWdodCc6IC13aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLWxlZnQnOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkubWVzc2FnZXMuYW5pbWF0ZSh7ICdyaWdodCc6IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkubWVzc2FnZXMuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6ICc1MCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyaWdodCc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLWxlZnQnOiAtKHdpZHRoIC8gMilcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5tZXNzYWdlcy5hbmltYXRlKHsgJ3RvcCc6IHRvcCB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgYXV0b2hpZGUgaWYgZGVsYXkgaXMgPD0gMFxuICAgICAgICAgICAgICAgIGlmIChkZWxheSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlLnNob3coKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgZGVsYXkgdG8gaGlkZSBpZiBkZWxheSA+IDBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDbG9zZXMgdGhlIG1lc3NhZ2Ugd2luZG93IHVuZGVybmVhdGggdGhlIHRvb2xiYXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBjbG9zZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5tZXNzYWdlcy5mYWRlT3V0KHRoaXMub3B0aW9ucy5tZXNzYWdlRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG59KShDTVMuJCk7XG4iLCIvKlxuICogQ29weXJpZ2h0IGh0dHBzOi8vZ2l0aHViLmNvbS9kaXZpby9kamFuZ28tY21zXG4gKi9cblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIE5BTUVTUEFDRVNcbi8qKlxuICogQG1vZHVsZSBDTVNcbiAqL1xudmFyIENNUyA9IHdpbmRvdy5DTVMgfHwge307XG5cbi8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBNT0RBTFxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gc2hvcnRoYW5kIGZvciBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCk7XG4gICAgJChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbW9kYWwgaXMgdHJpZ2dlcmVkIHZpYSBBUEkgY2FsbHMgZnJvbSB0aGUgYmFja2VuZCBlaXRoZXJcbiAgICAgICAgICogdGhyb3VnaCB0aGUgdG9vbGJhciBuYXZpZ2F0aW9uIG9yIGZyb20gcGx1Z2lucy4gVGhlIEFQSXMgYWxsb3cgdG9cbiAgICAgICAgICogb3BlbiBjb250ZW50IGZyb20gYSB1cmwgKGlmcmFtZSkgb3IgaW5qZWN0IGh0bWwgZGlyZWN0bHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBjbGFzcyBNb2RhbFxuICAgICAgICAgKiBAbmFtZXNwYWNlIENNU1xuICAgICAgICAgKiBAdXNlcyBDTVMuQVBJLkhlbHBlcnNcbiAgICAgICAgICovXG4gICAgICAgIENNUy5Nb2RhbCA9IG5ldyBDTVMuQ2xhc3Moe1xuXG4gICAgICAgICAgICBpbXBsZW1lbnQ6IFtDTVMuQVBJLkhlbHBlcnNdLFxuXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgb25DbG9zZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0OiA0MDAsXG4gICAgICAgICAgICAgICAgbWluV2lkdGg6IDgwMCxcbiAgICAgICAgICAgICAgICBtb2RhbER1cmF0aW9uOiAyMDAsXG4gICAgICAgICAgICAgICAgbmV3UGx1Z2luOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbWF4aW1pemFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbWluaW1pemFibGU6IHRydWVcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudHNcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cFVJKCk7XG4gICAgICAgICAgICAgICAgLy8gZXZlbnQgZW1pdHRlclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzdGF0ZXMgYW5kIGV2ZW50c1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpY2sgPSAnY2xpY2suY21zLm1vZGFsJztcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duID0gJ3BvaW50ZXJkb3duLmNtcy5tb2RhbCBjb250ZXh0bWVudS5jbXMubW9kYWwnO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclVwID0gJ3BvaW50ZXJ1cC5jbXMubW9kYWwgcG9pbnRlcmNhbmNlbC5jbXMubW9kYWwnO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlck1vdmUgPSAncG9pbnRlcm1vdmUuY21zLm1vZGFsJztcbiAgICAgICAgICAgICAgICB0aGlzLmRvdWJsZUNsaWNrID0gJ2RibGNsaWNrLmNtcy5tb2RhbCc7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaEVuZCA9ICd0b3VjaGVuZC5jbXMubW9kYWwnO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5pbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJNYXhpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHVwIGV2ZW50IHB1YnN1YiBtZWNoYW5pc20gZm9yIHRoZSBpbnN0YW5jZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBFdmVudEVtaXR0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwRXZlbnRFbWl0dGVyOiBmdW5jdGlvbiBfc2V0dXBFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBidXMgPSAkKHt9KTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByb3h5KG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1tuYW1lXS5hcHBseShidXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIgPSBwcm94eSgndHJpZ2dlcicpO1xuICAgICAgICAgICAgICAgIHRoaXMub25lID0gcHJveHkoJ29uZScpO1xuICAgICAgICAgICAgICAgIHRoaXMub24gPSBwcm94eSgnb24nKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZiA9IHByb3h5KCdvZmYnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RvcmVzIGFsbCBqUXVlcnkgcmVmZXJlbmNlcyB3aXRoaW4gYHRoaXMudWlgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3NldHVwVUlcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXR1cFVJOiBmdW5jdGlvbiBfc2V0dXBVSSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWwgPSAkKCcuY21zLW1vZGFsJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWw6IG1vZGFsLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAkKCdodG1sJyksXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdzogJCh3aW5kb3cpLFxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyTGVmdFBhcnQ6ICQoJy5jbXMtdG9vbGJhci1sZWZ0JyksXG4gICAgICAgICAgICAgICAgICAgIG1pbmltaXplQnV0dG9uOiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLW1pbmltaXplJyksXG4gICAgICAgICAgICAgICAgICAgIG1heGltaXplQnV0dG9uOiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLW1heGltaXplJyksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLXRpdGxlJyksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlUHJlZml4OiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLXRpdGxlLXByZWZpeCcpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZVN1ZmZpeDogbW9kYWwuZmluZCgnLmNtcy1tb2RhbC10aXRsZS1zdWZmaXgnKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLXJlc2l6ZScpLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLWJyZWFkY3J1bWInKSxcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBbmRDYW5jZWw6IG1vZGFsLmZpbmQoJy5jbXMtbW9kYWwtY2xvc2UsIC5jbXMtbW9kYWwtY2FuY2VsJyksXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsQnV0dG9uczogbW9kYWwuZmluZCgnLmNtcy1tb2RhbC1idXR0b25zJyksXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsQm9keTogbW9kYWwuZmluZCgnLmNtcy1tb2RhbC1ib2R5JyksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lOiBtb2RhbC5maW5kKCcuY21zLW1vZGFsLWZyYW1lJyksXG4gICAgICAgICAgICAgICAgICAgIHNoaW06IG1vZGFsLmZpbmQoJy5jbXMtbW9kYWwtc2hpbScpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBhbGwgdGhlIGV2ZW50IGhhbmRsZXJzLCBzdWNoIGFzIG1heGltaXplL21pbmltaXplIGFuZCByZXNpemluZy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9ldmVudHNcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9ldmVudHM6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgLy8gbW9kYWwgYmVoYXZpb3Vyc1xuICAgICAgICAgICAgICAgIHRoaXMudWkubWluaW1pemVCdXR0b24uXG4gICAgICAgICAgICAgICAgICAgIG9mZih0aGlzLmNsaWNrICsgJyAnICsgdGhpcy50b3VjaEVuZClcbiAgICAgICAgICAgICAgICAgICAgLm9uKHRoaXMuY2xpY2sgKyAnICcgKyB0aGlzLnRvdWNoRW5kLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQubWluaW1pemUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1heGltaXplQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5vZmYodGhpcy5jbGljayArICcgJyArIHRoaXMudG91Y2hFbmQpXG4gICAgICAgICAgICAgICAgICAgIC5vbih0aGlzLmNsaWNrICsgJyAnICsgdGhpcy50b3VjaEVuZCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm1heGltaXplKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRpdGxlLm9mZih0aGlzLnBvaW50ZXJEb3duKS5vbih0aGlzLnBvaW50ZXJEb3duLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3N0YXJ0TW92ZShlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRpdGxlLm9mZih0aGlzLmRvdWJsZUNsaWNrKS5vbih0aGlzLmRvdWJsZUNsaWNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQubWF4aW1pemUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMudWkucmVzaXplLm9mZih0aGlzLnBvaW50ZXJEb3duKS5vbih0aGlzLnBvaW50ZXJEb3duLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3N0YXJ0UmVzaXplKGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5jbG9zZUFuZENhbmNlbFxuICAgICAgICAgICAgICAgICAgICAub2ZmKHRoaXMuY2xpY2sgKyAnICcgKyB0aGlzLnRvdWNoRW5kKVxuICAgICAgICAgICAgICAgICAgICAub24odGhpcy5jbGljayArICcgJyArIHRoaXMudG91Y2hFbmQsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy5vbkNsb3NlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50cyB3aXRoaW4gdGhlIHdpbmRvd1xuICAgICAgICAgICAgICAgIHRoaXMudWkuYnJlYWRjcnVtYi5vZmYodGhpcy5jbGljaywgJ2EnKS5vbih0aGlzLmNsaWNrLCAnYScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fY2hhbmdlSWZyYW1lKCQodGhpcykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcGVucyB0aGUgbW9kYWwgZWl0aGVyIGluIGFuIGlmcmFtZSBvciByZW5kZXJzIG1hcmt1cC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIG9wZW5cbiAgICAgICAgICAgICAqIEBjaGFpbmFibGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIGVpdGhlciBgb3B0cy51cmxgIG9yIGBvcHRzLmh0bWxgIGFyZSByZXF1aXJlZFxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gW29wdHMuYnJlYWRjcnVtYnNdIGNvbGxlY3Rpb24gb2YgYnJlYWRjcnVtYiBpdGVtc1xuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8SFRNTE5vZGV8alF1ZXJ5fSBbb3B0cy5odG1sXSBodG1sIG1hcmt1cCB0byByZW5kZXJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy50aXRsZV0gbW9kYWwgd2luZG93IG1haW4gdGl0bGUgKGJvbGQpXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuc3VidGl0bGVdIG1vZGFsIHdpbmRvdyBzZWNvbmRhcnkgdGl0bGUgKG5vcm1hbClcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy51cmxdIHVybCB0byByZW5kZXIgaWZyYW1lLCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYG9wdHMuaHRtbGBcbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy53aWR0aF0gc2V0cyB0aGUgd2lkdGggb2YgdGhlIG1vZGFsXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaGVpZ2h0XSBzZXRzIHRoZSBoZWlnaHQgb2YgdGhlIG1vZGFsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4ob3B0cykge1xuICAgICAgICAgICAgICAgIC8vIHNldHVwIGludGVybmFsc1xuICAgICAgICAgICAgICAgIGlmICghKG9wdHMgJiYgb3B0cy51cmwgfHwgb3B0cyAmJiBvcHRzLmh0bWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gXCJvcGVuXCIgd2VyZSBpbnZhbGlkLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSByZW1vdmUgb3B0aW9uIHdoZW4gcGx1Z2luIGlzIG5ld1xuICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBvcGVuIHByb2Nlc3Mgd2hlbiBzd2l0Y2hpbmcgY29udGV4dFxuICAgICAgICAgICAgICAgIGlmIChDTVMuX25ld1BsdWdpbiAmJiAhdGhpcy5fZGVsZXRlUGx1Z2luKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gcmViaW5kIGV2ZW50cyBldmVyeSB0aW1lIHdlIG9wZW4gYSBtb2RhbFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIGV2ZW50IGhhbmRsZXJzIGNvbnRhaW4gcmVmZXJlbmNlcyB0byB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAvLyBhbmQgc2luY2Ugd2UgcmV1c2UgdGhlIHNhbWUgbWFya3VwIHdlIG5lZWQgdG8gdXBkYXRlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBpbnN0YW5jZSByZWZlcmVuY2UgZXZlcnkgdGltZS5cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY21zLm1vZGFsLmxvYWQnKTtcbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHRoZSBldmVudCBhbHNvIG9uIHRoZSBkb20gZWxlbWVudCxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGlmIHdlIGxvYWQgYW5vdGhlciBtb2RhbCB3aGlsZSBvbmUgaXMgYWxyZWFkeSBvcGVuXG4gICAgICAgICAgICAgICAgLy8gdGhlIG9sZGVyIGluc3RhbmNlIHdvbid0IHJlY2VpdmUgYW55IHVwZGF0ZXNcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsLnRyaWdnZXIoJ2Ntcy5tb2RhbC5sb2FkJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21tb24gZWxlbWVudHMgc3RhdGVcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnJlc2l6ZS50b2dnbGUodGhpcy5vcHRpb25zLnJlc2l6YWJsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5taW5pbWl6ZUJ1dHRvbi50b2dnbGUodGhpcy5vcHRpb25zLm1pbmltaXphYmxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1heGltaXplQnV0dG9uLnRvZ2dsZSh0aGlzLm9wdGlvbnMubWF4aW1pemFibGUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5fY2FsY3VsYXRlTmV3UG9zaXRpb24ob3B0cyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1heGltaXplQnV0dG9uLnJlbW92ZUNsYXNzKCdjbXMtbW9kYWwtbWF4aW1pemUtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhpbWl6ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIG5ldyBwbHVnaW4gd2lsbCBmcmVlemUgdGhlIGNyZWF0aW9uIHByb2Nlc3NcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5ld1BsdWdpbikge1xuICAgICAgICAgICAgICAgICAgICBDTVMuX25ld1BsdWdpbiA9IHRoaXMub3B0aW9ucy5uZXdQbHVnaW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBhIG5ldyBpbnN0YW5jZSBpcyBjYWxsZWQsIHdlIGhhdmUgdG8gZW5zdXJlIG1pbmltaXplZCBzdGF0ZSBpcyByZW1vdmVkICMzNjIwXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudWkuYm9keS5oYXNDbGFzcygnY21zLW1vZGFsLW1pbmltaXplZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluaW1pemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5pbWl6ZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbEJ1dHRvbnMuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJyZWFkY3J1bWIuZW1wdHkoKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBjbGFzcyBmcm9tIG1vZGFsIHdoZW4gbm8gYnJlYWRjcnVtYnMgaXMgcmVuZGVyZWRcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsLnJlbW92ZUNsYXNzKCdjbXMtbW9kYWwtaGFzLWJyZWFkY3J1bWInKTtcblxuICAgICAgICAgICAgICAgIC8vIGhpZGUgdG9vbHRpcFxuICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbHRpcC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyByZWRpcmVjdCB0byBpZnJhbWUgcmVuZGVyaW5nIGlmIHVybCBpcyBwcm92aWRlZFxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnVybCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkSWZyYW1lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogb3B0cy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogb3B0cy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJzOiBvcHRzLmJyZWFkY3J1bWJzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHVybCBpcyBub3QgcHJvdmlkZWQgd2UgZ28gZm9yIGh0bWxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZE1hcmt1cCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBvcHRzLmh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogb3B0cy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiBvcHRzLnN1YnRpdGxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY21zLm1vZGFsLmxvYWRlZCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gZGlzcGxheSBtb2RhbFxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3coJC5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5vcHRpb25zLm1vZGFsRHVyYXRpb25cbiAgICAgICAgICAgICAgICB9LCBwb3NpdGlvbikpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZXMgY29vcmRpbmF0ZXMgYW5kIGRpbWVuc2lvbnMgZm9yIG1vZGFsIHBsYWNlbWVudFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2NhbGN1bGF0ZU5ld1Bvc2l0aW9uXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLndpZHRoXSBkZXNpcmVkIHdpZHRoIG9mIHRoZSBtb2RhbFxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmhlaWdodF0gZGVzaXJlZCBoZWlnaHQgb2YgdGhlIG1vZGFsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9jYWxjdWxhdGVOZXdQb3NpdGlvbjogZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgICAgICAgICAgICAvLyBsZXRzIHNldCB0aGUgbW9kYWwgd2lkdGggYW5kIGhlaWdodCB0byB0aGUgc2l6ZSBvZiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIHZhciB3aWR0aE9mZnNldCA9IDMwMDsgLy8gYWRkcyBtYXJnaW4gbGVmdCBhbmQgcmlnaHRcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0T2Zmc2V0ID0gMzAwOyAvLyBhZGRzIG1hcmdpbiB0b3AgYW5kIGJvdHRvbTtcbiAgICAgICAgICAgICAgICB2YXIgc2NyZWVuV2lkdGggPSB0aGlzLnVpLndpbmRvdy53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBzY3JlZW5IZWlnaHQgPSB0aGlzLnVpLndpbmRvdy5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxXaWR0aCA9IG9wdHMud2lkdGggfHwgdGhpcy5vcHRpb25zLm1pbldpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBtb2RhbEhlaWdodCA9IG9wdHMuaGVpZ2h0IHx8IHRoaXMub3B0aW9ucy5taW5IZWlnaHQ7XG4gICAgICAgICAgICAgICAgLy8gc2NyZWVuIHdpZHRoIGFuZCBoZWlnaHQgY2FsY3VsYXRpb24sIFdDID0gd2lkdGhcbiAgICAgICAgICAgICAgICB2YXIgc2NyZWVuV2lkdGhDYWxjID0gc2NyZWVuV2lkdGggPj0gKG1vZGFsV2lkdGggKyB3aWR0aE9mZnNldCk7XG4gICAgICAgICAgICAgICAgdmFyIHNjcmVlbkhlaWdodENhbGMgPSBzY3JlZW5IZWlnaHQgPj0gKG1vZGFsSGVpZ2h0ICsgaGVpZ2h0T2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHNjcmVlbldpZHRoQ2FsYyAmJiAhb3B0cy53aWR0aCA/IHNjcmVlbldpZHRoIC0gd2lkdGhPZmZzZXQgOiBtb2RhbFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzY3JlZW5IZWlnaHRDYWxjICYmICFvcHRzLmhlaWdodCA/IHNjcmVlbkhlaWdodCAtIGhlaWdodE9mZnNldCA6IG1vZGFsSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRMZWZ0ID0gdGhpcy51aS5tb2RhbC5jc3MoJ2xlZnQnKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFRvcCA9IHRoaXMudWkubW9kYWwuY3NzKCd0b3AnKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3TGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgbmV3VG9wO1xuXG4gICAgICAgICAgICAgICAgLy8ganF1ZXJ5IG1hZGUgbWUgZG8gaXRcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudExlZnQgPT09ICc1MCUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0ID0gc2NyZWVuV2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRvcCA9PT0gJzUwJScpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRvcCA9IHNjcmVlbkhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VycmVudFRvcCA9IHBhcnNlSW50KGN1cnJlbnRUb3ApO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0ID0gcGFyc2VJbnQoY3VycmVudExlZnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgbmV3IHdpZHRoL2hlaWdodCBnbyBvdXQgb2YgdGhlIHNjcmVlbiAtIHJlc2V0IHBvc2l0aW9uIHRvIGNlbnRlciBvZiBzY3JlZW5cbiAgICAgICAgICAgICAgICBpZiAoKHdpZHRoIC8gMiArIGN1cnJlbnRMZWZ0ID4gc2NyZWVuV2lkdGgpIHx8IChoZWlnaHQgLyAyICsgY3VycmVudFRvcCA+IHNjcmVlbkhlaWdodCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnRMZWZ0IC0gd2lkdGggLyAyIDwgMCkgfHwgKGN1cnJlbnRUb3AgLSBoZWlnaHQgLyAyIDwgMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3TGVmdCA9IHNjcmVlbldpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgbmV3VG9wID0gc2NyZWVuSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlLCB0aGUgbW9kYWwgaXMgbGFyZ2VyIHRoYW4gdGhlIHdpbmRvdywgd2UgdHJpZ2dlciBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPj0gc2NyZWVuV2lkdGggfHwgaGVpZ2h0ID49IHNjcmVlbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJNYXhpbWl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogbmV3VG9wLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBuZXdMZWZ0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW5pbWF0aW9uIGhlbHBlciBmb3Igb3BlbmluZyB0aGUgc2lkZWZyYW1lLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3Nob3dcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMud2lkdGggd2lkdGggb2YgdGhlIG1vZGFsXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5oZWlnaHQgaGVpZ2h0IG9mIHRoZSBtb2RhbFxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMubGVmdCBsZWZ0IGluIHB4IG9mIHRoZSBjZW50ZXIgb2YgdGhlIG1vZGFsXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy50b3AgdG9wIGluIHB4IG9mIHRoZSBjZW50ZXIgb2YgdGhlIG1vZGFsXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5kdXJhdGlvbiBzcGVlZCBvZiBvcGVuaW5nLCBtcyAobm90IHJlYWxseSB1c2VkIHlldClcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Nob3c6IGZ1bmN0aW9uIF9zaG93KG9wdHMpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHBvc2l0aW9uIHRoZSBtb2RhbCBpbiB0aGUgY2VudGVyXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IG9wdHMud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9wdHMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gbWFrZSB1c2Ugb2YgdHJhbnNpdGlvbkR1cmF0aW9uLCBjdXJyZW50bHkgY2FwcGVkIGF0IDAuMnNcbiAgICAgICAgICAgICAgICB2YXIgc3BlZWQgPSBvcHRzLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIHZhciB0b3AgPSBvcHRzLnRvcDtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IG9wdHMubGVmdDtcblxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudWkubW9kYWwuaGFzQ2xhc3MoJ2Ntcy1tb2RhbC1vcGVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5hZGRDbGFzcygnY21zLW1vZGFsLW1vcnBoaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAndG9wJzogdG9wLFxuICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IGxlZnQsXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gYW5pbWF0ZSB0cmFuc2xhdGVYIGlmIHBvc3NpYmxlIGluc3RlYWQgb2YgbWFyZ2luXG4gICAgICAgICAgICAgICAgICAgICdtYXJnaW4tbGVmdCc6IC0od2lkdGggLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi10b3AnOiAtKGhlaWdodCAvIDIpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gc2V0SW1tZWRpYXRlIGlzIHJlcXVpcmVkIHRvIGdvIGludG8gdGhlIG5leHQgZnJhbWVcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5tb2RhbC5hZGRDbGFzcygnY21zLW1vZGFsLW9wZW4nKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudWkubW9kYWwub25lKCdjbXNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLm1vZGFsLnJlbW92ZUNsYXNzKCdjbXMtbW9kYWwtbW9ycGhpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5tb2RhbC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi1sZWZ0JzogLSh3aWR0aCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi10b3AnOiAtKGhlaWdodCAvIDIpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIHNob3VsZCBtYXhpbWl6ZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC50cmlnZ2VyTWF4aW1pemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm1heGltaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2VkIGxvY2tlZCBzdGF0dXMgdG8gYWxsb3cgb3RoZXIgbW9kYWxzIGFnYWluXG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudHJpZ2dlcignY21zLm1vZGFsLnNob3duJyk7XG4gICAgICAgICAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoc3BlZWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkIGVzYyBjbG9zZSBldmVudFxuICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5vZmYoJ2tleWRvd24uY21zLmNsb3NlJykub24oJ2tleWRvd24uY21zLmNsb3NlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gQ01TLktFWVMuRVNDKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMub25DbG9zZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBmb2N1cyB0byBtb2RhbFxuICAgICAgICAgICAgICAgIHRoaXMudWkubW9kYWwuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2xvc2VzIHRoZSBjdXJyZW50IGluc3RhbmNlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgY2xvc2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSByZWZyZXNoIG9wdGlvblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub25DbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZEJyb3dzZXIodGhpcy5vcHRpb25zLm9uQ2xvc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgcmVtb3ZlIG9wdGlvbiB3aGVuIHBsdWdpbiBpcyBuZXdcbiAgICAgICAgICAgICAgICBpZiAoQ01TLl9uZXdQbHVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsZXRlUGx1Z2luKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVBZnRlcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLm9wdGlvbnMubW9kYWxEdXJhdGlvbiAvIDJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBbmltYXRpb24gaGVscGVyIGZvciBjbG9zaW5nIHRoZSBpZnJhbWUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfaGlkZVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdHMuZHVyYXRpb249dGhpcy5vcHRpb25zLm1vZGFsRHVyYXRpb25dIGFuaW1hdGlvbiBkdXJhdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfaGlkZTogZnVuY3Rpb24gX2hpZGUob3B0cykge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLm9wdGlvbnMubW9kYWxEdXJhdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRzICYmIG9wdHMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBvcHRzLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudWkuZnJhbWUuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsQm9keS5yZW1vdmVDbGFzcygnY21zLWxvYWRlcicpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkubW9kYWwucmVtb3ZlQ2xhc3MoJ2Ntcy1tb2RhbC1vcGVuJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5vbmUoJ2Ntc1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudWkubW9kYWwuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAvLyByZXNldCBtYXhpbWl6ZSBvciBtaW5pbWl6ZSBzdGF0ZXMgZm9yICMzMTExXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm1pbmltaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5taW5pbWl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm1heGltaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5tYXhpbWl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudHJpZ2dlcignY21zLm1vZGFsLmNsb3NlZCcpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucy5kdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkub2ZmKCdrZXlkb3duLmNtcy5jbG9zZScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNaW5pbWl6ZXMgdGhlIG1vZGFsIG9udG8gdGhlIHRvb2xiYXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBtaW5pbWl6ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtaW5pbWl6ZTogZnVuY3Rpb24gbWluaW1pemUoKSB7XG4gICAgICAgICAgICAgICAgLy8gY2FuY2VsIGFjdGlvbiBpZiBtYXhpbWl6ZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhpbWl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbmltaXplZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRvb2xiYXIgaXMgc2hvd25cbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLm9wZW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIGluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5kYXRhKCdjc3MnLCB0aGlzLnVpLm1vZGFsLmNzcyhbXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCcsICd0b3AnLCAnbWFyZ2luLWxlZnQnLCAnbWFyZ2luLXRvcCdcbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1pbmltaXplXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5hZGRDbGFzcygnY21zLW1vZGFsLW1pbmltaXplZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IHRoaXMudWkudG9vbGJhckxlZnRQYXJ0Lm91dGVyV2lkdGgodHJ1ZSkgKyA1MFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbmltaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF4aW1pemVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5LnJlbW92ZUNsYXNzKCdjbXMtbW9kYWwtbWluaW1pemVkJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkubW9kYWwuY3NzKHRoaXMudWkubW9kYWwuZGF0YSgnY3NzJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluaW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNYXhpbWl6ZXMgdGhlIHdpbmRvdyBhY2NvcmRpbmcgdG8gdGhlIGJyb3dzZXIgc2l6ZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIG1heGltaXplXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1heGltaXplOiBmdW5jdGlvbiBtYXhpbWl6ZSgpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgYWN0aW9uIHdoZW4gbWluaW1pemVkXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWluaW1pemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhpbWl6ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgaW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsLmRhdGEoJ2NzcycsIHRoaXMudWkubW9kYWwuY3NzKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JywgJ3RvcCcsICdtYXJnaW4tbGVmdCcsICdtYXJnaW4tdG9wJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCcsICdoZWlnaHQnXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkuYWRkQ2xhc3MoJ2Ntcy1tb2RhbC1tYXhpbWl6ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heGltaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnbW9kYWwtbWF4aW1pemVkJywgeyBpbnN0YW5jZTogdGhpcyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBtaW5pbWl6ZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkucmVtb3ZlQ2xhc3MoJ2Ntcy1tb2RhbC1tYXhpbWl6ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5jc3ModGhpcy51aS5tb2RhbC5kYXRhKCdjc3MnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdtb2RhbC1yZXN0b3JlZCcsIHsgaW5zdGFuY2U6IHRoaXMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbml0aWF0ZXMgdGhlIHN0YXJ0IG1vdmUgZXZlbnQgZnJvbSBgX2V2ZW50c2AuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc3RhcnRNb3ZlXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJFdmVudCBwYXNzZXMgc3RhcnRpbmcgZXZlbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3N0YXJ0TW92ZTogZnVuY3Rpb24gX3N0YXJ0TW92ZShwb2ludGVyRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgbWF4aW1pemVkIG9yIG1pbmltaXplZFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heGltaXplZCB8fCB0aGlzLm1pbmltaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMudWkubW9kYWwucG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgdG9wO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5zaGltLnNob3coKTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBldmVudCBmb3Igc3RvcHBpbmdcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkub24odGhpcy5wb2ludGVyVXAsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3N0b3BNb3ZlKGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5Lm9uKHRoaXMucG9pbnRlck1vdmUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gKHBvaW50ZXJFdmVudC5vcmlnaW5hbEV2ZW50LnBhZ2VYIC0gZS5vcmlnaW5hbEV2ZW50LnBhZ2VYKTtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gcG9zaXRpb24udG9wIC0gKHBvaW50ZXJFdmVudC5vcmlnaW5hbEV2ZW50LnBhZ2VZIC0gZS5vcmlnaW5hbEV2ZW50LnBhZ2VZKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLm1vZGFsLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAndG9wJzogdG9wXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ2RhdGEtdG91Y2gtYWN0aW9uJywgJ25vbmUnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdGlhdGVzIHRoZSBzdG9wIG1vdmUgZXZlbnQgZnJvbSBgX3N0YXJ0UmVzaXplYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zdG9wTW92ZVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3N0b3BNb3ZlOiBmdW5jdGlvbiBfc3RvcE1vdmUoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5zaGltLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHlcbiAgICAgICAgICAgICAgICAgICAgLm9mZih0aGlzLnBvaW50ZXJNb3ZlICsgJyAnICsgdGhpcy5wb2ludGVyVXApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXRvdWNoLWFjdGlvbicpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbml0aWF0ZXMgdGhlIHN0YXJ0IHJlc2l6ZSBldmVudCBmcm9tIGBfZXZlbnRzYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zdGFydFJlc2l6ZVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyRXZlbnQgcGFzc2VzIHN0YXJ0aW5nIGV2ZW50XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zdGFydFJlc2l6ZTogZnVuY3Rpb24gX3N0YXJ0UmVzaXplKHBvaW50ZXJFdmVudCkge1xuICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiBpbiBmdWxsc2NyZWVuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4aW1pemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gY29udGludWVcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy51aS5tb2RhbC53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnVpLm1vZGFsLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHZhciBtb2RhbExlZnQgPSB0aGlzLnVpLm1vZGFsLnBvc2l0aW9uKCkubGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxUb3AgPSB0aGlzLnVpLm1vZGFsLnBvc2l0aW9uKCkudG9wO1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGV2ZW50IGZvciBzdG9wcGluZ1xuICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5vbih0aGlzLnBvaW50ZXJVcCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fc3RvcFJlc2l6ZShlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMudWkuc2hpbS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkub24odGhpcy5wb2ludGVyTW92ZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG12WCA9IHBvaW50ZXJFdmVudC5vcmlnaW5hbEV2ZW50LnBhZ2VYIC0gZS5vcmlnaW5hbEV2ZW50LnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXZZID0gcG9pbnRlckV2ZW50Lm9yaWdpbmFsRXZlbnQucGFnZVkgLSBlLm9yaWdpbmFsRXZlbnQucGFnZVk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gd2lkdGggLSAobXZYICogMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gaGVpZ2h0IC0gKG12WSAqIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgd01pbiA9IHRoYXQub3B0aW9ucy5taW5XaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhNaW4gPSB0aGF0Lm9wdGlvbnMubWluSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IG12WCArIG1vZGFsTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvcCA9IG12WSArIG1vZGFsVG9wO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBzb21lIGxpbWl0c1xuICAgICAgICAgICAgICAgICAgICBpZiAodyA8PSB3TWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0gd01pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBtb2RhbExlZnQgKyB3aWR0aCAvIDIgLSB3IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaCA8PSBoTWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gaE1pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IG1vZGFsVG9wICsgaGVpZ2h0IC8gMiAtIGggLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNlbnRlcmVkIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLm1vZGFsLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCdkYXRhLXRvdWNoLWFjdGlvbicsICdub25lJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluaXRpYXRlcyB0aGUgc3RvcCByZXNpemUgZXZlbnQgZnJvbSBgX3N0YXJ0UmVzaXplYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zdG9wUmVzaXplXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc3RvcFJlc2l6ZTogZnVuY3Rpb24gX3N0b3BSZXNpemUoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5zaGltLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHlcbiAgICAgICAgICAgICAgICAgICAgLm9mZih0aGlzLnBvaW50ZXJNb3ZlICsgJyAnICsgdGhpcy5wb2ludGVyVXApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXRvdWNoLWFjdGlvbicpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXRzIHRoZSBicmVhZGNydW1iIGluc2lkZSB0aGUgbW9kYWwuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0QnJlYWRjcnVtYlxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGJyZWFkY3J1bWJzIHJlbmRlcmVzIGJyZWFkY3J1bWIgb24gbW9kYWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldEJyZWFkY3J1bWI6IGZ1bmN0aW9uIF9zZXRCcmVhZGNydW1iKGJyZWFkY3J1bWJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNydW1iID0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gJzxhIGhyZWY9XCJ7MX1cIiBjbGFzcz1cInsyfVwiPjxzcGFuPnszfTwvc3Bhbj48L2E+JztcblxuICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiB0aGVyZSBpcyBubyBicmVhZGNydW1icylcbiAgICAgICAgICAgICAgICBpZiAoIWJyZWFkY3J1bWJzIHx8IGJyZWFkY3J1bWJzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFicmVhZGNydW1ic1swXS50aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gYWRkIGNsYXNzIHRvIG1vZGFsXG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5hZGRDbGFzcygnY21zLW1vZGFsLWhhcy1icmVhZGNydW1iJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBsb2FkIGJyZWFkY3J1bWJzXG4gICAgICAgICAgICAgICAgJC5lYWNoKGJyZWFkY3J1bWJzLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGl0ZW0gaXMgdGhlIGxhc3Qgb25lXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gKGluZGV4ID49IGJyZWFkY3J1bWJzLmxlbmd0aCAtIDEpID8gJ2FjdGl2ZScgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVuZGVyIGJyZWFkY3J1bWJzXG4gICAgICAgICAgICAgICAgICAgIGNydW1iICs9IHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnezF9JywgaXRlbS51cmwpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnezJ9JywgbGFzdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd7M30nLCBpdGVtLnRpdGxlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBlbGVtZW50c1xuICAgICAgICAgICAgICAgIHRoaXMudWkuYnJlYWRjcnVtYi5odG1sKGNydW1iKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB0aGUgYnV0dG9ucyBpbnNpZGUgdGhlIG1vZGFsLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3NldEJ1dHRvbnNcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gaWZyYW1lIGxvYWRlZCBpZnJhbWUgZWxlbWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0QnV0dG9uczogZnVuY3Rpb24gX3NldEJ1dHRvbnMoaWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRqYW5nb1N1aXQgPSBpZnJhbWUuY29udGVudHMoKS5maW5kKCcuc3VpdC1jb2x1bW5zJykubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwID0gJCgnPGRpdiBjbGFzcz1cImNtcy1tb2RhbC1pdGVtLWJ1dHRvbnNcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyID0gJCgnPGRpdiBjbGFzcz1cImNtcy1tb2RhbC1idXR0b25zLWlubmVyXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGNhbmNlbCA9ICQoJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjbXMtYnRuXCI+JyArIENNUy5jb25maWcubGFuZy5jYW5jZWwgKyAnPC9hPicpO1xuICAgICAgICAgICAgICAgIHZhciByb3c7XG4gICAgICAgICAgICAgICAgdmFyIHRtcDtcblxuICAgICAgICAgICAgICAgIGlmICghZGphbmdvU3VpdCkge1xuICAgICAgICAgICAgICAgICAgICByb3cgPSBpZnJhbWUuY29udGVudHMoKS5maW5kKCcuc3VibWl0LXJvdzplcSgwKScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IGlmcmFtZS5jb250ZW50cygpLmZpbmQoJy5zYXZlLWJveDplcSgwKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZm9ybSA9IGlmcmFtZS5jb250ZW50cygpLmZpbmQoJ2Zvcm0nKTtcbiAgICAgICAgICAgICAgICAvL2F2b2lkcyBjb25mbGljdCBiZXR3ZWVuIHRoZSBicm93c2VyJ3MgZm9ybSB2YWxpZGF0aW9uIGFuZCBEamFuZ28ncyB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgZm9ybS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5oaWRlRnJhbWUpIHsgLy8gc3VibWl0IGJ1dHRvbiB3YXMgY2xpY2tlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5tb2RhbC5maW5kKCcuY21zLW1vZGFsLWZyYW1lIGlmcmFtZScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhZ2UgaGFzIGJlZW4gc2F2ZWQsIHJ1biBjaGVja3VwXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBidXR0b25zID0gcm93LmZpbmQoJ2lucHV0LCBhLCBidXR0b24nKTtcblxuICAgICAgICAgICAgICAgIC8vIGhpZGUgYWxsIHN1Ym1pdC1yb3dzXG4gICAgICAgICAgICAgICAgaWZyYW1lLmNvbnRlbnRzKCkuZmluZCgnLnN1Ym1pdC1yb3cnKS5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgbm8gZ2l2ZW4gYnV0dG9ucyB3aXRoaW4gdGhlIHN1Ym1pdC1yb3cgYXJlYVxuICAgICAgICAgICAgICAgIC8vIHNjYW4gZGVlcGVyIHdpdGhpbiB0aGUgZm9ybSBpdHNlbGZcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IGlmcmFtZS5jb250ZW50cygpLmZpbmQoJ2JvZHk6bm90KC5jaGFuZ2UtbGlzdCkgI2NvbnRlbnQgZm9ybTplcSgwKScpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25zID0gcm93LmZpbmQoJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0sIGJ1dHRvblt0eXBlPVwic3VibWl0XCJdJyk7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMuYWRkQ2xhc3MoJ2RlbGV0ZWxpbmsnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbG9vcCBvdmVyIGlucHV0IGJ1dHRvbnNcbiAgICAgICAgICAgICAgICBidXR0b25zLmVhY2goZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAkKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmF0dHIoJ2RhdGEtcmVsJywgJ18nICsgaW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiBpdGVtIGlzIGEgaGlkZGVuIGlucHV0XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IGl0ZW0uYXR0cigndmFsdWUnKSB8fCBpdGVtLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNscyA9ICdjbXMtYnRuJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pcygnYnV0dG9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gaXRlbS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYWRkaXRpb25hbCBzcGVjaWFsIGNzcyBjbGFzc2VzXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc0NsYXNzKCdkZWZhdWx0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNscyA9ICdjbXMtYnRuIGNtcy1idG4tYWN0aW9uJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNDbGFzcygnZGVsZXRlbGluaycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHMgPSAnY21zLWJ0biBjbXMtYnRuLWNhdXRpb24nO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gJCgnPGEgaHJlZj1cIiNcIiBjbGFzcz1cIicgKyBjbHMgKyAnICcgKyBpdGVtLmF0dHIoJ2NsYXNzJykgKyAnXCI+JyArIHRpdGxlICsgJzwvYT4nKTtcblxuICAgICAgICAgICAgICAgICAgICBlbC5vbih0aGF0LmNsaWNrICsgJyAnICsgdGhhdC50b3VjaEVuZCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXMoJ2EnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2xvYWRJZnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGl0ZW0ucHJvcCgnaHJlZicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIG9ubHkgd2hlbiBibHVlIGFjdGlvbiBidXR0b25zIGFyZSB0cmlnZ2VyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc0NsYXNzKCdkZWZhdWx0JykgfHwgaXRlbS5oYXNDbGFzcygnZGVsZXRlbGluaycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtLmhhc0NsYXNzKCdkZWZhdWx0JykpIHsgLy8gaGlkZSBpZnJhbWUgd2hlbiB1c2luZyBidXR0b25zIG90aGVyIHRoYW4gc3VibWl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkubW9kYWwuZmluZCgnLmNtcy1tb2RhbC1mcmFtZSBpZnJhbWUnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhZ2UgaGFzIGJlZW4gc2F2ZWQgb3IgZGVsZXRlZCwgcnVuIGNoZWNrdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zYXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gc3VibWl0IGJ1dHRvbiB1c2VzIHRoZSBmb3JtJ3Mgc3VibWl0IGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaGlkZUZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzKCdpbnB1dCcpIHx8IGl0ZW0uaXMoJ2J1dHRvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB1c2UgbmF0aXZlIGAuY2xpY2soKWAgZXZlbnQgc3BlY2lmaWNhbGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXMgd2UgYXJlIGluc2lkZSBhbiBpZnJhbWUgYW5kIG1hZ2ljIGlzIGhhcHBlbmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1bMF0uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWwud3JhcChncm91cCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmFwcGVuZChlbC5wYXJlbnQoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBtYW51YWxseSBhZGQgY2FuY2VsIGJ1dHRvbiBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgY2FuY2VsLm9uKHRoYXQuY2xpY2ssIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLm9uQ2xvc2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNhbmNlbC53cmFwKGdyb3VwKTtcbiAgICAgICAgICAgICAgICByZW5kZXIuYXBwZW5kKGNhbmNlbC5wYXJlbnQoKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBwcmVwYXJlIGdyb3Vwc1xuICAgICAgICAgICAgICAgIHJlbmRlci5maW5kKCcuY21zLWJ0bi1ncm91cCcpLnVud3JhcCgpO1xuICAgICAgICAgICAgICAgIHRtcCA9IHJlbmRlci5maW5kKCcuY21zLWJ0bi1ncm91cCcpLmNsb25lKHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJlbmRlci5maW5kKCcuY21zLWJ0bi1ncm91cCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHJlbmRlci5hcHBlbmQodG1wLndyYXBBbGwoZ3JvdXAuY2xvbmUoKS5hZGRDbGFzcygnY21zLW1vZGFsLWl0ZW0tYnV0dG9ucy1sZWZ0JykpLnBhcmVudCgpKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbmRlciBidXR0b25zXG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbEJ1dHRvbnMuaHRtbChyZW5kZXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJzaW9uIHdoZXJlIHRoZSBtb2RhbCBsb2FkcyBhbiBpZnJhbWUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfbG9hZElmcmFtZVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy51cmwgdXJsIHRvIHJlbmRlciBpZnJhbWUsIHRha2VzIHByZXNlZGVuY2Ugb3ZlciBvcHRzLmh0bWxcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0W119IFtvcHRzLmJyZWFkY3J1bWJzXSBjb2xsZWN0aW9uIG9mIGJyZWFkY3J1bWIgaXRlbXNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy50aXRsZV0gbW9kYWwgd2luZG93IG1haW4gdGl0bGUgKGJvbGQpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9sb2FkSWZyYW1lOiBmdW5jdGlvbiBfbG9hZElmcmFtZShvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgb3B0cy51cmwgPSB0aGlzLm1ha2VVUkwob3B0cy51cmwpO1xuICAgICAgICAgICAgICAgIG9wdHMudGl0bGUgPSBvcHRzLnRpdGxlIHx8ICcnO1xuICAgICAgICAgICAgICAgIG9wdHMuYnJlYWRjcnVtYnMgPSBvcHRzLmJyZWFkY3J1bWJzIHx8ICcnO1xuXG4gICAgICAgICAgICAgICAgLy8gc2hvdyBsb2FkZXJcbiAgICAgICAgICAgICAgICBDTVMuQVBJLlRvb2xiYXIuc2hvd0xvYWRlcigpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGNsYXNzZXNcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsLnJlbW92ZUNsYXNzKCdjbXMtbW9kYWwtbWFya3VwJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbC5hZGRDbGFzcygnY21zLW1vZGFsLWlmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byByZW5kZXIgdGhlIGJyZWFkY3J1bWJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRCcmVhZGNydW1iKG9wdHMuYnJlYWRjcnVtYnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gbm93IHJlZnJlc2ggdGhlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICB2YXIgaG9sZGVyID0gdGhpcy51aS5mcmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gJCgnPGlmcmFtZSBzcmM9XCInICsgb3B0cy51cmwgKyAnXCIgY2xhc3M9XCJcIiBmcmFtZWJvcmRlcj1cIjBcIiAvPicpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGNvcnJlY3QgdGl0bGVcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGVQcmVmaXggPSB0aGlzLnVpLnRpdGxlUHJlZml4O1xuICAgICAgICAgICAgICAgIHZhciB0aXRsZVN1ZmZpeCA9IHRoaXMudWkudGl0bGVTdWZmaXg7XG5cbiAgICAgICAgICAgICAgICBpZnJhbWUuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIHRpdGxlUHJlZml4LnRleHQob3B0cy50aXRsZSB8fCAnJyk7XG4gICAgICAgICAgICAgICAgdGl0bGVTdWZmaXgudGV4dCgnJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgcHJldmlvdXMgaWZyYW1lIGlzIGhpZGRlblxuICAgICAgICAgICAgICAgIGhvbGRlci5maW5kKCdpZnJhbWUnKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgdGhhdC51aS5tb2RhbEJvZHkuYWRkQ2xhc3MoJ2Ntcy1sb2FkZXInKTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBsb2FkIGV2ZW50IGZvciBpZnJhbWUgdG8gcHJldmVudCBmbGlja2VyIGVmZmVjdHNcbiAgICAgICAgICAgICAgICBpZnJhbWUub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VMaXN0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJUaXRsZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJjO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGlmcmFtZSBjYW4gYmUgYWNjZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50cygpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPHN0cm9uZz4nICsgZXJyb3IgKyAnPC9zdHJvbmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBDTVMuTW9kYWwuX3NldHVwQ3RybEVudGVyU2F2ZShkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgIENNUy5Nb2RhbC5fc2V0dXBDdHJsRW50ZXJTYXZlKGlmcmFtZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGNrZWRpdG9yIHdlIG5lZWQgdG8gZ28gZGVlcGVyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpZnJhbWVbMF0uY29udGVudFdpbmRvdy5DTVMgJiYgaWZyYW1lWzBdLmNvbnRlbnRXaW5kb3cuQ01TLkNLRWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGlmcmFtZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0VGltZW91dCBpcyByZXF1aXJlZCB0byBiYXR0bGUgQ0tFZGl0b3IgaW5pdGlhbGlzYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVkaXRvciA9IGlmcmFtZVswXS5jb250ZW50V2luZG93LkNNUy5DS0VkaXRvci5lZGl0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZGl0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5vbignbG9hZGVkJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuTW9kYWwuX3NldHVwQ3RybEVudGVyU2F2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlLmVkaXRvci5jb250YWluZXIuJCkuZmluZCgnaWZyYW1lJylbMF0uY29udGVudFdpbmRvdy5kb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZGUgbG9hZGVyXG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5oaWRlTG9hZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBtZXNzYWdlcyBpbiB0b29sYmFyIGlmIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VMaXN0ID0gaWZyYW1lLmNvbnRlbnRzKCkuZmluZCgnLm1lc3NhZ2VsaXN0Jyk7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzID0gbWVzc2FnZUxpc3QuZmluZCgnbGknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlcy5lcSgwKS50ZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VMaXN0LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGlmcmFtZS5jb250ZW50cygpO1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gY29udGVudHMuZmluZCgnYm9keScpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGluamVjdCBjc3MgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAgYm9keS5hZGRDbGFzcygnY21zLWFkbWluIGNtcy1hZG1pbi1tb2RhbCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB3ZSBzaG91bGQgY2xvc2UgdGhlIG1vZGFsIG9yIHJlbG9hZFxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZXMubGVuZ3RoICYmIHRoYXQuZW5mb3JjZVJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5yZWxvYWRCcm93c2VyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCAmJiB0aGF0LmVuZm9yY2VDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkaW5nIGRqYW5nbyBoYWNrc1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50cy5maW5kKCcudmlld3NpdGVsaW5rJykuYXR0cigndGFyZ2V0JywgJ190b3AnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgbW9kYWwgYnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zZXRCdXR0b25zKCQodGhpcykpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gYW4gZXJyb3Igb2NjdXJzLCByZXNldCB0aGUgc2F2ZWQgc3RhdHVzIHNvIHRoZSBmb3JtIGNhbiBiZSBjaGVja2VkIGFuZCB2YWxpZGF0ZWQgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlmcmFtZS5jb250ZW50cygpLmZpbmQoJy5lcnJvcm5vdGUnKS5sZW5ndGggfHwgaWZyYW1lLmNvbnRlbnRzKCkuZmluZCgnLmVycm9ybGlzdCcpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zYXZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgd2luZG93IGhhcyBiZWVuIGNoYW5nZWQgcHJlc3NpbmcgdGhlIGJsdWUgb3IgcmVkIGJ1dHRvbiwgd2UgbmVlZCB0byBydW4gYSByZWxvYWQgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyBjaGVjayB0aGF0IG5vIGRlbGV0ZS1jb25maXJtYXRpb24gaXMgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuc2F2ZWQgJiYgIWNvbnRlbnRzLmZpbmQoJy5kZWxldGUtY29uZmlybWF0aW9uJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlbG9hZEJyb3dzZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLm9uQ2xvc2UgPyB0aGF0Lm9wdGlvbnMub25DbG9zZSA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRpdGxlIG9mIG5vdCBwcm92aWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJUaXRsZSA9IGlmcmFtZS5jb250ZW50cygpLmZpbmQoJyNjb250ZW50IGgxOmVxKDApJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2Ugd2hlbiB0aGVyZSBpcyBubyBwcmVmaXhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnRpdGxlID09PSB1bmRlZmluZWQgJiYgdGhhdC51aS50aXRsZVByZWZpeC50ZXh0KCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmMgPSBpZnJhbWUuY29udGVudHMoKS5maW5kKCcuYnJlYWRjcnVtYnMnKS5jb250ZW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkudGl0bGVQcmVmaXgudGV4dChiYy5lcShiYy5sZW5ndGggLSAxKS50ZXh0KCkucmVwbGFjZSgn4oC6JywgJycpLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZVByZWZpeC50ZXh0KCkudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlUHJlZml4LnRleHQoaW5uZXJUaXRsZS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZVN1ZmZpeC50ZXh0KGlubmVyVGl0bGUudGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyVGl0bGUucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoYW4gc2hvd1xuICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVuZCByZWFkeSBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lLmRhdGEoJ3JlYWR5JywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBjbG9zZSBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5vbigna2V5ZG93bi5jbXMnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IENNUy5LRVlTLkVTQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpZ3VyZSBvdXQgaWYgLm9iamVjdC10b29scyBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50cy5maW5kKCcub2JqZWN0LXRvb2xzJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMuZmluZCgnI2NvbnRlbnQnKS5jc3MoJ3BhZGRpbmctdG9wJywgMzgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBpbmplY3RcbiAgICAgICAgICAgICAgICBob2xkZXIuaHRtbChpZnJhbWUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJzaW9uIHdoZXJlIHRoZSBtb2RhbCBsb2FkcyBhbiB1cmwgd2l0aGluIGFuIGlmcmFtZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9jaGFuZ2VJZnJhbWVcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWwgb3JpZ2luYXRlZCBlbGVtZW50XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9jaGFuZ2VJZnJhbWU6IGZ1bmN0aW9uIF9jaGFuZ2VJZnJhbWUoZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50cyA9IGVsLnBhcmVudCgpLmZpbmQoJ2EnKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRzLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRJZnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS50aXRsZVByZWZpeC50ZXh0KGVsLnRleHQoKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcnNpb24gd2hlcmUgdGhlIG1vZGFsIGxvYWRzIGh0bWwgbWFya3VwLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2xvYWRNYXJrdXBcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8SFRNTE5vZGV8alF1ZXJ5fSBvcHRzLmh0bWwgaHRtbCBtYXJrdXAgdG8gcmVuZGVyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy50aXRsZSBtb2RhbCB3aW5kb3cgbWFpbiB0aXRsZSAoYm9sZClcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdWJ0aXRsZV0gbW9kYWwgd2luZG93IHNlY29uZGFyeSB0aXRsZSAobm9ybWFsKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfbG9hZE1hcmt1cDogZnVuY3Rpb24gX2xvYWRNYXJrdXAob3B0cykge1xuICAgICAgICAgICAgICAgIHRoaXMudWkubW9kYWwucmVtb3ZlQ2xhc3MoJ2Ntcy1tb2RhbC1pZnJhbWUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLm1vZGFsLmFkZENsYXNzKCdjbXMtbW9kYWwtbWFya3VwJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5tb2RhbEJvZHkucmVtb3ZlQ2xhc3MoJ2Ntcy1sb2FkZXInKTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBjb250ZW50XG4gICAgICAgICAgICAgICAgLy8gZW1wdHkgdG8gcmVtb3ZlIGV2ZW50cywgYXBwZW5kIHRvIGtlZXAgZXZlbnRzXG4gICAgICAgICAgICAgICAgdGhpcy51aS5mcmFtZS5lbXB0eSgpLmFwcGVuZChvcHRzLmh0bWwpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkudGl0bGVQcmVmaXgudGV4dChvcHRzLnRpdGxlIHx8ICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRpdGxlU3VmZml4LnRleHQob3B0cy5zdWJ0aXRsZSB8fCAnJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIF9kZWxldGVQbHVnaW4gcmVtb3ZlcyBhIHBsdWdpbiBvbmNlIGNyZWF0ZWQgd2hlbiBjbGlja2luZ1xuICAgICAgICAgICAgICogb24gZGVsZXRlIG9yIHRoZSBjbG9zZSBpdGVtLiBJZiB3ZSBkb24ndCBkbyB0aGlzLCBhbiBlbXB0eVxuICAgICAgICAgICAgICogcGx1Z2luIGlzIGdlbmVyYXRlZFxuICAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2RpdmlvL2RqYW5nby1jbXMvcHVsbC80MzgxIHdpbGwgZXZlbnR1YWxseVxuICAgICAgICAgICAgICogcHJvdmlkZSBhIGJldHRlciBzb2x1dGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2RlbGV0ZVBsdWdpblxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gZ2VuZXJhbCBvYmplY3RzIGVsZW1lbnQgdGhhdCBob2xkcyBzZXR0aW5nc1xuICAgICAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5oaWRlQWZ0ZXJdIGhpZGVzIHRoZSBtb2RhbCBhZnRlciB0aGUgYWpheCByZXF1ZXN0cyBzdWNjZWVkc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfZGVsZXRlUGx1Z2luOiBmdW5jdGlvbiBfZGVsZXRlUGx1Z2luKG9wdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBDTVMuX25ld1BsdWdpbjtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdCA9ICd7IFwiY3NyZm1pZGRsZXdhcmV0b2tlblwiOiBcIicgKyBDTVMuY29uZmlnLmNzcmYgKyAnXCIgfSc7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBDTVMuY29uZmlnLmxhbmcuY29uZmlybUVtcHR5LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICd7MX0nLCBDTVMuX25ld1BsdWdpbi5icmVhZGNydW1iW0NNUy5fbmV3UGx1Z2luLmJyZWFkY3J1bWIubGVuZ3RoIC0gMV0udGl0bGVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBhbiBhamF4IHJlcXVlc3RcbiAgICAgICAgICAgICAgICByZXR1cm4gQ01TLkFQSS5Ub29sYmFyLm9wZW5BamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBkYXRhWydkZWxldGUnXSxcbiAgICAgICAgICAgICAgICAgICAgcG9zdDogcG9zdCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5fbmV3UGx1Z2luID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cyAmJiBvcHRzLmhpZGVBZnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2hpZGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdXAga2V5dXAva2V5ZG93biBsaXN0ZW5lcnMgc28geW91J3JlIGFibGUgdG8gc2F2ZSB3aGF0ZXZlciB5b3UncmVcbiAgICAgICAgICogZWRpdGluZyBpbnNpZGUgb2YgYW4gaWZyYW1lIGJ5IHByZXNzaW5nIGBjdHJsICsgZW50ZXJgIG9uIHdpbmRvd3MgYW5kIGBjbWQgKyBlbnRlcmAgb24gbWFjLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCBvbmx5IHdvcmtzIHdpdGggZGVmYXVsdCBidXR0b24gKGUuZy4gYWN0aW9uKSwgbm90IHRoZSBgZGVsZXRlYCBidXR0b24sXG4gICAgICAgICAqIGV2ZW4gdGhvdWdoIHNvbWV0aW1lcyBpdCdzIHRoZSBvbmx5IGFjdGlvbmFibGUgYnV0dG9uIGluIHRoZSBtb2RhbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1ldGhvZCBfc2V0dXBDdHJsRW50ZXJTYXZlXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZG9jdW1lbnQgZG9jdW1lbnQgZWxlbWVudCAoaWZyYW1lIG9yIHBhcmVudCB3aW5kb3cpO1xuICAgICAgICAgKi9cbiAgICAgICAgQ01TLk1vZGFsLl9zZXR1cEN0cmxFbnRlclNhdmUgPSBmdW5jdGlvbiBfc2V0dXBDdHJsRW50ZXJTYXZlKGRvYykge1xuICAgICAgICAgICAgdmFyIGNtZFByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBtYWMgPSAobmF2aWdhdG9yLnBsYXRmb3JtLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignbWFjJykgKyAxKTtcblxuICAgICAgICAgICAgJChkb2MpLm9uKCdrZXlkb3duLmNtcy5zdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBDTVMuS0VZUy5FTlRFUiAmJiAhbWFjKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5jbXMtbW9kYWwtYnV0dG9ucyAuY21zLWJ0bi1hY3Rpb246Zmlyc3QnKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gQ01TLktFWVMuQ01EX0xFRlQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUua2V5Q29kZSA9PT0gQ01TLktFWVMuQ01EX1JJR0hUIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPT09IENNUy5LRVlTLkNNRF9GSVJFRk9YKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWRQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IENNUy5LRVlTLkVOVEVSICYmIGNtZFByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5jbXMtbW9kYWwtYnV0dG9ucyAuY21zLWJ0bi1hY3Rpb246Zmlyc3QnKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkub24oJ2tleXVwLmNtcy5zdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChtYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gQ01TLktFWVMuQ01EX0xFRlQgfHwgZS5rZXlDb2RlID09PSBDTVMuS0VZUy5DTURfUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZFByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG4gICAgfSk7XG5cbn0pKENNUy4kKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgaHR0cHM6Ly9naXRodWIuY29tL2RpdmlvL2RqYW5nby1jbXNcbiAqL1xuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gTkFNRVNQQUNFU1xuLyoqXG4gKiBAbW9kdWxlIENNU1xuICovXG52YXIgQ01TID0gd2luZG93LkNNUyB8fCB7fTtcblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFNJREVGUkFNRVxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gc2hvcnRoYW5kIGZvciBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCk7XG4gICAgJChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2lkZWZyYW1lIGlzIHRyaWdnZXJlZCB2aWEgQVBJIGNhbGxzIGZyb20gdGhlIGJhY2tlbmQgZWl0aGVyXG4gICAgICAgICAqIHRocm91Z2ggdGhlIHRvb2xiYXIgbmF2aWdhdGlvbiBvciBmcm9tIHBsdWdpbnMuIFRoZSBBUElzIG9ubHkgYWxsb3cgdG9cbiAgICAgICAgICogb3BlbiBhIHVybCB3aXRoaW4gdGhlIHNpZGVmcmFtZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNsYXNzIFNpZGVmcmFtZVxuICAgICAgICAgKiBAbmFtZXNwYWNlIENNU1xuICAgICAgICAgKiBAdXNlcyBDTVMuQVBJLkhlbHBlcnNcbiAgICAgICAgICovXG4gICAgICAgIENNUy5TaWRlZnJhbWUgPSBuZXcgQ01TLkNsYXNzKHtcblxuICAgICAgICAgICAgaW1wbGVtZW50OiBbQ01TLkFQSS5IZWxwZXJzXSxcblxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIG9uQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNpZGVmcmFtZUR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICAgICAgc2lkZWZyYW1lV2lkdGg6IDAuOCAvLyBtYXRjaGVzIDgwJSBvZiB3aW5kb3cgd2lkdGhcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudHNcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cFVJKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzdGF0ZXMgYW5kIGV2ZW50c1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpY2sgPSAnY2xpY2suY21zLnNpZGVmcmFtZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93biA9ICdwb2ludGVyZG93bi5jbXMuc2lkZWZyYW1lIGNvbnRleHRtZW51LmNtcy5zaWRlZnJhbWUnO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclVwID0gJ3BvaW50ZXJ1cC5jbXMuc2lkZWZyYW1lIHBvaW50ZXJjYW5jZWwuY21zLnNpZGVmcmFtZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyTW92ZSA9ICdwb2ludGVybW92ZS5jbXMuc2lkZWZyYW1lJztcbiAgICAgICAgICAgICAgICB0aGlzLmVuZm9yY2VSZWxvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzUmVmcmVzaFRpbWVyID0gNjAwO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdG9yZXMgYWxsIGpRdWVyeSByZWZlcmVuY2VzIHdpdGhpbiBgdGhpcy51aWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBVSVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwVUk6IGZ1bmN0aW9uIF9zZXR1cFVJKCkge1xuICAgICAgICAgICAgICAgIHZhciBzaWRlZnJhbWUgPSAkKCcuY21zLXNpZGVmcmFtZScpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZGVmcmFtZTogc2lkZWZyYW1lLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAkKCdodG1sJyksXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdzogJCh3aW5kb3cpLFxuICAgICAgICAgICAgICAgICAgICBkaW1tZXI6IHNpZGVmcmFtZS5maW5kKCcuY21zLXNpZGVmcmFtZS1kaW1tZXInKSxcbiAgICAgICAgICAgICAgICAgICAgY2xvc2U6IHNpZGVmcmFtZS5maW5kKCcuY21zLXNpZGVmcmFtZS1jbG9zZScpLFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IHNpZGVmcmFtZS5maW5kKCcuY21zLXNpZGVmcmFtZS1yZXNpemUnKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWU6IHNpZGVmcmFtZS5maW5kKCcuY21zLXNpZGVmcmFtZS1mcmFtZScpLFxuICAgICAgICAgICAgICAgICAgICBzaGltOiBzaWRlZnJhbWUuZmluZCgnLmNtcy1zaWRlZnJhbWUtc2hpbScpLFxuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5QmFjazogc2lkZWZyYW1lLmZpbmQoJy5jbXMtc2lkZWZyYW1lLWhpc3RvcnkgLmNtcy1pY29uLWFycm93LWJhY2snKSxcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeUZvcndhcmQ6IHNpZGVmcmFtZS5maW5kKCcuY21zLXNpZGVmcmFtZS1oaXN0b3J5IC5jbXMtaWNvbi1hcnJvdy1mb3J3YXJkJylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXRzIHVwIGFsbCB0aGUgZXZlbnQgaGFuZGxlcnMsIHN1Y2ggYXMgY2xvc2luZyBhbmQgcmVzaXppbmcuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfZXZlbnRzXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfZXZlbnRzOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gc2V0IHRoZSBoaXN0b3J5IHN0YXRlIG9uIGV2ZW50IGNyZWF0aW9uXG4gICAgICAgICAgICAgICAgLy8gdG8gZW5zdXJlIHdlIHN0YXJ0IHdpdGggY2xlYW4gc3RhdGVzIGluIG5ldyBpbnN0YW5jZXNcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2s6IFtdLFxuICAgICAgICAgICAgICAgICAgICBmb3J3YXJkOiBbXVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVpLmNsb3NlLm9mZih0aGlzLmNsaWNrKS5vbih0aGlzLmNsaWNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHRoZSByZXNpemUgZXZlbnQgYXR0YWNoZXMgYW4gb2ZmIGV2ZW50IHRvIHRoZSBib2R5XG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgaGFuZGxlZCB3aXRoaW4gX3N0YXJ0UmVzaXplKClcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnJlc2l6ZS5vZmYodGhpcy5wb2ludGVyRG93bikub24odGhpcy5wb2ludGVyRG93biwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zdGFydFJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gY2xvc2Ugc2lkZWZyYW1lIHdoZW4gY2xpY2tpbmcgb24gdGhlIGRpbW1lclxuICAgICAgICAgICAgICAgIHRoaXMudWkuZGltbWVyLm9mZih0aGlzLmNsaWNrKS5vbih0aGlzLmNsaWNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBldmVudHMgdG8gdGhlIGJhY2sgYnV0dG9uXG4gICAgICAgICAgICAgICAgdGhpcy51aS5oaXN0b3J5QmFjay5vZmYodGhpcy5jbGljaykub24odGhpcy5jbGljaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC51aS5oaXN0b3J5QmFjay5oYXNDbGFzcygnY21zLWljb24tZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2dvVG9IaXN0b3J5KCdiYWNrJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhdHRhY2ggZXZlbnRzIHRvIHRoZSBmb3J3YXJkIGJ1dHRvblxuICAgICAgICAgICAgICAgIHRoaXMudWkuaGlzdG9yeUZvcndhcmQub2ZmKHRoaXMuY2xpY2spLm9uKHRoaXMuY2xpY2ssIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQudWkuaGlzdG9yeUZvcndhcmQuaGFzQ2xhc3MoJ2Ntcy1pY29uLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9nb1RvSGlzdG9yeSgnZm9yd2FyZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcGVucyBhIGdpdmVuIHVybCB3aXRoaW4gYSBzaWRlZnJhbWUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBvcGVuXG4gICAgICAgICAgICAgKiBAY2hhaW5hYmxlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdHMudXJsIHVybCB0byByZW5kZXIgaWZyYW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmFuaW1hdGVdIHNob3VsZCBtb2RhbCBiZSBhbmltYXRlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBvcGVuOiBmdW5jdGlvbiBvcGVuKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShvcHRzICYmIG9wdHMudXJsKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhcmd1bWVudHMgcGFzc2VkIHRvIFwib3BlblwiIHdlcmUgaW52YWxpZC4nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gb3B0cy51cmw7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGUgPSBvcHRzLmFuaW1hdGU7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXR1cCBpbnRlcm5hbHNcbiAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSAnbGFuZ3VhZ2U9JyArIENNUy5jb25maWcucmVxdWVzdC5sYW5ndWFnZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFnZV9pZCA9ICdwYWdlX2lkPScgKyBDTVMuY29uZmlnLnJlcXVlc3QucGFnZV9pZDtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRXaWR0aCA9IHRoaXMudWkuc2lkZWZyYW1lLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNGcmFtZVZpc2libGUgPSB0aGlzLnVpLnNpZGVmcmFtZS5pcygnOnZpc2libGUnKTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgcmF0aW8gZm9yIGJpZ2dlciBkZXZpY2VzIHRoYW4gbW9iaWxlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudWkuYm9keS53aWR0aCgpID49IENNUy5CUkVBS1BPSU5UUy5tb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBDTVMuc2V0dGluZ3Muc2lkZWZyYW1lLnBvc2l0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLnNpZGVmcmFtZVdpZHRoICogMTAwICsgJyUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIHJlYmluZCBldmVudHMgZXZlcnkgdGltZSB3ZSBvcGVuIGEgc2lkZWZyYW1lXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGUgZXZlbnQgaGFuZGxlcnMgY29udGFpbiByZWZlcmVuY2VzIHRvIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIC8vIGFuZCBzaW5jZSB3ZSByZXVzZSB0aGUgc2FtZSBtYXJrdXAgd2UgbmVlZCB0byB1cGRhdGVcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGluc3RhbmNlIHJlZmVyZW5jZSBldmVyeSB0aW1lLlxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2hvdyBkaW1tZXIgZXZlbiBiZWZvcmUgaWZyYW1lIGlzIGxvYWRlZFxuICAgICAgICAgICAgICAgIHRoaXMudWkuZGltbWVyLnNob3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmZyYW1lLmFkZENsYXNzKCdjbXMtbG9hZGVyJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBzaG93IGxvYWRlclxuICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJICYmIENNUy5BUEkuVG9vbGJhcikge1xuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLlRvb2xiYXIuc2hvd0xvYWRlcigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gbW9kaWZ5IHRoZSB1cmwgYXBwcm9wcmlhdGVseSB0byBwYXNzXG4gICAgICAgICAgICAgICAgLy8gbGFuZ3VhZ2UgYW5kIHBhZ2UgdG8gdGhlIHBhcmFtc1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihDTVMuY29uZmlnLnJlcXVlc3QudHJlZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ01TLmNvbmZpZy5yZXF1ZXN0Lmxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChsYW5ndWFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKENNUy5jb25maWcucmVxdWVzdC5wYWdlX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChwYWdlX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHVybCA9IHRoaXMubWFrZVVSTCh1cmwsIHBhcmFtcyk7XG5cbiAgICAgICAgICAgICAgICAvLyBsb2FkIHRoZSBpZnJhbWVcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50KHVybCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgYW5pbWF0aW9uIGlmIHNpZGVmcmFtZSBpcyBhbHJlYWR5IHNob3duXG4gICAgICAgICAgICAgICAgaWYgKGlzRnJhbWVWaXNpYmxlICYmIGN1cnJlbnRXaWR0aCA8IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIGhhcyBwZXJmb3JtZWQgYW4gYWN0aW9uIHRoYXQgcmVxdWlyZXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpZGVmcmFtZSB0byBiZSBzaG93biwgdGhpcyBpbnRlbnQgb3V0d2VpZ2hzIGFueVxuICAgICAgICAgICAgICAgICAgICAvLyBwcmV2aW91cyBpbnRlbnQgdG8gbWluaW1pemUgdGhlIGZyYW1lLlxuICAgICAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3Muc2lkZWZyYW1lLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0ZyYW1lVmlzaWJsZSAmJiBNYXRoLnJvdW5kKGN1cnJlbnRXaWR0aCkgPT09IE1hdGgucm91bmQod2lkdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGgucm91bmQgYmVjYXVzZSBzdWJwaXhlbCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNob3cgaWZyYW1lXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvdyh3aWR0aCwgYW5pbWF0ZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGFuZGxlcyBjb250ZW50IHJlcGxhY2VtZW50IG1lY2hhbmlzbXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfY29udGVudFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgdmFsaWQgdXJpIHRvIHBhc3Mgb24gdGhlIGlmcmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfY29udGVudDogZnVuY3Rpb24gX2NvbnRlbnQodXJsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz1cIicgKyB1cmwgKyAnXCIgY2xhc3M9XCJcIiBmcmFtZWJvcmRlcj1cIjBcIiAvPicpO1xuICAgICAgICAgICAgICAgIHZhciBob2xkZXIgPSB0aGlzLnVpLmZyYW1lO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50cztcbiAgICAgICAgICAgICAgICB2YXIgYm9keTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBsb2FkIGV2ZW50IHRvIGlmcmFtZVxuICAgICAgICAgICAgICAgIGlmcmFtZS5oaWRlKCkub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gaWZyYW1lLmNvbnRlbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBjb250ZW50cy5maW5kKCdib2R5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW5qZWN0IGNzcyBjbGFzc1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFkZENsYXNzKCdjbXMtYWRtaW4gY21zLWFkbWluLXNpZGVmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBsb2FkZXJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5mcmFtZS5yZW1vdmVDbGFzcygnY21zLWxvYWRlcicpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGFuIHNob3dcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnNob3coKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgZGVidWcgaW5mb3NcbiAgICAgICAgICAgICAgICAgICAgaWYgKENNUy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50cygpLmZpbmQoJ2JvZHknKS5hZGRDbGFzcygnY21zLWRlYnVnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHVybCBpbiBzZXR0aW5nc1xuICAgICAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3Muc2lkZWZyYW1lLnVybCA9IGlmcmFtZS5wcm9wKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzID0gdGhhdC5zZXRTZXR0aW5ncyhDTVMuc2V0dGluZ3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJpbmQgZXh0cmEgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGJvZHkub24odGhhdC5jbGljaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcih0aGF0LmNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIGNsb3NlIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGJvZHkub24oJ2tleWRvd24uY21zJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IENNUy5LRVlTLkVTQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkaW5nIGRqYW5nbyBoYWNrc1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50cy5maW5kKCcudmlld3NpdGVsaW5rJykuYXR0cigndGFyZ2V0JywgJ190b3AnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgaGlzdG9yeVxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9hZGRUb0hpc3RvcnkodGhpcy5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gaW5qZWN0IGlmcmFtZVxuICAgICAgICAgICAgICAgIGhvbGRlci5odG1sKGlmcmFtZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFuaW1hdGlvbiBoZWxwZXIgZm9yIG9wZW5pbmcgdGhlIHNpZGVmcmFtZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zaG93XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIHdpZHRoIHRoYXQgdGhlIGlmcmFtZXMgb3BlbnMgdG9cbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYW5pbWF0ZV0gQW5pbWF0aW9uIGR1cmF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zaG93OiBmdW5jdGlvbiBfc2hvdyh3aWR0aCwgYW5pbWF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMudWkuc2lkZWZyYW1lLnNob3coKTtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHNpZGVmcmFtZSBzaG91bGQgYmUgaGlkZGVuXG4gICAgICAgICAgICAgICAgaWYgKENNUy5zZXR0aW5ncy5zaWRlZnJhbWUuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgZG8gbm9ybWFsIGJlaGF2aW91clxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkuc2lkZWZyYW1lLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMuc2lkZWZyYW1lRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkuc2lkZWZyYW1lLmNzcygnd2lkdGgnLCB3aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHdpZHRoIGlmIGxhcmdlciB0aGFuIGF2YWlsYWJsZSBzcGFjZVxuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPj0gJCh3aW5kb3cpLndpZHRoKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkuc2lkZWZyYW1lLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICQod2luZG93KS53aWR0aCgpIC0gMzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIEFQSSBoYW5kbGVyc1xuICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJICYmIENNUy5BUEkuVG9vbGJhcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRTogaW5pdGlhbGl6YXRpb24gbmVlZHMgdG8gYmUgZG9uZSBhZnRlciBvdXIgbGlicyBhcmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5oaWRlTG9hZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5fbG9jayh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgZXNjIGNsb3NlIGV2ZW50XG4gICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5Lm9mZigna2V5ZG93bi5jbXMuY2xvc2UnKS5vbigna2V5ZG93bi5jbXMuY2xvc2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBDTVMuS0VZUy5FU0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy5vbkNsb3NlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBzY3JvbGxpbmcgZm9yIHRvdWNoXG4gICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5LmFkZENsYXNzKCdjbXMtcHJldmVudC1zY3JvbGxpbmcnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2xvc2VzIHRoZSBjdXJyZW50IGluc3RhbmNlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgY2xvc2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICAgICAgIC8vIGhpZGUgZGltbWVyIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgdGhpcy51aS5kaW1tZXIuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzLnNpZGVmcmFtZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5vcHRpb25zLnNpZGVmcmFtZVdpZHRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MgPSB0aGlzLnNldFNldHRpbmdzKENNUy5zZXR0aW5ncyk7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgcmVsb2FkaW5nXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRCcm93c2VyKHRoaXMub3B0aW9ucy5vbkNsb3NlLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGhpZGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy5faGlkZSh7IGR1cmF0aW9uOiAwIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBbmltYXRpb24gaGVscGVyIGZvciBjbG9zaW5nIHRoZSBpZnJhbWUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfaGlkZVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5kdXJhdGlvbiBhbmltYXRpb24gZHVyYXRpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2hpZGU6IGZ1bmN0aW9uIF9oaWRlKG9wdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLm9wdGlvbnMuc2lkZWZyYW1lRHVyYXRpb247XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IG9wdHMuZHVyYXRpb247XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5zaWRlZnJhbWUuYW5pbWF0ZSh7IHdpZHRoOiAwIH0sIGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuZnJhbWUucmVtb3ZlQ2xhc3MoJ2Ntcy1sb2FkZXInKTtcblxuICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJICYmIENNUy5BUEkuVG9vbGJhcikge1xuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLlRvb2xiYXIuX2xvY2soZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5vZmYoJ2tleWRvd24uY21zLmNsb3NlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBlbmFibGUgc2Nyb2xsaW5nIGFnYWluXG4gICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5LnJlbW92ZUNsYXNzKCdjbXMtcHJldmVudC1zY3JvbGxpbmcnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdGlhdGVzIHRoZSBzdGFydCByZXNpemUgZXZlbnQgZnJvbSBgX2V2ZW50c2AuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc3RhcnRSZXNpemVcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zdGFydFJlc2l6ZTogZnVuY3Rpb24gX3N0YXJ0UmVzaXplKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgb3V0ZXJPZmZzZXQgPSAzMDtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBldmVudCBmb3Igc3RvcHBpbmdcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkub24odGhpcy5wb2ludGVyVXAsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fc3RvcFJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBwcmV2ZW50cyB0aGUgaWZyYW1lIGZyb20gYmVpbmcgZm9jdXNhYmxlXG4gICAgICAgICAgICAgICAgdGhpcy51aS5zaGltLmNzcygnei1pbmRleCcsIDIwKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5hdHRyKCdkYXRhLXRvdWNoLWFjdGlvbicsICdub25lJykub24odGhpcy5wb2ludGVyTW92ZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5jbGllbnRYIDw9IDMyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmNsaWVudFggPSAzMjA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5jbGllbnRYID49ICQod2luZG93KS53aWR0aCgpIC0gb3V0ZXJPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5jbGllbnRYID0gJCh3aW5kb3cpLndpZHRoKCkgLSBvdXRlck9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudWkuc2lkZWZyYW1lLmNzcygnd2lkdGgnLCBlLm9yaWdpbmFsRXZlbnQuY2xpZW50WCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIENNUy5zZXR0aW5ncy5zaWRlZnJhbWUucG9zaXRpb24gPSBlLm9yaWdpbmFsRXZlbnQuY2xpZW50WDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHBvc2l0aW9uIGludG8gb3VyIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MgPSB0aGF0LnNldFNldHRpbmdzKENNUy5zZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoYXQuc2V0dGluZ3NSZWZyZXNoVGltZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbml0aWF0ZXMgdGhlIHN0b3AgcmVzaXplIGV2ZW50IGZyb20gYF9zdGFydFJlc2l6ZWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc3RvcFJlc2l6ZVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3N0b3BSZXNpemU6IGZ1bmN0aW9uIF9zdG9wUmVzaXplKCkge1xuICAgICAgICAgICAgICAgIHRoaXMudWkuc2hpbS5jc3MoJ3otaW5kZXgnLCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHlcbiAgICAgICAgICAgICAgICAgICAgLm9mZih0aGlzLnBvaW50ZXJVcClcbiAgICAgICAgICAgICAgICAgICAgLm9mZih0aGlzLnBvaW50ZXJNb3ZlKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS10b3VjaC1hY3Rpb24nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0cmlldmVzIHRoZSBoaXN0b3J5IHN0YXRlcyBmcm9tIGB0aGlzLmhpc3RvcnlgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2dvVG9IaXN0b3J5XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgY2FuIGJlIGVpdGhlciBgYmFja2Agb3IgYGZvcndhcmRgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9nb1RvSGlzdG9yeTogZnVuY3Rpb24gX2dvVG9IaXN0b3J5KHR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gdGhpcy51aS5mcmFtZS5maW5kKCdpZnJhbWUnKTtcbiAgICAgICAgICAgICAgICB2YXIgdG1wO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdiYWNrJykge1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgbGF0ZXN0IGVudHJ5ICh3aGljaCBpcyB0aGUgY3VycmVudCBzaXRlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkuZm9yd2FyZC5wdXNoKHRoaXMuaGlzdG9yeS5iYWNrLnBvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLmF0dHIoJ3NyYycsIHRoaXMuaGlzdG9yeS5iYWNrW3RoaXMuaGlzdG9yeS5iYWNrLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IHRoaXMuaGlzdG9yeS5mb3J3YXJkLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkuYmFjay5wdXNoKHRtcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5hdHRyKCdzcmMnLCB0bXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnlCdXR0b25zKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0b3JlcyB0aGUgaGlzdG9yeSBzdGF0ZXMgaW4gYHRoaXMuaGlzdG9yeWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfYWRkVG9IaXN0b3J5XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCB1cmwgdG8gYmUgc3RvcmVkIGluIGB0aGlzLmhpc3RvcnkuYmFja2BcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2FkZFRvSGlzdG9yeTogZnVuY3Rpb24gX2FkZFRvSGlzdG9yeSh1cmwpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gdGhpcy51aS5mcmFtZS5maW5kKCdpZnJhbWUnKTtcblxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gdXBkYXRlIGhpc3RvcnkgZmlyc3RcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkuYmFjay5wdXNoKHVybCk7XG4gICAgICAgICAgICAgICAgLy8gYW5kIHRoYW4gc2V0IGxvY2FsIHZhcmlhYmxlc1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmhpc3RvcnkuYmFjay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAvLyBzdG9yZSBjdXJyZW50IHVybCBpZiBhcnJheSBpcyBlbXB0eVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpc3RvcnkuYmFjay5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkuYmFjay5wdXNoKGlmcmFtZS5hdHRyKCdzcmMnKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGR1cGxpY2F0ZXNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5LmJhY2tbbGVuZ3RoIC0gMV0gPT09IHRoaXMuaGlzdG9yeS5iYWNrW2xlbmd0aCAtIDJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5iYWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnlCdXR0b25zKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIGNvcnJlY3Qgc3RhdGVzIGZvciB0aGUgaGlzdG9yeSBVSSBlbGVtZW50cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF91cGRhdGVIaXN0b3J5QnV0dG9uc1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3VwZGF0ZUhpc3RvcnlCdXR0b25zOiBmdW5jdGlvbiBfdXBkYXRlSGlzdG9yeUJ1dHRvbnMoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGlzdG9yeS5iYWNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5oaXN0b3J5QmFjay5yZW1vdmVDbGFzcygnY21zLWljb24tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLmhpc3RvcnlCYWNrLmFkZENsYXNzKCdjbXMtaWNvbi1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpc3RvcnkuZm9yd2FyZC5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLmhpc3RvcnlGb3J3YXJkLnJlbW92ZUNsYXNzKCdjbXMtaWNvbi1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkuaGlzdG9yeUZvcndhcmQuYWRkQ2xhc3MoJ2Ntcy1pY29uLWRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0pO1xufSkoQ01TLiQpO1xuIiwiLypcbiAqIENvcHlyaWdodCBodHRwczovL2dpdGh1Yi5jb20vZGl2aW8vZGphbmdvLWNtc1xuICovXG5cbi8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBOQU1FU1BBQ0VTXG4vKipcbiAqIEBtb2R1bGUgQ01TXG4gKi9cbnZhciBDTVMgPSB3aW5kb3cuQ01TIHx8IHt9O1xuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gQ2xpcGJvYXJkXG4oZnVuY3Rpb24gKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBzaG9ydGhhbmQgZm9yIGpRdWVyeShkb2N1bWVudCkucmVhZHkoKTtcbiAgICAkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgY29weSAmIHBhc3RlIGluIHRoZSBzdHJ1Y3R1cmVib2FyZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNsYXNzIENsaXBib2FyZFxuICAgICAgICAgKiBAbmFtZXNwYWNlIENNU1xuICAgICAgICAgKiBAdXNlcyBDTVMuQVBJLkhlbHBlcnNcbiAgICAgICAgICovXG4gICAgICAgIENNUy5DbGlwYm9hcmQgPSBuZXcgQ01TLkNsYXNzKHtcblxuICAgICAgICAgICAgaW1wbGVtZW50OiBbQ01TLkFQSS5IZWxwZXJzXSxcblxuICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwVUkoKTtcblxuICAgICAgICAgICAgICAgIC8vIHN0YXRlc1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpY2sgPSAnY2xpY2suY21zLmNsaXBib2FyZCc7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXR1cCBldmVudHNcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FjaGVzIGFsbCB0aGUgalF1ZXJ5IGVsZW1lbnQgcXVlcmllcy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zZXR1cFVJXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0dXBVSTogZnVuY3Rpb24gX3NldHVwVUkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsaXBib2FyZCA9ICQoJy5jbXMtY2xpcGJvYXJkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xpcGJvYXJkOiBjbGlwYm9hcmQsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJzOiAkKCcuY21zLWNsaXBib2FyZC10cmlnZ2VyIGEnKSxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclJlbW92ZTogJCgnLmNtcy1jbGlwYm9hcmQtZW1wdHkgYScpLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zTGlzdDogY2xpcGJvYXJkLmZpbmQoJy5jbXMtY2xpcGJvYXJkLWNvbnRhaW5lcnMnKSxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ6ICQoZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBldmVudCBoYW5kbGVycyBmb3IgY2xpcGJvYXJkIHVpLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2V2ZW50c1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2V2ZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBNSU5fV0lEVEggPSA0MDA7XG4gICAgICAgICAgICAgICAgLy8gRklYTUUga2luZCBvZiBhIG1hZ2ljIG51bWJlciBmb3IgMSBpdGVtIGluIGNsaXBib2FyZFxuICAgICAgICAgICAgICAgIHZhciBNSU5fSEVJR0hUID0gMTE3O1xuXG4gICAgICAgICAgICAgICAgdGhhdC5tb2RhbCA9IG5ldyBDTVMuTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogTUlOX1dJRFRILFxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IE1JTl9IRUlHSFQsXG4gICAgICAgICAgICAgICAgICAgIG1pbmltaXphYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW1pemFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGF0Lm1vZGFsLm9uKCdjbXMubW9kYWwubG9hZGVkIGNtcy5tb2RhbC5jbG9zZWQnLCBmdW5jdGlvbiByZW1vdmVQbGFjZWhvbGRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2Fubm90IGJlIGNhY2hlZFxuICAgICAgICAgICAgICAgICAgICAkKCcuY21zLWFkZC1wbHVnaW4tcGxhY2Vob2xkZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KS5vbignY21zLm1vZGFsLmNsb3NlZCBjbXMubW9kYWwubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5wbHVnaW5zTGlzdC5wcmVwZW5kVG8odGhhdC51aS5jbGlwYm9hcmQpO1xuICAgICAgICAgICAgICAgIH0pLnVpLm1vZGFsLm9uKCdjbXMubW9kYWwubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5wbHVnaW5zTGlzdC5wcmVwZW5kVG8odGhhdC51aS5jbGlwYm9hcmQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhhdC51aS50cmlnZ2Vycy5vbih0aGF0LmNsaWNrLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKCdjbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24tZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhhdC5tb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IHRoYXQudWkucGx1Z2luc0xpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhhdC51aS5jbGlwYm9hcmQuZGF0YSgndGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBNSU5fV0lEVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IE1JTl9IRUlHSFRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudWkuZG9jdW1lbnQudHJpZ2dlcignY2xpY2suY21zLnRvb2xiYXInKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCByZW1vdmUgZXZlbnRcbiAgICAgICAgICAgICAgICB0aGF0LnVpLnRyaWdnZXJSZW1vdmUub24odGhhdC5jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcygnY21zLXRvb2xiYXItaXRlbS1uYXZpZ2F0aW9uLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGF0LmNsZWFyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBlbGVtZW50IG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkudHJpZ2dlcnMucGFyZW50KCkuYWRkQ2xhc3MoJ2Ntcy10b29sYmFyLWl0ZW0tbmF2aWdhdGlvbi1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS50cmlnZ2VyUmVtb3ZlLnBhcmVudCgpLmFkZENsYXNzKCdjbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkuZG9jdW1lbnQudHJpZ2dlcignY2xpY2suY21zLnRvb2xiYXInKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENsZWFycyB0aGUgY2xpcGJvYXJkIGJ5IHF1ZXJpbmcgdGhlIHNlcnZlci5cbiAgICAgICAgICAgICAqIENhbGxiYWNrIGlzIG9wdGlvbmFsLCBidXQgaWYgcHJvdmlkZWQgLSBpdCdzIGNhbGxlZFxuICAgICAgICAgICAgICogbm8gbWF0dGVyIHdoYXQgb3V0Y29tZSB3YXMgb2YgdGhlIGFqYXggY2FsbC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBwb3N0IG5lZWRzIHRvIGJlIGEgc3RyaW5nLCBpdCB3aWxsIGJlIGNvbnZlcnRlZCB1c2luZyBKU09OLnBhcnNlXG4gICAgICAgICAgICAgICAgdmFyIHBvc3QgPSAneyBcImNzcmZtaWRkbGV3YXJldG9rZW5cIjogXCInICsgQ01TLmNvbmZpZy5jc3JmICsgJ1wiIH0nO1xuICAgICAgICAgICAgICAgIHZhciBwYXN0ZUl0ZW1zID0gJCgnLmNtcy1zdWJtZW51LWl0ZW0gW2RhdGEtcmVsPXBhc3RlXScpLnBhcmVudCgpLlxuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcygnY21zLXN1Ym1lbnUtaXRlbS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIHBhc3RlSXRlbXMuZmluZCgnLmNtcy1zdWJtZW51LWl0ZW0tcGFzdGUtdG9vbHRpcCcpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICAgcGFzdGVJdGVtcy5maW5kKCcuY21zLXN1Ym1lbnUtaXRlbS1wYXN0ZS10b29sdGlwLWVtcHR5JykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG5cbiAgICAgICAgICAgICAgICAvLyByZWRpcmVjdCB0byBhamF4XG4gICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLm9wZW5BamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBDTVMuY29uZmlnLmNsaXBib2FyZC51cmwsXG4gICAgICAgICAgICAgICAgICAgIHBvc3Q6IHBvc3QsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG59KShDTVMuJCk7XG4iLCIvKlxuICogQ29weXJpZ2h0IGh0dHBzOi8vZ2l0aHViLmNvbS9kaXZpby9kamFuZ28tY21zXG4gKi9cblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIE5BTUVTUEFDRVNcbi8qKlxuICogQG1vZHVsZSBDTVNcbiAqL1xudmFyIENNUyA9IHdpbmRvdy5DTVMgfHwge307XG5cbi8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBQbHVnaW5cbihmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIHNob3J0aGFuZCBmb3IgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSgpO1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZG9jID0gJChkb2N1bWVudCk7XG4gICAgICAgIHZhciBjbGlwYm9hcmQgPSAkKCcuY21zLWNsaXBib2FyZCcpO1xuICAgICAgICB2YXIgY2xpcGJvYXJkRHJhZ2dhYmxlID0gY2xpcGJvYXJkLmZpbmQoJy5jbXMtZHJhZ2dhYmxlOmZpcnN0Jyk7XG4gICAgICAgIHZhciBjbGlwYm9hcmRQbHVnaW4gPSBjbGlwYm9hcmQuZmluZCgnLmNtcy1wbHVnaW46Zmlyc3QnKTtcbiAgICAgICAgdmFyIGNsaWNrQ291bnRlciA9IDA7XG4gICAgICAgIHZhciB0aW1lcjtcblxuICAgICAgICBkb2Mub24oJ3BvaW50ZXJ1cC5jbXMucGx1Z2luJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gY2FsbCBpdCBhcyBhIHN0YXRpYyBtZXRob2QsIGJlY2F1c2Ugb3RoZXJ3aXNlIHdlIHRyaWdnZXIgaXQgdGhlXG4gICAgICAgICAgICAvLyBhbW91bnQgb2YgdGltZXMgQ01TLlBsdWdpbiBpcyBpbnN0YW50aWF0ZWQsXG4gICAgICAgICAgICAvLyB3aGljaCBkb2VzIG5vdCBtYWtlIG11Y2ggc2Vuc2VcbiAgICAgICAgICAgIENNUy5QbHVnaW4uX2hpZGVTZXR0aW5nc01lbnUoKTtcbiAgICAgICAgfSkub24oJ2tleWRvd24uY21zLnBsdWdpbicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBDTVMuS0VZUy5TSElGVCkge1xuICAgICAgICAgICAgICAgIGRvYy5kYXRhKCdleHBhbmRtb2RlJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdrZXl1cC5jbXMucGx1Z2luJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IENNUy5LRVlTLlNISUZUKSB7XG4gICAgICAgICAgICAgICAgZG9jLmRhdGEoJ2V4cGFuZG1vZGUnLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdjbGljaycsICcuY21zLXBsdWdpbiBhLCBhOmhhcyguY21zLXBsdWdpbiknLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gcHJldmVudHMgc2luZ2xlIGNsaWNrIGZyb20gbWVzc2luZyB1cCB0aGUgZWRpdCBjYWxsXG4gICAgICAgICAgICAvLyBkb24ndCBnbyB0byB0aGUgbGluayBpZiB0aGVyZSBpcyBjdXN0b20ganMgYXR0YWNoZWQgdG8gaXRcbiAgICAgICAgICAgIC8vIG9yIGlmIGl0J3MgY2xpY2tlZCBhbG9uZyB3aXRoIHNoaWZ0LCBjdHJsLCBjbWRcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmICgrK2NsaWNrQ291bnRlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrQ291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJChlLmN1cnJlbnRUYXJnZXQpLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgIGNsaWNrQ291bnRlciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGFzcyBmb3IgaGFuZGxpbmcgUGx1Z2lucyAvIFBsYWNlaG9sZGVycyBvciBHZW5lcmljcy5cbiAgICAgICAgICogSGFuZGxlcyBhZGRpbmcgLyBtb3ZpbmcgLyBjb3B5aW5nIC8gcGFzdGluZyAvIG1lbnVzIGV0Y1xuICAgICAgICAgKiBpbiBzdHJ1Y3R1cmVib2FyZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNsYXNzIFBsdWdpblxuICAgICAgICAgKiBAbmFtZXNwYWNlIENNU1xuICAgICAgICAgKiBAdXNlcyBDTVMuQVBJLkhlbHBlcnNcbiAgICAgICAgICovXG4gICAgICAgIENNUy5QbHVnaW4gPSBuZXcgQ01TLkNsYXNzKHtcblxuICAgICAgICAgICAgaW1wbGVtZW50OiBbQ01TLkFQSS5IZWxwZXJzXSxcblxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICcnLCAvLyBiYXIsIHBsdWdpbiBvciBnZW5lcmljXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJfaWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcGx1Z2luX3R5cGU6ICcnLFxuICAgICAgICAgICAgICAgIHBsdWdpbl9pZDogbnVsbCxcbiAgICAgICAgICAgICAgICBwbHVnaW5fbGFuZ3VhZ2U6ICcnLFxuICAgICAgICAgICAgICAgIHBsdWdpbl9wYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcGx1Z2luX29yZGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIHBsdWdpbl9icmVhZGNydW1iOiBbXSxcbiAgICAgICAgICAgICAgICBwbHVnaW5fcmVzdHJpY3Rpb246IFtdLFxuICAgICAgICAgICAgICAgIHBsdWdpbl9wYXJlbnRfcmVzdHJpY3Rpb246IFtdLFxuICAgICAgICAgICAgICAgIHVybHM6IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkX3BsdWdpbjogJycsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRfcGx1Z2luOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbW92ZV9wbHVnaW46ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb3B5X3BsdWdpbjogJycsXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9wbHVnaW46ICcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwVUkoY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIHN0YXRlc1xuICAgICAgICAgICAgICAgIHRoaXMuY3NyZiA9IENNUy5jb25maWcuY3NyZjtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrID0gJ2NsaWNrLmNtcy5wbHVnaW4nO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclVwID0gJ3BvaW50ZXJ1cC5jbXMucGx1Z2luJztcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duID0gJ3BvaW50ZXJkb3duLmNtcy5wbHVnaW4nO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlck92ZXJBbmRPdXQgPSAncG9pbnRlcm92ZXIuY21zLnBsdWdpbiBwb2ludGVyb3V0LmNtcy5wbHVnaW4nO1xuICAgICAgICAgICAgICAgIHRoaXMuZG91YmxlQ2xpY2sgPSAnZGJsY2xpY2suY21zLnBsdWdpbic7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlVcCA9ICdrZXl1cC5jbXMucGx1Z2luJztcbiAgICAgICAgICAgICAgICB0aGlzLmtleURvd24gPSAna2V5ZG93bi5jbXMucGx1Z2luJztcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRXZlbnRzID0gJ21vdXNlZG93bi5jbXMucGx1Z2luIG1vdXNlbW92ZS5jbXMucGx1Z2luIG1vdXNldXAuY21zLnBsdWdpbic7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaFN0YXJ0ID0gJ3RvdWNoc3RhcnQuY21zLnBsdWdpbic7XG5cbiAgICAgICAgICAgICAgICAvLyBiaW5kIGRhdGEgZWxlbWVudCB0byB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIuZGF0YSgnc2V0dGluZ3MnLCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHR5cGUgb2YgcGx1Z2luXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwbGFjZWhvbGRlcic6IC8vIGhhbmRsZXIgZm9yIHBsYWNlaG9sZGVyIGJhcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFBsYWNlaG9sZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xsYXBzYWJsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwbHVnaW4nOiAvLyBoYW5kbGVyIGZvciBhbGwgcGx1Z2luc1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UGx1Z2luKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xsYXBzYWJsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAvLyBoYW5kbGVyIGZvciBzdGF0aWMgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0R2VuZXJpYygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FjaGVzIHNvbWUgalF1ZXJ5IHJlZmVyZW5jZXMgYW5kIHNldHMgdXAgc3RydWN0dXJlIGZvclxuICAgICAgICAgICAgICogZnVydGhlciBpbml0aWFsaXNhdGlvbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zZXR1cFVJXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRhaW5lciBgY21zLXBsdWdpbi0ke2lkfWBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwVUk6IGZ1bmN0aW9uIHNldHVwVUkoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJCgnLicgKyBjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICBwdWJsaXNoOiAkKCcuY21zLWJ0bi1wdWJsaXNoJyksXG4gICAgICAgICAgICAgICAgICAgIHNhdmU6ICQoJy5jbXMtdG9vbGJhci1pdGVtLXN3aXRjaC1zYXZlLWVkaXQnKSxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93OiAkKHdpbmRvdyksXG4gICAgICAgICAgICAgICAgICAgIHJldmVydDogJCgnLmNtcy10b29sYmFyLXJldmVydCcpLFxuICAgICAgICAgICAgICAgICAgICBkcmFnYmFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN1Ym1lbnU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duOiBudWxsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBiZWhhdmlvdXJzIGFuZCB1aSBmb3IgcGxhY2Vob2xkZXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0UGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXRQbGFjZWhvbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmRyYWdiYXIgPSAkKCcuY21zLWRyYWdiYXItJyArIHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcl9pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5kcmFnZ2FibGVzID0gdGhpcy51aS5kcmFnYmFyLmNsb3Nlc3QoJy5jbXMtZHJhZ2FyZWEnKS5maW5kKCc+IC5jbXMtZHJhZ2dhYmxlcycpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuc3VibWVudSA9IHRoaXMudWkuZHJhZ2Jhci5maW5kKCcuY21zLXN1Ym1lbnUtc2V0dGluZ3MnKTtcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLnVpLmRyYWdiYXIuZmluZCgnLmNtcy1kcmFnYmFyLXRpdGxlJyk7XG4gICAgICAgICAgICAgICAgdmFyIHRvZ2dsZXJMaW5rcyA9IHRoaXMudWkuZHJhZ2Jhci5maW5kKCcuY21zLWRyYWdiYXItdG9nZ2xlciBhJyk7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZGVkID0gJ2Ntcy1kcmFnYmFyLXRpdGxlLWV4cGFuZGVkJztcblxuICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIHRoZSBzdWJuYXYgb24gdGhlIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0U2V0dGluZ3NNZW51KHRoaXMudWkuc3VibWVudSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QWRkUGx1Z2luTW9kYWwodGhpcy51aS5kcmFnYmFyLmZpbmQoJy5jbXMtc3VibWVudS1hZGQnKSk7XG5cbiAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MuZHJhZ2JhcnMgPSBDTVMuc2V0dGluZ3MuZHJhZ2JhcnMgfHwgW107IC8vIGV4cGFuZGVkIGRyYWdiYXJzIGFycmF5XG5cbiAgICAgICAgICAgICAgICAvLyBlbmFibGUgZXhwYW5kaW5nL2NvbGxhcHNpbmcgZ2xvYmFsbHkgd2l0aGluIHRoZSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgIHRvZ2dsZXJMaW5rcy5vZmYodGhpcy5jbGljaykub24odGhpcy5jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGl0bGUuaGFzQ2xhc3MoZXhwYW5kZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9jb2xsYXBzZUFsbCh0aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9leHBhbmRBbGwodGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcl9pZCwgQ01TLnNldHRpbmdzLmRyYWdiYXJzKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUuYWRkQ2xhc3MoZXhwYW5kZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSWZQYXN0ZUFsbG93ZWQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBiZWhhdmlvdXJzIGFuZCB1aSBmb3IgcGx1Z2luLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3NldFBsdWdpblxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldFBsdWdpbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIGFkZHMgZG91YmxlIGNsaWNrIHRvIGVkaXRcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmNvbnRhaW5lci5hZGQodGhpcy51aS5kcmFnaXRlbSkub24odGhpcy5kb3VibGVDbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZWRpdFBsdWdpbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy51cmxzLmVkaXRfcGx1Z2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnBsdWdpbl9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnBsdWdpbl9icmVhZGNydW1iXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGRzIGVkaXQgdG9vbHRpcFxuICAgICAgICAgICAgICAgIHRoaXMudWkuY29udGFpbmVyLm9uKHRoaXMucG9pbnRlck92ZXJBbmRPdXQgKyAnICcgKyB0aGlzLnRvdWNoU3RhcnQsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVkIGZvciBib3RoLCBjbGljayBhbmQgdG91Y2hcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHByb3BhZ2F0aW9uIHdvbid0IHdvcmsgdG8gdGhlIG5lc3RlZCBwbHVnaW5cbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGF0Lm9wdGlvbnMucGx1Z2luX25hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoYXQub3B0aW9ucy5wbHVnaW5faWQ7XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbHRpcC5kaXNwbGF5VG9nZ2xlKGUudHlwZSA9PT0gJ3BvaW50ZXJvdmVyJyB8fCBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JywgZSwgbmFtZSwgaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkcyBsaXN0ZW5lciBmb3IgYWxsIHBsdWdpbiB1cGRhdGVzXG4gICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIub24oJ2Ntcy5wbHVnaW5zLnVwZGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQubW92ZVBsdWdpbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkcyBsaXN0ZW5lciBmb3IgY29weS9wYXN0ZSB1cGRhdGVzXG4gICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIub24oJ2Ntcy5wbHVnaW4udXBkYXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKGUuZGVsZWdhdGVUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZ2l0ZW0gPSAkKCcuY21zLWRyYWdnYWJsZS0nICsgZWwuZGF0YSgnc2V0dGluZ3MnKS5wbHVnaW5faWQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXJfaWQgPSB0aGF0Ll9nZXRJZChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdpdGVtLnBhcmVudHMoJy5jbXMtZHJhZ2dhYmxlcycpLmxhc3QoKS5wcmV2QWxsKCcuY21zLWRyYWdiYXInKS5maXJzdCgpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgcGxhY2Vob2xkZXJfaWQgaXMgZW1wdHksIGNhbmNlbFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYWNlaG9sZGVyX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGVsLmRhdGEoJ3NldHRpbmdzJyk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGFyZ2V0ID0gcGxhY2Vob2xkZXJfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucGFyZW50ID0gdGhhdC5fZ2V0SWQoZHJhZ2l0ZW0ucGFyZW50KCkuY2xvc2VzdCgnLmNtcy1kcmFnZ2FibGUnKSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEubW92ZV9hX2NvcHkgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoYXQubW92ZVBsdWdpbihkYXRhKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbGxpbmcgdXAgdWkgb2JqZWN0XG4gICAgICAgICAgICAgICAgdGhpcy51aS5kcmFnZ2FibGUgPSAkKCcuY21zLWRyYWdnYWJsZS0nICsgdGhpcy5vcHRpb25zLnBsdWdpbl9pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5kcmFnaXRlbSA9IHRoaXMudWkuZHJhZ2dhYmxlLmZpbmQoJz4gLmNtcy1kcmFnaXRlbScpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuZHJhZ2dhYmxlcyA9IHRoaXMudWkuZHJhZ2dhYmxlLmZpbmQoJz4gLmNtcy1kcmFnZ2FibGVzJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5zdWJtZW51ID0gdGhpcy51aS5kcmFnaXRlbS5maW5kKCcuY21zLXN1Ym1lbnUnKTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBldmVudCB0byB0aGUgcGx1Z2luIG1lbnVcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRTZXR0aW5nc01lbnUodGhpcy51aS5zdWJtZW51KTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBldmVudHMgZm9yIHRoZSBcIkFkZCBwbHVnaW5cIiBtb2RhbFxuICAgICAgICAgICAgICAgIHRoaXMuX3NldEFkZFBsdWdpbk1vZGFsKHRoaXMudWkuZHJhZ2l0ZW0uZmluZCgnLmNtcy1zdWJtZW51LWFkZCcpKTtcblxuICAgICAgICAgICAgICAgIC8vIGNsaWNrYWJpbGl0eSBvZiBcIlBhc3RlXCIgbWVudSBpdGVtXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tJZlBhc3RlQWxsb3dlZCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXRzIHVwIGJlaGF2aW91cnMgYW5kIHVpIGZvciBnZW5lcmljcy5cbiAgICAgICAgICAgICAqIEdlbmVyaWNzIGRvIG5vdCBzaG93IHVwIGluIHN0cnVjdHVyZSBib2FyZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zZXRHZW5lcmljXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0R2VuZXJpYzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIGFkZHMgZG91YmxlIGNsaWNrIHRvIGVkaXRcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmNvbnRhaW5lci5vbih0aGlzLmRvdWJsZUNsaWNrLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZWRpdFBsdWdpbih0aGF0Lm9wdGlvbnMudXJscy5lZGl0X3BsdWdpbiwgdGhhdC5vcHRpb25zLnBsdWdpbl9uYW1lLCBbXSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGRzIGVkaXQgdG9vbHRpcFxuICAgICAgICAgICAgICAgIHRoaXMudWkuY29udGFpbmVyLm9uKHRoaXMucG9pbnRlck92ZXJBbmRPdXQgKyAnICcgKyB0aGlzLnRvdWNoU3RhcnQsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRoYXQub3B0aW9ucy5wbHVnaW5fbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gdGhhdC5vcHRpb25zLnBsdWdpbl9pZDtcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sdGlwLmRpc3BsYXlUb2dnbGUoZS50eXBlID09PSAncG9pbnRlcm92ZXInIHx8IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnLCBlLCBuYW1lLCBpZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrcyBpZiBwYXN0ZSBpcyBhbGxvd2VkIGludG8gY3VycmVudCBwbHVnaW4vcGxhY2Vob2xkZXIgYmFzZWRcbiAgICAgICAgICAgICAqIG9uIHJlc3RyaWN0aW9ucyB3ZSBoYXZlLiBBbHNvIGRldGVybWluZXMgd2hpY2ggdG9vbHRpcCB0byBzaG93LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2NoZWNrSWZQYXN0ZUFsbG93ZWRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfY2hlY2tJZlBhc3RlQWxsb3dlZDogZnVuY3Rpb24gX2NoZWNrSWZQYXN0ZUFsbG93ZWQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhc3RlQnV0dG9uID0gdGhpcy51aS5kcm9wZG93bi5maW5kKCdbZGF0YS1yZWw9cGFzdGVdJyk7XG4gICAgICAgICAgICAgICAgdmFyIHBhc3RlSXRlbSA9IHBhc3RlQnV0dG9uLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIGlmICghY2xpcGJvYXJkUGx1Z2luLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwYXN0ZUl0ZW0uYWRkQ2xhc3MoJ2Ntcy1zdWJtZW51LWl0ZW0tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVJdGVtLmZpbmQoJy5jbXMtc3VibWVudS1pdGVtLXBhc3RlLXRvb2x0aXAtZW1wdHknKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVpLmRyYWdnYWJsZSAmJiB0aGlzLnVpLmRyYWdnYWJsZS5oYXNDbGFzcygnY21zLWRyYWdnYWJsZS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhc3RlSXRlbS5hZGRDbGFzcygnY21zLXN1Ym1lbnUtaXRlbS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBwYXN0ZUl0ZW0uZmluZCgnLmNtcy1zdWJtZW51LWl0ZW0tcGFzdGUtdG9vbHRpcC1kaXNhYmxlZCcpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMub3B0aW9ucy5wbHVnaW5fcmVzdHJpY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBjbGlwYm9hcmRQbHVnaW4uZGF0YSgnc2V0dGluZ3MnKS5wbHVnaW5fdHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50X2JvdW5kcyA9IGNsaXBib2FyZFBsdWdpbi5kYXRhKCdzZXR0aW5ncycpLnBsdWdpbl9wYXJlbnRfcmVzdHJpY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQbHVnaW5UeXBlID0gdGhpcy5vcHRpb25zLnBsdWdpbl90eXBlO1xuXG4gICAgICAgICAgICAgICAgaWYgKChib3VuZHMubGVuZ3RoICYmICQuaW5BcnJheSh0eXBlLCBib3VuZHMpID09PSAtMSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBhcmVudF9ib3VuZHMubGVuZ3RoICYmICQuaW5BcnJheShjdXJyZW50UGx1Z2luVHlwZSwgcGFyZW50X2JvdW5kcykgPT09IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXN0ZUl0ZW0uYWRkQ2xhc3MoJ2Ntcy1zdWJtZW51LWl0ZW0tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVJdGVtLmZpbmQoJy5jbXMtc3VibWVudS1pdGVtLXBhc3RlLXRvb2x0aXAtcmVzdHJpY3RlZCcpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxzIGFwaSB0byBjcmVhdGUgYSBwbHVnaW4gYW5kIHRoZW4gcHJvY2VlZHMgdG8gZWRpdCBpdC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGFkZFBsdWdpblxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgdHlwZSBvZiB0aGUgcGx1Z2luLCBlLmcgXCJCb290c3RyYXAzQ29sdW1uQ01TUGx1Z2luXCJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIHBsdWdpbiwgZS5nLiBcIkNvbHVtblwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50IGlkIG9mIGEgcGFyZW50IHBsdWdpblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRQbHVnaW46IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgcmVxdWVzdCBpZiBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKENNUy5BUEkubG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ01TLkFQSS5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcl9pZDogdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5fdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luX3BhcmVudDogcGFyZW50IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5fbGFuZ3VhZ2U6IHRoaXMub3B0aW9ucy5wbHVnaW5fbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNzcmZtaWRkbGV3YXJldG9rZW46IHRoaXMuY3NyZlxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5vcHRpb25zLnVybHMuYWRkX3BsdWdpbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm5ld1BsdWdpbiA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmVkaXRQbHVnaW4oZGF0YS51cmwsIG5hbWUsIGRhdGEuYnJlYWRjcnVtYik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gQ01TLmNvbmZpZy5sYW5nLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2cgKyBqcVhIUi5yZXNwb25zZVRleHQgfHwganFYSFIuc3RhdHVzICsgJyAnICsganFYSFIuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3BlbnMgdGhlIG1vZGFsIGZvciBlZGl0aW5nIGEgcGx1Z2luLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgZWRpdFBsdWdpblxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBlZGl0aW5nIHVybFxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgcGx1Z2luLCBlLmcuIFwiQ29sdW1uXCJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGJyZWFkY3J1bWIgYXJyYXkgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgYSBicmVhZGNydW1iLFxuICAgICAgICAgICAgICogICAgIGVhY2ggaXRlbSBpcyBgeyB0aXRsZTogJ3N0cmluZyc6IHVybDogJ3N0cmluZycgfWBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWRpdFBsdWdpbjogZnVuY3Rpb24gKHVybCwgbmFtZSwgYnJlYWRjcnVtYikge1xuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgbW9kYWwgd2luZG93XG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsID0gbmV3IENNUy5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIG5ld1BsdWdpbjogdGhpcy5uZXdQbHVnaW4gfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U6IHRoaXMub3B0aW9ucy5vbkNsb3NlIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdE9uQ2xvc2U6IHRoaXMub3B0aW9ucy5yZWRpcmVjdE9uQ2xvc2UgfHwgZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubmV3UGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uKCdjbXMubW9kYWwubG9hZGVkJywgZnVuY3Rpb24gcmVtb3ZlUGxhY2Vob2xkZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcuY21zLWFkZC1wbHVnaW4tcGxhY2Vob2xkZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1vZGFsLm9uKCdjbXMubW9kYWwuY2xvc2VkJywgZnVuY3Rpb24gcmVtb3ZlUGxhY2Vob2xkZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5jbXMtYWRkLXBsdWdpbi1wbGFjZWhvbGRlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJzOiBicmVhZGNydW1iLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogODUwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgZm9yIGNvcHlpbmcgX2FuZF8gcGFzdGluZyBhIHBsdWdpbi4gSWYgZWl0aGVyIG9mIHBhcmFtc1xuICAgICAgICAgICAgICogaXMgcHJlc2VudCBtZXRob2QgYXNzdW1lcyB0aGF0IGl0J3MgXCJwYXN0ZVwiIGFuZCB3aWxsIG1ha2UgYSBjYWxsXG4gICAgICAgICAgICAgKiB0byBhcGkgdG8gaW5zZXJ0IGN1cnJlbnQgcGx1Z2luIHRvIHNwZWNpZmllZCBgb3B0aW9ucy50YXJnZXRfcGx1Z2luX2lkYFxuICAgICAgICAgICAgICogb3IgYG9wdGlvbnMudGFyZ2V0X3BsYWNlaG9sZGVyX2lkYC4gQ29weWluZyBhIHBsdWdpbiBhbHNvIGZpcnN0XG4gICAgICAgICAgICAgKiBjbGVhcnMgdGhlIGNsaXBib2FyZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGNvcHlQbHVnaW5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz10aGlzLm9wdGlvbnNdXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc291cmNlX2xhbmd1YWdlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvcHlQbHVnaW46IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2VfbGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgcmVxdWVzdCBpZiBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKENNUy5BUEkubG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ01TLkFQSS5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vdmUgPSAob3B0aW9ucyB8fCBzb3VyY2VfbGFuZ3VhZ2UpID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGNvcnJlY3Qgb3B0aW9uc1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlX2xhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudGFyZ2V0ID0gb3B0aW9ucy5wbGFjZWhvbGRlcl9pZDtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wbHVnaW5faWQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJlbnQgPSAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VfbGFuZ3VhZ2UgPSBvcHRpb25zLnBsdWdpbl9sYW5ndWFnZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3BsYWNlaG9sZGVyX2lkOiBvcHRpb25zLnBsYWNlaG9sZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VfcGx1Z2luX2lkOiBvcHRpb25zLnBsdWdpbl9pZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX2xhbmd1YWdlOiBzb3VyY2VfbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldF9wbHVnaW5faWQ6IG9wdGlvbnMucGFyZW50IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfcGxhY2Vob2xkZXJfaWQ6IG9wdGlvbnMudGFyZ2V0IHx8IENNUy5jb25maWcuY2xpcGJvYXJkLmlkLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfbGFuZ3VhZ2U6IG9wdGlvbnMucGFnZV9sYW5ndWFnZSB8fCBzb3VyY2VfbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNzcmZtaWRkbGV3YXJldG9rZW46IHRoaXMuY3NyZlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBvcHRpb25zLnVybHMuY29weV9wbHVnaW4sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogQ01TLmNvbmZpZy5sYW5nLnN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVsb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLkhlbHBlcnMucmVsb2FkQnJvd3NlcigpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IENNUy5jb25maWcubGFuZy5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbXNnICsganFYSFIucmVzcG9uc2VUZXh0IHx8IGpxWEhSLnN0YXR1cyArICcgJyArIGpxWEhSLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheChyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgY2xpcGJvYXJkIGlzIGNsZWFuZWRcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5DbGlwYm9hcmQuY2xlYXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVzc2VudGlhbGx5IGNsZWFycyBjbGlwYm9hcmQgYW5kIG1vdmVzIHBsdWdpbiB0byBhIGNsaXBib2FyZFxuICAgICAgICAgICAgICogcGxhY2hvbGRlciB0aHJvdWdoIGBtb3ZlUGx1Z2luYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGN1dFBsdWdpblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjdXRQbHVnaW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBjdXQgaXMgb25jZSB0cmlnZ2VyZWQsIHByZXZlbnQgYWRkaXRpb25hbCBhY3Rpb25zXG4gICAgICAgICAgICAgICAgaWYgKENNUy5BUEkubG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ01TLkFQSS5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcl9pZDogQ01TLmNvbmZpZy5jbGlwYm9hcmQuaWQsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbl9pZDogdGhpcy5vcHRpb25zLnBsdWdpbl9pZCxcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luX3BhcmVudDogJycsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbl9sYW5ndWFnZTogdGhpcy5vcHRpb25zLnBhZ2VfbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbl9vcmRlcjogW3RoaXMub3B0aW9ucy5wbHVnaW5faWRdLFxuICAgICAgICAgICAgICAgICAgICBjc3JmbWlkZGxld2FyZXRva2VuOiB0aGlzLmNzcmZcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGNsaXBib2FyZCBpcyBjbGVhbmVkXG4gICAgICAgICAgICAgICAgQ01TLkFQSS5DbGlwYm9hcmQuY2xlYXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWwgcmVxdWVzdCBpZiBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgICAgIGlmIChDTVMuQVBJLmxvY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIHBsdWdpblxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB0aGF0Lm9wdGlvbnMudXJscy5tb3ZlX3BsdWdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogQ01TLmNvbmZpZy5sYW5nLnN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZXNwb25zZSBpcyByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLkhlbHBlcnMucmVsb2FkQnJvd3NlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSBDTVMuY29uZmlnLmxhbmcuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyArIGpxWEhSLnJlc3BvbnNlVGV4dCB8fCBqcVhIUi5zdGF0dXMgKyAnICcgKyBqcVhIUi5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTWV0aG9kIGlzIGNhbGxlZCB3aGVuIHlvdSBjbGljayBvbiB0aGUgcGFzdGUgYnV0dG9uIG9uIHRoZSBwbHVnaW4uXG4gICAgICAgICAgICAgKiBVc2VzIGV4aXN0aW5nIHNvbHV0aW9uIG9mIGBjb3B5UGx1Z2luKG9wdGlvbnMpYFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgcGFzdGVQbHVnaW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcGFzdGVQbHVnaW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjbGlwYm9hcmREcmFnZ2FibGUuYXBwZW5kVG8odGhpcy51aS5kcmFnZ2FibGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmRyYWdnYWJsZXMudHJpZ2dlcignY21zLnVwZGF0ZScpO1xuICAgICAgICAgICAgICAgIGNsaXBib2FyZFBsdWdpbi50cmlnZ2VyKCdjbXMucGx1Z2luLnVwZGF0ZScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNb3ZlcyBwbHVnaW4gYnkgcXVlcnlpbmcgdGhlIEFQSSBhbmQgdGhlbiB1cGRhdGVzIHNvbWUgVUkgcGFydHNcbiAgICAgICAgICAgICAqIHRvIHJlZmxlY3QgdGhhdCB0aGUgcGFnZSBoYXMgY2hhbmdlZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIG1vdmVQbHVnaW5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz10aGlzLm9wdGlvbnNdXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucGxhY2Vob2xkZXJfaWRdXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucGx1Z2luX2lkXVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnBsdWdpbl9wYXJlbnRdXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucGx1Z2luX2xhbmd1YWdlXVxuICAgICAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tb3ZlX2FfY29weV1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbW92ZVBsdWdpbjogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgcmVxdWVzdCBpZiBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKENNUy5BUEkubG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ01TLkFQSS5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vIHNldCBjb3JyZWN0IG9wdGlvbnNcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luID0gJCgnLmNtcy1wbHVnaW4tJyArIG9wdGlvbnMucGx1Z2luX2lkKTtcbiAgICAgICAgICAgICAgICB2YXIgZHJhZ2l0ZW0gPSAkKCcuY21zLWRyYWdnYWJsZS0nICsgb3B0aW9ucy5wbHVnaW5faWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gU0VUVElORyBQT1NJVElPTlxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvc2l0aW9uKG9wdGlvbnMucGx1Z2luX2lkLCBwbHVnaW4sIGRyYWdpdGVtKTtcblxuICAgICAgICAgICAgICAgIC8vIFNBVklORyBQT1NJVElPTlxuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlcl9pZCA9IHRoaXMuX2dldElkKFxuICAgICAgICAgICAgICAgICAgICBkcmFnaXRlbS5wYXJlbnRzKCcuY21zLWRyYWdnYWJsZXMnKS5sYXN0KCkucHJldkFsbCgnLmNtcy1kcmFnYmFyJykuZmlyc3QoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdmFyIHBsdWdpbl9wYXJlbnQgPSB0aGlzLl9nZXRJZChkcmFnaXRlbS5wYXJlbnQoKS5jbG9zZXN0KCcuY21zLWRyYWdnYWJsZScpKTtcbiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luX29yZGVyID0gdGhpcy5fZ2V0SWRzKGRyYWdpdGVtLnNpYmxpbmdzKCcuY21zLWRyYWdnYWJsZScpLmFuZFNlbGYoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tb3ZlX2FfY29weSkge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW5fb3JkZXIgPSBwbHVnaW5fb3JkZXIubWFwKGZ1bmN0aW9uIChwbHVnaW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBjb3JyZWN0IHdheSB3b3VsZCBiZSB0byBjaGVjayBpZiBpdCdzIGFjdHVhbGx5IGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhc3RlZCBwbHVnaW4gYW5kIG9ubHkgdGhlbiByZXBsYWNlIHRoZSBpZCB3aXRoIGNvcHkgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpZiB3ZSB3b3VsZCBjb3B5IGZyb20gdGhlIHNhbWUgcGxhY2Vob2xkZXIgd2Ugd291bGQgZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0d28gY29weSB0b2tlbnMgaW5zdGVhZCBvZiBvcmlnaW5hbCBhbmQgYSBjb3B5LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBvayBzbyBmYXIsIGFzIGxvbmcgYXMgd2UgY29weSBvbmx5IGZyb20gY2xpcGJvYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luSWQgPT09IG9wdGlvbnMucGx1Z2luX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luSWQgPSAnX19DT1BZX18nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsdWdpbklkO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaGVyZSBpZiB3ZSBoYXZlIG5vIHBsYWNlaG9sZGVyIGlkXG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyX2lkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZ2F0aGVyIHRoZSBkYXRhIGZvciBhamF4IHJlcXVlc3RcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJfaWQ6IHBsYWNlaG9sZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5faWQ6IG9wdGlvbnMucGx1Z2luX2lkLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5fcGFyZW50OiBwbHVnaW5fcGFyZW50IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgaGFjazogd2hlbiBtb3ZpbmcgdG8gZGlmZmVyZW50IGxhbmd1YWdlcyB1c2UgdGhlIGdsb2JhbCBsYW5ndWFnZVxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5fbGFuZ3VhZ2U6IG9wdGlvbnMucGFnZV9sYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luX29yZGVyOiBwbHVnaW5fb3JkZXIsXG4gICAgICAgICAgICAgICAgICAgIGNzcmZtaWRkbGV3YXJldG9rZW46IHRoaXMuY3NyZixcbiAgICAgICAgICAgICAgICAgICAgbW92ZV9hX2NvcHk6IG9wdGlvbnMubW92ZV9hX2NvcHlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IG9wdGlvbnMudXJscy5tb3ZlX3BsdWdpbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZXNwb25zZSBpcyByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLkhlbHBlcnMucmVsb2FkQnJvd3NlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGUgYWN0aW9ucyBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5sb2NrZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogc2hvdyBvbmx5IGlmIChyZXNwb25zZS5zdGF0dXMpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zaG93U3VjY2VzcyhkcmFnaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gQ01TLmNvbmZpZy5sYW5nLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2cgKyBqcVhIUi5yZXNwb25zZVRleHQgfHwganFYSFIuc3RhdHVzICsgJyAnICsganFYSFIuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgcHVibGlzaCAvIHNhdmUgYnV0dG9uc1xuICAgICAgICAgICAgICAgIHRoaXMudWkucHVibGlzaFxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2Ntcy1idG4tcHVibGlzaC1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2Ntcy1idG4tZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAucGFyZW50KCkuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkud2luZG93LnRyaWdnZXIoJ3Jlc2l6ZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gZW5hYmxlIHJldmVydCB0byBsaXZlXG4gICAgICAgICAgICAgICAgdGhpcy51aS5yZXZlcnQucmVtb3ZlQ2xhc3MoJ2Ntcy10b29sYmFyLWl0ZW0tbmF2aWdhdGlvbi1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcGVucyBhIG1vZGFsIHRvIGRlbGV0ZSBhIHBsdWdpblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgZGVsZXRlUGx1Z2luXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIGFkbWluIHVybCBmb3IgZGVsZXRpbmcgYSBwYWdlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBwbHVnaW4gbmFtZSwgZS5nLiBcIkNvbHVtblwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBicmVhZGNydW1iIGFycmF5IG9mIG9iamVjdHMgcmVwcmVzZW50aW5nIGEgYnJlYWRjcnVtYixcbiAgICAgICAgICAgICAqICAgICBlYWNoIGl0ZW0gaXMgYHsgdGl0bGU6ICdzdHJpbmcnOiB1cmw6ICdzdHJpbmcnIH1gXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlbGV0ZVBsdWdpbjogZnVuY3Rpb24gKHVybCwgbmFtZSwgYnJlYWRjcnVtYikge1xuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgbW9kYWwgd2luZG93XG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsID0gbmV3IENNUy5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIG5ld1BsdWdpbjogdGhpcy5uZXdQbHVnaW4gfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U6IHRoaXMub3B0aW9ucy5vbkNsb3NlIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdE9uQ2xvc2U6IHRoaXMub3B0aW9ucy5yZWRpcmVjdE9uQ2xvc2UgfHwgZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vbignY21zLm1vZGFsLmxvYWRlZCcsIGZ1bmN0aW9uIHJlbW92ZVBsYWNlaG9sZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuY21zLWFkZC1wbHVnaW4tcGxhY2Vob2xkZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iczogYnJlYWRjcnVtYlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNb3ZlcyB0aGUgcGx1Z2luIGFjY29yZGluZyB0byB0aGUgcGxhY2UgaXQgc2hvdWxkIGhhdmUgaW4gY29udGVudCBtb2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3NldFBvc2l0aW9uXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcGx1Z2luIHRoZSBgLmNtcy1wbHVnaW5gIGVsZW1lbnRcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBkcmFnaXRlbSB0aGUgYC5jbXMtZHJhZ2dhYmxlYCBvZiB0aGUgcGx1Z2luXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXRQb3NpdGlvbjogZnVuY3Rpb24gKGlkLCBwbHVnaW4sIGRyYWdpdGVtKSB7XG4gICAgICAgICAgICAgICAgLy8gYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBwbHVnaW4gb250byBpdHMgbmV3IHBsYWNlLCB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hlcmUgdG8gcG9zaXRpb24gaXRcbiAgICAgICAgICAgICAgICB2YXIgcHJldkl0ZW0gPSBkcmFnaXRlbS5wcmV2KCcuY21zLWRyYWdnYWJsZScpO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0SXRlbSA9IGRyYWdpdGVtLm5leHQoJy5jbXMtZHJhZ2dhYmxlJyk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGRyYWdpdGVtLnBhcmVudCgpLmNsb3Nlc3QoJy5jbXMtZHJhZ2dhYmxlJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gJCgnLmNtcy1wbHVnaW4tJyArIHRoaXMuX2dldElkKHBhcmVudCkpO1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGRyYWdpdGVtLmNsb3Nlc3QoJy5jbXMtZHJhZ2FyZWEnKTtcblxuICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB0aGVyZSBhcmUgb3RoZXIgcGx1Z2lucyB3aXRoaW4gdGhlIHNhbWUgbGV2ZWwsIHRoaXMgbWFrZXMgdGhlIG1vdmUgZWFzaWVyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZJdGVtLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW4uaW5zZXJ0QWZ0ZXIoJCgnLmNtcy1wbHVnaW4tJyArIHRoaXMuX2dldElkKHByZXZJdGVtKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEl0ZW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5pbnNlcnRCZWZvcmUoJCgnLmNtcy1wbHVnaW4tJyArIHRoaXMuX2dldElkKG5leHRJdGVtKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBjYW4ndCBmaW5kIGEgcGx1Z2luIG9uIHRoZSBzYW1lIGxldmVsLCB3ZSBuZWVkIHRvIHRyYXZlbCBoaWdoZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHRoaXMgd2UgbmVlZCB0byBmaW5kIHRoZSBkZWVwZXN0IGNoaWxkXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZC5jaGlsZHJlbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5jaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmFwcGVuZChwbHVnaW4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGxhY2Vob2xkZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGFsc28gbmVlZCB0byBjb3ZlciB0aGUgY2FzZSBpZiB3ZSBtb3ZlIHRoZSBwbHVnaW4gdG8gYW4gZW1wdHkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmluc2VydEFmdGVyKCQoJy5jbXMtcGxhY2Vob2xkZXItJyArIHRoaXMuX2dldElkKHBsYWNlaG9sZGVyKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGRpZCBub3QgZm91bmQgYSBtYXRjaCwgcmVsb2FkXG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuSGVscGVycy5yZWxvYWRCcm93c2VyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgcGx1Z2luIGlzIGFkZGVkIHRocm91Z2ggYWpheC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGVkaXRQbHVnaW5Qb3N0QWpheFxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRvb2xiYXIgQ01TLkFQSS5Ub29sYmFyIGluc3RhbmNlIChub3QgdXNlZClcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSByZXNwb25zZSBmcm9tIHNlcnZlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlZGl0UGx1Z2luUG9zdEFqYXg6IGZ1bmN0aW9uICh0b29sYmFyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdFBsdWdpbihyZXNwb25zZS51cmwsIHRoaXMub3B0aW9ucy5wbHVnaW5fbmFtZSwgcmVzcG9uc2UuYnJlYWRjcnVtYik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIF9zZXRTZXR0aW5nc01lbnUgc2V0cyB1cCBldmVudCBoYW5kbGVycyBmb3Igc2V0dGluZ3MgbWVudS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zZXRTZXR0aW5nc01lbnVcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gbmF2XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXRTZXR0aW5nc01lbnU6IGZ1bmN0aW9uIF9zZXRTZXR0aW5nc01lbnUobmF2KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuZHJvcGRvd24gPSBuYXYuc2libGluZ3MoJy5jbXMtc3VibWVudS1kcm9wZG93bi1zZXR0aW5ncycpO1xuICAgICAgICAgICAgICAgIHZhciBkcm9wZG93biA9IHRoaXMudWkuZHJvcGRvd247XG5cbiAgICAgICAgICAgICAgICBuYXYub24odGhpcy5wb2ludGVyVXAsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlci5oYXNDbGFzcygnY21zLWJ0bi1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLlBsdWdpbi5faGlkZVNldHRpbmdzTWVudSh0cmlnZ2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5QbHVnaW4uX2hpZGVTZXR0aW5nc01lbnUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3Nob3dTZXR0aW5nc01lbnUodHJpZ2dlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLm9uKHRoaXMubW91c2VFdmVudHMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSkub24odGhpcy50b3VjaFN0YXJ0LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXF1aXJlZCBmb3Igc2Nyb2xsaW5nIG9uIG1vYmlsZVxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhhdC5fc2V0dXBBY3Rpb25zKG5hdik7XG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBwcm9wYWdhdGlvblxuICAgICAgICAgICAgICAgIG5hdi5vbihbdGhpcy5wb2ludGVyVXAsIHRoaXMucG9pbnRlckRvd24sIHRoaXMuY2xpY2ssIHRoaXMuZG91YmxlQ2xpY2tdLmpvaW4oJyAnKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG5hdi5zaWJsaW5ncygnLmNtcy1xdWlja3NlYXJjaCwgLmNtcy1zdWJtZW51LWRyb3Bkb3duLXNldHRpbmdzJylcbiAgICAgICAgICAgICAgICAgICAgLm9uKFt0aGlzLnBvaW50ZXJVcCwgdGhpcy5jbGljaywgdGhpcy5kb3VibGVDbGlja10uam9pbignICcpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaW1wbGlzdGljIGltcGxlbWVudGF0aW9uLCBvbmx5IHNjcm9sbHMgZG93biwgb25seSB3b3JrcyBpbiBzdHJ1Y3R1cmVtb2RlXG4gICAgICAgICAgICAgKiBhbmQgaGlnaGx5IGRlcGVuZHMgb24gdGhlIHN0eWxlcyBvZiB0aGUgc3RydWN0dXJlYm9hcmQgdG8gd29yayBjb3JyZWN0bHlcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zY3JvbGxUb0VsZW1lbnRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWwgZWxlbWVudCB0byBzY3JvbGwgdG9cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c11cbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5kdXJhdGlvbj0yMDBdIHRpbWUgdG8gc2Nyb2xsXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdHMub2Zmc2V0PTUwXSBkaXN0YW5jZSBpbiBweCB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Njcm9sbFRvRWxlbWVudDogZnVuY3Rpb24gX3Njcm9sbFRvRWxlbWVudChlbCwgb3B0cykge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IG9wdHMgJiYgb3B0cy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gb3B0cy5kdXJhdGlvbiA6IDIwMDtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gb3B0cyAmJiBvcHRzLm9mZnNldCAhPT0gdW5kZWZpbmVkID8gb3B0cy5vZmZzZXQgOiA1MDtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYWJsZSA9IGVsLm9mZnNldFBhcmVudCgpO1xuICAgICAgICAgICAgICAgIHZhciB3aW4gPSAkKHdpbmRvdyk7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHdpbi5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gc2Nyb2xsYWJsZS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICB2YXIgZWxQb3NpdGlvbiA9IGVsLnBvc2l0aW9uKCkudG9wO1xuICAgICAgICAgICAgICAgIHZhciBlbEhlaWdodCA9IGVsLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHZhciBpc0luVmlld3BvcnQgPSAoZWxQb3NpdGlvbiArIGVsSGVpZ2h0ICsgb2Zmc2V0IDw9IHNjcm9sbEhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiBlbFBvc2l0aW9uICsgb2Zmc2V0ICsgZWxIZWlnaHQgKyBzY3JvbGxUb3AgLSBzY3JvbGxIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3BlbnMgYSBtb2RhbCB3aXRoIHRyYXZlcnNhYmxlIHBsdWdpbnMgbGlzdCwgYWRkcyBhIHBsYWNlaG9sZGVyIHRvIHdoZXJlXG4gICAgICAgICAgICAgKiB0aGUgcGx1Z2luIHdpbGwgYmUgYWRkZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0QWRkUGx1Z2luTW9kYWxcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gbmF2IG1vZGFsIHRyaWdnZXIgZWxlbWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0QWRkUGx1Z2luTW9kYWw6IGZ1bmN0aW9uIF9zZXRBZGRQbHVnaW5Nb2RhbChuYXYpIHtcbiAgICAgICAgICAgICAgICBpZiAobmF2Lmhhc0NsYXNzKCdjbXMtYnRuLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gJChcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjbXMtYWRkLXBsdWdpbi1wbGFjZWhvbGRlclwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgQ01TLmNvbmZpZy5sYW5nLmFkZFBsdWdpblBsYWNlaG9sZGVyICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHZhciBtb2RhbCA9IG5ldyBDTVMuTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogNDAwLFxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IDQwMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBkcmFnSXRlbSA9IG5hdi5jbG9zZXN0KCcuY21zLWRyYWdpdGVtJyk7XG4gICAgICAgICAgICAgICAgdmFyIGlzUGxhY2Vob2xkZXIgPSAhQm9vbGVhbihkcmFnSXRlbS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbkxpc3Q7XG4gICAgICAgICAgICAgICAgdmFyIGlzVG91Y2hpbmc7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNQbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbkxpc3QgPSBuYXYuY2xvc2VzdCgnLmNtcy1kcmFnYXJlYScpLmZpbmQoJz4gLmNtcy1kcmFnZ2FibGVzJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5MaXN0ID0gbmF2LmNsb3Nlc3QoJy5jbXMtZHJhZ2dhYmxlJykuZmluZCgnPiAuY21zLWRyYWdnYWJsZXMnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtb2RhbC5vbignY21zLm1vZGFsLmxvYWRlZCcsICQucHJveHkodGhhdC5fc2V0dXBLZXlib2FyZFRyYXZlcnNpbmcsIHRoYXQpKTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vbignY21zLm1vZGFsLmxvYWRlZCcsIGZ1bmN0aW9uIGFkZFBsYWNlaG9sZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5MaXN0Lmhhc0NsYXNzKCdjbXMtaGlkZGVuJykgJiYgIWlzUGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3RvZ2dsZUNvbGxhcHNhYmxlKGRyYWdJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkKCcuY21zLWFkZC1wbHVnaW4tcGxhY2Vob2xkZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuYXBwZW5kVG8oY2hpbGRyZW5MaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2Nyb2xsVG9FbGVtZW50KHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vbignY21zLm1vZGFsLmNsb3NlZCcsIGZ1bmN0aW9uIHJlbW92ZVBsYWNlaG9sZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuY21zLWFkZC1wbHVnaW4tcGxhY2Vob2xkZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vbignY21zLm1vZGFsLnNob3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd24gPSAkKCcuY21zLW1vZGFsLW1hcmt1cCAuY21zLXBsdWdpbi1waWNrZXInKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGZvY3VzIHRoZSBmaWVsZCBpZiB1c2luZyBtb3VzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGtleWJvYXJkIHBvcHMgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmZpbmQoJ2lucHV0JykudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc1RvdWNoaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIHBsdWdpbnMgPSBuYXYuc2libGluZ3MoJy5jbXMtcGx1Z2luLXBpY2tlcicpO1xuXG4gICAgICAgICAgICAgICAgdGhhdC5fc2V0dXBRdWlja1NlYXJjaChwbHVnaW5zKTtcblxuICAgICAgICAgICAgICAgIG5hdi5vbih0aGlzLnRvdWNoU3RhcnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNUb3VjaGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSkub24odGhpcy5wb2ludGVyVXAsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICBDTVMuUGx1Z2luLl9oaWRlU2V0dGluZ3NNZW51KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2Ugd2UgZG9uJ3Qga25vdyBleGFjdCBwbHVnaW4gcGFyZW50IChiZWNhdXNlIGRyYWduZHJvcClcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBrbm93IHRoZSBwYXJlbnQgaWQgYnkgdGhlIHRpbWUgd2Ugb3BlbiBcImFkZCBwbHVnaW5cIiBkaWFsb2dcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsdWdpbnNDb3B5ID0gcGx1Z2lucy5jbG9uZSh0cnVlLCB0cnVlKS5kYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudElkJywgdGhhdC5fZ2V0SWQobmF2LmNsb3Nlc3QoJy5jbXMtZHJhZ2dhYmxlJykpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhhdC51aS5jb250YWluZXIuZGF0YSgnc2V0dGluZ3MnKS5hZGRQbHVnaW5IZWxwVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBwbHVnaW5zQ29weSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1MzAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwMFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgcHJvcGFnYXRpb25cbiAgICAgICAgICAgICAgICBuYXYub24oW3RoaXMucG9pbnRlclVwLCB0aGlzLnBvaW50ZXJEb3duLCB0aGlzLmNsaWNrLCB0aGlzLmRvdWJsZUNsaWNrXS5qb2luKCcgJyksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBuYXYuc2libGluZ3MoJy5jbXMtcXVpY2tzZWFyY2gsIC5jbXMtc3VibWVudS1kcm9wZG93bicpXG4gICAgICAgICAgICAgICAgICAgIC5vbihbdGhpcy5wb2ludGVyVXAsIHRoaXMuY2xpY2ssIHRoaXMuZG91YmxlQ2xpY2tdLmpvaW4oJyAnKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBldmVudCBoYW5kbGVycyBmb3IgcXVpY2tzZWFyY2hpbmcgaW4gdGhlIHBsdWdpbiBwaWNrZXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBRdWlja1NlYXJjaFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBwbHVnaW5zIHBsdWdpbnMgcGlja2VyIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwUXVpY2tTZWFyY2g6IGZ1bmN0aW9uIF9zZXR1cFF1aWNrU2VhcmNoKHBsdWdpbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gcGx1Z2lucy5maW5kKCc+IC5jbXMtcXVpY2tzZWFyY2gnKS5maW5kKCdpbnB1dCcpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBDTVMuQVBJLkhlbHBlcnMuZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIHRvIGFsd2F5cyBmaW5kIHRoZSBwbHVnaW5zUGlja2VyIGluIHRoZSBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgaG93IHdlIG1vdmUgdGhpbmdzIGludG8vb3V0IG9mIHRoZSBtb2RhbFxuICAgICAgICAgICAgICAgICAgICB2YXIgcGx1Z2luc1BpY2tlciA9IGlucHV0LmNsb3Nlc3QoJy5jbXMtcGx1Z2luLXBpY2tlcicpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9maWx0ZXJQbHVnaW5zTGlzdChwbHVnaW5zUGlja2VyLCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcblxuICAgICAgICAgICAgICAgIGlucHV0Lm9uKHRoaXMua2V5VXAsIGhhbmRsZXIpLm9uKHRoaXMua2V5VXAsIENNUy5BUEkuSGVscGVycy5kZWJvdW5jZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbHVnaW5zUGlja2VyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBDTVMuS0VZUy5FTlRFUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luc1BpY2tlciA9IGlucHV0LmNsb3Nlc3QoJy5jbXMtcGx1Z2luLXBpY2tlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luc1BpY2tlci5maW5kKCcuY21zLXN1Ym1lbnUtaXRlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5vdCgnLmNtcy1zdWJtZW51LWl0ZW0tdGl0bGUnKS5maWx0ZXIoJzp2aXNpYmxlJykuZmlyc3QoKS5maW5kKCc+IGEnKS5mb2N1cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAxMTApKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBjbGljayBoYW5kbGVycyBmb3IgdmFyaW91cyBwbHVnaW4vcGxhY2Vob2xkZXIgaXRlbXMuXG4gICAgICAgICAgICAgKiBJdGVtcyBjYW4gYmUgYW55d2hlcmUgaW4gdGhlIHBsdWdpbiBkcmFnaXRlbSwgbm90IG9ubHkgaW4gZHJvcGRvd24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBBY3Rpb25zXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IG5hdiBkcm9wZG93biB0cmlnZ2VyIHdpdGggdGhlIGl0ZW1zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXR1cEFjdGlvbnM6IGZ1bmN0aW9uIF9zZXR1cEFjdGlvbnMobmF2KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9ICcuY21zLXN1Ym1lbnUtZWRpdCwgLmNtcy1zdWJtZW51LWl0ZW0gYSc7XG4gICAgICAgICAgICAgICAgbmF2LnBhcmVudCgpLmZpbmQoaXRlbXMpLm9uKHRoYXQuY2xpY2ssIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzaG93IGxvYWRlciBhbmQgbWFrZSBzdXJlIHNjcm9sbCBkb2Vzbid0IGp1bXBcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLnNob3dMb2FkZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBDTVMuUGx1Z2luLl9oaWRlU2V0dGluZ3NNZW51KG5hdik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHN3aXRjaCBmb3Igc3VibmF2IGVudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlbC5hdHRyKCdkYXRhLXJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhZGQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYWRkUGx1Z2luKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5hdHRyKCdocmVmJykucmVwbGFjZSgnIycsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5jbG9zZXN0KCcuY21zLXBsdWdpbi1waWNrZXInKS5kYXRhKCdwYXJlbnRJZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FqYXhfYWRkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLlRvb2xiYXIub3BlbkFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGVsLmF0dHIoJ2hyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdDogSlNPTi5zdHJpbmdpZnkoZWwuZGF0YSgncG9zdCcpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZWwuZGF0YSgndGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogJC5wcm94eSh0aGF0LmVkaXRQbHVnaW5Qb3N0QWpheCwgdGhhdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzczogZWwuZGF0YSgnb24tc3VjY2VzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlZGl0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmVkaXRQbHVnaW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy51cmxzLmVkaXRfcGx1Z2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMucGx1Z2luX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy5wbHVnaW5fYnJlYWRjcnVtYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb3B5LWxhbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY29weVBsdWdpbih0aGlzLm9wdGlvbnMsIGVsLmF0dHIoJ2RhdGEtbGFuZ3VhZ2UnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb3B5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNvcHlQbHVnaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2N1dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jdXRQbHVnaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Bhc3RlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVsLnBhcmVudCgpLmhhc0NsYXNzKCdjbXMtc3VibWVudS1pdGVtLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5wYXN0ZVBsdWdpbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5oaWRlTG9hZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmRlbGV0ZVBsdWdpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnVybHMuZGVsZXRlX3BsdWdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnBsdWdpbl9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMucGx1Z2luX2JyZWFkY3J1bWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLlRvb2xiYXIuaGlkZUxvYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5fZGVsZWdhdGUoZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdXAga2V5Ym9hcmQgdHJhdmVyc2luZyBvZiBwbHVnaW4gcGlja2VyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3NldHVwS2V5Ym9hcmRUcmF2ZXJzaW5nXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0dXBLZXlib2FyZFRyYXZlcnNpbmc6IGZ1bmN0aW9uIF9zZXR1cEtleWJvYXJkVHJhdmVyc2luZygpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd24gPSAkKCcuY21zLW1vZGFsLW1hcmt1cCAuY21zLXBsdWdpbi1waWNrZXInKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRyb3Bkb3duLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFkZCBrZXkgZXZlbnRzXG4gICAgICAgICAgICAgICAgZG9jLm9mZih0aGlzLmtleURvd24gKyAnLnRyYXZlcnNlJyk7XG4gICAgICAgICAgICAgICAgZG9jLm9uKHRoaXMua2V5RG93biArICcudHJhdmVyc2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9ycyA9IGRyb3Bkb3duLmZpbmQoJy5jbXMtc3VibWVudS1pdGVtOnZpc2libGUgYScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBhbmNob3JzLmluZGV4KGFuY2hvcnMuZmlsdGVyKCc6Zm9jdXMnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYmluZCBhcnJvdyBkb3duIGFuZCB0YWIga2V5c1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBDTVMuS0VZUy5ET1dOIHx8IGUua2V5Q29kZSA9PT0gQ01TLktFWVMuVEFCKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IGFuY2hvcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcnMuZXEoaW5kZXggKyAxKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JzLmVxKDApLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBiaW5kIGFycm93IHVwIGFuZCBzaGlmdCt0YWIga2V5c1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBDTVMuS0VZUy5VUCB8fCAoZS5rZXlDb2RlID09PSBDTVMuS0VZUy5UQUIgJiYgZS5zaGlmdEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JzLmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcnMuZXEoaW5kZXggLSAxKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JzLmVxKGFuY2hvcnMubGVuZ3RoKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9wZW5zIHRoZSBzZXR0aW5ncyBtZW51IGZvciBhIHBsdWdpbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zaG93U2V0dGluZ3NNZW51XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IG5hdiB0cmlnZ2VyIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Nob3dTZXR0aW5nc01lbnU6IGZ1bmN0aW9uIChuYXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd24gPSB0aGlzLnVpLmRyb3Bkb3duO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRzID0gbmF2LnBhcmVudHNVbnRpbCgnLmNtcy1kcmFnYXJlYScpLmxhc3QoKTtcblxuICAgICAgICAgICAgICAgIG5hdi5hZGRDbGFzcygnY21zLWJ0bi1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRzLmFkZENsYXNzKCdjbXMtei1pbmRleC05OTk5Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgdmlzaWJsZSBzdGF0ZXNcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgZHJvcGRvd24gcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51aS53aW5kb3cuaGVpZ2h0KCkgKyB0aGlzLnVpLndpbmRvdy5zY3JvbGxUb3AoKSAtXG4gICAgICAgICAgICAgICAgICAgIG5hdi5vZmZzZXQoKS50b3AgLSBkcm9wZG93bi5oZWlnaHQoKSA8PSAxMCAmJiBuYXYub2Zmc2V0KCkudG9wIC0gZHJvcGRvd24uaGVpZ2h0KCkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5yZW1vdmVDbGFzcygnY21zLXN1Ym1lbnUtZHJvcGRvd24tdG9wJykuYWRkQ2xhc3MoJ2Ntcy1zdWJtZW51LWRyb3Bkb3duLWJvdHRvbScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLnJlbW92ZUNsYXNzKCdjbXMtc3VibWVudS1kcm9wZG93bi1ib3R0b20nKS5hZGRDbGFzcygnY21zLXN1Ym1lbnUtZHJvcGRvd24tdG9wJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGaWx0ZXJzIGdpdmVuIHBsdWdpbnMgbGlzdCBieSBhIHF1ZXJ5LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2ZpbHRlclBsdWdpbnNMaXN0XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IGxpc3QgcGx1Z2lucyBwaWNrZXIgZWxlbWVudFxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IGlucHV0IGlucHV0LCB3aGljaCB2YWx1ZSB0byBmaWx0ZXIgcGx1Z2lucyB3aXRoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9maWx0ZXJQbHVnaW5zTGlzdDogZnVuY3Rpb24gX2ZpbHRlclBsdWdpbnNMaXN0KGxpc3QsIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gbGlzdC5maW5kKCcuY21zLXN1Ym1lbnUtaXRlbScpO1xuICAgICAgICAgICAgICAgIHZhciB0aXRsZXMgPSBsaXN0LmZpbmQoJy5jbXMtc3VibWVudS1pdGVtLXRpdGxlJyk7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gaW5wdXQudmFsKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgcXVlcnkgaXMgemVyb1xuICAgICAgICAgICAgICAgIGlmIChxdWVyeSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMuYWRkKHRpdGxlcykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGl0ZW1zIGFuZCBmaWd1cmUgb3V0IGlmIHdlIG5lZWQgdG8gaGlkZSBpdGVtc1xuICAgICAgICAgICAgICAgIGl0ZW1zLmZpbmQoJ2EsIHNwYW4nKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtID0gJChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBpdGVtLnRleHQoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoID0gcXVlcnkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAodGV4dC5pbmRleE9mKHNlYXJjaCkgPj0gMCkgPyBpdGVtLnBhcmVudCgpLnNob3coKSA6IGl0ZW0ucGFyZW50KCkuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSB0aXRsZSBpcyBtYXRjaGluZ1xuICAgICAgICAgICAgICAgIHRpdGxlcy5maWx0ZXIoJzp2aXNpYmxlJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJChpdGVtKS5uZXh0VW50aWwoJy5jbXMtc3VibWVudS1pdGVtLXRpdGxlJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gYWx3YXlzIGRpc3BsYXkgdGl0bGUgb2YgYSBjYXRlZ29yeVxuICAgICAgICAgICAgICAgIGl0ZW1zLmZpbHRlcignOnZpc2libGUnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtID0gJChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJldigpLmhhc0NsYXNzKCdjbXMtc3VibWVudS1pdGVtLXRpdGxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucHJldigpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucHJldlVudGlsKCcuY21zLXN1Ym1lbnUtaXRlbS10aXRsZScpLmxhc3QoKS5wcmV2KCkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBlbGVtZW50IHZpc2libGUsIHNob3cgb25seSBmaXJzdCBjYXRlZ29yaXlcbiAgICAgICAgICAgICAgICBsaXN0LnNpYmxpbmdzKCcuY21zLXN1Ym1lbnUtZHJvcGRvd24tY2hpbGRyZW4nKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmFkZCh0aXRsZXMpLmZpbHRlcignOnZpc2libGUnKS5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LnNpYmxpbmdzKCcuY21zLXN1Ym1lbnUtZHJvcGRvd24tY2hpbGRyZW4nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUb2dnbGVzIGNvbGxhcHNhYmxlIGl0ZW0uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfdG9nZ2xlQ29sbGFwc2FibGVcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWwgZWxlbWVudCB0byB0b2dnbGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3RvZ2dsZUNvbGxhcHNhYmxlOiBmdW5jdGlvbiB0b2dnbGVDb2xsYXBzYWJsZShlbCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGF0Ll9nZXRJZChlbC5wYXJlbnQoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWdnYWJsZSA9IHRoaXMudWkuZHJhZ2dhYmxlO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcztcblxuICAgICAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IENNUy5zZXR0aW5ncztcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5zdGF0ZXMgPSBzZXR0aW5ncy5zdGF0ZXMgfHwgW107XG5cbiAgICAgICAgICAgICAgICAvLyBjb2xsYXBzYWJsZSBmdW5jdGlvbiBhbmQgc2F2ZSBzdGF0ZXNcbiAgICAgICAgICAgICAgICBpZiAoZWwuaGFzQ2xhc3MoJ2Ntcy1kcmFnaXRlbS1leHBhbmRlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnN0YXRlcy5zcGxpY2UoJC5pbkFycmF5KGlkLCBzZXR0aW5ncy5zdGF0ZXMpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlQ2xhc3MoJ2Ntcy1kcmFnaXRlbS1leHBhbmRlZCcpLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnPiAuY21zLWNvbGxhcHNhYmxlLWNvbnRhaW5lcicpLmFkZENsYXNzKCdjbXMtaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvYy5kYXRhKCdleHBhbmRtb2RlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gZHJhZ2dhYmxlLmZpbmQoJy5jbXMtZHJhZ2dhYmxlJykuZmluZCgnLmNtcy1kcmFnaXRlbS1jb2xsYXBzYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzQ2xhc3MoJ2Ntcy1kcmFnaXRlbS1leHBhbmRlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3RvZ2dsZUNvbGxhcHNhYmxlKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5zdGF0ZXMucHVzaChpZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKCdjbXMtZHJhZ2l0ZW0tZXhwYW5kZWQnKS5wYXJlbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJz4gLmNtcy1jb2xsYXBzYWJsZS1jb250YWluZXInKS5yZW1vdmVDbGFzcygnY21zLWhpZGRlbicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2MuZGF0YSgnZXhwYW5kbW9kZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGRyYWdnYWJsZS5maW5kKCcuY21zLWRyYWdnYWJsZScpLmZpbmQoJy5jbXMtZHJhZ2l0ZW0tY29sbGFwc2FibGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbS5oYXNDbGFzcygnY21zLWRyYWdpdGVtLWV4cGFuZGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdG9nZ2xlQ29sbGFwc2FibGUoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgc3RydWN0dXJib2FyZCBnZXRzIHVwZGF0ZWQgYWZ0ZXIgZXhwYW5kaW5nXG4gICAgICAgICAgICAgICAgdGhpcy51aS53aW5kb3cudHJpZ2dlcigncmVzaXplLnNpZGVmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSBzZXR0aW5nc1xuICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdXAgY29sbGFic3BhYmxlIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2NvbGxhcHNhYmxlc1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2NvbGxhcHNhYmxlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIG9uZSB0aW1lIHNldHVwXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuZHJhZ2dhYmxlID0gJCgnLmNtcy1kcmFnZ2FibGUtJyArIHRoaXMub3B0aW9ucy5wbHVnaW5faWQpO1xuICAgICAgICAgICAgICAgIHZhciBkcmFnaXRlbSA9IHRoaXMudWkuZHJhZ2dhYmxlLmZpbmQoJz4gLmNtcy1kcmFnaXRlbScpO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgd2hpY2ggYnV0dG9uIHNob3VsZCBiZSBzaG93biBmb3IgY29sbGFwc2VtZW51XG4gICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVscyA9ICQoaXRlbSkuZmluZCgnLmNtcy1kcmFnaXRlbS1jb2xsYXBzYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlbiA9IGVscy5maWx0ZXIoJy5jbXMtZHJhZ2l0ZW0tZXhwYW5kZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVscy5sZW5ndGggPT09IG9wZW4ubGVuZ3RoICYmIChlbHMubGVuZ3RoICsgb3Blbi5sZW5ndGggIT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGl0ZW0pLmZpbmQoJy5jbXMtZHJhZ2Jhci10aXRsZScpLmFkZENsYXNzKCdjbXMtZHJhZ2Jhci10aXRsZS1leHBhbmRlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gY2FuY2VsIGhlcmUgaWYgaXRzIG5vdCBhIGRyYWdnYWJsZVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy51aS5kcmFnZ2FibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhdHRhY2ggZXZlbnRzIHRvIGRyYWdnYWJsZVxuICAgICAgICAgICAgICAgIGRyYWdpdGVtLmZpbmQoJz4gLmNtcy1kcmFnaXRlbS10ZXh0Jykub24odGhpcy5jbGljaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRyYWdpdGVtLmhhc0NsYXNzKCdjbXMtZHJhZ2l0ZW0tY29sbGFwc2FibGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3RvZ2dsZUNvbGxhcHNhYmxlKGRyYWdpdGVtKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGFkZHMgZG91YmxlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgdGhpcy51aS5kcmFnZ2FibGUub24odGhpcy5kb3VibGVDbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmNtcy1wbHVnaW4tJyArIHRoYXQuX2dldElkKCQodGhpcykpKS50cmlnZ2VyKCdkYmxjbGljay5jbXMnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIG9ubHkgbmVlZHMgdG8gYmUgZXhjZWN1dGVkIG9uY2VcbiAgICAgICAgICAgICAgICBpZiAoQ01TLlRvb2xiYXIucmVhZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIGR1cGxpY2F0ZSBlbnRyaWVzXG4gICAgICAgICAgICAgICAgdmFyIHNvcnRlZEFyciA9IENNUy5zZXR0aW5ncy5zdGF0ZXMuc29ydCgpO1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZEFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWRBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRlZEFycltpXSAhPT0gc29ydGVkQXJyW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRBcnJheS5wdXNoKHNvcnRlZEFycltpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzLnN0YXRlcyA9IGZpbHRlcmVkQXJyYXk7XG5cbiAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGl0ZW1zXG4gICAgICAgICAgICAgICAgJC5lYWNoKENNUy5zZXR0aW5ncy5zdGF0ZXMsIGZ1bmN0aW9uIChpbmRleCwgaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gJCgnLmNtcy1kcmFnZ2FibGUtJyArIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBhZGQgdGhpcyBjbGFzcyB0byBlbGVtZW50cyB3aGljaCBoYXZlIGEgZHJhZ2dhYmxlIGFyZWFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmZpbmQoJy5jbXMtZHJhZ2dhYmxlcycpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuZmluZCgnPiAuY21zLWNvbGxhcHNhYmxlLWNvbnRhaW5lcicpLnJlbW92ZUNsYXNzKCdjbXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5maW5kKCc+IC5jbXMtZHJhZ2l0ZW0nKS5hZGRDbGFzcygnY21zLWRyYWdpdGVtLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBnbG9iYWwgc2V0dXBcbiAgICAgICAgICAgICAgICBDTVMuVG9vbGJhci5yZWFkeSA9IHRydWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV4cGFuZHMgYWxsIHRoZSBjb2xsYXBzYWJsZXMgaW4gdGhlIGdpdmVuIHBsYWNlaG9sZGVyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2V4cGFuZEFsbFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbCB0cmlnZ2VyIGVsZW1lbnQgdGhhdCBpcyBhIGNoaWxkIG9mIGEgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2V4cGFuZEFsbDogZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IGVsLmNsb3Nlc3QoJy5jbXMtZHJhZ2FyZWEnKS5maW5kKCcuY21zLWRyYWdpdGVtLWNvbGxhcHNhYmxlJyk7XG4gICAgICAgICAgICAgICAgLy8gY2FuY2VsIGlmIHRoZXJlIGFyZSBubyBpdGVtc1xuICAgICAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtLmhhc0NsYXNzKCdjbXMtZHJhZ2l0ZW0tZXhwYW5kZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdG9nZ2xlQ29sbGFwc2FibGUoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKCdjbXMtZHJhZ2Jhci10aXRsZS1leHBhbmRlZCcpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gQ01TLnNldHRpbmdzO1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLmRyYWdiYXJzID0gc2V0dGluZ3MuZHJhZ2JhcnMgfHwgW107XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuZHJhZ2JhcnMucHVzaCh0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXJfaWQpO1xuICAgICAgICAgICAgICAgIENNUy5BUEkuVG9vbGJhci5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbGxhcHNlcyBhbGwgdGhlIGNvbGxhcHNhYmxlcyBpbiB0aGUgZ2l2ZW4gcGxhY2Vob2xkZXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfY29sbGFwc2VBbGxcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWwgdHJpZ2dlciBlbGVtZW50IHRoYXQgaXMgYSBjaGlsZCBvZiBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9jb2xsYXBzZUFsbDogZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IGVsLmNsb3Nlc3QoJy5jbXMtZHJhZ2FyZWEnKS5maW5kKCcuY21zLWRyYWdpdGVtLWNvbGxhcHNhYmxlJyk7XG4gICAgICAgICAgICAgICAgaXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzQ2xhc3MoJ2Ntcy1kcmFnaXRlbS1leHBhbmRlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90b2dnbGVDb2xsYXBzYWJsZShpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlQ2xhc3MoJ2Ntcy1kcmFnYmFyLXRpdGxlLWV4cGFuZGVkJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBDTVMuc2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuZHJhZ2JhcnMgPSBzZXR0aW5ncy5kcmFnYmFycyB8fCBbXTtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5kcmFnYmFycy5zcGxpY2UoJC5pbkFycmF5KHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcl9pZCwgc2V0dGluZ3Muc3RhdGVzKSwgMSk7XG4gICAgICAgICAgICAgICAgQ01TLkFQSS5Ub29sYmFyLnNldFNldHRpbmdzKHNldHRpbmdzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0cyB0aGUgaWQgb2YgdGhlIGVsZW1lbnQsIHVzZXMgQ01TLlN0cnVjdHVyZUJvYXJkIGluc3RhbmNlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2dldElkXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IGVsIGVsZW1lbnQgdG8gZ2V0IGlkIGZyb21cbiAgICAgICAgICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2dldElkOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ01TLkFQSS5TdHJ1Y3R1cmVCb2FyZC5nZXRJZChlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldHMgdGhlIGlkcyBvZiB0aGUgbGlzdCBvZiBlbGVtZW50cywgdXNlcyBDTVMuU3RydWN0dXJlQm9hcmQgaW5zdGFuY2UuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfZ2V0SWRzXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IGVscyBlbGVtZW50cyB0byBnZXQgaWQgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybiB7U3RyaW5nW119XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9nZXRJZHM6IGZ1bmN0aW9uIChlbHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ01TLkFQSS5TdHJ1Y3R1cmVCb2FyZC5nZXRJZHMoZWxzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2hvd3MgYW5kIGltbWVkaWF0ZWx5IGZhZGVzIG91dCBhIHN1Y2Nlc3Mgbm90aWZpY2F0aW9uICh3aGVuXG4gICAgICAgICAgICAgKiBwbHVnaW4gd2FzIHN1Y2Nlc3NmdWxseSBtb3ZlZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zaG93U3VjY2Vzc1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbCBkcmFnZ2FibGUgZWxlbWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2hvd1N1Y2Nlc3M6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIHZhciB0cGwgPSAkKCc8ZGl2IGNsYXNzPVwiY21zLWRyYWdpdGVtLXN1Y2Nlc3NcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICBlbC5hZGRDbGFzcygnY21zLWRyYWdnYWJsZS1zdWNjZXNzJykuYXBwZW5kKHRwbCk7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgdHBsLmZhZGVPdXQoMTAwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVDbGFzcygnY21zLWRyYWdnYWJsZS1zdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHN0cnVjdHVyYm9hcmQgZ2V0cyB1cGRhdGVkIGFmdGVyIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICB0aGlzLnVpLndpbmRvdy50cmlnZ2VyKCdyZXNpemUuc2lkZWZyYW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIaWRlcyB0aGUgb3BlbmVkIHNldHRpbmdzIG1lbnUuIEJ5IGRlZmF1bHQgbG9va3MgZm9yIGFueSBvcGVuIG9uZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZXRob2QgX2hpZGVTZXR0aW5nc01lbnVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gW25hdl0gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIHN1Ym5hdiB0cmlnZ2VyXG4gICAgICAgICAqL1xuICAgICAgICBDTVMuUGx1Z2luLl9oaWRlU2V0dGluZ3NNZW51ID0gZnVuY3Rpb24gKG5hdikge1xuICAgICAgICAgICAgbmF2ID0gbmF2IHx8ICQoJy5jbXMtc3VibWVudS1idG4uY21zLWJ0bi1hY3RpdmUnKTtcbiAgICAgICAgICAgIGlmICghbmF2Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5hdi5yZW1vdmVDbGFzcygnY21zLWJ0bi1hY3RpdmUnKTtcblxuICAgICAgICAgICAgLy8gc2V0IGNvcnJlY3QgYWN0aXZlIHN0YXRlXG4gICAgICAgICAgICBuYXYuY2xvc2VzdCgnLmNtcy1kcmFnZ2FibGUnKS5kYXRhKCdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgICAgICAkKCcuY21zLXotaW5kZXgtOTk5OScpLnJlbW92ZUNsYXNzKCdjbXMtei1pbmRleC05OTk5Jyk7XG5cbiAgICAgICAgICAgIG5hdi5zaWJsaW5ncygnLmNtcy1zdWJtZW51LWRyb3Bkb3duJykuaGlkZSgpO1xuICAgICAgICAgICAgbmF2LnNpYmxpbmdzKCcuY21zLXF1aWNrc2VhcmNoJykuaGlkZSgpO1xuICAgICAgICAgICAgLy8gcmVzZXQgc2VhcmNoXG4gICAgICAgICAgICBuYXYuc2libGluZ3MoJy5jbXMtcXVpY2tzZWFyY2gnKVxuICAgICAgICAgICAgICAgIC5maW5kKCdpbnB1dCcpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcih0aGlzLmtleVVwKS5ibHVyKCk7XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IHJlbGF0aXZpdHlcbiAgICAgICAgICAgICQoJy5jbXMtZHJhZ2JhcicpLmNzcygncG9zaXRpb24nLCAnJyk7XG4gICAgICAgIH07XG4gICAgfSk7XG5cbn0pKENNUy4kKTtcbiIsIi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBTVFJVQ1RVUkVCT0FSRFxuLyoqXG4gKiBAbW9kdWxlIENNU1xuICovXG52YXIgQ01TID0gd2luZG93LkNNUyB8fCB7fTtcblxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gc2hvcnRoYW5kIGZvciBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCk7XG4gICAgJChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwbGFjZWhvbGRlcnMgPSAkKCcuY21zLWRyYWdhcmVhOm5vdCguY21zLWNsaXBib2FyZC1jb250YWluZXJzKScpO1xuICAgICAgICBmdW5jdGlvbiBhY3R1YWxpemVFbXB0eVBsYWNlaG9sZGVycygpIHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVycy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnPiAuY21zLWRyYWdnYWJsZXMnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5jbXMtZHJhZ2dhYmxlOm5vdCguY21zLWRyYWdnYWJsZS1pcy1kcmFnZ2luZyknKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIucmVtb3ZlQ2xhc3MoJ2Ntcy1kcmFnYXJlYS1lbXB0eScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyLmFkZENsYXNzKCdjbXMtZHJhZ2FyZWEtZW1wdHknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFjdHVhbGl6ZVBsdWdpbnNDb2xsYXBzaWJsZVN0YXR1cyhlbHMpIHtcbiAgICAgICAgICAgIGVscy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRMaXN0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luRHJhZ0l0ZW0gPSBjaGlsZExpc3QuY2xvc2VzdCgnLmNtcy1kcmFnZ2FibGUnKS5maW5kKCc+IC5jbXMtZHJhZ2l0ZW0nKTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGlsZExpc3QuY2hpbGRyZW4oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luRHJhZ0l0ZW0uYWRkQ2xhc3MoJ2Ntcy1kcmFnaXRlbS1jb2xsYXBzYWJsZSBjbXMtZHJhZ2l0ZW0tZXhwYW5kZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW5EcmFnSXRlbS5yZW1vdmVDbGFzcygnY21zLWRyYWdpdGVtLWNvbGxhcHNhYmxlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBkcmFnICYgZHJvcCwgbW9kZSBzd2l0Y2hpbmcgYW5kIGNvbGxhcHNhYmxlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNsYXNzIFN0cnVjdHVyZUJvYXJkXG4gICAgICAgICAqIEBuYW1lc3BhY2UgQ01TXG4gICAgICAgICAqIEB1c2VzIENNUy5BUEkuSGVscGVyc1xuICAgICAgICAgKi9cbiAgICAgICAgQ01TLlN0cnVjdHVyZUJvYXJkID0gbmV3IENNUy5DbGFzcyh7XG5cbiAgICAgICAgICAgIGltcGxlbWVudDogW0NNUy5BUEkuSGVscGVyc10sXG5cbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBzcGVlZDogMzAwXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudHNcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cFVJKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzdGF0ZXNcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrID0gJ2NsaWNrLmNtcyc7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyVXAgPSAncG9pbnRlcnVwLmNtcyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIHNldHVwIGluaXRpYWwgc3R1ZmZcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBNb2RlU3dpdGNoZXIoKTtcbiAgICAgICAgICAgICAgICBhY3R1YWxpemVFbXB0eVBsYWNlaG9sZGVycygpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdG9yZXMgYWxsIGpRdWVyeSByZWZlcmVuY2VzIHdpdGhpbiBgdGhpcy51aWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBVSVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwVUk6IGZ1bmN0aW9uIHNldHVwVUkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9ICQoJy5jbXMtc3RydWN0dXJlJyk7XG4gICAgICAgICAgICAgICAgdmFyIHRvb2xiYXIgPSAkKCcuY21zLXRvb2xiYXInKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJCgnLmNtcy1zdHJ1Y3R1cmUtY29udGVudCcpLFxuICAgICAgICAgICAgICAgICAgICBkb2M6ICQoZG9jdW1lbnQpLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3c6ICQod2luZG93KSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogJCgnaHRtbCcpLFxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiB0b29sYmFyLFxuICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZXM6ICQoJy5jbXMtZHJhZ2dhYmxlcycpLCAvLyBnbG9iYWwgc2NvcGUgdG8gaW5jbHVkZSBjbGlwYm9hcmRcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luczogJCgnLmNtcy1wbHVnaW4nKSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyX21vZGVsOiAkKCcuY21zLXJlbmRlci1tb2RlbCcpLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcnM6ICQoJy5jbXMtcGxhY2Vob2xkZXInKSxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2l0ZW1zOiAkKCcuY21zLWRyYWdnYWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBkcmFnYXJlYXM6ICQoJy5jbXMtZHJhZ2FyZWEnKSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhck1vZGVTd2l0Y2hlcjogdG9vbGJhci5maW5kKCcuY21zLXRvb2xiYXItaXRlbS1jbXMtbW9kZS1zd2l0Y2hlcicpLFxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyTW9kZUxpbmtzOiB0b29sYmFyLmZpbmQoJy5jbXMtdG9vbGJhci1pdGVtLWNtcy1tb2RlLXN3aXRjaGVyIGEnKSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhclRyaWdnZXI6ICQoJy5jbXMtdG9vbGJhci10cmlnZ2VyJylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbml0aWFsIHNldHVwIChhbmQgZWFybHkgYmFpbCBpZiBzcGVjaWZpY1xuICAgICAgICAgICAgICogZWxlbWVudHMgZG8gbm90IGV4aXN0KS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zZXR1cFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiB0aGVyZSBhcmUgbm8gZHJhZ2FyZWFzXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnVpLmRyYWdhcmVhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiB0aGVyZSBpcyBubyBzdHJ1Y3R1cmUgLyBjb250ZW50IHN3aXRjaGVyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnVpLnRvb2xiYXJNb2RlU3dpdGNoZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzZXR1cCB0b29sYmFyIG1vZGVcbiAgICAgICAgICAgICAgICAvLyBGSVhNRSB0aGlzIHNldFRpbWVvdXQgaXMgbmVlZGVkIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAvLyBwbHVnaW5zIGFyZSBpbml0aWFsaXplZCBhZnRlciBhbGwgdGhlIHNjcmlwdHMgYXJlIHByb2Nlc3NlZFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBiZSBmaXhlZCBidHcuIF9yZXNpemVCb2FyZCB3YW50cyBwbHVnaW5zIHRvIGJlIGluaXRpYWxpemVkLFxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSB0aHJvd3MgZXJyb3JzXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDTVMuc2V0dGluZ3MubW9kZSA9PT0gJ3N0cnVjdHVyZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2hvdyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJpbmcgaGlkZSBoZXJlIHRvIHN3aXRjaCBwcm9wZXIgY2xhc3NuYW1lcyBvbiBzd2l0Y2hlclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5oaWRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBtb2RlcyBzaG91bGQgYmUgdmlzaWJsZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVpLnBsYWNlaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyTW9kZVN3aXRjaGVyLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgZHJhZyAmIGRyb3AgZnVuY3Rpb25hbGl0eVxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWcoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBldmVudHMgaGFuZGxlcnMgZm9yIHN3aXRjaGluZ1xuICAgICAgICAgICAgICogc3RydWN0dXJlYm9hcmQgbW9kZXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBNb2RlU3dpdGNoZXJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXR1cE1vZGVTd2l0Y2hlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgbW9kZXMgPSB0aGF0LnVpLnRvb2xiYXJNb2RlTGlua3M7XG5cbiAgICAgICAgICAgICAgICAvLyBzaG93IGVkaXQgbW9kZVxuICAgICAgICAgICAgICAgIG1vZGVzLmVxKDEpLm9uKHRoYXQuY2xpY2sgKyAnICcgKyB0aGF0LnBvaW50ZXJVcCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgYWxyZWFkeSBhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKENNUy5zZXR0aW5ncy5tb2RlID09PSAnZWRpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgaGlkZVxuICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBzaG93IHN0cnVjdHVyZSBtb2RlXG4gICAgICAgICAgICAgICAgbW9kZXMuZXEoMCkub24odGhhdC5jbGljayArICcgJyArIHRoYXQucG9pbnRlclVwLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoQ01TLnNldHRpbmdzLm1vZGUgPT09ICdzdHJ1Y3R1cmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHNob3dcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBrZXlib2FyZCBoYW5kbGluZ1xuICAgICAgICAgICAgICAgIC8vIG9ubHkgaWYgdGhlcmUgaXMgYSBzdHJ1Y3R1cmUgLyBjb250ZW50IHN3aXRjaGVyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudWkudG9vbGJhck1vZGVTd2l0Y2hlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5kb2Mub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbiBpbXBvcnRhbnQgZm9jdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXZlRm9jdXNlZEZpZWxkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IENNUy5LRVlTLlNQQUNFICYmICFoYXZlRm9jdXNlZEZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDTVMuc2V0dGluZ3MubW9kZSA9PT0gJ3N0cnVjdHVyZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDTVMuc2V0dGluZ3MubW9kZSA9PT0gJ2VkaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaG93cyB0aGUgc3RydWN0dXJlYm9hcmQuIChTdHJ1Y3R1cmUgbW9kZSlcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIHNob3dcbiAgICAgICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5pdCB0cnVlIGlmIHRoaXMgaXMgZmlyc3QgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKGluaXQpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgc2hvdyBpZiBsaXZlIG1vZHVzIGlzIGFjdGl2ZVxuICAgICAgICAgICAgICAgIGlmIChDTVMuY29uZmlnLm1vZGUgPT09ICdsaXZlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaW4gb3JkZXIgdG8gZ2V0IGNvbnNpc3RlbnQgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICAvLyBvZiB0aGUgdG9vbGJhciB3ZSBoYXZlIHRvIGtub3cgaWYgdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICAvLyBoYWQgdGhlIHNjcm9sbGJhciBuYWQgaWYgaXQgaGFkIC0gd2UgYWRqdXN0XG4gICAgICAgICAgICAgICAgLy8gdGhlIHRvb2xiYXIgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLnVpLnRvb2xiYXIud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQmFyV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIHdpZHRoO1xuICAgICAgICAgICAgICAgIGlmIChzY3JvbGxCYXJXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXIuY3NzKCdyaWdodCcsIHNjcm9sbEJhcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyVHJpZ2dlci5jc3MoJ3JpZ2h0Jywgc2Nyb2xsQmFyV2lkdGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNldCBhY3RpdmUgaXRlbVxuICAgICAgICAgICAgICAgIHZhciBtb2RlcyA9IHRoaXMudWkudG9vbGJhck1vZGVMaW5rcztcbiAgICAgICAgICAgICAgICBtb2Rlcy5yZW1vdmVDbGFzcygnY21zLWJ0bi1hY3RpdmUnKS5lcSgwKS5hZGRDbGFzcygnY21zLWJ0bi1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmh0bWwucmVtb3ZlQ2xhc3MoJ2Ntcy1zdHJ1Y3R1cmUtbW9kZS1jb250ZW50JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdjbXMtc3RydWN0dXJlLW1vZGUtc3RydWN0dXJlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBhcHBseSBuZXcgc2V0dGluZ3NcbiAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MubW9kZSA9ICdzdHJ1Y3R1cmUnO1xuICAgICAgICAgICAgICAgIGlmICghaW5pdCkge1xuICAgICAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MgPSB0aGlzLnNldFNldHRpbmdzKENNUy5zZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGFsbCBlbGVtZW50cyBhcmUgdmlzaWJsZVxuICAgICAgICAgICAgICAgIHRoaXMudWkuZHJhZ2FyZWFzLnNob3coKTtcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgY2FudmFzXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvd0JvYXJkKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEhpZGVzIHRoZSBzdHJ1Y3R1cmVib2FyZC4gKENvbnRlbnQgbW9kZSlcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGluaXQgdHJ1ZSBpZiB0aGlzIGlzIGZpcnN0IGluaXRpYWxpemF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uIChpbml0KSB7XG4gICAgICAgICAgICAgICAgLy8gY2FuY2VsIHNob3cgaWYgbGl2ZSBtb2R1cyBpcyBhY3RpdmVcbiAgICAgICAgICAgICAgICBpZiAoQ01TLmNvbmZpZy5tb2RlID09PSAnbGl2ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRvb2xiYXIgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXIuY3NzKCdyaWdodCcsICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXJUcmlnZ2VyLmNzcygncmlnaHQnLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgYWN0aXZlIGl0ZW1cbiAgICAgICAgICAgICAgICB2YXIgbW9kZXMgPSB0aGlzLnVpLnRvb2xiYXJNb2RlTGlua3M7XG4gICAgICAgICAgICAgICAgbW9kZXMucmVtb3ZlQ2xhc3MoJ2Ntcy1idG4tYWN0aXZlJykuZXEoMSkuYWRkQ2xhc3MoJ2Ntcy1idG4tYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS5odG1sLnJlbW92ZUNsYXNzKCdjbXMtc3RydWN0dXJlLW1vZGUtc3RydWN0dXJlJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdjbXMtc3RydWN0dXJlLW1vZGUtY29udGVudCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGlkZSBjbGlwYm9hcmQgaWYgaW4gZWRpdCBtb2RlXG4gICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIuZmluZCgnLmNtcy1jbGlwYm9hcmQnKS5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MubW9kZSA9ICdlZGl0JztcbiAgICAgICAgICAgICAgICBpZiAoIWluaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzID0gdGhpcy5zZXRTZXR0aW5ncyhDTVMuc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhpZGUgY2FudmFzXG4gICAgICAgICAgICAgICAgdGhpcy5faGlkZUJvYXJkKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldHMgdGhlIGlkIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbCBlbGVtZW50IHRvIGdldCBpZCBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldElkOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgbm8gZWxlbWVudCBpcyBkZWZpbmVkXG4gICAgICAgICAgICAgICAgaWYgKGVsID09PSB1bmRlZmluZWQgfHwgZWwgPT09IG51bGwgfHwgZWwubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGNscyA9IGVsLmF0dHIoJ2NsYXNzJykuc3BsaXQoJyAnKVsxXTtcblxuICAgICAgICAgICAgICAgIGlmIChlbC5oYXNDbGFzcygnY21zLXBsdWdpbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gY2xzLnJlcGxhY2UoJ2Ntcy1wbHVnaW4tJywgJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuaGFzQ2xhc3MoJ2Ntcy1kcmFnZ2FibGUnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGNscy5yZXBsYWNlKCdjbXMtZHJhZ2dhYmxlLScsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsLmhhc0NsYXNzKCdjbXMtcGxhY2Vob2xkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGNscy5yZXBsYWNlKCdjbXMtcGxhY2Vob2xkZXItJywgJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuaGFzQ2xhc3MoJ2Ntcy1kcmFnYmFyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBjbHMucmVwbGFjZSgnY21zLWRyYWdiYXItJywgJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuaGFzQ2xhc3MoJ2Ntcy1kcmFnYXJlYScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gY2xzLnJlcGxhY2UoJ2Ntcy1kcmFnYXJlYS0nLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXRzIHRoZSBpZHMgb2YgdGhlIGxpc3Qgb2YgIGVsZW1lbnRzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbCBlbGVtZW50cyB0byBnZXQgaWQgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybiB7U3RyaW5nW119XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldElkczogZnVuY3Rpb24gKGVscykge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICBlbHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2godGhhdC5nZXRJZCgkKHRoaXMpKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBY3R1YWxseSBzaG93cyB0aGUgYm9hcmQgY2FudmFzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3Nob3dCb2FyZFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Nob3dCb2FyZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuZHJhZ2FyZWFzLmNzcygnb3BhY2l0eScsIDEpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5wbHVnaW5zLm5vdCh0aGlzLnVpLnJlbmRlcl9tb2RlbCkuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkucGxhY2Vob2xkZXJzLnNob3coKTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBldmVudFxuICAgICAgICAgICAgICAgIGlmIChDTVMuY29uZmlnLnNpbXBsZVN0cnVjdHVyZUJvYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy51aS5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJlYXMgPSBjb250ZW50LmZpbmQoJy5jbXMtZHJhZ2FyZWEnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvcnJlY3QgY3NzIGF0dHJpYnV0ZXMgZm9yIHRoZSBuZXcgbW9kZVxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFkZENsYXNzKCdjbXMtc3RydWN0dXJlLWNvbnRlbnQtc2ltcGxlJyk7XG4gICAgICAgICAgICAgICAgICAgIGFyZWFzLmFkZENsYXNzKCdjbXMtZHJhZ2FyZWEtc2ltcGxlJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxldHMgcmVvcmRlciBwbGFjZWhvbGRlcnNcbiAgICAgICAgICAgICAgICAgICAgYXJlYXMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKGl0ZW0pLmhhc0NsYXNzKCdjbXMtZHJhZ2FyZWEtc3RhdGljJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdyBsZXRzIGdldCB0aGUgZmlyc3QgaW5zdGFuY2UgYW5kIGFkZCBzb21lIHBhZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgYXJlYXMuZmlsdGVyKCcuY21zLWRyYWdhcmVhLXN0YXRpYycpLmVxKDApLmNzcygnbWFyZ2luLXRvcCcsICc1MHB4Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5jb250YWluZXIuYWRkQ2xhc3MoJ2Ntcy1zdHJ1Y3R1cmUtZHluYW1pYycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLndpbmRvdy5vbigncmVzaXplLnNpZGVmcmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3Jlc2l6ZUJvYXJkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLnRyaWdnZXIoJ3Jlc2l6ZS5zaWRlZnJhbWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEhpZGVzIHRoZSBib2FyZCBjYW52YXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfaGlkZUJvYXJkXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfaGlkZUJvYXJkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gaGlkZSBlbGVtZW50c1xuICAgICAgICAgICAgICAgIHRoaXMudWkuY29udGFpbmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnBsdWdpbnMuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkucGxhY2Vob2xkZXJzLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIGRldGFjaCBldmVudFxuICAgICAgICAgICAgICAgIHRoaXMudWkud2luZG93Lm9mZigncmVzaXplLnNpZGVmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS53aW5kb3cudHJpZ2dlcignc3RydWN0dXJlYm9hcmRfaGlkZGVuLnNpZGVmcmFtZScpO1xuICAgICAgICAgICAgICAgIGlmICghQ01TLmNvbmZpZy5zaW1wbGVTdHJ1Y3R1cmVCb2FyZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLmNvbnRhaW5lci5oZWlnaHQodGhpcy51aS5kb2Mub3V0ZXJIZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNpemVzIHRoZSBwbGFjZWhvbGRlciB0byBmaXQgdGhlaXIgcGxhY2VtZW50XG4gICAgICAgICAgICAgKiBhbmQgdGhlIHN0cnVjdHVyZSBib2FyZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9yZXNpemVCb2FyZFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIGFzIG9mIENNUyAzLjJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Jlc2l6ZUJvYXJkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHBsYWNlaG9sZGVyIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgYXJlYSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIG1pbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGFyZWFQYXJlbnRPZmZzZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gZGVsYXkgc2luY2UgaGVpZ2h0IGNoYW5nZXMgd2hlbiB0b2dnbGluZyBtb2Rlc1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLmNvbnRhaW5lci5oZWlnaHQodGhhdC51aS5kb2Mub3V0ZXJIZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzdGFydCBjYWxjdWxhdGluZ1xuICAgICAgICAgICAgICAgIHRoaXMudWkucGxhY2Vob2xkZXJzLmVhY2goZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAkKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGl0ZW0uZGF0YSgnc2V0dGluZ3MnKS5wbGFjZWhvbGRlcl9pZDtcbiAgICAgICAgICAgICAgICAgICAgYXJlYSA9ICQoJy5jbXMtZHJhZ2FyZWEtJyArIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IG9mZnNldCwgd2UgbmVlZCB0byBzZXQgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVycyBjb3JyZWN0IGhlaWdodHMgYW5kIHRoYW4gc2V0IHRoZSBhY2NvcmRpbmcgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgaXRlbS5oZWlnaHQoYXJlYS5vdXRlckhlaWdodCh0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCBtaW4gd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgbWluID0gKGl0ZW0ud2lkdGgoKSkgPyAwIDogMTUwO1xuICAgICAgICAgICAgICAgICAgICAvLyBhcyBhcmVhIGlzIFwiY3NzIHBvc2l0aW9uZWRcIiBhbmQganF1ZXJ5IG9mZnNldCBmdW5jdGlvbiBpcyByZWxhdGl2ZSB0byB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQgKG5vdCB0aGUgZmlyc3QgcmVsYXRpdmUvYWJzb2x1dGUgcGFyZW50KSB3ZSBuZWVkIHRvIHN1YnN0cmFjdFxuICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdCByZWxhdGl2ZS9hYnNvbHV0ZSBwYXJlbnQgb2Zmc2V0LlxuICAgICAgICAgICAgICAgICAgICBhcmVhUGFyZW50T2Zmc2V0ID0gJChhcmVhKS5vZmZzZXRQYXJlbnQoKS5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgYXJlYS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBpdGVtLm9mZnNldCgpLnRvcCAtIGFyZWFQYXJlbnRPZmZzZXQudG9wIC0gNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGl0ZW0ub2Zmc2V0KCkubGVmdCAtIGFyZWFQYXJlbnRPZmZzZXQubGVmdCAtIG1pbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtLndpZHRoKCkgKyBtaW5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdXAgYWxsIHRoZSBzb3J0YWJsZXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfZHJhZ1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2RyYWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsUGx1Z2luQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS5zb3J0YWJsZXMubmVzdGVkU29ydGFibGUoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtczogJz4gLmNtcy1kcmFnZ2FibGU6bm90KC5jbXMtZHJhZ2dhYmxlLWRpc2FibGVkIC5jbXMtZHJhZ2dhYmxlKScsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnY21zLWRyb3BwYWJsZScsXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RXaXRoOiAnLmNtcy1kcmFnZ2FibGVzOm5vdCguY21zLWhpZGRlbiknLFxuICAgICAgICAgICAgICAgICAgICB0b2xlcmFuY2U6ICdpbnRlcnNlY3QnLFxuICAgICAgICAgICAgICAgICAgICB0b2xlcmFuY2VFbGVtZW50OiAnPiBkaXYnLFxuICAgICAgICAgICAgICAgICAgICBkcm9wT25FbXB0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xvbmluZyBodWdlIHN0cnVjdHVyZSBpcyBhIHBlcmZvcm1hbmNlIGxvc3MgY29tcGFyZWQgdG8gY2xvbmluZyBqdXN0IGEgZHJhZ2l0ZW1cbiAgICAgICAgICAgICAgICAgICAgaGVscGVyOiBmdW5jdGlvbiBjcmVhdGVIZWxwZXIoZSwgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lID0gaXRlbS5maW5kKCc+IC5jbXMtZHJhZ2l0ZW0nKS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUud3JhcCgnPGRpdiBjbGFzcz1cIicgKyBpdGVtWzBdLmNsYXNzTmFtZSArICdcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG86ICcuY21zLXN0cnVjdHVyZS1jb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kVG86ICcuY21zJyxcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAnbW92ZScsXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvckF0OiB7IGxlZnQ6IC0xNSwgdG9wOiAtMTUgfSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiA5OTk5OTk5LFxuICAgICAgICAgICAgICAgICAgICBkZWxheTogMTAwLFxuICAgICAgICAgICAgICAgICAgICB0YWJTaXplOiAxNSxcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVzdGVkU29ydGFibGVcbiAgICAgICAgICAgICAgICAgICAgbGlzdFR5cGU6ICdkaXYuY21zLWRyYWdnYWJsZXMnLFxuICAgICAgICAgICAgICAgICAgICBkb05vdENsZWFyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlTmVzdGluZ0NsYXNzOiAnY21zLWRyYWdnYWJsZS1kaXNhYmxlZCcsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2xhc3M6ICdjbXMtZHJhZ2dhYmxlLWRpc2FsbG93ZWQnLFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxTcGVlZDogMTUsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFNlbnNpdGl2aXR5OiB0aGF0LnVpLndpbmRvdy5oZWlnaHQoKSAqIDAuMixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChlLCB1aSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5jb250ZW50LmF0dHIoJ2RhdGEtdG91Y2gtYWN0aW9uJywgJ25vbmUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQbHVnaW5Db250YWluZXIgPSB1aS5pdGVtLmNsb3Nlc3QoJy5jbXMtZHJhZ2dhYmxlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93IGVtcHR5XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWxpemVFbXB0eVBsYWNlaG9sZGVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGFsbCBtZW51cyBhcmUgY2xvc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuUGx1Z2luLl9oaWRlU2V0dGluZ3NNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIGluIG1pbmQgdGhhdCBjYWNoaW5nIGNtcy1kcmFnZ2FibGVzIHF1ZXJ5IG9ubHkgd29ya3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzIGxvbmcgYXMgd2UgZG9uJ3QgY3JlYXRlIHRoZW0gb24gdGhlIGZseVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5zb3J0YWJsZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2Ntcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZml4ZXMgcGxhY2Vob2xkZXIgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICB1aS5pdGVtLmFkZENsYXNzKCdjbXMtaXMtZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpLmhlbHBlci5hZGRDbGFzcygnY21zLWRyYWdnYWJsZS1pcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVpLml0ZW0uZmluZCgnPiAuY21zLWRyYWdnYWJsZXMnKS5jaGlsZHJlbigpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLmhlbHBlci5hZGRDbGFzcygnY21zLWRyYWdnYWJsZS1zdGFjaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdHRhY2ggZXNjYXBlIGV2ZW50IHRvIGNhbmNlbCBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5kb2Mub24oJ2tleXVwLmNtcy5pbnRlcnJ1cHQnLCBmdW5jdGlvbiAoZSwgY2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gQ01TLktFWVMuRVNDICYmIHRoYXQuZHJhZ2dpbmcgfHwgY2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC51aS5zb3J0YWJsZS5wcm90b3R5cGUuX21vdXNlU3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLnNvcnRhYmxlcy50cmlnZ2VyKCdtb3VzZXVwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlU3RvcDogZnVuY3Rpb24gKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdWkuaXRlbS5yZW1vdmVDbGFzcygnY21zLWlzLWRyYWdnaW5nIGNtcy1kcmFnZ2FibGUtc3RhY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkuZG9jLm9mZigna2V5dXAuY21zLmludGVycnVwdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5jb250ZW50LmF0dHIoJ2RhdGEtdG91Y2gtYWN0aW9uJywgJ3Bhbi15Jyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgaXNBbGxvd2VkIHJldHVybnMgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhhdC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1BsdWdpbkNvbnRhaW5lciA9IHVpLml0ZW0uY2xvc2VzdCgnLmNtcy1kcmFnZ2FibGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9yaWdpbmFsUGx1Z2luQ29udGFpbmVyLmlzKG5ld1BsdWdpbkNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWxpemVQbHVnaW5zQ29sbGFwc2libGVTdGF0dXMobmV3UGx1Z2luQ29udGFpbmVyLmFkZChvcmlnaW5hbFBsdWdpbkNvbnRhaW5lcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBtb3ZlZCBpbnNpZGUgc2FtZSBjb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGV2ZW50IGlzIGZpcmVkIG9uIGEgcGFyZW50LCBkaXNjYXJkIHVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3UGx1Z2luQ29udGFpbmVyLmlzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHBhc3MgdGhlIGlkIHRvIHRoZSB1cGRhdGVyIHdoaWNoIGNoZWNrcyB3aXRoaW4gdGhlIGJhY2tlbmQgdGhlIGNvcnJlY3QgcGxhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoYXQuZ2V0SWQodWkuaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGx1Z2luID0gJCgnLmNtcy1wbHVnaW4tJyArIGlkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgY29weS9wYXN0ZSBhIHBsdWdpbiBvciBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uY2xvc2VzdCgnLmNtcy1jbGlwYm9hcmQnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4udHJpZ2dlcignY21zLnBsdWdpbi51cGRhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLnRyaWdnZXIoJ2Ntcy5wbHVnaW5zLnVwZGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBwbGFjZWhvbGRlciB3aXRob3V0IGVudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkuc29ydGFibGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdjbXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbGl6ZUVtcHR5UGxhY2Vob2xkZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlzQWxsb3dlZDogZnVuY3Rpb24gKHBsYWNlaG9sZGVyLCBwbGFjZWhvbGRlclBhcmVudCwgb3JpZ2luYWxJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgYWN0aW9uIGlzIGV4ZWN1dGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ01TLkFQSS5sb2NrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXR0aW5nIHJlc3RyaWN0aW9uIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1tZWRpYXRlUGFyZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgb3JpZ2luYWwgc3RhdGUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSAkKCcuY21zLXBsdWdpbi0nICsgdGhhdC5nZXRJZChvcmlnaW5hbEl0ZW0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBpZiBpdGVtIGhhcyBubyBzZXR0aW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsLmxlbmd0aCA9PT0gMCB8fCBvcmlnaW5hbC5kYXRhKCdzZXR0aW5ncycpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF9ib3VuZHMgPSBvcmlnaW5hbC5kYXRhKCdzZXR0aW5ncycpLnBsdWdpbl9wYXJlbnRfcmVzdHJpY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IG9yaWdpbmFsLmRhdGEoJ3NldHRpbmdzJykucGx1Z2luX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVwYXJlIHZhcmlhYmxlcyBmb3IgYm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob2xkZXJJZCA9IHRoYXQuZ2V0SWQocGxhY2Vob2xkZXIuY2xvc2VzdCgnLmNtcy1kcmFnYXJlYScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob2xkZXIgPSAkKCcuY21zLXBsYWNlaG9sZGVyLScgKyBob2xkZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGx1Z2luO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyUGFyZW50ICYmIHBsYWNlaG9sZGVyUGFyZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyUGFyZW50IGlzIGFsd2F5cyBsYXRlc3QsIGl0IG1heWJlIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpc0FsbG93ZWQgaXMgY2FsbGVkIF9iZWZvcmVfIHBsYWNlaG9sZGVyIGlzIG1vdmVkIHRvIGEgY2hpbGQgcGx1Z2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luID0gJCgnLmNtcy1wbHVnaW4tJyArIHRoYXQuZ2V0SWQocGxhY2Vob2xkZXJQYXJlbnQuY2xvc2VzdCgnLmNtcy1kcmFnZ2FibGUnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW4gPSAkKCcuY21zLXBsdWdpbi0nICsgdGhhdC5nZXRJZChwbGFjZWhvbGRlci5jbG9zZXN0KCcuY21zLWRyYWdnYWJsZScpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdyBzZXQgdGhlIGNvcnJlY3QgYm91bmRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9sZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kcyA9IGhvbGRlci5kYXRhKCdzZXR0aW5ncycpLnBsdWdpbl9yZXN0cmljdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVQYXJlbnRUeXBlID0gaG9sZGVyLmRhdGEoJ3NldHRpbmdzJykucGx1Z2luX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kcyA9IHBsdWdpbi5kYXRhKCdzZXR0aW5ncycpLnBsdWdpbl9yZXN0cmljdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVQYXJlbnRUeXBlID0gcGx1Z2luLmRhdGEoJ3NldHRpbmdzJykucGx1Z2luX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHBhcmVudCBoYXMgY2xhc3MgZGlzYWJsZWQsIGRpc3NhbG93IGRyb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlci5wYXJlbnQoKS5oYXNDbGFzcygnY21zLWRyYWdnYWJsZS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZXN0cmljdGlvbnMgaXMgc3RpbGwgZW1wdHksIHByb2NlZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc3RhdGUgPSAoIWJvdW5kcy5sZW5ndGggfHwgJC5pbkFycmF5KHR5cGUsIGJvdW5kcykgIT09IC0xKSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhIHBhcmVudCByZXN0cmljdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudF9ib3VuZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zdGF0ZSA9ICgkLmluQXJyYXkoaW1tZWRpYXRlUGFyZW50VHlwZSwgcGFyZW50X2JvdW5kcykgIT09IC0xKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5vbignY21zLnVwZGF0ZScsIGFjdHVhbGl6ZUVtcHR5UGxhY2Vob2xkZXJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKENNUy4kKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgaHR0cHM6Ly9naXRodWIuY29tL2RpdmlvL2RqYW5nby1jbXNcbiAqL1xuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gTkFNRVNQQUNFU1xuLyoqXG4gKiBAbW9kdWxlIENNU1xuICovXG52YXIgQ01TID0gd2luZG93LkNNUyB8fCB7fTtcblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFRvb2xiYXJcbihmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIHNob3J0aGFuZCBmb3IgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSgpO1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHVzYWJsZSBuYXZpZ2F0aW9uIGZvciBuYXJyb3cgc2NyZWVucy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNsYXNzIE5hdmlnYXRpb25cbiAgICAgICAgICogQG5hbWVzcGFjZSBDTVNcbiAgICAgICAgICogQHVzZXMgQ01TLkFQSS5IZWxwZXJzXG4gICAgICAgICAqL1xuICAgICAgICBDTVMuTmF2aWdhdGlvbiA9IG5ldyBDTVMuQ2xhc3Moe1xuXG4gICAgICAgICAgICBpbXBsZW1lbnQ6IFtDTVMuQVBJLkhlbHBlcnNdLFxuXG4gICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwVUkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRXaWR0aHMoKTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRoZSB6ZXJvIGJhc2VkIGluZGV4IG9mIHRoZSByaWdodC1tb3N0IHZpc2libGUgbWVudSBpdGVtIG9mIHRoZSBsZWZ0IHRvb2xiYXIgcGFydC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSByaWdodE1vc3RJdGVtSW5kZXgge051bWJlcn1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCA9IHRoaXMuaXRlbXMubGVmdC5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVGhlIHplcm8gYmFzZWQgaW5kZXggb2YgdGhlIGxlZnQtbW9zdCB2aXNpYmxlIGl0ZW0gb2YgdGhlIHJpZ2h0IHRvb2xiYXIgcGFydC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSBsZWZ0TW9zdEl0ZW1JbmRleCB7TnVtYmVyfVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdE1vc3RJdGVtSW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUgPSAncmVzaXplLmNtcy5uYXZpZ2F0aW9uJztcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQgPSAnbG9hZC5jbXMubmF2aWdhdGlvbic7XG4gICAgICAgICAgICAgICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZSA9ICdvcmllbnRhdGlvbmNoYW5nZS5jbXMubmF2aWdhdGlvbic7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FjaGUgVUkganF1ZXJ5IG9iamVjdHMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2V0dXBVSVxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3NldHVwVUk6IGZ1bmN0aW9uIF9zZXR1cFVJKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCcuY21zJyk7XG4gICAgICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSBjb250YWluZXIuZmluZCgnLmNtcy10b29sYmFyLW1vcmUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpID0ge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3c6ICQod2luZG93KSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhckxlZnRQYXJ0OiBjb250YWluZXIuZmluZCgnLmNtcy10b29sYmFyLWxlZnQnKSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhclJpZ2h0UGFydDogY29udGFpbmVyLmZpbmQoJy5jbXMtdG9vbGJhci1yaWdodCcpLFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bjogdHJpZ2dlci5maW5kKCc+IHVsJyksXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXJUcmlnZ2VyOiBjb250YWluZXIuZmluZCgnLmNtcy10b29sYmFyLXRyaWdnZXInKSxcbiAgICAgICAgICAgICAgICAgICAgbG9nbzogY29udGFpbmVyLmZpbmQoJy5jbXMtdG9vbGJhci1pdGVtLWxvZ28nKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHVwIHJlc2l6ZSBoYW5kbGVyIHRvIGNvbnN0cnVjdCB0aGUgZHJvcGRvd24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfZXZlbnRzXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfZXZlbnRzOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgICAgICAgICAgIHRoaXMudWkud2luZG93Lm9uKFxuICAgICAgICAgICAgICAgICAgICBbdGhpcy5yZXNpemUsIHRoaXMubG9hZCwgdGhpcy5vcmllbnRhdGlvbkNoYW5nZV0uam9pbignICcpLFxuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLkhlbHBlcnMudGhyb3R0bGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVSZXNpemUuYmluZCh0aGlzKSwgNTBcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZXMgYWxsIHRoZSBtb3ZhYmxlIG1lbnUgaXRlbXMgd2lkdGhzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2dldFdpZHRoc1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2dldFdpZHRoczogZnVuY3Rpb24gX2dldFdpZHRocygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhhdC5pdGVtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogW10sXG4gICAgICAgICAgICAgICAgICAgIGxlZnRUb3RhbFdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogW10sXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0VG90YWxXaWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgbW9yZUJ1dHRvbldpZHRoOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdEl0ZW1zID0gdGhhdC51aS50b29sYmFyTGVmdFBhcnRcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5jbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24gPiBsaTpub3QoLmNtcy10b29sYmFyLW1vcmUpJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0SXRlbXMgPSB0aGF0LnVpLnRvb2xiYXJSaWdodFBhcnQuZmluZCgnPiAuY21zLXRvb2xiYXItaXRlbScpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGdldFNpemUgPSBmdW5jdGlvbiBnZXRTaXplKGVsLCBzdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICQoZWwpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSAkKGVsKS5vdXRlcldpZHRoKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBzdW1XaWR0aHMgPSBmdW5jdGlvbiBzdW1XaWR0aHMoc3VtLCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdW0gKyBpdGVtLndpZHRoO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBsZWZ0SXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFNpemUodGhpcywgdGhhdC5pdGVtcy5sZWZ0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJpZ2h0SXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFNpemUodGhpcywgdGhhdC5pdGVtcy5yaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGF0Lml0ZW1zLmxlZnRUb3RhbFdpZHRoID0gdGhhdC5pdGVtcy5sZWZ0LnJlZHVjZShzdW1XaWR0aHMsIDApO1xuICAgICAgICAgICAgICAgIHRoYXQuaXRlbXMucmlnaHRUb3RhbFdpZHRoID0gdGhhdC5pdGVtcy5yaWdodC5yZWR1Y2Uoc3VtV2lkdGhzLCAwKTtcbiAgICAgICAgICAgICAgICB0aGF0Lml0ZW1zLm1vcmVCdXR0b25XaWR0aCA9IHRoYXQudWkudHJpZ2dlci5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZXMgYXZhaWxhYmxlIHdpZHRoIGJhc2VkIG9uIHRoZSBzdGF0ZSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9jYWxjdWxhdGVBdmFpbGFibGVXaWR0aFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEByZXR1cm4ge051bWJlcn0gYXZhaWxhYmxlIHdpZHRoIGluIHB4XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9jYWxjdWxhdGVBdmFpbGFibGVXaWR0aDogZnVuY3Rpb24gX2NhbGN1bGF0ZUF2YWlsYWJsZVdpZHRoKCkge1xuICAgICAgICAgICAgICAgIHZhciBmdWxsV2lkdGggPSB0aGlzLnVpLndpbmRvdy53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciByZWR1Y2UgPSBwYXJzZUludCh0aGlzLnVpLnRvb2xiYXJSaWdodFBhcnQuY3NzKCdwYWRkaW5nLXJpZ2h0JyksIDEwKSArIHRoaXMudWkubG9nby5vZmZzZXQoKS5sZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5sb2dvLm91dGVyV2lkdGgodHJ1ZSkgKyAxNTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmdWxsV2lkdGggLSByZWR1Y2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNob3dzIHRoZSBkcm9wZG93bi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zaG93RHJvcGRvd25cbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zaG93RHJvcGRvd246IGZ1bmN0aW9uIF9zaG93RHJvcGRvd24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51aS50cmlnZ2VyLmNzcygnZGlzcGxheScsICdsaXN0LWl0ZW0nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGlkZXMgdGhlIGRyb3Bkb3duLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2hpZGVEcm9wZG93blxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2hpZGVEcm9wZG93bjogZnVuY3Rpb24gX2hpZGVEcm9wZG93bigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRyaWdnZXIuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmlndXJlcyBvdXQgaWYgd2UgbmVlZCB0byBzaG93L2hpZGUvbW9kaWZ5IHRoZSBkcm9wZG93bi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9oYW5kbGVSZXNpemVcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9oYW5kbGVSZXNpemU6IGZ1bmN0aW9uIF9oYW5kbGVSZXNpemUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlbWFpbmluZ1dpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBhdmFpbGFibGVXaWR0aCA9IHRoaXMuX2NhbGN1bGF0ZUF2YWlsYWJsZVdpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlV2lkdGggPiB0aGlzLml0ZW1zLmxlZnRUb3RhbFdpZHRoICsgdGhpcy5pdGVtcy5yaWdodFRvdGFsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0FsbCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpcnN0IGhhbmRsZSB0aGUgbGVmdCBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ1dpZHRoID0gYXZhaWxhYmxlV2lkdGggLSB0aGlzLml0ZW1zLm1vcmVCdXR0b25XaWR0aCAtIHRoaXMuaXRlbXMucmlnaHRUb3RhbFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgaG93IG1hbnkgbmF2IG1lbnUgaXRlbXMgZml0IGludG8gdGhlIGF2YWlsYWJsZSBzcGFjZS5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1JpZ2h0TW9zdEl0ZW1JbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVtYWluaW5nV2lkdGggLSB0aGlzLml0ZW1zLmxlZnRbbmV3UmlnaHRNb3N0SXRlbUluZGV4ICsgMV0ud2lkdGggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nV2lkdGggLT0gdGhpcy5pdGVtcy5sZWZ0W25ld1JpZ2h0TW9zdEl0ZW1JbmRleCArIDFdLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UmlnaHRNb3N0SXRlbUluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UmlnaHRNb3N0SXRlbUluZGV4IDwgdGhpcy5yaWdodE1vc3RJdGVtSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmVUb0Ryb3Bkb3duKHRoaXMucmlnaHRNb3N0SXRlbUluZGV4IC0gbmV3UmlnaHRNb3N0SXRlbUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCA8IG5ld1JpZ2h0TW9zdEl0ZW1JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZU91dE9mRHJvcGRvd24obmV3UmlnaHRNb3N0SXRlbUluZGV4IC0gdGhpcy5yaWdodE1vc3RJdGVtSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0Ryb3Bkb3duKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgZG8gbm90IGhhdmUgYW55IHdpZHRoIGxlZnQgYW5kIGFsbCB0aGUgaXRlbXMgZnJvbSB0aGUgbGVmdCBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIC8vIGFyZSBhbHJlYWR5IGluIHRoZSBkcm9wZG93biAtIHN0YXJ0IHdpdGggdGhlIHJpZ2h0IHBhcnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZ1dpZHRoIDwgMCAmJiB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ1dpZHRoICs9IHRoaXMuaXRlbXMucmlnaHRUb3RhbFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TGVmdE1vc3RJdGVtSW5kZXggPSB0aGlzLml0ZW1zLnJpZ2h0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHlvdSB3YW50IHRvIG1vdmUgaXRlbXMgZnJvbSB0aGUgcmlnaHQgb25lIGJ5IG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZW1haW5pbmdXaWR0aCAtIHRoaXMuaXRlbXMucmlnaHRbbmV3TGVmdE1vc3RJdGVtSW5kZXggLSAxXS53aWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nV2lkdGggLT0gdGhpcy5pdGVtcy5yaWdodFtuZXdMZWZ0TW9zdEl0ZW1JbmRleCAtIDFdLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMZWZ0TW9zdEl0ZW1JbmRleC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdMZWZ0TW9zdEl0ZW1JbmRleCA+IHRoaXMubGVmdE1vc3RJdGVtSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZVRvRHJvcGRvd24obmV3TGVmdE1vc3RJdGVtSW5kZXggLSB0aGlzLmxlZnRNb3N0SXRlbUluZGV4LCAncmlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5ld0xlZnRNb3N0SXRlbUluZGV4IDwgdGhpcy5sZWZ0TW9zdEl0ZW1JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlT3V0T2ZEcm9wZG93bih0aGlzLmxlZnRNb3N0SXRlbUluZGV4IC0gbmV3TGVmdE1vc3RJdGVtSW5kZXgsICdyaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGZvciBub3cgd2Ugd2FudCB0byBtb3ZlIGFsbCBvZiB0aGVtIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZVRvRHJvcGRvd24obmV3TGVmdE1vc3RJdGVtSW5kZXggLSB0aGlzLmxlZnRNb3N0SXRlbUluZGV4LCAncmlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLmRyb3Bkb3duLmFkZENsYXNzKCdjbXMtbW9yZS1kcm9wZG93bi1mdWxsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG93QWxsUmlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkuZHJvcGRvd24ucmVtb3ZlQ2xhc3MoJ2Ntcy1tb3JlLWRyb3Bkb3duLWZ1bGwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGlkZXMgYW5kIGVtcHRpZXMgZHJvcGRvd24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2hvd0FsbFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Nob3dBbGw6IGZ1bmN0aW9uIF9zaG93QWxsKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dBbGxMZWZ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvd0FsbFJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5faGlkZURyb3Bkb3duKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNob3cgYWxsIGl0ZW1zIGluIHRoZSBsZWZ0IHBhcnQgb2YgdGhlIHRvb2xiYXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2hvd0FsbExlZnRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zaG93QWxsTGVmdDogZnVuY3Rpb24gX3Nob3dBbGxMZWZ0KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmVPdXRPZkRyb3Bkb3duKCh0aGlzLml0ZW1zLmxlZnQubGVuZ3RoIC0gMSkgLSB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNob3cgYWxsIGl0ZW1zIGluIHRoZSByaWdodCBwYXJ0IG9mIHRoZSB0b29sYmFyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3Nob3dBbGxSaWdodFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3Nob3dBbGxSaWdodDogZnVuY3Rpb24gX3Nob3dBbGxSaWdodCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlT3V0T2ZEcm9wZG93bih0aGlzLmxlZnRNb3N0SXRlbUluZGV4LCAncmlnaHQnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTW92ZXMgaXRlbXMgaW50byB0aGUgZHJvcGRvd24sIHJlZHVjaW5nIG1lbnUgcmlnaHQtdG8tbGVmdCBpbiBjYXNlIGl0J3MgYSBsZWZ0IHBhcnQgb2YgdG9vbGJhclxuICAgICAgICAgICAgICogYW5kIGxlZnQtdG8tcmlnaHQgaWYgaXQncyByaWdodCBvbmUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfbW92ZVRvRHJvcGRvd25cbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gbnVtYmVyT2ZJdGVtcyBob3cgbWFueSBpdGVtcyB0byBtb3ZlIHRvIGRyb3Bkb3duXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFydCBmcm9tIHdoaWNoIHBhcnQgdG8gbW92ZSB0byBkcm9wZG93biAoZGVmYXVsdHMgdG8gbGVmdClcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX21vdmVUb0Ryb3Bkb3duOiBmdW5jdGlvbiBfbW92ZVRvRHJvcGRvd24obnVtYmVyT2ZJdGVtcywgcGFydCkge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXJPZkl0ZW1zIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtO1xuICAgICAgICAgICAgICAgIHZhciBsZWZ0TW9zdEluZGV4VG9Nb3ZlO1xuICAgICAgICAgICAgICAgIHZhciByaWdodE1vc3RJbmRleFRvTW92ZTtcbiAgICAgICAgICAgICAgICB2YXIgaTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgaXRlbXMgKHdvcmtpbmcgbGVmdC10by1yaWdodCkgZnJvbSB0aGUgdG9vbGJhciBsZWZ0IHBhcnQgdG8gdGhlIG1vcmUgbWVudS5cbiAgICAgICAgICAgICAgICAgICAgbGVmdE1vc3RJbmRleFRvTW92ZSA9IHRoaXMubGVmdE1vc3RJdGVtSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0TW9zdEluZGV4VG9Nb3ZlID0gdGhpcy5sZWZ0TW9zdEl0ZW1JbmRleCArIG51bWJlck9mSXRlbXMgLSAxO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBsZWZ0TW9zdEluZGV4VG9Nb3ZlOyBpIDw9IHJpZ2h0TW9zdEluZGV4VG9Nb3ZlOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB0aGlzLml0ZW1zLnJpZ2h0W2ldLmVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkuZHJvcGRvd24ucHJlcGVuZChpdGVtLndyYXAoJzxsaSBjbGFzcz1cImNtcy1tb3JlLWJ1dHRvbnNcIj48L2xpPicpLnBhcmVudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdE1vc3RJdGVtSW5kZXggKz0gbnVtYmVyT2ZJdGVtcztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGl0ZW1zICh3b3JraW5nIHJpZ2h0LXRvLWxlZnQpIGZyb20gdGhlIHRvb2xiYXIgbGVmdCBwYXJ0IHRvIHRoZSBtb3JlIG1lbnUuXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0TW9zdEluZGV4VG9Nb3ZlID0gdGhpcy5yaWdodE1vc3RJdGVtSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRNb3N0SW5kZXhUb01vdmUgPSB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCAtIG51bWJlck9mSXRlbXMgKyAxO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSByaWdodE1vc3RJbmRleFRvTW92ZTsgaSA+PSBsZWZ0TW9zdEluZGV4VG9Nb3ZlOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB0aGlzLml0ZW1zLmxlZnRbaV0uZWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5kcm9wZG93bi5wcmVwZW5kKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZmluZCgnPiB1bCcpLmNoaWxkcmVuKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcygnY21zLXRvb2xiYXItaXRlbS1uYXZpZ2F0aW9uLWNoaWxkcmVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCAtPSBudW1iZXJPZkl0ZW1zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTW92ZXMgaXRlbXMgb3V0IG9mIHRoZSBkcm9wZG93bi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9tb3ZlT3V0T2ZEcm9wZG93blxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXJPZkl0ZW1zIGhvdyBtYW55IGl0ZW1zIHRvIG1vdmUgb3V0IG9mIHRoZSBkcm9wZG93blxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBhcnQgdG8gd2hpY2ggcGFydCB0byBtb3ZlIG91dCBvZiBkcm9wZG93biAoZGVmYXVsdHMgdG8gbGVmdClcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX21vdmVPdXRPZkRyb3Bkb3duOiBmdW5jdGlvbiBfbW92ZU91dE9mRHJvcGRvd24obnVtYmVyT2ZJdGVtcywgcGFydCkge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXJPZkl0ZW1zIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtO1xuICAgICAgICAgICAgICAgIHZhciBsZWZ0TW9zdEluZGV4VG9Nb3ZlO1xuICAgICAgICAgICAgICAgIHZhciByaWdodE1vc3RJbmRleFRvTW92ZTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgaXRlbXMgKHdvcmtpbmcgYm90dG9tLXRvLXRvcCkgZnJvbSB0aGUgbW9yZSBtZW51IGludG8gdGhlIHRvb2xiYXIgcmlnaHQgcGFydC5cbiAgICAgICAgICAgICAgICAgICAgcmlnaHRNb3N0SW5kZXhUb01vdmUgPSB0aGlzLmxlZnRNb3N0SXRlbUluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgbGVmdE1vc3RJbmRleFRvTW92ZSA9IHRoaXMubGVmdE1vc3RJdGVtSW5kZXggLSBudW1iZXJPZkl0ZW1zO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHJpZ2h0TW9zdEluZGV4VG9Nb3ZlOyBpID49IGxlZnRNb3N0SW5kZXhUb01vdmU7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IHRoaXMuaXRlbXMucmlnaHRbaV0uZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udW53cmFwKCc8bGk+PC9saT4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5wcmVwZW5kVG8odGhpcy51aS50b29sYmFyUmlnaHRQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdE1vc3RJdGVtSW5kZXggLT0gbnVtYmVyT2ZJdGVtcztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGl0ZW1zICh3b3JraW5nIHRvcC10by1ib3R0b20pIGZyb20gdGhlIG1vcmUgbWVudSBpbnRvIHRoZSB0b29sYmFyIGxlZnQgcGFydC5cbiAgICAgICAgICAgICAgICAgICAgbGVmdE1vc3RJbmRleFRvTW92ZSA9IHRoaXMucmlnaHRNb3N0SXRlbUluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRNb3N0SW5kZXhUb01vdmUgPSB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCArIG51bWJlck9mSXRlbXM7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gbGVmdE1vc3RJbmRleFRvTW92ZTsgaSA8PSByaWdodE1vc3RJbmRleFRvTW92ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtcy5sZWZ0W2ldLmVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5zZXJ0QmVmb3JlKHRoaXMudWkudHJpZ2dlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCdjbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24tY2hpbGRyZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZmluZCgnPiB1bCcpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0TW9zdEl0ZW1JbmRleCArPSBudW1iZXJPZkl0ZW1zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgIH0pO1xufSkoQ01TLiQpO1xuIiwiLypcbiAqIENvcHlyaWdodCBodHRwczovL2dpdGh1Yi5jb20vZGl2aW8vZGphbmdvLWNtc1xuICovXG5cbi8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBOQU1FU1BBQ0VTXG4vKipcbiAqIEBtb2R1bGUgQ01TXG4gKi9cbnZhciBDTVMgPSB3aW5kb3cuQ01TIHx8IHt9O1xuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gVG9vbGJhclxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gc2hvcnRoYW5kIGZvciBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCk7XG4gICAgJChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdG9vbGJhciBpcyB0aGUgZ2VuZXJpYyBlbGVtZW50IHdoaWNoIGhvbGRzIHZhcmlvdXMgY29tcG9uZW50c1xuICAgICAgICAgKiB0b2dldGhlciBhbmQgcHJvdmlkZXMgc2V2ZXJhbCBjb21tb25seSB1c2VkIEFQSSBtZXRob2RzIHN1Y2ggYXNcbiAgICAgICAgICogc2hvdy9oaWRlLCBtZXNzYWdlIGRpc3BsYXkgb3IgbG9hZGVyIGluZGljYXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBjbGFzcyBUb29sYmFyXG4gICAgICAgICAqIEBuYW1lc3BhY2UgQ01TXG4gICAgICAgICAqIEB1c2VzIENNUy5BUEkuSGVscGVyc1xuICAgICAgICAgKi9cbiAgICAgICAgQ01TLlRvb2xiYXIgPSBuZXcgQ01TLkNsYXNzKHtcblxuICAgICAgICAgICAgaW1wbGVtZW50OiBbQ01TLkFQSS5IZWxwZXJzXSxcblxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHByZXZlbnRTd2l0Y2g6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHByZXZlbnRTd2l0Y2hNZXNzYWdlOiAnU3dpdGNoaW5nIGlzIGRpc2FibGVkLicsXG4gICAgICAgICAgICAgICAgdG9vbGJhckR1cmF0aW9uOiAyMDBcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudHNcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cFVJKCk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge0NNUy5OYXZpZ2F0aW9ufSBuYXZpZ2F0aW9uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uID0gbmV3IENNUy5OYXZpZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzdGF0ZXNcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrID0gJ2NsaWNrLmNtcy50b29sYmFyJztcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoU3RhcnQgPSAndG91Y2hzdGFydC5jbXMudG9vbGJhcic7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyVXAgPSAncG9pbnRlcnVwLmNtcy50b29sYmFyJztcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJPdmVyT3V0ID0gJ3BvaW50ZXJvdmVyLmNtcy50b29sYmFyIHBvaW50ZXJvdXQuY3NtLnRvb2xiYXInO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckxlYXZlID0gJ3BvaW50ZXJsZWF2ZS5jc20udG9vbGJhcic7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZUVudGVyID0gJ21vdXNlZW50ZXIuY21zLnRvb2xiYXInO1xuICAgICAgICAgICAgICAgIHRoaXMubW91c2VMZWF2ZSA9ICdtb3VzZWxlYXZlLmNtcy50b29sYmFyJztcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSA9ICdyZXNpemUuY21zLnRvb2xiYXInO1xuICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gJ2tleWRvd24uY21zLnRvb2xiYXIga2V5dXAuY21zLnRvb2xiYXInO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICAgIHRoaXMubG9ja1Rvb2xiYXIgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIHNldHVwIGluaXRpYWwgc3R1ZmZcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudWkudG9vbGJhci5kYXRhKCdyZWFkeScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEZJWE1FIHRoZSBnZW5lcmFsIGluaXRpYWxpemF0aW9uIGlzIGhhbmRsZWQgd2l0aGluIHRoZSB0b29sYmFyXG4gICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoYW4gYSBzZXBhcmF0ZSBjbXMuc2V0dXAgb3Igc2ltaWxhci4gWWV0IG90aGVyIGNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICAvLyBhcmUgbG9hZGVkIGFmdGVyIHRoZSB0b29sYmFyIHNvIGl0IGNhbiBjcmVhdGUgYSBjbGFzaCB3aGVyZVxuICAgICAgICAgICAgICAgIC8vIENNUy5BUEkgaXMgbm90IHJlYWR5LiBUaGlzIGlzIGEgd29ya2Fyb3VuZCB1bnRpbCBhIHByb3BlciBmaXhcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGJlIHJlbGVhc2VkIGluIDMueFxuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5faW5pdGlhbFN0YXRlcygpO1xuICAgICAgICAgICAgICAgIH0sIDIwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgYSBzdGF0ZSB0byBkZXRlcm1pbmUgaWYgd2UgbmVlZCB0byByZWluaXRpYWxpemUgdGhpcy5fZXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyLmRhdGEoJ3JlYWR5JywgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0b3JlcyBhbGwgalF1ZXJ5IHJlZmVyZW5jZXMgd2l0aGluIGB0aGlzLnVpYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zZXR1cFVJXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0dXBVSTogZnVuY3Rpb24gX3NldHVwVUkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9ICQoJy5jbXMnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgYm9keTogJCgnaHRtbCcpLFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogJChkb2N1bWVudCksXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdzogJCh3aW5kb3cpLFxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiBjb250YWluZXIuZmluZCgnLmNtcy10b29sYmFyJyksXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXJUcmlnZ2VyOiBjb250YWluZXIuZmluZCgnLmNtcy10b29sYmFyLXRyaWdnZXInKSxcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbnM6IGNvbnRhaW5lci5maW5kKCcuY21zLXRvb2xiYXItaXRlbS1uYXZpZ2F0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IGNvbnRhaW5lci5maW5kKCcuY21zLXRvb2xiYXItaXRlbS1idXR0b25zJyksXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaGVyOiBjb250YWluZXIuZmluZCgnLmNtcy10b29sYmFyLWl0ZW0tc3dpdGNoJyksXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBjb250YWluZXIuZmluZCgnLmNtcy1tZXNzYWdlcycpLFxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5CbG9jazogY29udGFpbmVyLmZpbmQoJy5jbXMtc2NyZWVuYmxvY2snKSxcbiAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlQm9hcmQ6IGNvbnRhaW5lci5maW5kKCcuY21zLXN0cnVjdHVyZScpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB1cCBhbGwgdGhlIGV2ZW50IGhhbmRsZXJzLCBzdWNoIGFzIGNsb3NpbmcgYW5kIHJlc2l6aW5nLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2V2ZW50c1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2V2ZW50czogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAvLyBhdHRhY2ggZXZlbnQgdG8gdGhlIHRyaWdnZXIgaGFuZGxlclxuICAgICAgICAgICAgICAgIHRoaXMudWkudG9vbGJhclRyaWdnZXIub24odGhpcy5wb2ludGVyVXAsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5kb2N1bWVudC50cmlnZ2VyKHRoYXQuY2xpY2spO1xuICAgICAgICAgICAgICAgIH0pLm9uKHRoaXMuY2xpY2ssIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBldmVudCB0byB0aGUgbmF2aWdhdGlvbiBlbGVtZW50c1xuICAgICAgICAgICAgICAgIHRoaXMudWkubmF2aWdhdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYXZpZ2F0aW9uID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RzID0gbmF2aWdhdGlvbi5maW5kKCdsaScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9ICdjbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaG92ZXIgPSAnY21zLXRvb2xiYXItaXRlbS1uYXZpZ2F0aW9uLWhvdmVyJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc2FibGVkID0gJ2Ntcy10b29sYmFyLWl0ZW0tbmF2aWdhdGlvbi1kaXNhYmxlZCc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9ICdjbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24tY2hpbGRyZW4nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNUb3VjaGluZ1RvcExldmVsTWVudSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY21kUHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudHMgZnJvbSBmaXJzdCBsZXZlbFxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uLmZpbmQoJ2EnKS5vbih0aGF0LmNsaWNrICsgJywgJyArIHRoYXQua2V5LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVzdG9yZSB0aGUgZGVmYXVsdCBiZWhhdmlvdXIgb25jZSBhIHVzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXNzZXMgY3RybC9jbWQgYW5kIGNsaWNrcyBvbiB0aGUgZW50cnkuIEluIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgYSBuZXcgdGFiIHNob3VsZCBvcGVuLiBGaXJzdCB3ZSBkZXRlcm1pbmUgaWZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN0cmwvY21kIGlzIHByZXNzZWQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5rZXlDb2RlID09PSBDTVMuS0VZUy5DTURfTEVGVCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUua2V5Q29kZSA9PT0gQ01TLktFWVMuQ01EX1JJR0hUIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5rZXlDb2RlID09PSBDTVMuS0VZUy5DTURfRklSRUZPWCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUua2V5Q29kZSA9PT0gQ01TLktFWVMuU0hJRlQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPT09IENNUy5LRVlTLkNUUkxcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZFByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZFByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmF0dHIoJ2hyZWYnKSAhPT0gJycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5hdHRyKCdocmVmJykgIT09ICcjJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFlbC5wYXJlbnQoKS5oYXNDbGFzcyhkaXNhYmxlZCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbWRQcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRyb2wgdGhlIGJlaGF2aW91ciB3aGVuIGN0cmwvY21kIGlzIHByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oZWwuYXR0cignaHJlZicpLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGRlbGVnYXRlIGFzIHVzdWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2RlbGVnYXRlKCQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKHRoYXQudG91Y2hTdGFydCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaGluZ1RvcExldmVsTWVudSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBjbGljayBzdGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgbGlzdHMub24odGhhdC5jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSBuYXZpZ2F0aW9uIG9uY2UgaXQncyBwcmVzc2VkIGFnYWluXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwucGFyZW50KCkuaGFzQ2xhc3Mocm9vdCkgJiYgb3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkuYm9keS50cmlnZ2VyKHRoYXQuY2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2UgaWYgZWwgZG9lcyBub3QgaGF2ZSBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5oYXNDbGFzcyhjaGlsZHJlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwucGFyZW50KCkuaGFzQ2xhc3Mocm9vdCkgJiYgZWwuaGFzQ2xhc3MoaG92ZXIpIHx8IGVsLmhhc0NsYXNzKGRpc2FibGVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuYWRkQ2xhc3MoaG92ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZSBob3ZlciBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaGluZ1RvcExldmVsTWVudSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG9ubHkgc2V0IHRoZSBoYW5kbGVyIGZvciBtb3VzZW92ZXIgd2hlbiBub3QgdG91Y2hpbmcgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBtb3VzZW92ZXIgYWN0dWFsbHkgaXMgdHJpZ2dlcmVkIG9uIHRvdWNoIGRldmljZXMgOi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uLmZpbmQoJz4gbGknKS5vbih0aGF0Lm1vdXNlRW50ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuY2VsIGlmIGl0ZW0gaXMgYWxyZWFkeSBhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoaG92ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIodGhhdC5jbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVG91Y2hpbmdUb3BMZXZlbE1lbnUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgZG9jdW1lbnQgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkuZG9jdW1lbnQub24odGhhdC5jbGljaywgcmVzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5zdHJ1Y3R1cmVCb2FyZC5vbih0aGF0LmNsaWNrLCByZXNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLnRvb2xiYXIub24odGhhdC5jbGljaywgcmVzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS53aW5kb3cub24oJ3Jlc2l6ZScsIENNUy5BUEkuSGVscGVycy50aHJvdHRsZShyZXNldCwgMTAwMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHN0YXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBob3ZlclxuICAgICAgICAgICAgICAgICAgICBsaXN0cy5vbih0aGF0LnBvaW50ZXJPdmVyT3V0LCAnbGknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsLmNsb3Nlc3QoJy5jbXMtdG9vbGJhci1pdGVtLW5hdmlnYXRpb24tY2hpbGRyZW4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGQoZWwucGFyZW50cygnLmNtcy10b29sYmFyLWl0ZW0tbmF2aWdhdGlvbi1jaGlsZHJlbicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNDaGlsZHJlbiA9IGVsLmhhc0NsYXNzKGNoaWxkcmVuKSB8fCBwYXJlbnQubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3QgYXR0YWNoIGhvdmVyIGVmZmVjdCBpZiBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuY2VsIGV2ZW50IGlmIGVsZW1lbnQgaGFzIGFscmVhZHkgaG92ZXIgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5oYXNDbGFzcyhkaXNhYmxlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaGFzQ2xhc3MoaG92ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0cy5maW5kKCdsaScpLnJlbW92ZUNsYXNzKGhvdmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGhvdmVyIGVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuYWRkQ2xhc3MoaG92ZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgY2hpbGRyZW4gZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmZpbmQoJz4gdWwnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHBhcmVudCBjbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcyhob3Zlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RzLmZpbmQoJ3VsIHVsJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc3RhbGUgc3VibWVudXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNpYmxpbmdzKCkuZmluZCgnPiB1bCcpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkub24odGhhdC5jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpeCBsZWF2ZSBldmVudFxuICAgICAgICAgICAgICAgICAgICBsaXN0cy5vbih0aGF0LnBvaW50ZXJMZWF2ZSwgJz4gdWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0cy5maW5kKCdsaScpLnJlbW92ZUNsYXNzKGhvdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlcyBjbGFzc2VzIGFuZCBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWRQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0cy5yZW1vdmVDbGFzcyhob3Zlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0cy5maW5kKCd1bCB1bCcpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb24uZmluZCgnPiBsaScpLm9mZih0aGF0Lm1vdXNlRW50ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51aS5kb2N1bWVudC5vZmYodGhhdC5jbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnVpLnRvb2xiYXIub2ZmKHRoYXQuY2xpY2ssIHJlc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudWkuc3RydWN0dXJlQm9hcmQub2ZmKHRoYXQuY2xpY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhdHRhY2ggZXZlbnQgdG8gdGhlIHN3aXRjaGVyIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgdGhpcy51aS5zd2l0Y2hlci5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5vbih0aGF0LmNsaWNrLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2V0U3dpdGNoZXIoJChlLmN1cnJlbnRUYXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhdHRhY2ggZXZlbnQgZm9yIGZpcnN0IHBhZ2UgcHVibGlzaFxuICAgICAgICAgICAgICAgIHRoaXMudWkuYnV0dG9ucy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ0biA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGUgYnV0dG9uIGhhcyBhIGRhdGEtcmVsIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYnRuLmZpbmQoJ2EnKS5hdHRyKCdkYXRhLXJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidG4ub24odGhhdC5jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fZGVsZWdhdGUoJCh0aGlzKS5maW5kKCdhJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uZmluZCgnYScpLm9uKHRoYXQuY2xpY2ssIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSBvZiB0aGUgcHVibGlzaCBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgYnRuLmZpbmQoJy5jbXMtcHVibGlzaC1wYWdlJykub24odGhhdC5jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQ01TLkFQSS5IZWxwZXJzLnNlY3VyZUNvbmZpcm0oQ01TLmNvbmZpZy5sYW5nLnB1Ymxpc2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBidG4uZmluZCgnLmNtcy1idG4tcHVibGlzaCcpLm9uKHRoYXQuY2xpY2ssIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIHBvc3QgcmVxdWVzdCB0byBwcmV2ZW50IHhzcyBhdHRhY2tzXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1cmwnOiAkKHRoaXMpLnByb3AoJ2hyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NzcmZtaWRkbGV3YXJldG9rZW4nOiBDTVMuY29uZmlnLmNzcmZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gQ01TLkFQSS5IZWxwZXJzLm1ha2VVUkwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnPycpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0NNUy5zZXR0aW5ncy5lZGl0X29mZiArICc9dHJ1ZSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuSGVscGVycy5yZWxvYWRCcm93c2VyKHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3InOiBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSBjaGVjayBmb3IgdmFyaW91cyBzdGF0ZXMgb24gbG9hZCBpZiBlbGVtZW50cyBpbiB0aGUgdG9vbGJhclxuICAgICAgICAgICAgICogc2hvdWxkIGFwcGVhciBvciB0cmlnZ2VyIG90aGVyIGNvbXBvbmVudHMuIFRoaXMgcHJlY2VkZXMgYSB0aW1lb3V0XG4gICAgICAgICAgICAgKiB3aGljaCBpcyBub3Qgb3B0aW1hbCBhbmQgc2hvdWxkIGJlIGFkZHJlc3NlZCBzZXBhcmF0ZWx5LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2luaXRpYWxTdGF0ZXNcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCB0aGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkIG5vdywgaXQgd2lsbCBiZSByZW1vdmVkIGluID4gMy4yXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9pbml0aWFsU3RhdGVzOiBmdW5jdGlvbiBfaW5pdGlhbFN0YXRlcygpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHVibGlzaEJ0biA9ICQoJy5jbXMtYnRuLXB1Ymxpc2gnKS5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgIC8vIHNldHVwIHRvb2xiYXIgdmlzaWJpbGl0eSwgd2UgbmVlZCB0byByZXZlcnNlIHRoZSBvcHRpb25zIHRvIHNldCB0aGUgY29ycmVjdCBzdGF0ZVxuICAgICAgICAgICAgICAgIGlmIChDTVMuc2V0dGluZ3MudG9vbGJhciA9PT0gJ2V4cGFuZGVkJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4oeyBkdXJhdGlvbjogMCB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaGlkZSBwdWJsaXNoIGJ1dHRvblxuICAgICAgICAgICAgICAgIHB1Ymxpc2hCdG4uaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCQoJy5jbXMtYnRuLXB1Ymxpc2gtYWN0aXZlJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1Ymxpc2hCdG4uc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLndpbmRvdy50cmlnZ2VyKCdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBkZWJ1ZyBpcyB0cnVlXG4gICAgICAgICAgICAgICAgaWYgKENNUy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgbWVzc2FnZXMgYW5kIGRpc3BsYXkgdGhlbVxuICAgICAgICAgICAgICAgIGlmIChDTVMuY29uZmlnLm1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBDTVMuY29uZmlnLm1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBlcnJvciBtZXNzYWdlcyBhbmQgZGlzcGxheSB0aGVtXG4gICAgICAgICAgICAgICAgaWYgKENNUy5jb25maWcuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IENNUy5jb25maWcuZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBlbmZvcmNlIG9wZW4gc3RhdGUgaWYgdXNlciBpcyBub3QgbG9nZ2VkIGluIGJ1dCByZXF1ZXN0cyB0aGUgdG9vbGJhclxuICAgICAgICAgICAgICAgIGlmICghQ01TLmNvbmZpZy5hdXRoIHx8IENNUy5jb25maWcuc2V0dGluZ3MudmVyc2lvbiAhPT0gQ01TLnNldHRpbmdzLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuKHsgZHVyYXRpb246IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgIENNUy5zZXR0aW5ncyA9IHRoaXMuc2V0U2V0dGluZ3MoQ01TLmNvbmZpZy5zZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIHN3aXRjaGVyIGluZGljYXRlIHRoYXQgdGhlcmUgaXMgYW4gdW5wdWJsaXNoZWQgcGFnZT9cbiAgICAgICAgICAgICAgICBpZiAoQ01TLmNvbmZpZy5wdWJsaXNoZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5NZXNzYWdlcy5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IENNUy5jb25maWcucHVibGlzaGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiAncmlnaHQnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuJCgnLmNtcy10b29sYmFyLWl0ZW0tc3dpdGNoJykudG9nZ2xlQ2xhc3MoJ2Ntcy10b29sYmFyLWl0ZW0tc3dpdGNoLWhpZ2hsaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICB9LCBDTVMuQVBJLk1lc3NhZ2VzLm1lc3NhZ2VEZWxheSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gb3BlbiBzaWRlZnJhbWUgaWYgaXQgd2FzIHByZXZpb3VzbHkgb3BlbmVkXG4gICAgICAgICAgICAgICAgaWYgKENNUy5zZXR0aW5ncy5zaWRlZnJhbWUudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaWRlZnJhbWUgPSBuZXcgQ01TLlNpZGVmcmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICBzaWRlZnJhbWUub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IENNUy5zZXR0aW5ncy5zaWRlZnJhbWUudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBzY3JlZW5ibG9jaywgZG8gc29tZSByZXNpemUgbWFnaWNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51aS5zY3JlZW5CbG9jay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2NyZWVuQmxvY2soKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgdG9vbGJhciByZWFkeSBjbGFzcyB0byBib2R5IGFuZCBmaXJlIGV2ZW50XG4gICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5LmFkZENsYXNzKCdjbXMtcmVhZHknKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmRvY3VtZW50LnRyaWdnZXIoJ2Ntcy1yZWFkeScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUb2dnbGVzIHRoZSB0b29sYmFyIHN0YXRlOiBvcGVuID4gY2xvc2VzIC8gY2xvc2VkID4gb3BlbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCB0b2dnbGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgICAgICAgICAgLy8gdG9nZ2xlIGJhclxuICAgICAgICAgICAgICAgIGlmIChDTVMuc2V0dGluZ3MudG9vbGJhciA9PT0gJ2NvbGxhcHNlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3BlbnMgdGhlIHRvb2xiYXIgKHNsaWRlIGRvd24pLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2Qgb3BlblxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmR1cmF0aW9uXSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdG9vbGJhciB0byBhbmltYXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4ob3B0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3cob3B0cyk7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgbmV3IHNldHRpbmdzXG4gICAgICAgICAgICAgICAgQ01TLnNldHRpbmdzLnRvb2xiYXIgPSAnZXhwYW5kZWQnO1xuICAgICAgICAgICAgICAgIENNUy5zZXR0aW5ncyA9IHRoaXMuc2V0U2V0dGluZ3MoQ01TLnNldHRpbmdzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW5pbWF0aW9uIGhlbHBlciBmb3Igb3BlbmluZyB0aGUgdG9vbGJhci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9zaG93XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmR1cmF0aW9uXSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdG9vbGJhciB0byBhbmltYXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zaG93OiBmdW5jdGlvbiBfc2hvdyhvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwZWVkID0gb3B0cyAmJiBvcHRzLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBvcHRzLmR1cmF0aW9uIDogdGhpcy5vcHRpb25zLnRvb2xiYXJEdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgZGVidWdIZWlnaHQgPSAkKCcuY21zLWRlYnVnLWJhcicpLmhlaWdodCgpIHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIHRvb2xiYXJIZWlnaHQgPSAkKCcuY21zLXRvb2xiYXInKS5oZWlnaHQoKSArIDEwO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2l0aW9uJzogJ21hcmdpbi10b3AgJyArIHNwZWVkICsgJ21zJyxcbiAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi10b3AnOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyVHJpZ2dlci5hZGRDbGFzcygnY21zLXRvb2xiYXItdHJpZ2dlci1leHBhbmRlZCcpO1xuICAgICAgICAgICAgICAgIC8vIGFuaW1hdGUgaHRtbFxuICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5hZGRDbGFzcygnY21zLXRvb2xiYXItZXhwYW5kZWQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpLmJvZHkuYW5pbWF0ZSh7ICdtYXJnaW4tdG9wJzogdG9vbGJhckhlaWdodCAtIDEwICsgZGVidWdIZWlnaHQgfSwgc3BlZWQsICdsaW5lYXInKTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgbWVzc2FnZXMgdG9wIHRvIHRvb2xiYXIgaGVpZ2h0XG4gICAgICAgICAgICAgICAgdGhpcy51aS5tZXNzYWdlcy5jc3MoJ3RvcCcsIHRvb2xiYXJIZWlnaHQgLSAxMCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENsb3NlcyB0aGUgdG9vbGJhciAoc2xpZGUgdXApLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgY2xvc2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hpZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBuZXcgc2V0dGluZ3NcbiAgICAgICAgICAgICAgICBDTVMuc2V0dGluZ3MudG9vbGJhciA9ICdjb2xsYXBzZWQnO1xuICAgICAgICAgICAgICAgIENNUy5zZXR0aW5ncyA9IHRoaXMuc2V0U2V0dGluZ3MoQ01TLnNldHRpbmdzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW5pbWF0aW9uIGhlbHBlciBmb3IgY2xvc2luZyB0aGUgdG9vbGJhci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9oaWRlXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfaGlkZTogZnVuY3Rpb24gX2hpZGUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwZWVkID0gdGhpcy5vcHRpb25zLnRvb2xiYXJEdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckhlaWdodCA9ICQoJy5jbXMtdG9vbGJhcicpLmhlaWdodCgpICsgMTA7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXIuY3NzKCd0cmFuc2l0aW9uJywgJ21hcmdpbi10b3AgJyArIHNwZWVkICsgJ21zJyk7XG4gICAgICAgICAgICAgICAgLy8gY2FuY2VsIGlmIHNpZGVmcmFtZSBpcyBhY3RpdmVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2NrVG9vbGJhcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyVHJpZ2dlci5yZW1vdmVDbGFzcygnY21zLXRvb2xiYXItdHJpZ2dlci1leHBhbmRlZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkudG9vbGJhci5jc3MoJ21hcmdpbi10b3AnLCAtdG9vbGJhckhlaWdodCk7XG4gICAgICAgICAgICAgICAgLy8gYW5pbWF0ZSBodG1sXG4gICAgICAgICAgICAgICAgdGhpcy51aS5ib2R5LnJlbW92ZUNsYXNzKCdjbXMtdG9vbGJhci1leHBhbmRlZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMudWkuYm9keS5hbmltYXRlKHsgJ21hcmdpbi10b3AnOiAoQ01TLmNvbmZpZy5kZWJ1ZykgPyA1IDogMCB9LCBzcGVlZCk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IG1lc3NhZ2VzIHRvcCB0byAwXG4gICAgICAgICAgICAgICAgdGhpcy51aS5tZXNzYWdlcy5jc3MoJ3RvcCcsIDApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNYWtlcyBhIHJlcXVlc3QgdG8gdGhlIGdpdmVuIHVybCwgcnVucyBvcHRpb25hbCBjYWxsYmFja3MuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBvcGVuQWpheFxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLnVybCB1cmwgd2hlcmUgdGhlIGFqYXggcG9pbnRzIHRvXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHMucG9zdF0gcG9zdCBkYXRhIHRvIGJlIHBhc3NlZFxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnRleHRdIG1lc3NhZ2UgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5jYWxsYmFja10gY3VzdG9tIGNhbGxiYWNrIGluc3RlYWQgb2YgcmVsb2FkXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdHMub25TdWNjZXNzXSByZWxvYWQgYW5kIGRpc3BsYXkgY3VzdG9tIG1lc3NhZ2VcbiAgICAgICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW58alF1ZXJ5LkRlZmVycmVkfSBlaXRoZXIgZmFsc2Ugb3IgYSBwcm9taXNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9wZW5BamF4OiBmdW5jdGlvbiAob3B0cykge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAvLyB1cmwsIHBvc3QsIHRleHQsIGNhbGxiYWNrLCBvblN1Y2Nlc3NcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gb3B0cy51cmw7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3QgPSBvcHRzLnBvc3QgfHwgJ3t9JztcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IG9wdHMudGV4dCB8fCAnJztcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBvcHRzLmNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIHZhciBvblN1Y2Nlc3MgPSBvcHRzLm9uU3VjY2VzcztcbiAgICAgICAgICAgICAgICB2YXIgcXVlc3Rpb24gPSAodGV4dCkgPyBDTVMuQVBJLkhlbHBlcnMuc2VjdXJlQ29uZmlybSh0ZXh0KSA6IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvLyBjYW5jZWwgaWYgcXVlc3Rpb24gaGFzIGJlZW4gZGVuaWVkXG4gICAgICAgICAgICAgICAgaWYgKCFxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGxvYWRlclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRlcigpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IChwb3N0KSA/IEpTT04ucGFyc2UocG9zdCkgOiB7fVxuICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIENNUy5BUEkubG9ja2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGF0LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGVMb2FkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuSGVscGVycy5yZWxvYWRCcm93c2VyKG9uU3VjY2VzcywgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVsb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLkhlbHBlcnMucmVsb2FkQnJvd3NlcihmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICAgICAgQ01TLkFQSS5sb2NrZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLk1lc3NhZ2VzLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganFYSFIucmVzcG9uc2UgKyAnIHwgJyArIGpxWEhSLnN0YXR1cyArICcgJyArIGpxWEhSLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2hvd3MgdGhlIGxvYWRlciBzcGlubmVyIG9uIHRoZSB0cmlnZ2VyIGtub2IgZm9yIHRoZSB0b29sYmFyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2Qgc2hvd0xvYWRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzaG93TG9hZGVyOiBmdW5jdGlvbiBzaG93TG9hZGVyKCkge1xuICAgICAgICAgICAgICAgIHRoaXMudWkudG9vbGJhclRyaWdnZXIuYWRkQ2xhc3MoJ2Ntcy10b29sYmFyLWxvYWRlcicpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBIaWRlcyB0aGUgbG9hZGVyIHNwaW5uZXIgb24gdGhlIHRyaWdnZXIga25vYiBmb3IgdGhlIHRvb2xiYXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBoaWRlTG9hZGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGhpZGVMb2FkZXI6IGZ1bmN0aW9uIGhpZGVMb2FkZXIoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyVHJpZ2dlci5yZW1vdmVDbGFzcygnY21zLXRvb2xiYXItbG9hZGVyJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlbGVnYXRlcyBldmVudCBmcm9tIGVsZW1lbnQgdG8gYXBwcm9wcmlhdGUgZnVuY3Rpb25hbGl0aWVzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2RlbGVnYXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWwgdHJpZ2dlciBlbGVtZW50XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfZGVsZWdhdGU6IGZ1bmN0aW9uIF9kZWxlZ2F0ZShlbCkge1xuICAgICAgICAgICAgICAgIC8vIHNhdmUgbG9jYWwgdmFyc1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlbC5kYXRhKCdyZWwnKTtcbiAgICAgICAgICAgICAgICBpZiAoZWwuaGFzQ2xhc3MoJ2Ntcy1idG4tZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW9kYWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsID0gbmV3IENNUy5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbG9zZTogZWwuZGF0YSgnb24tY2xvc2UnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGVsLmF0dHIoJ2hyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZWwuZGF0YSgnbmFtZScpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIENNUy5BUEkuTWVzc2FnZXMub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZWwuZGF0YSgndGV4dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzaWRlZnJhbWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpZGVmcmFtZSA9IG5ldyBDTVMuU2lkZWZyYW1lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlOiBlbC5kYXRhKCdvbi1jbG9zZScpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZGVmcmFtZS5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGVsLmF0dHIoJ2hyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhamF4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbkFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogZWwuYXR0cignaHJlZicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Q6IEpTT04uc3RyaW5naWZ5KGVsLmRhdGEoJ3Bvc3QnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZWwuZGF0YSgndGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzczogZWwuZGF0YSgnb24tc3VjY2VzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlbC5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXRzIHRoZSBmdW5jdGlvbmFsaXR5IGZvciB0aGUgc3dpdGNoZXIgYnV0dG9uLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX3NldFN3aXRjaGVyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWwgYnV0dG9uIGVsZW1lbnRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2V0U3dpdGNoZXI6IGZ1bmN0aW9uIF9zZXRTd2l0Y2hlcihlbCkge1xuICAgICAgICAgICAgICAgIC8vIHNhdmUgbG9jYWwgdmFyc1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSBlbC5oYXNDbGFzcygnY21zLXRvb2xiYXItaXRlbS1zd2l0Y2gtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IGVsLmZpbmQoJ2EnKTtcbiAgICAgICAgICAgICAgICB2YXIga25vYiA9IGVsLmZpbmQoJy5jbXMtdG9vbGJhci1pdGVtLXN3aXRjaC1rbm9iJyk7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gMzAwO1xuXG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBpZiBzd2l0Y2hvcHN0aW9uIGlzIHBhc3NlZFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJldmVudFN3aXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLk1lc3NhZ2VzLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5vcHRpb25zLnByZXZlbnRTd2l0Y2hNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiAncmlnaHQnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW4gd2hhdCB0byB0cmlnZ2VyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBrbm9iLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3JpZ2h0JzogYW5jaG9yLm91dGVyV2lkdGgodHJ1ZSkgLSAoa25vYi5vdXRlcldpZHRoKHRydWUpICsgMilcbiAgICAgICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGFuY2hvciBiZWhpbmQgdGhlIGtub2JcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmNzcygnei1pbmRleCcsIDEpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmctdG9wJzogNixcbiAgICAgICAgICAgICAgICAgICAgICAgICdwYWRkaW5nLXJpZ2h0JzogMTQsXG4gICAgICAgICAgICAgICAgICAgICAgICAncGFkZGluZy1ib3R0b20nOiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmctbGVmdCc6IDI4XG4gICAgICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBrbm9iLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiBhbmNob3Iub3V0ZXJXaWR0aCh0cnVlKSAtIChrbm9iLm91dGVyV2lkdGgodHJ1ZSkgKyAyKVxuICAgICAgICAgICAgICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgYW5jaG9yIGJlaGluZCB0aGUga25vYlxuICAgICAgICAgICAgICAgICAgICBhbmNob3IuY3NzKCd6LWluZGV4JywgMSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAncGFkZGluZy10b3AnOiA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmctcmlnaHQnOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwYWRkaW5nLWJvdHRvbSc6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAncGFkZGluZy1sZWZ0JzogMTRcbiAgICAgICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHJlbG9hZFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFuY2hvci5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMb2NrcyB0aGUgdG9vbGJhciBzbyBpdCBjYW5ub3QgYmUgY2xvc2VkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgX2xvY2tcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9jayB0cnVlIGlmIHRoZSB0b29sYmFyIHNob3VsZCBiZSBsb2NrZWRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9sb2NrOiBmdW5jdGlvbiBfbG9jayhsb2NrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NrVG9vbGJhciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgYnV0dG9uIGxvb2sgZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyVHJpZ2dlci5jc3MoJ29wYWNpdHknLCAwLjIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9ja1Rvb2xiYXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBidXR0b24gbG9vayBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXJUcmlnZ2VyLmNzcygnb3BhY2l0eScsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGFuZGxlcyB0aGUgZGVidWcgYmFyIHdoZW4gYERFQlVHPXRydWVgIG9uIHRvcCBvZiB0aGUgdG9vbGJhci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9kZWJ1Z1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2RlYnVnOiBmdW5jdGlvbiBfZGVidWcoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gMTAwMDtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICAgICAgICAgIC8vIGJpbmQgbWVzc2FnZSBldmVudFxuICAgICAgICAgICAgICAgIHZhciBkZWJ1ZyA9IHRoaXMudWkuY29udGFpbmVyLmZpbmQoJy5jbXMtZGVidWctYmFyJyk7XG4gICAgICAgICAgICAgICAgZGVidWcub24odGhpcy5tb3VzZUVudGVyICsgJyAnICsgdGhpcy5tb3VzZUxlYXZlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IHRoYXQubW91c2VFbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTVMuQVBJLk1lc3NhZ2VzLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBDTVMuY29uZmlnLmxhbmcuZGVidWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgc2hvd3MgYSBkYXJrIHNjcmVlbiB3aXRoIGEgbm90ZSBcIlRoaXMgcGFnZSBpcyBhIHJlZGlyZWN0XCJcbiAgICAgICAgICAgICAqIG9uIGEgcGFnZSB3aGVyZSB0aGUgc2V0dGluZ3MgaGF2ZSBiZWVuIG1vZGlmaWVkIHRvIHJlZGlyZWN0IHRvXG4gICAgICAgICAgICAgKiBhbm90aGVyIHBhZ2UuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2NyZWVuQmxvY2tcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zY3JlZW5CbG9jazogZnVuY3Rpb24gX3NjcmVlbkJsb2NrKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSAyMDtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tlciA9IHRoaXMudWkuc2NyZWVuQmxvY2s7XG4gICAgICAgICAgICAgICAgdmFyIHNpZGVmcmFtZSA9ICQoJy5jbXMtc2lkZWZyYW1lJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHJlc2l6ZSBzY3JlZW5ibG9jayB3aW5kb3cgYWNjb3JkaW5nIHRvIGdpdmVuIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAkKHdpbmRvdykub24odGhpcy5yZXNpemUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tlci5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJCh0aGlzKS53aWR0aCgpIC0gc2lkZWZyYW1lLndpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJCh3aW5kb3cpLmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLnRyaWdnZXIoJ3Jlc2l6ZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHVwZGF0ZSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIodGhhdC5yZXNpemUpO1xuICAgICAgICAgICAgICAgIH0sIGludGVydmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKENNUy4kKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgaHR0cHM6Ly9naXRodWIuY29tL2RpdmlvL2RqYW5nby1jbXNcbiAqL1xuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gTkFNRVNQQUNFU1xuLyoqXG4gKiBAbW9kdWxlIENNU1xuICovXG52YXIgQ01TID0gd2luZG93LkNNUyB8fCB7fTtcblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFRvb2x0aXBcbihmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIHNob3J0aGFuZCBmb3IgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSgpO1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRvb2x0aXAgaXMgdGhlIGVsZW1lbnQgd2hpY2ggc2hvd3Mgb3ZlciBwbHVnaW5zXG4gICAgICAgICAqIGFuZCBzdWdnZXN0cyBjbGlja2luZy90YXBwaW5nIHRoZW0gdG8gZWRpdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNsYXNzIFRvb2x0aXBcbiAgICAgICAgICogQG5hbWVzcGFjZSBDTVNcbiAgICAgICAgICovXG4gICAgICAgIENNUy5Ub29sdGlwID0gbmV3IENNUy5DbGFzcyh7XG5cbiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJvZHkgPSAkKCdib2R5Jyk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQXJlIHdlIG9uIHRvdWNoIGRldmljZT9cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNUb3VjaFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuaXNUb3VjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRvb2x0aXAgRE9NIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7alF1ZXJ5fSBkb21FbGVtXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5kb21FbGVtID0gdGhpcy5fcGljaygpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tUb3VjaCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVja3MgZm9yIHRvdWNoIGV2ZW50IGFuZCBzd2l0Y2hlcyB0byB0b3VjaCB0b29sdGlwIGlmIGRldGVjdGVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgY2hlY2tUb3VjaFxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2NoZWNrVG91Y2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJvZHkub25lKCd0b3VjaHN0YXJ0LmNtcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pc1RvdWNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5kb21FbGVtID0gdGhhdC5fcGljaygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaCB0b29sdGlwIGV2ZW50IGZvciB0b3VjaCBkZXZpY2VzXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZG9tRWxlbS5vbigndG91Y2hzdGFydC5jbXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSAkKHRoaXMpLmRhdGEoJ3BsdWdpbl9pZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsdWdpbiA9ICQoJy5jbXMtcGx1Z2luLScgKyBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBpdCBpcyBhIG5vcm1hbCBwbHVnaW4gb3IgYSBnZW5lcmljXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbi50cmlnZ2VyKCdkYmxjbGljay5jbXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJpY3MgYXJlIGFkZGVkIHRocm91Z2ggdGhlIGNvbnRlbnQgbW9kZSB2aWEgc3BlY2lhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlbXBsYXRlIHRhZ3Mgc29tZSBnZW5lcmljIGVsZW1lbnQgbWlnaHQgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbXMtcGx1Z2luLWNtcy1wYWdlLWNoYW5nZWxpc3QteFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW5lcmljID0gJCgnLmNtcy1wbHVnaW5bY2xhc3MqPVwiY21zLXBsdWdpbi1jbXMtXCJdW2NsYXNzKj1cIi0nICsgaWQgKyAnXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJpYy5lcSgwKS50cmlnZ2VyKCdkYmxjbGljay5jbXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1hbmFnZXMgc2hvdy9oaWRlIGNhbGxzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgZGlzcGxheVRvZ2dsZVxuICAgICAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1Nob3duXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZSBldmVudCBvYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGN1cnJlbnQgcGx1Z2luIG5hbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBjdXJyZW50IHBsdWdpbiBpZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkaXNwbGF5VG9nZ2xlOiBmdW5jdGlvbiAoaXNTaG93biwgZSwgbmFtZSwgaWQpIHtcbiAgICAgICAgICAgICAgICBpc1Nob3duID8gdGhpcy5zaG93KGUsIG5hbWUsIGlkKSA6IHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaG93cyB0b29sdGlwIHdpdGggc3BlY2lmaWMgcGx1Z2luLXJlbGF0ZWQgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2Qgc2hvd1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGN1cnJlbnQgcGx1Z2luIG5hbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBjdXJyZW50IHBsdWdpbiBpZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAoZSwgbmFtZSwgaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9vbHRpcCA9IHRoaXMuZG9tRWxlbTtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgY3NzIGFuZCBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgdG9vbHRpcC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKCdwbHVnaW5faWQnLCBpZCB8fCBudWxsKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCdzcGFuJykuaHRtbChuYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbihlLm9yaWdpbmFsRXZlbnQsIHRvb2x0aXApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaGVzIG1vdmUgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBzZXRzIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGZvciB0aGUgZWRpdCB0b29sdGlwXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucG9zaXRpb24oZS5vcmlnaW5hbEV2ZW50LCB0b29sdGlwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2R5Lm9uKCdtb3VzZW1vdmUuY21zJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQucG9zaXRpb24oZSwgdG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGlkZXMgdG9vbHRpcFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgaGlkZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlIGNzc1xuICAgICAgICAgICAgICAgIHRoaXMuZG9tRWxlbS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gdW5iaW5kIGV2ZW50c1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9keS5vZmYoJ21vdXNlbW92ZS5jbXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBpY2tzIHRvb2x0aXAgdG8gc2hvdyAodG91Y2ggb3IgZGVza3RvcCkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBfcGlja1xuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3BpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKCcuY21zLXRvb2x0aXAtdG91Y2gsIC5jbXMtdG9vbHRpcCcpLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNUb3VjaCA/ICQoJy5jbXMtdG9vbHRpcC10b3VjaCcpIDogJCgnLmNtcy10b29sdGlwJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBvc2l0aW9ucyB0b29sdGlwIG5leHQgdG8gdGhlIHBvaW50ZXIgZXZlbnQgY29vcmRpbmF0ZXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG1ldGhvZCBwb3NpdGlvblxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IHRvb2x0aXAgZWxlbWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24gKGUsIHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAvLyBzbyBsZXRzIGZpZ3VyZSBvdXQgd2hlcmUgd2UgYXJlXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IDIwO1xuICAgICAgICAgICAgICAgIHZhciByZWxYID0gZS5wYWdlWCAtICQodG9vbHRpcCkub2Zmc2V0UGFyZW50KCkub2Zmc2V0KCkubGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgcmVsWSA9IGUucGFnZVkgLSAkKHRvb2x0aXApLm9mZnNldFBhcmVudCgpLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmQgPSAkKHRvb2x0aXApLm9mZnNldFBhcmVudCgpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IHJlbFggKyB0b29sdGlwLm91dGVyV2lkdGgodHJ1ZSkgKyBvZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICB0b29sdGlwLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IChwb3MgPj0gYm91bmQpID8gcmVsWCAtIHRvb2x0aXAub3V0ZXJXaWR0aCh0cnVlKSAtIG9mZnNldCA6IHJlbFggKyBvZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogcmVsWSAtIDEyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KShDTVMuJCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=