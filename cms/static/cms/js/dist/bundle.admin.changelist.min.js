/*! jQuery UI - v1.11.4 - 2015-09-09
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, sortable.js
* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */

(function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){function t(t,s){var n,a,o,r=t.nodeName.toLowerCase();return"area"===r?(n=t.parentNode,a=n.name,t.href&&a&&"map"===n.nodeName.toLowerCase()?(o=e("img[usemap='#"+a+"']")[0],!!o&&i(o)):!1):(/^(input|select|textarea|button|object)$/.test(r)?!t.disabled:"a"===r?t.href||s:s)&&i(t)}function i(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}e.ui=e.ui||{},e.extend(e.ui,{version:"1.11.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({scrollParent:function(t){var i=this.css("position"),s="absolute"===i,n=t?/(auto|scroll|hidden)/:/(auto|scroll)/,a=this.parents().filter(function(){var t=e(this);return s&&"static"===t.css("position")?!1:n.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))}).eq(0);return"fixed"!==i&&a.length?a:e(this[0].ownerDocument||document)},uniqueId:function(){var e=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++e)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(i){return t(i,!isNaN(e.attr(i,"tabindex")))},tabbable:function(i){var s=e.attr(i,"tabindex"),n=isNaN(s);return(n||s>=0)&&t(i,!n)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(t,i){function s(t,i,s,a){return e.each(n,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),a&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],a=i.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+i]=function(t){return void 0===t?o["inner"+i].call(this):this.each(function(){e(this).css(a,s(this,t)+"px")})},e.fn["outer"+i]=function(t,n){return"number"!=typeof t?o["outer"+i].call(this,t):this.each(function(){e(this).css(a,s(this,t,!0,n)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),disableSelection:function(){var e="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(e+".ui-disableSelection",function(e){e.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(t){if(void 0!==t)return this.css("zIndex",t);if(this.length)for(var i,s,n=e(this[0]);n.length&&n[0]!==document;){if(i=n.css("position"),("absolute"===i||"relative"===i||"fixed"===i)&&(s=parseInt(n.css("zIndex"),10),!isNaN(s)&&0!==s))return s;n=n.parent()}return 0}}),e.ui.plugin={add:function(t,i,s){var n,a=e.ui[t].prototype;for(n in s)a.plugins[n]=a.plugins[n]||[],a.plugins[n].push([i,s[n]])},call:function(e,t,i,s){var n,a=e.plugins[t];if(a&&(s||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(n=0;a.length>n;n++)e.options[a[n][0]]&&a[n][1].apply(e.element,i)}};var s=0,n=Array.prototype.slice;e.cleanData=function(t){return function(i){var s,n,a;for(a=0;null!=(n=i[a]);a++)try{s=e._data(n,"events"),s&&s.remove&&e(n).triggerHandler("remove")}catch(o){}t(i)}}(e.cleanData),e.widget=function(t,i,s){var n,a,o,r,h={},l=t.split(".")[0];return t=t.split(".")[1],n=l+"-"+t,s||(s=i,i=e.Widget),e.expr[":"][n.toLowerCase()]=function(t){return!!e.data(t,n)},e[l]=e[l]||{},a=e[l][t],o=e[l][t]=function(e,t){return this._createWidget?(arguments.length&&this._createWidget(e,t),void 0):new o(e,t)},e.extend(o,a,{version:s.version,_proto:e.extend({},s),_childConstructors:[]}),r=new i,r.options=e.widget.extend({},r.options),e.each(s,function(t,s){return e.isFunction(s)?(h[t]=function(){var e=function(){return i.prototype[t].apply(this,arguments)},n=function(e){return i.prototype[t].apply(this,e)};return function(){var t,i=this._super,a=this._superApply;return this._super=e,this._superApply=n,t=s.apply(this,arguments),this._super=i,this._superApply=a,t}}(),void 0):(h[t]=s,void 0)}),o.prototype=e.widget.extend(r,{widgetEventPrefix:a?r.widgetEventPrefix||t:t},h,{constructor:o,namespace:l,widgetName:t,widgetFullName:n}),a?(e.each(a._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete a._childConstructors):i._childConstructors.push(o),e.widget.bridge(t,o),o},e.widget.extend=function(t){for(var i,s,a=n.call(arguments,1),o=0,r=a.length;r>o;o++)for(i in a[o])s=a[o][i],a[o].hasOwnProperty(i)&&void 0!==s&&(t[i]=e.isPlainObject(s)?e.isPlainObject(t[i])?e.widget.extend({},t[i],s):e.widget.extend({},s):s);return t},e.widget.bridge=function(t,i){var s=i.prototype.widgetFullName||t;e.fn[t]=function(a){var o="string"==typeof a,r=n.call(arguments,1),h=this;return o?this.each(function(){var i,n=e.data(this,s);return"instance"===a?(h=n,!1):n?e.isFunction(n[a])&&"_"!==a.charAt(0)?(i=n[a].apply(n,r),i!==n&&void 0!==i?(h=i&&i.jquery?h.pushStack(i.get()):i,!1):void 0):e.error("no such method '"+a+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; "+"attempted to call method '"+a+"'")}):(r.length&&(a=e.widget.extend.apply(null,[a].concat(r))),this.each(function(){var t=e.data(this,s);t?(t.option(a||{}),t._init&&t._init()):e.data(this,s,new i(a,this))})),h}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=s++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(t,i){var s,n,a,o=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(o={},s=t.split("."),t=s.shift(),s.length){for(n=o[t]=e.widget.extend({},this.options[t]),a=0;s.length-1>a;a++)n[s[a]]=n[s[a]]||{},n=n[s[a]];if(t=s.pop(),1===arguments.length)return void 0===n[t]?null:n[t];n[t]=i}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];o[t]=i}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!t),t&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(t,i,s){var n,a=this;"boolean"!=typeof t&&(s=i,i=t,t=!1),s?(i=n=e(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),e.each(s,function(s,o){function r(){return t||a.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof o?a[o]:o).apply(a,arguments):void 0}"string"!=typeof o&&(r.guid=o.guid=o.guid||r.guid||e.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+a.eventNamespace,u=h[2];u?n.delegate(u,l,r):i.bind(l,r)})},_off:function(t,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(i).undelegate(i),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,o=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(o)&&o.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var o,r=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),o=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),o&&e.effects&&e.effects.effect[r]?s[t](n):r!==t&&s[r]?s[r](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}}),e.widget;var a=!1;e(document).mouseup(function(){a=!1}),e.widget("ui.mouse",{version:"1.11.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(!a){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var i=this,s=1===t.which,n="string"==typeof this.options.cancel&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(t)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(t)!==!1,!this._mouseStarted)?(t.preventDefault(),!0):(!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return i._mouseMove(e)},this._mouseUpDelegate=function(e){return i._mouseUp(e)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),a=!0,!0)):!0}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button)return this._mouseUp(t);if(!t.which)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),a=!1,!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),e.widget("ui.sortable",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,i){return e>=t&&t+i>e},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),e.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,i){var s=null,n=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(t),e(t.target).parents().each(function(){return e.data(this,a.widgetName+"-item")===a?(s=e(this),!1):void 0}),e.data(t.target,a.widgetName+"-item")===a&&(s=e(t.target)),s?!this.options.handle||i||(e(this.options.handle,s).find("*").addBack().each(function(){this===t.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(t,i,s){var n,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=e("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var i,s,n,a,o=this.options,r=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:t.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:t.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(t.pageY-this.document.scrollTop()<o.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-o.scrollSpeed):this.window.height()-(t.pageY-this.document.scrollTop())<o.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+o.scrollSpeed)),t.pageX-this.document.scrollLeft()<o.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-o.scrollSpeed):this.window.width()-(t.pageX-this.document.scrollLeft())<o.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+o.scrollSpeed))),r!==!1&&e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],a=this._intersectsWithPointer(s),a&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==n&&!e.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!e.contains(this.element[0],n):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(t,s),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,i){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var s=this,n=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){s._clear(t)})}else this._clear(t,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},e(i).each(function(){var i=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);i&&s.push((t.key||i[1]+"[]")+"="+(t.key&&t.expression?i[1]:i[2]))}),!s.length&&t.key&&s.push(t.key+"="),s.join("&")},toArray:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},i.each(function(){s.push(e(t.item||this).attr(t.attribute||"id")||"")}),s},_intersectsWith:function(e){var t=this.positionAbs.left,i=t+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=e.left,o=a+e.width,r=e.top,h=r+e.height,l=this.offset.click.top,u=this.offset.click.left,d="x"===this.options.axis||s+l>r&&h>s+l,c="y"===this.options.axis||t+u>a&&o>t+u,p=d&&c;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:t+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(e){var t="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width),s=t&&i,n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return s?this.floating?a&&"right"===a||"down"===n?2:1:n&&("down"===n?2:1):!1},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&t||"up"===s&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){function i(){r.push(this)}var s,n,a,o,r=[],h=[],l=this._connectWith();if(l&&t)for(s=l.length-1;s>=0;s--)for(a=e(l[s],this.document[0]),n=a.length-1;n>=0;n--)o=e.data(a[n],this.widgetFullName),o&&o!==this&&!o.options.disabled&&h.push([e.isFunction(o.options.items)?o.options.items.call(o.element):e(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(h.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return e(r)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var i=0;t.length>i;i++)if(t[i]===e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var i,s,n,a,o,r,h,l,u=this.items,d=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],c=this._connectWith();if(c&&this.ready)for(i=c.length-1;i>=0;i--)for(n=e(c[i],this.document[0]),s=n.length-1;s>=0;s--)a=e.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(d.push([e.isFunction(a.options.items)?a.options.items.call(a.element[0],t,{item:this.currentItem}):e(a.options.items,a.element),a]),this.containers.push(a));for(i=d.length-1;i>=0;i--)for(o=d[i][1],r=d[i][0],s=0,l=r.length;l>s;s++)h=e(r[s]),h.data(this.widgetName+"-item",o),u.push({item:h,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(t){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,a;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?e(this.options.toleranceElement,s.item):s.item,t||(s.width=n.outerWidth(),s.height=n.outerHeight()),a=n.offset(),s.left=a.left,s.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(t){t=t||this;var i,s=t.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=t.currentItem[0].nodeName.toLowerCase(),n=e("<"+s+">",t.document[0]).addClass(i||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tbody"===s?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(n)):"tr"===s?t._createTrPlaceholder(t.currentItem,n):"img"===s&&n.attr("src",t.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(e,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(s.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),s.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,i){var s=this;t.children().each(function(){e("<td>&#160;</td>",s.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(t){var i,s,n,a,o,r,h,l,u,d,c=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!e.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(c&&e.contains(this.containers[i].element[0],c.element[0]))continue;c=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",t,this._uiHash(this)),this.containers[i].containerCache.over=0);if(c)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,a=null,u=c.floating||this._isFloating(this.currentItem),o=u?"left":"top",r=u?"width":"height",d=u?"clientX":"clientY",s=this.items.length-1;s>=0;s--)e.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[o],l=!1,t[d]-h>this.items[s][r]/2&&(l=!0),n>Math.abs(t[d]-h)&&(n=Math.abs(t[d]-h),a=this.items[s],this.direction=l?"up":"down"));if(!a&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;a?this._rearrange(t,a,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||e("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.width():this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(t=e(n.containment)[0],i=e(n.containment).offset(),s="hidden"!==e(t).css("overflow"),this.containment=[i.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])
},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"===t?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(t){var i,s,n=this.options,a=t.pageX,o=t.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((a-this.originalPageX)/n.grid[0])*n.grid[0],a=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(e,t,i,s){i?i[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(e,t){function i(e,t,i){return function(s){i._trigger(e,s,t._uiHash(t))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!t&&n.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||n.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(n.push(function(e){this._trigger("remove",e,this._uiHash())}),n.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)t||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(s=0;n.length>s;s++)n[s].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var i=t||this;return{helper:i.helper,placeholder:i.placeholder||e([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:t?t.element:null}}})});

//##################################################################################################################
// #CHANGELIST#
/* global CMS, tree_component */

(function ($) {
    'use strict';
    // CMS.$ will be passed for $
    $(document).ready(function () {

        /*!
         * TreeManager
         * Handles treeview
         * TODO this will be refactored in 3.2
         */
        CMS.TreeManager = new CMS.Class({

            options: {
                'lang': {}
            },

            initialize: function (options) {
                this.options = $.extend(true, {}, this.options, options);

                // load internal functions
                if (!this.options.settings.filtered) {
                    this.setupFunctions();
                    this.setupTreePublishing();
                    this.setupUIHacks();
                    this.setupGlobals();
                    this.setupTree();

                    // init tree component
                    window.initTree();
                } else {
                    // when filtered is active, prevent tree actions
                    this.setupFunctions();
                    this.setupUIHacks();
                    $.syncCols();
                }
            },

            setupFunctions: function () {
                var that = this;

                $.syncCols = function () {
                    $('#sitemap .col-softroot').syncWidth(0);
                    $('#sitemap .col-apphook').syncWidth(0);
                    $('#sitemap .col-language').syncWidth(0);
                    $('#sitemap .col-navigation').syncWidth(0);
                    $('#sitemap .col-actions').syncWidth(0);
                    $('#sitemap .col-info').syncWidth(0);

                    that.refreshColumns.call($('ul.tree-default li'));
                };

                /* Colums width sync */
                $.fn.syncWidth = function (max) {
                    var visible = false;

                    $(this).each(function () {
                        if ($(this).is(':visible')) {
                            visible = true;
                            var val = $(this).width();
                            if (val > max) {
                                max = val;
                            }
                        }
                    });
                    if (visible && max > 0) {
                        $(this).each(function () {
                            $(this).css('width', max);
                        });
                    }
                };

                // jquery.functional
                $.curry = function (fn) {
                    if (arguments.length < 2) {
                        return fn;
                    }
                    var args = $.makeArray(arguments).slice(1, arguments.length);
                    return function () {
                        return fn.apply(this, args.concat($.makeArray(arguments)));
                    };
                };

                $.__callbackPool = {};

                $.callbackRegister = function (name, fn /*, arg0, arg1, ..*/) {
                    if (arguments.length > 2) {
                        // create curried function
                        fn = $.curry.apply(this, $.makeArray(arguments).slice(1, arguments.length));
                    }
                    $.__callbackPool[name] = fn;
                    return name;
                };

                $.callbackCall = function (name/*, extra arg0, extra arg1, ..*/) {
                    if (!name || !(name in $.__callbackPool)) {
                        throw 'No callback registered with name: ' + name;
                    }
                    $.__callbackPool[name].apply(this, $.makeArray(arguments).slice(1, arguments.length));
                    $.callbackRemove(name);
                    return name;
                };

                $.callbackRemove = function (name) {
                    delete $.__callbackPool[name];
                };

                // very simple yellow fade plugin..
                $.fn.yft = function () {
                    this.effect('highlight', {}, 1000);
                };

                // jquery replace plugin :)
                $.fn.replace = function (o) {
                    return this.after(o).remove().end();
                };

            },

            setupTreePublishing: function () {
                // ADD DIRECT PUBLISHING
                var that = this;
                var tree = $('.tree');
                var langTrigger = '.col-language .trigger-tooltip span';
                var langTooltips = '.language-tooltip';
                var langTimer = function () {};
                var langDelay = 100;
                var langFadeDuration = 200;
                // workaround for the publishing tooltip on touch devices
                var touchUsedNode;

                // show the tooltip
                tree.delegate(langTrigger, 'pointerover touchstart', function (e) {
                    var el = $(this).closest('.col-language').find('.language-tooltip');
                    var anchors = el.find('a');
                    var span = $(this);

                    // clear timer
                    clearTimeout(langTimer);

                    // cancel if tooltip already visible
                    if (el.is(':visible') && !touchUsedNode) {
                        return false;
                    }

                    // set correct position
                    el.css('right', 20 + $(this).position().left);

                    // figure out what should be shown
                    anchors.hide();
                    if (span.hasClass('unpublished') || span.hasClass('unpublishedparent')) {
                        anchors.eq(1).show();
                    }
                    if (span.hasClass('published')) {
                        anchors.eq(0).show();
                    }
                    if (span.hasClass('dirty')) {
                        anchors.show().parent().addClass('language-tooltip-multiple');
                    }

                    // hide all elements
                    $(langTooltips).fadeOut(langDelay);

                    if (e.type === 'touchstart') {
                        e.preventDefault();
                        touchUsedNode = touchUsedNode === e.target ? false : e.target;
                        if (touchUsedNode) {
                            return;
                        }
                    }

                    // use a timeout to display the tooltip
                    langTimer = setTimeout(function () {
                        el.stop(true, true).fadeIn(langFadeDuration);
                    }, langDelay);
                });
                // hide the tooltip when leaving the area
                tree.delegate(langTrigger, 'pointerout', function () {
                    if (touchUsedNode) {
                        return;
                    }
                    // clear timer
                    clearTimeout(langTimer);
                    // hide all elements
                    langTimer = setTimeout(function () {
                        $(langTooltips).fadeOut(langFadeDuration);
                    }, langDelay * 2);
                });
                // reset hiding when entering the tooltip itself
                tree.delegate(langTooltips, 'pointerover', function () {
                    // clear timer
                    clearTimeout(langTimer);
                });
                tree.delegate(langTooltips, 'pointerout', function () {
                    // hide all elements
                    langTimer = setTimeout(function () {
                        $(langTooltips).fadeOut(langFadeDuration);
                    }, langDelay * 2);
                });
                // attach double check event if publish or unpublish should be triggered
                tree.delegate('.language-tooltip a', 'click', function (e) {
                    e.preventDefault();

                    // cancel if not confirmed
                    if (!confirm(that.options.lang.publish.replace('§', $(this).text().toLowerCase()))) {
                        return false;
                    }

                    // send post request to prevent xss attacks
                    $.ajax({
                        type: 'post',
                        url: $(this).prop('href'),
                        success: function () {
                            CMS.API.Helpers.reloadBrowser();
                        },
                        error: function (request) {
                            throw new Error(request);
                        }
                    });
                });
            },

            setupUIHacks: function () {
                // enables tab click on title entry to open in new window
                $('.tree').on('click', '.col1 .title', function (e) {
                    if (!e.metaKey) {
                        window.top.location.href = $(this).attr('href');
                    } else {
                        window.open($(this).attr('href'), '_blank');
                    }
                });

                // adds functionality to the filter
                $('#changelist-filter-button').bind('click', function () {
                    $('#changelist-filter').toggle();
                });

                // set correct active entry
                if (window.parent && window.parent.CMS && window.parent.CMS.config) {
                    var page_id = window.parent.CMS.config.request.page_id;

                    $('div[data-page_id="' + page_id + '"]').addClass('cont-active');
                }
            },

            setupGlobals: function () {
                var that = this;
                var msg = '';
                var parent = null;

                window.moveSuccess = function (node) {
                    $.syncCols();

                    msg = $('<span class="success">' + that.options.lang.success + '</span>');
                    parent = window.parent;

                    node.after(msg);
                    node.parent().find('.col2').hide();
                    msg.fadeOut(1000, function () {
                        node.parent().find('.col2').show();
                    });
                    // check for reload changes
                    if (window.self !== window.top) {
                        window.parent.CMS.API.Helpers.reloadBrowser(false, false, true);
                        window.parent.CMS.API.Toolbar.openMessage(that.options.lang.changes, false, 0);
                    }
                };

                window.moveError = function (node, message) {
                    if (message && message !== 'error') {
                        msg = $('<span class="success">' + message + '</span>');
                    } else {
                        msg = $('<span class="success">' + that.options.lang.error + '</span>');
                    }
                    node.parent().find('.col2').hide();
                    node.after(msg);
                };

            },

            setupTree: function () {
                var that = this;
                var tree;
                var origin = window.location.protocol + '//' + window.location.hostname +
                    (window.location.port ? ':' + window.location.port : '');
                // global initTree function
                window.initTree = function () {
                    // jshint newcap: false
                    // jscs:disable requireCapitalizedConstructors
                    tree = new tree_component();
                    // jscs:enable requireCapitalizedConstructors
                    // jshint newcap: true
                    var options = {
                        rules: {
                            clickable: 'all',
                            renameable: 'none',
                            deletable: 'all',
                            creatable: 'all',
                            draggable: 'all',
                            dragrules: 'all',
                            droppable: 'all',
                            metadata : 'mdata',
                            use_inline: true
                            //droppable : ['tree_drop']
                        },
                        // has to be absolute full path
                        path: origin + that.options.settings.staticPath + 'cms/js/jstree/',
                        ui: {
                            dots: true,
                            rtl: false,
                            animation: 0,
                            hover_mode: true,
                            //theme_path: script_url_path() + '/../jstree/themes/',
                            a_class: 'title',
                            context: false
                        },
                        cookies : {
                            prefix: 'djangocms_nodes'
                        },
                        callback: {
                            beforemove  : function (what, where, position) {
                                window.item_id = what.id.split('page_')[1];
                                window.target_id = where.id.split('page_')[1];
                                window.old_node = what;

                                if ($(what).parent().children('li').length > 1) {
                                    if ($(what).next('li').length) {
                                        window.old_target = $(what).next('li')[0];
                                        window.old_position = 'right';
                                    }
                                    if ($(what).prev('li').length) {
                                        window.old_target = $(what).prev('li')[0];
                                        window.old_position = 'left';
                                    }
                                } else {
                                    if ($(what).attr('rel') !== 'topnode') {
                                        window.old_target = $(what).parent().parent()[0];
                                        window.old_position = 'inside';
                                    }
                                }

                                addUndo(what, where, position);
                                return true;
                            },
                            onmove: function (what, where, position) {
                                window.item_id = what.id.split('page_')[1];
                                window.target_id = where.id.split('page_')[1];

                                if (position === 'before') {
                                    position = 'left';
                                } else if (position === 'after') {
                                    position = 'right';
                                } else if (position === 'inside') {
                                    position = 'last-child';
                                }
                                moveTreeItem(what, window.item_id, window.target_id, position, false);
                            },

                            onload: function () {
                                setTimeout(function () {
                                    reCalc();
                                }, 250);
                            }

                        }
                    };

                    if (!$($('div.tree').get(0)).hasClass('root_allow_children')) {
                        // disalow possibility for adding subnodes to main tree, user doesn't
                        // have permissions for this
                        options.rules.dragrules = ['node inside topnode', 'topnode inside topnode', 'node * node'];
                    }

                    tree.init($('div.tree'), options);
                };

                window.selected_page = false;
                action = false;

                var _oldAjax = $.ajax;

                $.ajax = function (s) {
                    // just override ajax function, so the loader message gets displayed
                    // always
                    $('#loader-message').show();

                    var callback = s.success || false;
                    s.success = function (data, status) {
                        if (callback) {
                            callback(data, status);
                        }
                        $('#loader-message').hide();
                    };

                    // just for debuging!!
                    /*s.complete = function (xhr, status) {
                        if (status == 'error' && that.options.settings.debug) {
                            $('body').before(xhr.responseText);
                        }
                    }*/
                    // end just for debuging

                    // TODO: add error state!
                    return _oldAjax(s);
                };

                // // defined but never used
                // function refresh() {
                //     window.location = window.location.href;
                // }

                // // defined but never used
                // function refreshIfChildren(pageId) {
                //     return $('#page_' + pageId).find('li[id^=page_]').length ?
                //     refresh :
                //     function () { return true; };
                // }

                /**
                 * Loads remote dialog to dialogs div.
                 *
                 * @param {String} url
                 * @param {Object} data Data to be send over post
                 * @param {Function} noDialogCallback Gets called when response is empty.
                 * @param {Function} callback Standard callback function.
                 */
                function loadDialog(url, data, noDialogCallback, callback) {
                    if (data === undefined) {
                        data = {};
                    }
                    $.post(url, data, function (response) {
                        if (response === '' && noDialogCallback) {
                            noDialogCallback();
                        }
                        $('#dialogs').empty().append(response);
                        if (callback) {
                            callback(response);
                        }
                    });
                }

                function mark_copy_node(id) {
                    $('a.move-target, span.move-target-container, span.line').show();
                    $('#page_' + id).addClass('selected');
                    $('#page_' + id).parent().parent()
                        .children('div.cont').find('a.move-target.first-child, span.second').hide();
                    $('#page_' + id).parent().parent()
                        .children('ul').children('li').children('div.cont')
                        .find('a.move-target.left, a.move-target.right, span.first, span.second').hide();
                    return 'copy';
                }


                // let's start event delegation
                $('#changelist li').on('click', function (e) {
                    // I want a link to check the class
                    if (e.target.tagName === 'IMG' || e.target.tagName === 'SPAN') {
                        window.target = e.target.parentNode;
                    } else {
                        window.target = e.target;
                    }
                    var jtarget = $(window.target);
                    var id;
                    var page_id;
                    if (jtarget.hasClass('move')) {
                        // prepare tree for move / cut paste
                        id = e.target.id.split('move-link-')[1];
                        if (!id) {
                            id = e.target.parentNode.id.split('move-link-')[1];
                        }
                        page_id = id;
                        window.selected_page = page_id;
                        action = 'move';
                        $('span.move-target-container, span.line, a.move-target').show();
                        $('#page_' + page_id).addClass('selected');
                        $('#page_' + page_id + ' span.move-target-container').hide();
                        e.stopPropagation();
                        return false;
                    }

                    if (jtarget.hasClass('copy')) {
                        // prepare tree for copy
                        id = e.target.id.split('copy-link-')[1];
                        if (!id) {
                            id = e.target.parentNode.id.split('copy-link-')[1];
                        }
                        window.selected_page = id;
                        action = mark_copy_node(id);
                        e.stopPropagation();
                        return false;
                    }

                    if (jtarget.hasClass('viewpage')) {
                        var view_page_url = $('#' + window.target.id + '-select').val();
                        if (view_page_url) {
                            window.open(view_page_url);
                        }
                    }

                    if (jtarget.hasClass('addlink')) {
                        if (!/#$/g.test(jtarget.attr('href'))) {
                            // if there is url instead of # inside href, follow this url
                            // used if user haves add_page
                            return true;
                        }

                        $('tr').removeClass('target');
                        $('#changelist table').removeClass('table-selected');
                        page_id = window.target.id.split('add-link-')[1];
                        window.selected_page = page_id;
                        action = 'add';
                        $('tr').removeClass('selected');
                        $('#page-row-' + page_id).addClass('selected');
                        $('.move-target-container').hide();
                        $('a.move-target, span.line, #move-target-' + page_id).show();
                        e.stopPropagation();
                        return false;
                    }

                    // don't assume admin site is root-level
                    // grab base url to construct full absolute URLs
                    window.admin_base_url = document.URL.split('/cms/page/')[0] + '/';

                    var pageId;
                    var language;
                    // in navigation
                    if (jtarget.hasClass('navigation-checkbox')) {
                        e.stopPropagation();

                        pageId = jtarget.attr('name').split('navigation-')[1];
                        language = jtarget.closest('.cont').find('a[lang]').attr('lang') || '';

                        // if I don't put data in the post, django doesn't get it
                        reloadItem(
                            jtarget,
                            window.admin_base_url + 'cms/page/' + pageId + '/change-navigation/?language=' + language,
                            { 1: 1 }
                        );
                    }

                    // lazy load descendants on tree open
                    if (jtarget.hasClass('closed')) {
                        // only load them once
                        if (jtarget.find('ul > li').length === 0 && !jtarget.hasClass('loading')) {
                            // keeps this event from firing multiple times before
                            // the dom as changed. it still needs to propagate for
                            // the other click event on this element to fire
                            jtarget.addClass('loading');
                            pageId = $(jtarget).attr('id').split('page_')[1];
                            language = $(jtarget)
                                .children('div.cont')
                                .children('div.col1')
                                .children('.title').attr('lang');
                            $.get(
                                window.admin_base_url + 'cms/page/' + pageId + '/' + language + '/descendants/',
                                {},
                                function (r) {
                                    jtarget.children('ul').append(r);
                                    // show move targets if needed
                                    if ($('span.move-target-container:visible').length > 0) {
                                        jtarget.children('ul')
                                            .find('a.move-target, span.move-target-container, span.line')
                                            .show();
                                    }
                                    reCalc();
                                }
                            );
                        } else {
                            reCalc();
                        }
                    }

                    if (jtarget.hasClass('move-target')) {
                        if (jtarget.hasClass('left')) {
                            window.position = 'left';
                        }
                        if (jtarget.hasClass('right')) {
                            window.position = 'right';
                        }
                        if (jtarget.hasClass('last-child')) {
                            window.position = 'last-child';
                        }
                        window.target_id = window.target.parentNode.id.split('move-target-')[1];

                        if (action === 'move') {
                            moveTreeItem(null, window.selected_page, window.target_id, window.position, tree);
                            $('.move-target-container').hide();
                        } else if (action === 'copy') {
                            window.site = $('#site-select')[0].value;
                            copyTreeItem(window.selected_page, window.target_id, window.position, window.site);
                            $('.move-target-container').hide();
                        } else if (action === 'add') {
                            window.site = $('#site-select')[0].value;
                            window.location.href = window.location.href.split('?')[0].split('#')[0] +
                                'add/?target=' + window.target_id + '&amp;position=' + window.position +
                                '&amp;site=' + window.site;
                        }
                        e.stopPropagation();
                        return false;
                    }
                    return true;
                });
                $('div#sitemap').show();

                function reCalc() {
                    $.syncCols();
                }

                $(window).bind('resize', reCalc);
                /* Site Selector */
                $('#site-select').change(function () {
                    var form = $(this).closest('form');
                    // add correct value for copy
                    if (action === 'copy') {
                        $('#site-copy').val(window.selected_page);
                    }
                    // submit form
                    form.submit();
                });

                //
                // If an A element has a data-attribute 'alt-class'. At this time,
                // this is only the edit button in the page-tree, but could be
                // more in future. It is important that the CSS be written in such
                // a manner that the alt-class is defined after the normal class,
                // so that it can be overridden when the alt-key is depressed.
                //
                // NOTE: This 'preview' part of the 'alt-click to [alternative
                // function]' feature may not work in some environments (Windows
                // in a some virtual machine environments, notably), but is only a
                // nice-'extra', not a requirement for the feature.
                //
                $(document).on('keydown keyup', function (evt) {
                    if (evt.which === 18) {
                        $('a[data-alt-class]').each(function () {
                            var self = $(this);
                            self.toggleClass(self.data('alt-class'), evt.type === 'keydown');
                        });
                    }
                });

                //
                // If the A-element has a data-attribute 'alt-href', then this
                // click-handler uses that instead of the normal href attribute as
                // the click-destination. Again, currently this is only on the
                // edit button, but could be more in future.
                //
                $('a[data-alt-href]').on('click', function (evt) {
                    var href;
                    evt.preventDefault();
                    if (evt.shiftKey) {
                        href = $(this).data('alt-href');
                    } else {
                        href = $(this).attr('href');
                    }
                    window.location = href;
                });

                var copy_splits = window.location.href.split('copy=');
                if (copy_splits.length > 1) {
                    var id = copy_splits[1].split('&')[0];
                    // jshint latedef: false
                    var action = mark_copy_node(id);
                    // jshint latedef: true
                    window.selected_page = id;
                }

                function copyTreeItem(item_id, target_id, position, site) {
                    if (that.options.settings.permission) {
                        return loadDialog('./' + item_id + '/dialog/copy/', {
                            position: position,
                            target: target_id,
                            site: site,
                            callback: $.callbackRegister(
                                '_copyTreeItem', _copyTreeItem, item_id, target_id, position, site
                            )
                        });
                    }
                    return _copyTreeItem(item_id, target_id, position, site);
                }

                function _copyTreeItem(item_id, target_id, position, site, options) {
                    var data = {
                        position: position,
                        target: target_id,
                        site: site
                    };
                    data = $.extend(data, options);

                    $.post('./' + item_id + '/copy-page/', data, function (decoded) {
                        var response = decoded.content;
                        var status = decoded.status;
                        if (status === 200) {
                            // reload tree
                            window.location = window.location.href;
                        } else {
                            alert(response);
                            window.moveError($('#page_' + item_id + ' div.col1:eq(0)'), response);
                        }
                    });
                }

                /**
                 * Reloads tree item (one line). If some filtering is found, adds
                 * filtered variable into posted data.
                 *
                 * @param {HTMLElement} el Any child element of tree item
                 * @param {String} url Requested url
                 * @param {Object} data Optional posted data
                 * @param {Function} callback Optional calback function
                 */
                function reloadItem(el, url, data, callback, errorCallback) {
                    if (data === undefined) {
                        data = {};
                    }

                    if (/\/\?/ig.test(window.location.href)) {
                        // probably some filter here, tell backend, we need a filtered
                        // version of item
                        data.fitlered = 1;
                    }

                    function onSuccess(response, textStatus) {
                        var status = true;
                        var target = null;

                        if (callback) {
                            status = callback(response, textStatus);
                        }
                        if (status) {
                            if (/page_\d+/.test($(el).attr('id'))) {
                                // one level higher
                                target = $(el).find('div.cont:first');
                            } else {
                                target = $(el).parents('div.cont:first');
                            }

                            var parent = target.parent();

                            // remove the element if something went wrong
                            if (response === 'NotFound') {
                                return parent.remove();
                            }

                            var origin = $('.messagelist');
                            target.replace(response);

                            var messages = $(parent).find('.messagelist');
                            if (messages.length) {
                                origin.remove();
                                messages.insertAfter('.breadcrumbs');
                            }
                            parent.find('div.cont:first').yft();

                            // ensure after removal everything is aligned again
                            $(window).trigger('resize');
                        }
                    }

                    $.ajax({
                        'type': 'POST',
                        'data': data,
                        'url': url,
                        'success': onSuccess,
                        'error': function (XMLHttpRequest, textStatus, errorThrown) {
                            // errorCallback is passed through the reloadItem function
                            if (errorCallback) {
                                errorCallback(XMLHttpRequest, textStatus, errorThrown);
                            }
                        },
                        'xhr': (window.ActiveXObject) ?
                            function () {
                                try {
                                    return new window.ActiveXObject('Microsoft.XMLHTTP');
                                } catch (e) {}
                            } :
                            function () {
                                return new window.XMLHttpRequest();
                            }
                    });
                }

                function moveTreeItem(jtarget, item_id, target_id, position, tree) {
                    reloadItem(
                        jtarget, './' + item_id + '/move-page/',

                        { position: position, target: target_id },

                        // on success
                        function (decoded) {
                            var response = decoded.content;
                            var status = decoded.status;
                            if (status === 200) {
                                if (tree) {
                                    var tree_pos = { 'left': 'before', 'right': 'after' }[position] || 'inside';
                                    tree.moved(
                                        '#page_' + item_id,
                                        $('#page_' + target_id + ' a.title')[0],
                                        tree_pos,
                                        false,
                                        false
                                    );
                                } else {
                                    window.moveSuccess($('#page_' + item_id + ' div.col1:eq(0)'));
                                }
                                return false;
                            } else {
                                window.moveError($('#page_' + item_id + ' div.col1:eq(0)'), response);
                                return false;
                            }
                        }
                    );
                }

                var undos = [];

                function addUndo(node, target, position) {
                    undos.push({ node: node, target: target, position: position });
                }
            },

            refreshColumns: function () {
                $('div.col2').children('div').each(function (index, item) {
                    $(item).css('display', 'block');
                });
                var min_width = 100000;
                var max_col2_width = 0;
                var max_col2 = null;
                $(this).each(function () {
                    var cont = $(this).children('div.cont');
                    if (!cont.is(':visible')) {
                        return;
                    }
                    var col1 = cont.children('div.col1').find('.title span');
                    var col2 = cont.children('div.col2');
                    var col1_width = col1.outerWidth(true);
                    var col2_width = col2.outerWidth(true);
                    var total_width = cont.outerWidth(true);

                    var dif = total_width - col1_width;
                    if (dif < min_width) {
                        min_width = dif;
                    }
                    if (col2_width > max_col2_width) {
                        max_col2_width = col2_width;
                        max_col2 = col2;
                    }
                });

                var offset = 50;
                var w = 0;
                var hidden_count = 0;
                var max_reached = false;
                if (max_col2) {
                    max_col2.children('div').each(function () {
                        if (!max_reached) {
                            w += $(this).outerWidth(true);
                        }

                        if (max_reached || w > (min_width - offset)) {
                            hidden_count = hidden_count + 1;
                            max_reached = true;
                        }
                    });

                    if (hidden_count) {
                        $(this).each(function () {
                            $(this).children('div.cont').children('div.col2').children('div')
                                .slice(-hidden_count).each(function () {
                                    $(this).css('display', 'none');
                                });
                        });
                        $('div#sitemap ul.header div.col2').children().slice(-hidden_count).each(function () {
                            $(this).css('display', 'none');
                        });
                    }
                }
            }

        });

    });
})(CMS.$);

// all, but without jquery !! (modified by Peter Cicman)

// css.js

function get_css(rule_name,stylesheet,delete_flag){if(!document.styleSheets)return false;rule_name=rule_name.toLowerCase();stylesheet=stylesheet||0;for(var i=stylesheet;i<document.styleSheets.length;i++){var styleSheet=document.styleSheets[i];css_rules=document.styleSheets[i].cssRules||document.styleSheets[i].rules;if(!css_rules)continue;var j=0;do{if(css_rules[j].selectorText.toLowerCase()==rule_name){if(delete_flag==true){if(document.styleSheets[i].removeRule)document.styleSheets[i].removeRule(j);if(document.styleSheets[i].deleteRule)document.styleSheets[i].deleteRule(j);return true;}
else return css_rules[j];}}
while(css_rules[++j]);}
return false;}
function add_css(rule_name,stylesheet){rule_name=rule_name.toLowerCase();stylesheet=stylesheet||0;if(!document.styleSheets||get_css(rule_name,stylesheet))return false;(document.styleSheets[stylesheet].addRule)?document.styleSheets[stylesheet].addRule(rule_name,null,0):document.styleSheets[stylesheet].insertRule(rule_name+' { }',0);return get_css(rule_name);}
function get_sheet_num(href_name){if(!document.styleSheets)return false;for(var i=0;i<document.styleSheets.length;i++){if(document.styleSheets[i].href&&document.styleSheets[i].href.toString().match(href_name))return i;}
return false;}
function remove_css(rule_name,stylesheet){return get_css(rule_name,stylesheet,true);}
function add_sheet(url){if(document.createStyleSheet){document.createStyleSheet(url);}
else{var styles="@import url(' "+url+" ');";var newSS=document.createElement('link');newSS.rel='stylesheet';newSS.href='data:text/css,'+escape(styles);document.getElementsByTagName("head")[0].appendChild(newSS);}}

// jquery.listen.js
;(function($){var a='indexer',h=$.event,j=h.special,k=$.listen=function(c,d,e,f){if(typeof d!='object'){f=e;e=d;d=document}o(c.split(/\s+/),function(a){a=k.fixes[a]||a;var b=m(d,a)||m(d,a,new n(a,d));b.append(e,f);b.start()})},m=function(b,c,d){return $.data(b,c+'.'+a,d)};$.fn[a]=function(a){return this[0]&&m(this[0],a)||null};$[a]=function(a){return m(document,a)};$.extend(k,{regex:/^((?:\w*?|\*))(?:([#.])([\w-]+))?$/,fixes:{focus:'focusin',blur:'focusout'},cache:function(a){this.caching=a}});$.each(k.fixes,function(a,b){j[b]={setup:function(){if($.browser.msie)return!1;this.addEventListener(a,j[b].handler,!0)},teardown:function(){if($.browser.msie)return!1;this.removeEventListener(a,j[b].handler,!0)},handler:function(e){arguments[0]=e=h.fix(e);e.type=b;return h.handle.apply(this,arguments)}}});$.fn.listen=function(a,b,c){return this.each(function(){k(a,this,b,c)})};function n(a,b){$.extend(this,{ids:{},tags:{},listener:b,event:a});this.id=n.instances.push(this)};n.instances=[];n.prototype={constructor:n,handle:function(e){var a=e.stopPropagation;e.stopPropagation=function(){e.stopped=1;a.apply(this,arguments)};m(this,e.type).parse(e);e.stopPropagation=a;a=e.data=null},on:0,bubbles:0,start:function(){var a=this;if(!a.on){h.add(a.listener,a.event,a.handle);a.on=1}},stop:function(){var a=this;if(a.on){h.remove(a.listener,a.event,a.handle);a.on=0}},cache:function(a,b){return $.data(a,'listenCache_'+this.id,b)},parse:function(e){var z=this,c=e.data||e.target,d=arguments,f;if(!k.caching||!(f=z.cache(c))){f=[];if(c.id&&z.ids[c.id])p(f,z.ids[c.id]);o([c.nodeName,'*'],function(a){var b=z.tags[a];if(b)o((c.className+' *').split(' '),function(a){if(a&&b[a])p(f,b[a])})});if(k.caching)z.cache(c,f)}if(f[0]){o(f,function(a){if(a.apply(c,d)===!1){e.preventDefault();e.stopPropagation()}})}if(!e.stopped&&(c=c.parentNode)&&(c.nodeName=='A'||z.bubbles&&c!=z.listener)){e.data=c;z.parse(e)}f=d=c=null},append:function(f,g){var z=this;o(f.split(/\s*,\s*/),function(a){var b=k.regex.exec(a);if(!b)throw'$.listen > "'+a+'" is not a supported selector.';var c=b[2]=='#'&&b[3],d=b[1].toUpperCase()||'*',e=b[3]||'*';if(c)(z.ids[c]||(z.ids[c]=[])).push(g);else if(d){d=z.tags[d]=z.tags[d]||{};(d[e]||(d[e]=[])).push(g)}})}};function o(a,b,c){for(var i=0,l=a.length;i<l;i++)b.call(c,a[i],i)};function p(a,b){a.push.apply(a,b);return a};$(window).unload(function(){if(typeof n=='function')o(n.instances,function(b){b.stop();$.removeData(b.listener,b.event+'.'+a);b.ids=b.names=b.listener=null})})})(jQuery);

// sarissa.js

function Sarissa(){}
Sarissa.VERSION="0.9.9.4";Sarissa.PARSED_OK="Document contains no parsing errors";Sarissa.PARSED_EMPTY="Document is empty";Sarissa.PARSED_UNKNOWN_ERROR="Not well-formed or other error";Sarissa.IS_ENABLED_TRANSFORM_NODE=false;Sarissa.REMOTE_CALL_FLAG="gr.abiss.sarissa.REMOTE_CALL_FLAG";Sarissa._lastUniqueSuffix=0;Sarissa._getUniqueSuffix=function(){return Sarissa._lastUniqueSuffix++;};Sarissa._SARISSA_IEPREFIX4XSLPARAM="";Sarissa._SARISSA_HAS_DOM_IMPLEMENTATION=document.implementation&&true;Sarissa._SARISSA_HAS_DOM_CREATE_DOCUMENT=Sarissa._SARISSA_HAS_DOM_IMPLEMENTATION&&document.implementation.createDocument;Sarissa._SARISSA_HAS_DOM_FEATURE=Sarissa._SARISSA_HAS_DOM_IMPLEMENTATION&&document.implementation.hasFeature;Sarissa._SARISSA_IS_MOZ=Sarissa._SARISSA_HAS_DOM_CREATE_DOCUMENT&&Sarissa._SARISSA_HAS_DOM_FEATURE;Sarissa._SARISSA_IS_SAFARI=navigator.userAgent.toLowerCase().indexOf("safari")!=-1||navigator.userAgent.toLowerCase().indexOf("konqueror")!=-1;Sarissa._SARISSA_IS_SAFARI_OLD=Sarissa._SARISSA_IS_SAFARI&&(parseInt((navigator.userAgent.match(/AppleWebKit\/(\d+)/)||{})[1],10)<420);Sarissa._SARISSA_IS_IE=document.all&&window.ActiveXObject&&navigator.userAgent.toLowerCase().indexOf("msie")>-1&&navigator.userAgent.toLowerCase().indexOf("opera")==-1;Sarissa._SARISSA_IS_OPERA=navigator.userAgent.toLowerCase().indexOf("opera")!=-1;if(!window.Node||!Node.ELEMENT_NODE){Node={ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12};}
if(Sarissa._SARISSA_IS_SAFARI_OLD){HTMLHtmlElement=document.createElement("html").constructor;Node=HTMLElement={};HTMLElement.prototype=HTMLHtmlElement.__proto__.__proto__;HTMLDocument=Document=document.constructor;var x=new DOMParser();XMLDocument=x.constructor;Element=x.parseFromString("<Single />","text/xml").documentElement.constructor;x=null;}
if(typeof XMLDocument=="undefined"&&typeof Document!="undefined"){XMLDocument=Document;}
if(Sarissa._SARISSA_IS_IE){Sarissa._SARISSA_IEPREFIX4XSLPARAM="xsl:";var _SARISSA_DOM_PROGID="";var _SARISSA_XMLHTTP_PROGID="";var _SARISSA_DOM_XMLWRITER="";Sarissa.pickRecentProgID=function(idList){var bFound=false,e;var o2Store;for(var i=0;i<idList.length&&!bFound;i++){try{var oDoc=new ActiveXObject(idList[i]);o2Store=idList[i];bFound=true;}catch(objException){e=objException;}}
if(!bFound){throw"Could not retrieve a valid progID of Class: "+idList[idList.length-1]+". (original exception: "+e+")";}
idList=null;return o2Store;};_SARISSA_DOM_PROGID=null;_SARISSA_THREADEDDOM_PROGID=null;_SARISSA_XSLTEMPLATE_PROGID=null;_SARISSA_XMLHTTP_PROGID=null;XMLHttpRequest=function(){if(!_SARISSA_XMLHTTP_PROGID){_SARISSA_XMLHTTP_PROGID=Sarissa.pickRecentProgID(["Msxml2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"]);}
return new ActiveXObject(_SARISSA_XMLHTTP_PROGID);};Sarissa.getDomDocument=function(sUri,sName){if(!_SARISSA_DOM_PROGID){_SARISSA_DOM_PROGID=Sarissa.pickRecentProgID(["Msxml2.DOMDocument.6.0","Msxml2.DOMDocument.3.0","MSXML2.DOMDocument","MSXML.DOMDocument","Microsoft.XMLDOM"]);}
var oDoc=new ActiveXObject(_SARISSA_DOM_PROGID);if(sName){var prefix="";if(sUri){if(sName.indexOf(":")>1){prefix=sName.substring(0,sName.indexOf(":"));sName=sName.substring(sName.indexOf(":")+1);}else{prefix="a"+Sarissa._getUniqueSuffix();}}
if(sUri){oDoc.loadXML('<'+prefix+':'+sName+" xmlns:"+prefix+"=\""+sUri+"\""+" />");}else{oDoc.loadXML('<'+sName+" />");}}
return oDoc;};Sarissa.getParseErrorText=function(oDoc){var parseErrorText=Sarissa.PARSED_OK;if(oDoc&&oDoc.parseError&&oDoc.parseError.errorCode&&oDoc.parseError.errorCode!=0){parseErrorText="XML Parsing Error: "+oDoc.parseError.reason+"\nLocation: "+oDoc.parseError.url+"\nLine Number "+oDoc.parseError.line+", Column "+
oDoc.parseError.linepos+":\n"+oDoc.parseError.srcText+"\n";for(var i=0;i<oDoc.parseError.linepos;i++){parseErrorText+="-";}
parseErrorText+="^\n";}
else if(oDoc.documentElement===null){parseErrorText=Sarissa.PARSED_EMPTY;}
return parseErrorText;};Sarissa.setXpathNamespaces=function(oDoc,sNsSet){oDoc.setProperty("SelectionLanguage","XPath");oDoc.setProperty("SelectionNamespaces",sNsSet);};XSLTProcessor=function(){if(!_SARISSA_XSLTEMPLATE_PROGID){_SARISSA_XSLTEMPLATE_PROGID=Sarissa.pickRecentProgID(["Msxml2.XSLTemplate.6.0","MSXML2.XSLTemplate.3.0"]);}
this.template=new ActiveXObject(_SARISSA_XSLTEMPLATE_PROGID);this.processor=null;};XSLTProcessor.prototype.importStylesheet=function(xslDoc){if(!_SARISSA_THREADEDDOM_PROGID){_SARISSA_THREADEDDOM_PROGID=Sarissa.pickRecentProgID(["MSXML2.FreeThreadedDOMDocument.6.0","MSXML2.FreeThreadedDOMDocument.3.0"]);}
xslDoc.setProperty("SelectionLanguage","XPath");xslDoc.setProperty("SelectionNamespaces","xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");var converted=new ActiveXObject(_SARISSA_THREADEDDOM_PROGID);try{converted.resolveExternals=true;converted.setProperty("AllowDocumentFunction",true);}
catch(e){}
if(xslDoc.url&&xslDoc.selectSingleNode("//xsl:*[local-name() = 'import' or local-name() = 'include']")!=null){converted.async=false;converted.load(xslDoc.url);}
else{converted.loadXML(xslDoc.xml);}
converted.setProperty("SelectionNamespaces","xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");var output=converted.selectSingleNode("//xsl:output");if(output){this.outputMethod=output.getAttribute("method");}
else{delete this.outputMethod;}
this.template.stylesheet=converted;this.processor=this.template.createProcessor();this.paramsSet=[];};XSLTProcessor.prototype.transformToDocument=function(sourceDoc){var outDoc;if(_SARISSA_THREADEDDOM_PROGID){this.processor.input=sourceDoc;outDoc=new ActiveXObject(_SARISSA_DOM_PROGID);this.processor.output=outDoc;this.processor.transform();return outDoc;}
else{if(!_SARISSA_DOM_XMLWRITER){_SARISSA_DOM_XMLWRITER=Sarissa.pickRecentProgID(["Msxml2.MXXMLWriter.6.0","Msxml2.MXXMLWriter.3.0","MSXML2.MXXMLWriter","MSXML.MXXMLWriter","Microsoft.XMLDOM"]);}
this.processor.input=sourceDoc;outDoc=new ActiveXObject(_SARISSA_DOM_XMLWRITER);this.processor.output=outDoc;this.processor.transform();var oDoc=new ActiveXObject(_SARISSA_DOM_PROGID);oDoc.loadXML(outDoc.output+"");return oDoc;}};XSLTProcessor.prototype.transformToFragment=function(sourceDoc,ownerDoc){this.processor.input=sourceDoc;this.processor.transform();var s=this.processor.output;var f=ownerDoc.createDocumentFragment();var container;if(this.outputMethod=='text'){f.appendChild(ownerDoc.createTextNode(s));}else if(ownerDoc.body&&ownerDoc.body.innerHTML){container=ownerDoc.createElement('div');container.innerHTML=s;while(container.hasChildNodes()){f.appendChild(container.firstChild);}}
else{var oDoc=new ActiveXObject(_SARISSA_DOM_PROGID);if(s.substring(0,5)=='<?xml'){s=s.substring(s.indexOf('?>')+2);}
var xml=''.concat('<my>',s,'</my>');oDoc.loadXML(xml);container=oDoc.documentElement;while(container.hasChildNodes()){f.appendChild(container.firstChild);}}
return f;};XSLTProcessor.prototype.setParameter=function(nsURI,name,value){value=value?value:"";if(nsURI){this.processor.addParameter(name,value,nsURI);}else{this.processor.addParameter(name,value);}
nsURI=""+(nsURI||"");if(!this.paramsSet[nsURI]){this.paramsSet[nsURI]=[];}
this.paramsSet[nsURI][name]=value;};XSLTProcessor.prototype.getParameter=function(nsURI,name){nsURI=""+(nsURI||"");if(this.paramsSet[nsURI]&&this.paramsSet[nsURI][name]){return this.paramsSet[nsURI][name];}else{return null;}};XSLTProcessor.prototype.clearParameters=function(){for(var nsURI in this.paramsSet){for(var name in this.paramsSet[nsURI]){if(nsURI!=""){this.processor.addParameter(name,"",nsURI);}else{this.processor.addParameter(name,"");}}}
this.paramsSet=[];};}else{if(Sarissa._SARISSA_HAS_DOM_CREATE_DOCUMENT){Sarissa.__handleLoad__=function(oDoc){Sarissa.__setReadyState__(oDoc,4);};_sarissa_XMLDocument_onload=function(){Sarissa.__handleLoad__(this);};Sarissa.__setReadyState__=function(oDoc,iReadyState){oDoc.readyState=iReadyState;oDoc.readystate=iReadyState;if(oDoc.onreadystatechange!=null&&typeof oDoc.onreadystatechange=="function"){oDoc.onreadystatechange();}};Sarissa.getDomDocument=function(sUri,sName){var oDoc=document.implementation.createDocument(sUri?sUri:null,sName?sName:null,null);if(!oDoc.onreadystatechange){oDoc.onreadystatechange=null;}
if(!oDoc.readyState){oDoc.readyState=0;}
oDoc.addEventListener("load",_sarissa_XMLDocument_onload,false);return oDoc;};if(window.XMLDocument){}
else if(Sarissa._SARISSA_HAS_DOM_FEATURE&&window.Document&&!Document.prototype.load&&document.implementation.hasFeature('LS','3.0')){Sarissa.getDomDocument=function(sUri,sName){var oDoc=document.implementation.createDocument(sUri?sUri:null,sName?sName:null,null);return oDoc;};}
else{Sarissa.getDomDocument=function(sUri,sName){var oDoc=document.implementation.createDocument(sUri?sUri:null,sName?sName:null,null);if(oDoc&&(sUri||sName)&&!oDoc.documentElement){oDoc.appendChild(oDoc.createElementNS(sUri,sName));}
return oDoc;};}}}
if(!window.DOMParser){if(Sarissa._SARISSA_IS_SAFARI){DOMParser=function(){};DOMParser.prototype.parseFromString=function(sXml,contentType){var xmlhttp=new XMLHttpRequest();xmlhttp.open("GET","data:text/xml;charset=utf-8,"+encodeURIComponent(sXml),false);xmlhttp.send(null);return xmlhttp.responseXML;};}else if(Sarissa.getDomDocument&&Sarissa.getDomDocument()&&Sarissa.getDomDocument(null,"bar").xml){DOMParser=function(){};DOMParser.prototype.parseFromString=function(sXml,contentType){var doc=Sarissa.getDomDocument();doc.loadXML(sXml);return doc;};}}
if((typeof(document.importNode)=="undefined")&&Sarissa._SARISSA_IS_IE){try{document.importNode=function(oNode,bChildren){var tmp;if(oNode.nodeName=='#text'){return document.createTextNode(oNode.data);}
else{if(oNode.nodeName=="tbody"||oNode.nodeName=="tr"){tmp=document.createElement("table");}
else if(oNode.nodeName=="td"){tmp=document.createElement("tr");}
else if(oNode.nodeName=="option"){tmp=document.createElement("select");}
else{tmp=document.createElement("div");}
if(bChildren){tmp.innerHTML=oNode.xml?oNode.xml:oNode.outerHTML;}else{tmp.innerHTML=oNode.xml?oNode.cloneNode(false).xml:oNode.cloneNode(false).outerHTML;}
return tmp.getElementsByTagName("*")[0];}};}catch(e){}}
if(!Sarissa.getParseErrorText){Sarissa.getParseErrorText=function(oDoc){var parseErrorText=Sarissa.PARSED_OK;if((!oDoc)||(!oDoc.documentElement)){parseErrorText=Sarissa.PARSED_EMPTY;}else if(oDoc.documentElement.tagName=="parsererror"){parseErrorText=oDoc.documentElement.firstChild.data;parseErrorText+="\n"+oDoc.documentElement.firstChild.nextSibling.firstChild.data;}else if(oDoc.getElementsByTagName("parsererror").length>0){var parsererror=oDoc.getElementsByTagName("parsererror")[0];parseErrorText=Sarissa.getText(parsererror,true)+"\n";}else if(oDoc.parseError&&oDoc.parseError.errorCode!=0){parseErrorText=Sarissa.PARSED_UNKNOWN_ERROR;}
return parseErrorText;};}
Sarissa.getText=function(oNode,deep){var s="";var nodes=oNode.childNodes;for(var i=0;i<nodes.length;i++){var node=nodes[i];var nodeType=node.nodeType;if(nodeType==Node.TEXT_NODE||nodeType==Node.CDATA_SECTION_NODE){s+=node.data;}else if(deep===true&&(nodeType==Node.ELEMENT_NODE||nodeType==Node.DOCUMENT_NODE||nodeType==Node.DOCUMENT_FRAGMENT_NODE)){s+=Sarissa.getText(node,true);}}
return s;};if(!window.XMLSerializer&&Sarissa.getDomDocument&&Sarissa.getDomDocument("","foo",null).xml){XMLSerializer=function(){};XMLSerializer.prototype.serializeToString=function(oNode){return oNode.xml;};}
Sarissa.stripTags=function(s){return s?s.replace(/<[^>]+>/g,""):s;};Sarissa.clearChildNodes=function(oNode){while(oNode.firstChild){oNode.removeChild(oNode.firstChild);}};Sarissa.copyChildNodes=function(nodeFrom,nodeTo,bPreserveExisting){if(Sarissa._SARISSA_IS_SAFARI&&nodeTo.nodeType==Node.DOCUMENT_NODE){nodeTo=nodeTo.documentElement;}
if((!nodeFrom)||(!nodeTo)){throw"Both source and destination nodes must be provided";}
if(!bPreserveExisting){Sarissa.clearChildNodes(nodeTo);}
var ownerDoc=nodeTo.nodeType==Node.DOCUMENT_NODE?nodeTo:nodeTo.ownerDocument;var nodes=nodeFrom.childNodes;var i;if(typeof(ownerDoc.importNode)!="undefined"){for(i=0;i<nodes.length;i++){nodeTo.appendChild(ownerDoc.importNode(nodes[i],true));}}else{for(i=0;i<nodes.length;i++){nodeTo.appendChild(nodes[i].cloneNode(true));}}};Sarissa.moveChildNodes=function(nodeFrom,nodeTo,bPreserveExisting){if((!nodeFrom)||(!nodeTo)){throw"Both source and destination nodes must be provided";}
if(!bPreserveExisting){Sarissa.clearChildNodes(nodeTo);}
var nodes=nodeFrom.childNodes;if(nodeFrom.ownerDocument==nodeTo.ownerDocument){while(nodeFrom.firstChild){nodeTo.appendChild(nodeFrom.firstChild);}}else{var ownerDoc=nodeTo.nodeType==Node.DOCUMENT_NODE?nodeTo:nodeTo.ownerDocument;var i;if(typeof(ownerDoc.importNode)!="undefined"){for(i=0;i<nodes.length;i++){nodeTo.appendChild(ownerDoc.importNode(nodes[i],true));}}else{for(i=0;i<nodes.length;i++){nodeTo.appendChild(nodes[i].cloneNode(true));}}
Sarissa.clearChildNodes(nodeFrom);}};Sarissa.xmlize=function(anyObject,objectName,indentSpace){indentSpace=indentSpace?indentSpace:'';var s=indentSpace+'<'+objectName+'>';var isLeaf=false;if(!(anyObject instanceof Object)||anyObject instanceof Number||anyObject instanceof String||anyObject instanceof Boolean||anyObject instanceof Date){s+=Sarissa.escape(""+anyObject);isLeaf=true;}else{s+="\n";var isArrayItem=anyObject instanceof Array;for(var name in anyObject){s+=Sarissa.xmlize(anyObject[name],(isArrayItem?"array-item key=\""+name+"\"":name),indentSpace+"   ");}
s+=indentSpace;}
return(s+=(objectName.indexOf(' ')!=-1?"</array-item>\n":"</"+objectName+">\n"));};Sarissa.escape=function(sXml){return sXml.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;");};Sarissa.unescape=function(sXml){return sXml.replace(/&apos;/g,"'").replace(/&quot;/g,"\"").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/&amp;/g,"&");};Sarissa.updateCursor=function(oTargetElement,sValue){if(oTargetElement&&oTargetElement.style&&oTargetElement.style.cursor!=undefined){oTargetElement.style.cursor=sValue;}};Sarissa.updateContentFromURI=function(sFromUrl,oTargetElement,xsltproc,callback,skipCache){try{Sarissa.updateCursor(oTargetElement,"wait");var xmlhttp=new XMLHttpRequest();xmlhttp.open("GET",sFromUrl,true);xmlhttp.onreadystatechange=function(){if(xmlhttp.readyState==4){try{var oDomDoc=xmlhttp.responseXML;if(oDomDoc&&Sarissa.getParseErrorText(oDomDoc)==Sarissa.PARSED_OK){Sarissa.updateContentFromNode(xmlhttp.responseXML,oTargetElement,xsltproc);if(callback){callback(sFromUrl,oTargetElement);}}
else{throw Sarissa.getParseErrorText(oDomDoc);}}
catch(e){if(callback){callback(sFromUrl,oTargetElement,e);}
else{throw e;}}}};if(skipCache){var oldage="Sat, 1 Jan 2000 00:00:00 GMT";xmlhttp.setRequestHeader("If-Modified-Since",oldage);}
xmlhttp.send("");}
catch(e){Sarissa.updateCursor(oTargetElement,"auto");if(callback){callback(sFromUrl,oTargetElement,e);}
else{throw e;}}};Sarissa.updateContentFromNode=function(oNode,oTargetElement,xsltproc){try{Sarissa.updateCursor(oTargetElement,"wait");Sarissa.clearChildNodes(oTargetElement);var ownerDoc=oNode.nodeType==Node.DOCUMENT_NODE?oNode:oNode.ownerDocument;if(ownerDoc.parseError&&ownerDoc.parseError.errorCode!=0){var pre=document.createElement("pre");pre.appendChild(document.createTextNode(Sarissa.getParseErrorText(ownerDoc)));oTargetElement.appendChild(pre);}
else{if(xsltproc){oNode=xsltproc.transformToDocument(oNode);}
if(oTargetElement.tagName.toLowerCase()=="textarea"||oTargetElement.tagName.toLowerCase()=="input"){oTargetElement.value=new XMLSerializer().serializeToString(oNode);}
else{try{oTargetElement.appendChild(oTargetElement.ownerDocument.importNode(oNode,true));}
catch(e){oTargetElement.innerHTML=new XMLSerializer().serializeToString(oNode);}}}}
catch(e){throw e;}
finally{Sarissa.updateCursor(oTargetElement,"auto");}};Sarissa.formToQueryString=function(oForm){var qs="";for(var i=0;i<oForm.elements.length;i++){var oField=oForm.elements[i];var sFieldName=oField.getAttribute("name")?oField.getAttribute("name"):oField.getAttribute("id");if(sFieldName&&((!oField.disabled)||oField.type=="hidden")){switch(oField.type){case"hidden":case"text":case"textarea":case"password":qs+=sFieldName+"="+encodeURIComponent(oField.value)+"&";break;case"select-one":qs+=sFieldName+"="+encodeURIComponent(oField.options[oField.selectedIndex].value)+"&";break;case"select-multiple":for(var j=0;j<oField.length;j++){var optElem=oField.options[j];if(optElem.selected===true){qs+=sFieldName+"[]"+"="+encodeURIComponent(optElem.value)+"&";}}
break;case"checkbox":case"radio":if(oField.checked){qs+=sFieldName+"="+encodeURIComponent(oField.value)+"&";}
break;}}}
return qs.substr(0,qs.length-1);};Sarissa.updateContentFromForm=function(oForm,oTargetElement,xsltproc,callback){try{Sarissa.updateCursor(oTargetElement,"wait");var params=Sarissa.formToQueryString(oForm)+"&"+Sarissa.REMOTE_CALL_FLAG+"=true";var xmlhttp=new XMLHttpRequest();var bUseGet=oForm.getAttribute("method")&&oForm.getAttribute("method").toLowerCase()=="get";if(bUseGet){xmlhttp.open("GET",oForm.getAttribute("action")+"?"+params,true);}
else{xmlhttp.open('POST',oForm.getAttribute("action"),true);xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");xmlhttp.setRequestHeader("Content-length",params.length);xmlhttp.setRequestHeader("Connection","close");}
xmlhttp.onreadystatechange=function(){try{if(xmlhttp.readyState==4){var oDomDoc=xmlhttp.responseXML;if(oDomDoc&&Sarissa.getParseErrorText(oDomDoc)==Sarissa.PARSED_OK){Sarissa.updateContentFromNode(xmlhttp.responseXML,oTargetElement,xsltproc);if(callback){callback(oForm,oTargetElement);}}
else{throw Sarissa.getParseErrorText(oDomDoc);}}}
catch(e){if(callback){callback(oForm,oTargetElement,e);}
else{throw e;}}};xmlhttp.send(bUseGet?"":params);}
catch(e){Sarissa.updateCursor(oTargetElement,"auto");if(callback){callback(oForm,oTargetElement,e);}
else{throw e;}}
return false;};Sarissa.FUNCTION_NAME_REGEXP=new RegExp("");Sarissa.getFunctionName=function(oFunc,bForce){var name;if(!name){if(bForce){name="SarissaAnonymous"+Sarissa._getUniqueSuffix();window[name]=oFunc;}
else{name=null;}}
if(name){window[name]=oFunc;}
return name;};Sarissa.setRemoteJsonCallback=function(url,callback,callbackParam){if(!callbackParam){callbackParam="callback";}
var callbackFunctionName=Sarissa.getFunctionName(callback,true);var id="sarissa_json_script_id_"+Sarissa._getUniqueSuffix();var oHead=document.getElementsByTagName("head")[0];var scriptTag=document.createElement('script');scriptTag.type='text/javascript';scriptTag.id=id;scriptTag.onload=function(){};if(url.indexOf("?")!=-1){url+=("&"+callbackParam+"="+callbackFunctionName);}
else{url+=("?"+callbackParam+"="+callbackFunctionName);}
scriptTag.src=url;oHead.appendChild(scriptTag);return id;};

// sarissa_ieemu_xpath.js

if(Sarissa._SARISSA_HAS_DOM_FEATURE&&document.implementation.hasFeature("XPath","3.0")){SarissaNodeList=function(i){this.length=i;};SarissaNodeList.prototype=[];SarissaNodeList.prototype.constructor=Array;SarissaNodeList.prototype.item=function(i){return(i<0||i>=this.length)?null:this[i];};SarissaNodeList.prototype.expr="";if(window.XMLDocument&&(!XMLDocument.prototype.setProperty)){XMLDocument.prototype.setProperty=function(x,y){};}
Sarissa.setXpathNamespaces=function(oDoc,sNsSet){oDoc._sarissa_useCustomResolver=true;var namespaces=sNsSet.indexOf(" ")>-1?sNsSet.split(" "):[sNsSet];oDoc._sarissa_xpathNamespaces=[];for(var i=0;i<namespaces.length;i++){var ns=namespaces[i];var colonPos=ns.indexOf(":");var assignPos=ns.indexOf("=");if(colonPos>0&&assignPos>colonPos+1){var prefix=ns.substring(colonPos+1,assignPos);var uri=ns.substring(assignPos+2,ns.length-1);oDoc._sarissa_xpathNamespaces[prefix]=uri;}else{throw"Bad format on namespace declaration(s) given";}}};XMLDocument.prototype._sarissa_useCustomResolver=false;XMLDocument.prototype._sarissa_xpathNamespaces=[];XMLDocument.prototype.selectNodes=function(sExpr,contextNode,returnSingle){var nsDoc=this;var nsresolver;if(this._sarissa_useCustomResolver){nsresolver=function(prefix){var s=nsDoc._sarissa_xpathNamespaces[prefix];if(s){return s;}
else{throw"No namespace URI found for prefix: '"+prefix+"'";}};}
else{nsresolver=this.createNSResolver(this.documentElement);}
var result=null;if(!returnSingle){var oResult=this.evaluate(sExpr,(contextNode?contextNode:this),nsresolver,XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,null);var nodeList=new SarissaNodeList(oResult.snapshotLength);nodeList.expr=sExpr;for(var i=0;i<nodeList.length;i++){nodeList[i]=oResult.snapshotItem(i);}
result=nodeList;}
else{result=this.evaluate(sExpr,(contextNode?contextNode:this),nsresolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;}
return result;};Element.prototype.selectNodes=function(sExpr){var doc=this.ownerDocument;if(doc.selectNodes){return doc.selectNodes(sExpr,this);}
else{throw"Method selectNodes is only supported by XML Elements";}};XMLDocument.prototype.selectSingleNode=function(sExpr,contextNode){var ctx=contextNode?contextNode:null;return this.selectNodes(sExpr,ctx,true);};Element.prototype.selectSingleNode=function(sExpr){var doc=this.ownerDocument;if(doc.selectSingleNode){return doc.selectSingleNode(sExpr,this);}
else{throw"Method selectNodes is only supported by XML Elements";}};Sarissa.IS_ENABLED_SELECT_NODES=true;}

// jquery.xslt.js

var xslTransform={version:20071203,debug:false,init:function(){try{parseFloat(jQuery.fn.jquery)>=1;}catch(e){alert('xslTransform requires jQuery 1.0.4 or greater ... please load it prior to xslTransform');}
try{Sarissa;}catch(e){alert('Missing Sarissa ... please load it prior to xslTransform');}
if(!jQuery.log){jQuery.log=function(){};jQuery.fn.debug=function(){};}
if(this.debug)jQuery.log('xslTransform:init(): version '+xslTransform.version);},XMLSerializer:new XMLSerializer(),serialize:function(data){if(this.debug)jQuery.log('serialize(): received '+typeof(data));if(typeof(data)=='string'){return data;}
return this.XMLSerializer.serializeToString(data);},load:function(xml,meth){if(this.debug)jQuery.log('load(): received '+typeof(xml));var r;if(typeof(xml)=='object'){return xml;}
if(xml.substring(0,1)=='<'){r=this.loadString(xml);}else{r=this.loadFile(xml,meth);}
if(r){r.setProperty('SelectionNamespaces','xmlns:xsl="http://www.w3.org/1999/XSL/Transform"');r.setProperty('SelectionLanguage','XPath');return r;}else{if(this.debug)$.log('Unable to load '+xml);return false;}},loadString:function(str){if(this.debug)jQuery.log('loadString(): '+str+'::'+typeof(str));var p=new DOMParser();var xml=p.parseFromString(str,'text/xml');if(!xml){if(this.debug)jQuery.log('loadString(): parseFromString() failed');return false;}
return xml;},loadFile:function(url,meth){if(this.debug)jQuery.log('loadFile(): '+url+'::'+typeof(url));if(!url){if(this.debug)jQuery.log('ERROR: loadFile() missing url');return false;}
var doc;this.xhrsuccess=function(data,str){if(this.debug)jQuery.log('loadFile() completed successfully ('+str+')');doc=data;return true;};this.xhrerror=function(xhr,err){window.DEBUG=true;if(this.debug)jQuery.log('loadFile() failed to load the requested file: ('+err+') - xml: '+xhr.responseXML+' - text: '+xhr.responseText);doc=null;return false;};if(!meth)meth="GET";$.ajax({type:meth,url:url,async:false,success:this.xhrsuccess,error:this.xhrerror});if(!doc){if(this.debug)jQuery.log('ERROR: document '+url+' not found (404), or unable to load');return false;}
if(doc.length==0){if(this.debug)jQuery.log('ERROR: document '+url+' loaded in loadFile() has no data');return false;}
return doc;},transform:function(xsl,xml,options){var log={'xsl':xsl,'xml':xml,'options':options};if(this.debug)jQuery.log('transform(): '+xsl+'::'+xml+'::'+options.toString());options=options||{};var xml={'request':xml,'doc':this.load(xml,options.meth)};if(options.xpath&&xml.doc&&!jQuery.browser.msie){xml.doc=xml.doc.selectSingleNode(options.xpath.toString());if(this.debug)$.log('transform(): xpath has been run...resulting doc: '+(this.serialize(xml.doc)));}
var result={'xsl':this.load(xsl,options.meth)};result.json=false;if(options.json&&xml.doc){result.json=xml.doc.selectSingleNode(options.json.toString());}
var processor=new XSLTProcessor();processor.importStylesheet(result.xsl);if(options.params&&processor){if(this.debug)jQuery.log('transform(): received xsl params: '+options.params.toString());for(key in options.params){processor.setParameter(null,key.toString(),options.params[key].toString());}}
result.doc=processor.transformToDocument(xml.doc);var errorTxt=Sarissa.getParseErrorText(result.doc);if(this.debug)jQuery.log('transform(): Sarissa parse text: '+errorTxt);if(errorTxt!=Sarissa.PARSED_OK){result.string=Sarissa.getParseErrorText(result.doc)+' :: using '+xsl+' => '+xml.request;if(this.debug)jQuery.log('transform(): error in transformation: '+Sarissa.getParseErrorText(result.doc));return result;}
result.string=this.serialize(result.doc);result.scripts=jQuery('script',result.doc).text();return result;}};xslTransform.init();jQuery.fn.getTransform=function(xsl,xml,options){var settings={append:false,params:{},xpath:'',eval:true,callback:'',json:false,meth:"GET"};jQuery.extend(settings,options);if(xslTransform.debug)jQuery.log('getTransform: '+xsl+'::'+xml+'::'+settings.toString());if(!xsl||!xml){if(xslTransform.debug)jQuery.log('getTransform: missing xsl or xml');return;}
return this.each(function(){var trans=xslTransform.transform(xsl,xml,settings);var re=trans.string.match(/<\?xml.*?\?>/);if(re){trans.string=trans.string.replace(re,'');if(xslTransform.debug)jQuery.log('getTransform(): found an xml declaration and removed it');}
try{if(settings.append)$(this).append(trans.string);else if(settings.repl)$(this).replaceWith(trans.string);else $(this).html(trans.string);}catch(e){if(xslTransform.debug)$.log('getTransform: error placing results of transform into element, falling back to innerHTML: '+e.toString());$(this)[0].innerHTML=trans.string;}
if(settings.eval&&trans.scripts){if(trans.scripts.length>0){if(xslTransform.debug)jQuery.log('Found text/javascript in transformed result');eval.call(window,trans.scripts);}}
if(settings.callback&&jQuery.isFunction(settings.callback)){var json=false;if(settings.json&&trans.json)eval("json = "+trans.json.firstChild.data);settings.callback.apply(window,[trans.string,json]);}});};

// jquery.metadata.js

(function($){$.extend({metadata:{defaults:{type:'class',name:'metadata',cre:/({.*})/,single:'metadata'},setType:function(type,name){this.defaults.type=type;this.defaults.name=name;},get:function(elem,opts){var settings=$.extend({},this.defaults,opts);if(!settings.single.length)settings.single='metadata';var data=$.data(elem,settings.single);if(data)return data;data="{}";if(settings.type=="class"){var m=settings.cre.exec(elem.className);if(m)
data=m[1];}else if(settings.type=="elem"){if(!elem.getElementsByTagName)
return undefined;var e=elem.getElementsByTagName(settings.name);if(e.length)
data=$.trim(e[0].innerHTML);}else if(elem.getAttribute!=undefined){var attr=elem.getAttribute(settings.name);if(attr)
data=attr;}
if(data.indexOf('{')<0)
data="{"+data+"}";data=eval("("+data+")");$.data(elem,settings.single,data);return data;}}});$.fn.metadata=function(opts){return $.metadata.get(this[0],opts);};})(jQuery);

// jquery.cookie.js

jQuery.cookie=function(name,value,options){if(typeof value!='undefined'){options=options||{};if(value===null){value='';options.expires=-1;}
var expires='';if(options.expires&&(typeof options.expires=='number'||options.expires.toUTCString)){var date;if(typeof options.expires=='number'){date=new Date();date.setTime(date.getTime()+(options.expires*24*60*60*1000));}else{date=options.expires;}
expires='; expires='+date.toUTCString();}
var path=options.path?'; path='+(options.path):'';var domain=options.domain?'; domain='+(options.domain):'';var secure=options.secure?'; secure':'';document.cookie=[name,'=',encodeURIComponent(value),expires,path,domain,secure].join('');}else{var cookieValue=null;if(document.cookie&&document.cookie!=''){var cookies=document.cookie.split(';');for(var i=0;i<cookies.length;i++){var cookie=jQuery.trim(cookies[i]);if(cookie.substring(0,name.length+1)==(name+'=')){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}
return cookieValue;}};
/*
 * jsTree 0.9.5
 *
 * Copyright (c) 2008 Ivan Bozhanov (vakata.com)
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Date: 2009-01-03
 *
 */
//jshint ignore:start
//jscs:disable

// browser fix
jQuery.browser = {};
jQuery.browser.mozilla = /mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase());
jQuery.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());
jQuery.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());
jQuery.browser.msie = /msie/.test(navigator.userAgent.toLowerCase());

// jQuery plugin
jQuery.fn.tree = function (opts) {
    return this.each(function() {
        if(tree_component.inst && tree_component.inst[jQuery(this).attr('id')]) {
            tree_component.inst[jQuery(this).attr('id')].destroy();
        }
        if(opts !== false) {
            var tmp = new tree_component();
            tmp.init(this, opts);
        }
    });
};

// core
function tree_component () {
    // instance manager
    if(typeof tree_component.inst == "undefined") {
        tree_component.cntr = 0;
        tree_component.inst = [];
        tree_component.drop = [];

        tree_component.focusInst = function () {
            return tree_component.inst[tree_component.focused];
        }
        tree_component.mousedown = function(event) {
            $('html').attr('data-touch-action', 'none');
            var _this = tree_component.focusInst();
            if(!_this) return;

            var tmp = jQuery(event.target);
            if(tree_component.drop.length && tmp.is("." + tree_component.drop.join(", .")) ) {
                _this.drag = jQuery("<li id='dragged' class='dragged foreign " + event.target.className + "'><a href='#'>" + tmp.text() + "</a></li>");
                _this._drag = _this.drag;
                _this.isdown    = true;
                _this.foreign    = tmp;
                tmp.blur();
                event.preventDefault();
                event.stopPropagation();
                return false;
            }
            event.stopPropagation();
            return true;
        };
        tree_component.mouseup = function(event) {
            $('html').removeAttr('data-touch-action');
            var _this = tree_component.focusInst();
            if(!_this) return;


            // CLEAR TIMEOUT FOR OPENING HOVERED NODES WHILE DRAGGING
            if(tree_component.to)    clearTimeout(tree_component.to);
            if(tree_component.sto)    clearTimeout(tree_component.sto);
            if(_this.foreign === false && _this.drag && _this.drag.parentNode && _this.drag.parentNode == jQuery(_this.container).children("ul:eq(0)").get(0)) {
                jQuery(_this.drag).remove();
                // CALL FUNCTION FOR COMPLETING MOVE
                if(_this.moveType) {
                    var tmp = tree_component.inst[jQuery(_this.moveRef).parents(".tree:eq(0)").attr("id")];
                    if(tmp) {
                        tmp.moved(_this.container.find("li.dragged"), _this.moveRef, _this.moveType, false, (_this.settings.rules.drag_copy == "on" || (_this.settings.rules.drag_copy == "ctrl" && event.ctrlKey) ) );
                    }
                }
                _this.moveType = false;
                _this.moveRef = false;
            }
            if(_this.drag && _this.foreign !== false) {
                jQuery(_this.drag).remove();
                if(_this.moveType) {
                    var tmp = tree_component.inst[jQuery(_this.moveRef).parents(".tree:eq(0)").attr("id")];
                    if(tmp) {
                        tmp.settings.callback.ondrop.call(null, _this.foreign.get(0), _this.get_node( _this.moveRef).get(0), _this.moveType, _this);
                    }
                }
                _this.foreign = false;
                _this.moveType = false;
                _this.moveRef = false;
            }
            // RESET EVERYTHING
            jQuery("#marker").hide();
            _this._drag        = false;
            _this.drag        = false;
            _this.isdown    = false;
            _this.appended    = false;
            _this.container.find("li.dragged").removeClass("dragged");
            event.preventDefault();
            event.stopPropagation();
            return false;
        };
        tree_component.mousemove = function(event) {
            var _this = tree_component.focusInst();
            if(!_this) return;

            if(_this.locked) return _this.error("LOCKED");
            if(_this.isdown) {
                // CLEAR TIMEOUT FOR OPENING HOVERED NODES WHILE DRAGGING
                if(tree_component.to) clearTimeout(tree_component.to);
                if(!_this.appended) {
                    _this.container.children("ul:eq(0)").append(_this.drag);
                    var tmp = jQuery(_this.drag).offsetParent();
                    if(tmp.is("html")) tmp = jQuery("body");
                    _this.po = tmp.offset();
                    _this.appended = true;
                }
                jQuery(_this.drag).css({ "left" : (event.originalEvent.pageX - _this.po.left - (_this.settings.ui.rtl ? jQuery(_this.drag).width() : -5 ) ), "top" : (event.originalEvent.pageY - _this.po.top  + (jQuery.browser.opera ? _this.container.scrollTop() : 0) + 15) });

                if(event.target.tagName == "IMG" && event.target.id == "marker") return false;

                var cnt = jQuery(event.target).parents(".tree:eq(0)");

                // if not moving over a tree
                if(cnt.size() == 0) {
                    if(tree_component.sto) clearTimeout(tree_component.sto);
                    if(jQuery(_this.drag).children("IMG").size() == 0) {
                        jQuery(_this.drag).append("<img class='removeicon' style='position:absolute; " + (_this.settings.ui.rtl ? "right" : "left" ) + ":4px; top:0px;' src='" + _this.settings.ui.theme_path + "default/remove.gif' />");
                    }
                    _this.moveType = false;
                    _this.moveRef  = false;
                    jQuery("#marker").hide();
                    return false;
                }

                tree_component.inst[cnt.attr("id")].off_height();

                // if moving over another tree and multitree is false
                if( _this.foreign === false && cnt.get(0) != _this.container.get(0) && (!_this.settings.rules.multitree || !tree_component.inst[cnt.attr("id")].settings.rules.multitree) ) {
                    if(jQuery(_this.drag).children("IMG").size() == 0) {
                        jQuery(_this.drag).append("<img class='removeicon' style='position:absolute; " + (_this.settings.ui.rtl ? "right" : "left" ) + ":4px; top:0px;' src='" + _this.settings.ui.theme_path + "default/remove.gif' />");
                    }
                    _this.moveType = false;
                    _this.moveRef  = false;
                    jQuery("#marker").hide();
                    return false;
                }

                if(tree_component.sto) clearTimeout(tree_component.sto);
                tree_component.sto = setTimeout( function() { tree_component.inst[cnt.attr("id")].scrollCheck(event.originalEvent.pageX,event.originalEvent.pageY); }, 50);

                var mov = false;
                var st = cnt.scrollTop();

                if(event.target.tagName == "A" && event.target.className=="title") {
                    // just in case if hover is over the draggable
                    if(jQuery(event.target).is("#dragged")) return false;

                    var goTo = {
                        x : (jQuery(event.target).offset().left - 1),
                        y : (event.originalEvent.pageY - tree_component.inst[cnt.attr("id")].offset.top)
                    }
                    if(cnt.hasClass("rtl")) {
                        goTo.x += jQuery(event.target).width() - 8;
                    }
                    if( (goTo.y + st)%_this.li_height < _this.li_height/3 + 1 ) {
                        mov = "before";
                        goTo.y = event.originalEvent.pageY - (goTo.y + st)%_this.li_height - 2 ;
                    }
                    else if((goTo.y + st)%_this.li_height > _this.li_height*2/3 - 1 ) {
                        mov = "after";
                        goTo.y = event.originalEvent.pageY - (goTo.y + st)%_this.li_height + _this.li_height - 2 ;
                    }
                    else {
                        mov = "inside";
                        goTo.x -= 2;
                        if(cnt.hasClass("rtl")) {
                            goTo.x += 36;
                        }
                        goTo.y = event.originalEvent.pageY - (goTo.y + st)%_this.li_height + Math.floor(_this.li_height/2) - 2 ;
                        if(_this.get_node(event.target).hasClass("closed")) {
                            tree_component.to = setTimeout( function () { _this.open_branch(_this.get_node(event.target)); }, 500);
                        }
                    }

                    if(tree_component.inst[cnt.attr("id")].checkMove(_this.container.find("li.dragged"), jQuery(event.target), mov)) {
                        if(mov == "inside")    jQuery("#marker").attr("src", _this.settings.ui.theme_path + "default/plus.gif").width(14);
                        else {
                            if(cnt.hasClass("rtl"))    { jQuery("#marker").attr("src", _this.settings.ui.theme_path + "default/marker_rtl.gif").width(40); }
                            else                    { jQuery("#marker").attr("src", _this.settings.ui.theme_path + "default/marker.gif").width(40); }
                        }
                        _this.moveType    = mov;
                        _this.moveRef    = event.target;
                        jQuery(_this.drag).children("IMG").remove();
                        jQuery("#marker").css({ "left" : goTo.x-1 , "top" : goTo.y-2 }).show();
                    }
                    else {
                        if(jQuery(_this.drag).children("IMG").size() == 0) {
                            jQuery(_this.drag).append("<img class='removeicon' style='position:absolute; " + (_this.settings.ui.rtl ? "right:0px;" : "left:4px;" ) + " top:0px;' src='" + _this.settings.ui.theme_path + "default/remove.gif' />");
                        }
                        _this.moveType = false;
                        _this.moveRef = false;
                        jQuery("#marker").hide();
                    }
                }
                else {
                    if(jQuery(_this.drag).children("IMG").size() == 0) {
                        jQuery(_this.drag).append("<img class='removeicon' style='position:absolute; " + (_this.settings.ui.rtl ? "right:0px;" : "left:4px;" ) + " top:0px;' src='" + _this.settings.ui.theme_path + "default/remove.gif' />");
                    }
                    _this.moveType = false;
                    _this.moveRef = false;
                    jQuery("#marker").hide();
                }
                event.preventDefault();
                event.stopPropagation();
                return false;
            }
            return true;
        };
    }
    return {
        cntr : tree_component.cntr ++,
        settings : {
            data    : {
                type    : "predefined",    // ENUM [json, xml_flat, xml_nested, predefined]
                method    : "GET",        // HOW TO REQUEST FILES
                async    : false,        // BOOL - async loading onopen
                async_data : function (NODE) { return { id : jQuery(NODE).attr("id") || 0 } }, // PARAMETERS PASSED TO SERVER
                url        : false,        // FALSE or STRING - url to document to be used (async or not)
                json    : false            // FALSE or OBJECT if type is JSON and async is false - the tree dump as json
            },
            selected    : false,        // FALSE or STRING or ARRAY
            opened        : [],            // ARRAY OF INITIALLY OPENED NODES
            languages    : [],            // ARRAY of string values (which will be used as CSS classes - si they must be valid)
            path        : false,        // FALSE or STRING (if false - will be autodetected)
            cookies        : false,        // FALSE or OBJECT (prefix, opts - from jqCookie - expires, path, domain, secure)
            ui        : {
                dots        : true,        // BOOL - dots or no dots
                rtl            : false,    // BOOL - is the tree right-to-left
                animation    : 0,        // INT - duration of open/close animations in miliseconds
                hover_mode    : true,        // SHOULD get_* functions chage focus or change hovered item
                scroll_spd    : 4,
                theme_path    : false,    // Path to themes
                theme_name    : "default",// Name of theme
                context        : [
                    {
                        id        : "create",
                        label    : "Create",
                        icon    : "create.png",
                        visible    : function (NODE, TREE_OBJ) { if(NODE.length != 1) return false; return TREE_OBJ.check("creatable", NODE); },
                        action    : function (NODE, TREE_OBJ) { TREE_OBJ.create(false, NODE); }
                    },
                    "separator",
                    {
                        id        : "rename",
                        label    : "Rename",
                        icon    : "rename.png",
                        visible    : function (NODE, TREE_OBJ) { if(NODE.length != 1) return false; return TREE_OBJ.check("renameable", NODE); },
                        action    : function (NODE, TREE_OBJ) { TREE_OBJ.rename(); }
                    },
                    {
                        id        : "delete",
                        label    : "Delete",
                        icon    : "remove.gif",
                        visible    : function (NODE, TREE_OBJ) { return TREE_OBJ.check("deletable", NODE); },
                        action    : function (NODE, TREE_OBJ) { NODE.each( function () { TREE_OBJ.remove(this); }); }
                    }
                ]
            },
            rules    : {
                multiple    : false,    // FALSE | CTRL | ON - multiple selection off/ with or without holding Ctrl
                metadata    : false,    // FALSE or STRING - attribute name (use metadata plugin)
                type_attr    : "rel",    // STRING attribute name (where is the type stored if no metadata)
                multitree    : false,    // BOOL - is drag n drop between trees allowed
                createat    : "bottom",    // STRING (top or bottom) new nodes get inserted at top or bottom
                use_inline    : false,    // CHECK FOR INLINE RULES - REQUIRES METADATA
                clickable    : "all",    // which node types can the user select | default - all
                renameable    : "all",    // which node types can the user select | default - all
                deletable    : "all",    // which node types can the user delete | default - all
                creatable    : "all",    // which node types can the user create in | default - all
                draggable    : "none",    // which node types can the user move | default - none | "all"
                dragrules    : "all",    // what move operations between nodes are allowed | default - none | "all"
                drag_copy    : false,    // FALSE | CTRL | ON - drag to copy off/ with or without holding Ctrl
                droppable    : []
            },
            lang : {
                new_node    : "New folder",
                loading        : "Loading ..."
            },
            callback    : {                // various callbacks to attach custom logic to
                // before focus  - should return true | false
                beforechange: function(NODE,TREE_OBJ) { return true },
                // before move   - should return true | false
                beforemove  : function(NODE,REF_NODE,TYPE,TREE_OBJ) { return true },
                // before create - should return true | false
                beforecreate: function(NODE,REF_NODE,TYPE,TREE_OBJ) { return true },
                // before rename - should return true | false
                beforerename: function(NODE,LANG,TREE_OBJ) { return true },
                // before delete - should return true | false
                beforedelete: function(NODE,TREE_OBJ) { return true },

                onchange    : function(NODE,TREE_OBJ) { },                    // focus changed
                onrename    : function(NODE,LANG,TREE_OBJ) { },                // node renamed ISNEW - TRUE|FALSE, current language
                onmove        : function(NODE,REF_NODE,TYPE,TREE_OBJ) { },    // move completed (TYPE is BELOW|ABOVE|INSIDE)
                oncopy        : function(NODE,REF_NODE,TYPE,TREE_OBJ) { },    // copy completed (TYPE is BELOW|ABOVE|INSIDE)
                oncreate    : function(NODE,REF_NODE,TYPE,TREE_OBJ) { },    // node created, parent node (TYPE is insertAt)
                ondelete    : function(NODE, TREE_OBJ) { },                    // node deleted
                onopen        : function(NODE, TREE_OBJ) { },                    // node opened
                onclose        : function(NODE, TREE_OBJ) { },                    // node closed
                error        : function(TEXT, TREE_OBJ) { },                    // error occured
                // double click on node - defaults to open/close & select
                ondblclk    : function(NODE, TREE_OBJ) { TREE_OBJ.toggle_branch.call(TREE_OBJ, NODE); TREE_OBJ.select_branch.call(TREE_OBJ, NODE); },
                // right click - to prevent use: EV.preventDefault(); EV.stopPropagation(); return false
                onrgtclk    : function(NODE, TREE_OBJ, EV) { },
                onload        : function(TREE_OBJ) { },
                onfocus        : function(TREE_OBJ) { },
                ondrop        : function(NODE,REF_NODE,TYPE,TREE_OBJ) {}
            }
        },
        // INITIALIZATION
        init : function(elem, opts) {
            var _this = this;
            this.container        = jQuery(elem);
            if(this.container.size == 0) { alert("Invalid container node!"); return }

            tree_component.inst[this.cntr] = this;
            if(!this.container.attr("id")) this.container.attr("id","jstree_" + this.cntr);
            tree_component.inst[this.container.attr("id")] = tree_component.inst[this.cntr];
            tree_component.focused = this.cntr;

            // MERGE OPTIONS WITH DEFAULTS
            if(opts && opts.cookies) {
                this.settings.cookies = jQuery.extend({},this.settings.cookies,opts.cookies);
                delete opts.cookies;
                if(!this.settings.cookies.opts) this.settings.cookies.opts = {};
            }
            if(opts && opts.callback) {
                this.settings.callback = jQuery.extend({},this.settings.callback,opts.callback);
                delete opts.callback;
            }
            if(opts && opts.data) {
                this.settings.data = jQuery.extend({},this.settings.data,opts.data);
                delete opts.data;
            }
            if(opts && opts.ui) {
                this.settings.ui = jQuery.extend({},this.settings.ui,opts.ui);
                delete opts.ui;
            }
            if(opts && opts.rules) {
                this.settings.rules = jQuery.extend({},this.settings.rules,opts.rules);
                delete opts.rules;
            }
            if(opts && opts.lang) {
                this.settings.lang = jQuery.extend({},this.settings.lang,opts.lang);
                delete opts.lang;
            }
            this.settings        = jQuery.extend({},this.settings,opts);

            // PATH TO IMAGES AND XSL
            if(this.settings.path == false) {
                this.path = "";
                jQuery("script").each( function () {
                    if(this.src.toString().match(/tree_component.*?js.*$/)) {
                        _this.path = this.src.toString().replace(/tree_component.*?js.*$/, "");
                    }
                });
            }
            else this.path = this.settings.path;

            // DEAL WITH LANGUAGE VERSIONS
            this.current_lang    = this.settings.languages && this.settings.languages.length ? this.settings.languages[0] : false;
            if(this.settings.languages && this.settings.languages.length) {
                this.sn = get_sheet_num("tree_component.css");
                var st = false;
                var id = this.container.attr("id") ? "#" + this.container.attr("id") : ".tree";
                for(var ln = 0; ln < this.settings.languages.length; ln++) {
                    st = add_css(id + " ." + this.settings.languages[ln], this.sn);
                    if(st !== false) {
                        if(this.settings.languages[ln] == this.current_lang)    st.style.display = "inline";
                        else                                                    st.style.display = "none";
                    }
                }
            }

            // DROPPABLES
            if(this.settings.rules.droppable.length) {
                for(i in this.settings.rules.droppable) {
                    tree_component.drop.push(this.settings.rules.droppable[i]);
                    tree_component.drop = jQuery.unique(tree_component.drop);
                }
            }

            // THEMES
            if(this.settings.ui.theme_path === false) this.settings.ui.theme_path = this.path + "themes/";
            this.theme = this.settings.ui.theme_path + _this.settings.ui.theme_name + "/";
            add_sheet(_this.settings.ui.theme_path + "default/style.css");
            if(this.settings.ui.theme_name != "default") add_sheet(_this.theme + "style.css");

            this.container.addClass("tree");
            if(this.settings.ui.rtl) this.container.addClass("rtl");
            if(this.settings.rules.multiple) this.selected_arr = [];
            this.offset = false;

            if(this.settings.ui.dots == false) this.container.addClass("no_dots");

            // CONTEXT MENU
            this.context = false;
            if(this.settings.ui.context != false) {
                var str = '<div class="context">';
                for(i in this.settings.ui.context) {
                    if(this.settings.ui.context[i] == "separator") {
                        str += "<span class='separator'>&nbsp;</span>";
                        continue;
                    }
                    var icn = "";
                    if(this.settings.ui.context[i].icon) icn = 'background-image:url(\'' + ( this.settings.ui.context[i].icon.indexOf("/") == -1 ? this.theme + this.settings.ui.context[i].icon : this.settings.ui.context[i].icon ) + '\');';
                    str += '<a rel="' + this.settings.ui.context[i].id + '" href="#" style="' + icn + '">' + this.settings.ui.context[i].label + '</a>';
                }
                str += '</div>';
                this.context = jQuery(str);
                this.context.hide();
                this.context.append = false;
            }

            this.hovered = false;
            this.locked = false;

            // CREATE DUMMY FOR MOVING
            if(this.settings.rules.draggable != "none" && this.settings.rules.dragrules != "none") {
                var _this = this;
                jQuery("<img>")
                    .attr({
                        id        : "marker",
                        src    : _this.settings.ui.theme_path + "default/marker.gif"
                    })
                    .css({
                        height        : "8px",
                        width        : "42px",
                        display        : "block",
                        position    : "absolute",
                        left        : "30px",
                        top            : "30px",
                        zIndex        : "1000"
                    }).hide().appendTo("body");
            }
            this.refresh();
            this.attachEvents();
            this.focus();
        },
        off_height : function () {
            if(this.offset === false) {
                this.container.css({ position : "relative" });
                this.offset = this.container.offset();
                var tmp = 0;
                tmp = parseInt(jQuery.css(this.container.get(0), "paddingTop", true),10);
                if(tmp) this.offset.top += tmp;
                tmp = parseInt(jQuery.css(this.container.get(0), "borderTopWidth", true),10);
                if(tmp) this.offset.top += tmp;
                this.container.css({ position : "" });
            }
            if(!this.li_height) {
                var tmp = this.container.find("ul li:eq(0)");
                this.li_height = tmp.find('.title:first').height() + 1;
                if(!this.li_height) this.li_height = 18;
            }
        },
        // REPAINT TREE
        refresh : function (obj) {
            if(this.locked) return this.error("LOCKED");
            var _this = this;

            // SAVE OPENED
            this.opened = Array();
            if(this.settings.cookies && jQuery.cookie(this.settings.cookies.prefix + '_open')) {
                var str = jQuery.cookie(this.settings.cookies.prefix + '_open');
                var tmp = str.split(",");
                jQuery.each(tmp, function () {
                    _this.opened.push("#" + this.replace(/^#/,""));
                });
                this.settings.opened = false;
            }
            else if(this.settings.opened != false) {
                jQuery.each(this.settings.opened, function (i, item) {
                    _this.opened.push("#" + this.replace(/^#/,""));
                });
                this.settings.opened = false;
            }
            else {
                this.container.find("li.open").each(function (i) { _this.opened.push("#" + this.id); });
            }

            // SAVE SELECTED
            if(this.selected) {
                this.settings.selected = Array();
                if(this.selected_arr) {
                    jQuery.each(this.selected_arr, function () {
                        _this.settings.selected.push("#" + this.attr("id"));
                    });
                }
                else this.settings.selected.push("#" + this.selected.attr("id"));
            }
            /*else if(this.settings.cookies && jQuery.cookie(this.settings.cookies.prefix + '_selected')) {
                this.settings.selected = Array();
                var str = jQuery.cookie(this.settings.cookies.prefix + '_selected');
                var tmp = str.split(",");
                jQuery.each(tmp, function () {
                    _this.settings.selected.push("#" + this.replace(/^#/,""));
                });
            }*/
            else if(this.settings.selected !== false) {
                var tmp = Array();
                if((typeof this.settings.selected).toLowerCase() == "object") {
                    jQuery.each(this.settings.selected, function () {
                        tmp.push("#" + this.replace(/^#/,""));
                    });
                }
                else tmp.push("#" + this.settings.selected.replace(/^#/,""));
                this.settings.selected = tmp;
            }

            if(obj && this.settings.data.async) {
                this.opened = Array();
                obj = this.get_node(obj);
                obj.find("li.open").each(function (i) { _this.opened.push("#" + this.id); });
                this.close_branch(obj, true);
                obj.children("ul:eq(0)").html("");
                return this.open_branch(obj, true, function () { _this.reselect.apply(_this); });
            }

            var cls = "tree-default";
            if(this.settings.ui.theme_name != "default") cls += " tree-" + _this.settings.ui.theme_name;

            if(this.settings.data.type == "xml_flat" || this.settings.data.type == "xml_nested") {
                this.scrtop = this.container.get(0).scrollTop;
                var xsl = (this.settings.data.type == "xml_flat") ? "flat.xsl" : "nested.xsl";
                this.container.getTransform(this.path + xsl, this.settings.data.url, { params : { theme_name : cls, theme_path : _this.theme }, meth : _this.settings.data.method ,callback: function () { _this.reselect.apply(_this); } });
                return;
            }
            else if(this.settings.data.type == "json") {
                if(this.settings.data.json) {
                    var str = "";
                    if(this.settings.data.json.length) {
                        for(var i = 0; i < this.settings.data.json.length; i++) {
                            str += this.parseJSON(this.settings.data.json[i]);
                        }
                    } else str = this.parseJSON(this.settings.data.json);
                    this.container.html("<ul class='" + cls + "'>" + str + "</ul>");
                    this.container.find("li:last-child").addClass("last").end().find("li:has(ul)").not(".open").addClass("closed");
                    this.container.find("li").not(".open").not(".closed").addClass("leaf");
                    this.reselect();
                }
                else {
                    var _this = this;
                    jQuery.ajax({
                        type        : this.settings.data.method,
                        url            : this.settings.data.url,
                        data        : this.settings.data.async_data(false),
                        dataType    : "json",
                        success        : function (data) {
                            var str = "";
                            if(data.length) {
                                for(var i = 0; i < data.length; i++) {
                                    str += _this.parseJSON(data[i]);
                                }
                            } else str = _this.parseJSON(data);
                            _this.container.html("<ul class='" + cls + "'>" + str + "</ul>");
                            _this.container.find("li:last-child").addClass("last").end().find("li:has(ul)").not(".open").addClass("closed");
                            _this.container.find("li").not(".open").not(".closed").addClass("leaf");
                            _this.reselect.apply(_this);
                        }
                    });
                }
            }
            else {
                this.container.children("ul:eq(0)").attr("class", cls);
                this.container.find("li:last-child").addClass("last").end().find("li:has(ul)").not(".open").addClass("closed");
                this.container.find("li").not(".open").not(".closed").addClass("leaf");
                this.reselect();
            }
        },
        // CONVERT JSON TO HTML
        parseJSON : function (data) {
            var str = "";
            str += "<li ";
            var cls = false;
            for(i in data.attributes) {
                if(i == "class") {
                    str += " class='" + data.attributes[i] + " ";
                    if(data.state == "closed" || data.state == "open") str += " " + data.state + " ";
                    str += "' ";
                    cls = true;
                }
                else str += " " + i + "='" + data.attributes[i] + "' ";
            }
            if(!cls && (data.state == "closed" || data.state == "open")) str += " class='" + data.state + "' ";
            str += ">";
            if(this.settings.languages.length) {
                for(var i = 0; i < this.settings.languages.length; i++) {
                    var attr = [];
                    attr["href"] = "#";
                    attr["style"] = "";
                    attr["class"] = this.settings.languages[i];
                    if(data.data[this.settings.languages[i]] && (typeof data.data[this.settings.languages[i]].attributes).toLowerCase() != "undefined") {
                        for(j in data.data[this.settings.languages[i]].attributes) {
                            if(j == "style" || j == "class")    attr[j] += " " + data.data[this.settings.languages[i]].attributes[j];
                            else                                attr[j]  = data.data[this.settings.languages[i]].attributes[j];
                        }
                    }
                    if(data.data[this.settings.languages[i]] && data.data[this.settings.languages[i]].icon) {
                        var icn = data.data[this.settings.languages[i]].icon.indexOf("/") == -1 ? this.theme + data.data[this.settings.languages[i]].icon : data.data[this.settings.languages[i]].icon;
                        attr["style"] += " ; background-image:url('" + icn + "'); ";
                    }
                    str += "<a";
                    for(j in attr) str += ' ' + j + '="' + attr[j] + '" ';
                    str += ">" + ( (typeof data.data[this.settings.languages[i]].title).toLowerCase() != "undefined" ? data.data[this.settings.languages[i]].title : data.data[this.settings.languages[i]] ) + "</a>";
                }
            }
            else {
                var attr = [];
                attr["href"] = "#";
                attr["style"] = "";
                attr["class"] = "";
                if((typeof data.data.attributes).toLowerCase() != "undefined") {
                    for(i in data.data.attributes) {
                        if(i == "style" || i == "class")    attr[i] += " " + data.data.attributes[i];
                        else                                attr[i]  = data.data.attributes[i];
                    }
                }
                if(data.data.icon) {
                    var icn = data.data.icon.indexOf("/") == -1 ? this.theme + data.data.icon : data.data.icon;
                    attr["style"] += " ; background-image:url('" + icn + "');";
                }
                str += "<a";
                for(i in attr) str += ' ' + i + '="' + attr[i] + '" ';
                str += ">" + ( (typeof data.data.title).toLowerCase() != "undefined" ? data.data.title : data.data ) + "</a>";
            }
            if(data.children && data.children.length) {
                str += '<ul>';
                for(var i = 0; i < data.children.length; i++) {
                    str += this.parseJSON(data.children[i]);
                }
                str += '</ul>';
            }
            str += "</li>";
            return str;
        },
        // getJSON from HTML
        getJSON : function (nod, outer_attrib, inner_attrib, force) {
            var _this = this;
            if(!nod || jQuery(nod).size() == 0) {
                nod = this.container.children("ul").children("li");
            }
            else nod = jQuery(nod);

            if(nod.size() > 1) {
                var arr = [];
                nod.each(function () {
                    arr.push(_this.getJSON(this, outer_attrib, inner_attrib));
                });
                return arr;
            }

            if(!outer_attrib) outer_attrib = [ "id", "rel", "class" ];
            if(!inner_attrib) inner_attrib = [ ];
            var obj = { attributes : {}, data : false };
            for(i in outer_attrib) {
                obj.attributes[outer_attrib[i]] = nod.attr(outer_attrib[i]);
            }
            if(this.settings.languages.length) {
                obj.data = {};
                for(i in this.settings.languages) {
                    var a = nod.children("a." + this.settings.languages[i]);
                    if(force || inner_attrib.length || a.get(0).style.backgroundImage.toString().length) {
                        obj.data[this.settings.languages[i]] = {};
                        obj.data[this.settings.languages[i]].title = a.text();
                        if(a.get(0).style.backgroundImage.length) {
                            obj.data[this.settings.languages[i]].icon = a.get(0).style.backgroundImage.replace("url(","").replace(")","");
                        }
                        if(inner_attrib.length) {
                            obj.data[this.settings.languages[i]].attributes = {};
                            for(j in inner_attrib) {
                                obj.data[this.settings.languages[i]].attributes[inner_attrib[j]] = a.attr(inner_attrib[j]);
                            }
                        }
                    }
                    else {
                        obj.data[this.settings.languages[i]] = a.text();
                    }
                }
            }
            else {
                var a = nod.children("a");
                if(force || inner_attrib.length || a.get(0).style.backgroundImage.toString().length) {
                    obj.data = {};
                    obj.data.title = a.text();
                    if(a.get(0).style.backgroundImage.length) {
                        obj.data.icon = a.get(0).style.backgroundImage.replace("url(","").replace(")","");
                    }
                    if(inner_attrib.length) {
                        obj.data.attributes = {};
                        for(j in inner_attrib) {
                            obj.data.attributes[inner_attrib[j]] = a.attr(inner_attrib[j]);
                        }
                    }
                }
                else {
                    obj.data = a.text();
                }
            }

            if(nod.children("ul").size() > 0) {
                obj.children = [];
                nod.children("ul").children("li").each(function () {
                    obj.children.push(_this.getJSON(this, outer_attrib, inner_attrib));
                });
            }
            return obj;
        },
        focus : function () {
            if(this.locked) return false;
            if(tree_component.focused != this.cntr) {
                tree_component.focused = this.cntr;
                this.settings.callback.onfocus.call(null, this);
            }
        },
        show_context : function (obj, x, y) {
            var tmp = this.context.show().offsetParent();
            if(tmp.is("html")) tmp = jQuery("body");
            tmp = tmp.offset();
            this.context.css({ "left" : (x - tmp.left - (this.settings.ui.rtl ? jQuery(this.context).width() : -5 ) ), "top" : (y - tmp.top  + (jQuery.browser.opera ? this.container.scrollTop() : 0) + 15) });
        },
        hide_context : function () {
            this.context.hide();
        },
        // ALL EVENTS
        attachEvents : function () {
            var _this = this;

            this.container
                .listen("click", "li", function(event) { // WHEN CLICK IS ON THE ARROW
                    event.stopPropagation();
                    _this.toggle_branch.apply(_this, [event.target]);
                })
                .listen("click", "a.title", function (event) { // WHEN CLICK IS ON THE TEXT OR ICON
                    if(_this.locked) {
                        event.preventDefault();
                        event.target.blur();
                        return _this.error("LOCKED");
                    }
                    _this.select_branch.apply(_this, [event.target, event.ctrlKey || _this.settings.rules.multiple == "on"]);
                    if(_this.inp) { _this.inp.blur(); }
                    event.preventDefault();
                    event.target.blur();
                    return false;
                })
                .listen("dblclick", "a.title", function (event) { // WHEN DOUBLECLICK ON TEXT OR ICON
                    if(_this.locked) {
                        event.preventDefault();
                        event.stopPropagation();
                        event.target.blur();
                        return _this.error("LOCKED");
                    }
                    _this.settings.callback.ondblclk.call(null, _this.get_node(event.target).get(0), _this);
                    event.preventDefault();
                    event.stopPropagation();
                    event.target.blur();
                })
                .listen("contextmenu", "a.title", function (event) {
                    if(_this.locked) {
                        event.target.blur();
                        return _this.error("LOCKED");
                    }
                    _this.settings.callback.onrgtclk.call(null, _this.get_node(event.target).get(0), _this, event);
                    if(_this.context) {
                        if(_this.context.append == false) {
                            _this.container.find("ul:eq(0)").append(_this.context);
                            _this.context.append = true;
                            for(i in _this.settings.ui.context) {
                                if(_this.settings.ui.context[i] == "separator") continue;
                                (function () {
                                    var func = _this.settings.ui.context[i].action;
                                    _this.context.children("[rel=" + _this.settings.ui.context[i].id +"]").bind("click", function (event) {
                                        func.call(null, _this.selected_arr || _this.selected, _this);
                                        _this.hide_context();
                                        event.stopPropagation();
                                        event.preventDefault();
                                        return false;
                                    });
                                })();
                            }
                        }
                        var obj = _this.get_node(event.target);
                        if(_this.inp) { _this.inp.blur(); }
                        if(obj) {
                            if(!obj.children("a:eq(0)").hasClass("clicked")) {
                                _this.select_branch.apply(_this, [event.target, event.ctrlKey || _this.settings.rules.multiple == "on"]);
                                event.target.blur();
                            }
                            _this.context.children("li").show();
                            var go = false;
                            for(i in _this.settings.ui.context) {
                                if(_this.settings.ui.context[i] == "separator") continue;
                                if(!_this.settings.ui.context[i].visible.call(null, _this.selected_arr || _this.selected, _this)) _this.context.children("[rel=" + _this.settings.ui.context[i].id +"]").hide();
                                else go = true;
                            }
                            if(go == true) _this.show_context(obj, event.originalEvent.pageX, event.originalEvent.pageY);
                            event.preventDefault();
                            event.stopPropagation();
                            return false;
                        }
                    }
                    return true;
                })
                .listen("pointerenter", "a.title", function (event) {
                    if(_this.locked) {
                        event.preventDefault();
                        event.stopPropagation();
                        return _this.error("LOCKED");
                    }
                    if(_this.settings.ui.hover_mode && _this.hovered !== false && event.target.tagName == "A") {
                        _this.hovered.children("a").removeClass("hover");
                        _this.hovered = false;
                    }
                });

                // ATTACH DRAG & DROP ONLY IF NEEDED
                if(this.settings.rules.draggable != "none" && this.settings.rules.dragrules != "none") {
                    this.container
                        .on('pointerup pointerdown', '.col2', function (e) {
                            if (!_this._drag) {
                                e.stopPropagation();
                            }
                        })
                        .on("pointerdown", "a.title", function (event) {
                            _this.focus.apply(_this);
                            if(_this.locked) return _this.error("LOCKED");
                            // SELECT LIST ITEM NODE
                            var obj = _this.get_node(event.target);
                            // IF ITEM IS DRAGGABLE
                            if(_this.settings.rules.multiple != false && _this.selected_arr.length > 1 && obj.children("a:eq(0)").hasClass("clicked")) {
                                var counter = 0;
                                for(i in _this.selected_arr) {
                                    if(_this.check("draggable", _this.selected_arr[i])) {
                                        _this.selected_arr[i].addClass("dragged");
                                        counter ++;
                                    }
                                }
                                if(counter > 0) {
                                    if(_this.check("draggable", obj))    _this._drag = obj;
                                    else                                _this._drag = _this.container.find("li.dragged:eq(0)");
                                    _this.isdown    = true;
                                    _this.drag        = _this._drag.get(0).cloneNode(true);
                                    _this.drag.id    = "dragged";
                                    jQuery(_this.drag).children("a").html("Multiple selection").end().children("ul").remove();
                                }
                            }
                            else {
                                if(_this.check("draggable", obj)) {
                                    _this._drag        = obj;
                                    _this.drag        = obj.get(0).cloneNode(true);
                                    _this.drag.id    = "dragged";
                                    _this.isdown    = true;
                                    _this.foreign    = false;
                                    obj.addClass("dragged");
                                }
                            }
                            obj.blur();
                            event.preventDefault();
                            event.stopPropagation();
                            return false;
                        })
                        .listen("pointerup", "li", function (e) {
                            e.stopPropagation();
                        })
                        .listen("pointerup", "a.title", function (e) {
                            if (!_this._drag) {
                                e.stopPropagation();
                            }
                        })

                    jQuery('html')
                        .bind("pointerdown",    tree_component.mousedown)
                        .bind("pointerup",    tree_component.mouseup)
                        .bind("pointermove",    tree_component.mousemove);
                }
                // ENDIF OF DRAG & DROP FUNCTIONS
            if(_this.context) jQuery('html').bind("pointerup", function() { _this.hide_context(); });
        },
        checkMove : function (NODES, REF_NODE, TYPE) {
            if(this.locked) return this.error("LOCKED");
            var _this = this;
            // OVER SELF OR CHILDREN
            if(REF_NODE.parents("li.dragged").size() > 0 || REF_NODE.is(".dragged")) return this.error("MOVE: NODE OVER SELF");
            // CHECK AGAINST DRAG_RULES
            if(NODES.size() == 1) {
                var NODE = NODES.eq(0);
                if(NODE.hasClass("foreign")) {
                    if(this.settings.rules.droppable.length == 0) return false;
                    if(!NODE.is("." + this.settings.rules.droppable.join(", ."))) return false;
                    var ok = false;
                    for(i in this.settings.rules.droppable) {
                        if(NODE.is("." + this.settings.rules.droppable[i])) {
                            if(this.settings.rules.metadata) {
                                jQuery.metadata.setType("attr", this.settings.rules.metadata);
                                NODE.attr(this.settings.rules.metadata, "type: '" + this.settings.rules.droppable[i] + "'");
                            }
                            else {
                                NODE.attr(this.settings.rules.type_attr, this.settings.rules.droppable[i]);
                            }
                            ok = true;
                            break;
                        }
                    }
                    if(!ok) return false;
                }
                if(!this.check("dragrules", [NODE, TYPE, REF_NODE.parents("li:eq(0)")])) return this.error("MOVE: AGAINST DRAG RULES");
            }
            else {
                var ok = true;
                NODES.each(function (i) {
                    if(ok == false) return false;
                    if(i > 0) {
                        var ref = NODES.eq( (i - 1) );
                        var mv = "after";
                    }
                    else {
                        var ref = REF_NODE;
                        var mv = TYPE;
                    }
                    if(!_this.check.apply(_this,["dragrules", [jQuery(this), mv, ref]])) ok = false;
                });
                if(ok == false) return this.error("MOVE: AGAINST DRAG RULES");
            }
            // CHECK AGAINST METADATA
            if(this.settings.rules.use_inline && this.settings.rules.metadata) {
                var nd = false;
                if(TYPE == "inside")    nd = REF_NODE.parents("li:eq(0)");
                else                    nd = REF_NODE.parents("li:eq(1)");
                if(nd.size()) {
                    // VALID CHILDREN CHECK
                    if(typeof nd.metadata()["valid_children"] != "undefined") {
                        var tmp = nd.metadata()["valid_children"];
                        var ok = true;
                        NODES.each(function (i) {
                            if(ok == false) return false;
                            if(jQuery.inArray(_this.get_type(this), tmp) == -1) ok = false;
                        });
                        if(ok == false) return this.error("MOVE: NOT A VALID CHILD");
                    }
                    // CHECK IF PARENT HAS FREE SLOTS FOR CHILDREN
                    if(typeof nd.metadata()["max_children"] != "undefined") {
                        if((nd.children("ul:eq(0)").children("li").not(".dragged").size() + NODES.size()) > nd.metadata().max_children) return this.error("MOVE: MAX CHILDREN REACHED");
                    }
                    // CHECK FOR MAXDEPTH UP THE CHAIN
                    var incr = 0;
                    NODES.each(function (i) {
                        var i = 1;
                        var t = jQuery(this);
                        while(i < 100) {
                            t = t.children("ul:eq(0)");
                            if(t.size() == 0) break;
                            i ++
                        }
                        incr = Math.max(i,incr);
                    });
                    var ok = true;
                    nd.parents("li").each(function(i) {
                        if(ok == false) return false;
                        if(jQuery(this).metadata().max_depth) {
                            if( (i + incr) >= jQuery(this).metadata().max_depth) ok = false;
                        }
                    });
                    if(ok == false) return this.error("MOVE: MAX_DEPTH REACHED");
                }
            }
            return true;
        },
        // USED AFTER REFRESH
        reselect : function () {
            var _this = this;
            // REOPEN BRANCHES
            if(this.opened && this.opened.length) {
                var opn = false;
                for(var j = 0; j < this.opened.length; j++) {
                    if(this.settings.data.async) {
                        if(this.get_node(this.opened[j]).size() > 0) {
                            opn = true;
                            var tmp = this.opened[j];
                            delete this.opened[j];
                            this.open_branch(tmp, true, function () { _this.reselect.apply(_this); } )
                        }
                    }
                    else this.open_branch(this.opened[j], true);
                }
                if(this.settings.data.async && opn) return;
                delete this.opened;
            }
            // REPOSITION SCROLL
            if(this.scrtop) {
                this.container.scrollTop(_this.scrtop);
                delete this.scrtop;
            }
            // RESELECT PREVIOUSLY SELECTED
            if(this.settings.selected !== false) {
                jQuery.each(this.settings.selected, function (i) {
                    _this.select_branch(jQuery(_this.settings.selected[i]), (_this.settings.rules.multiple !== false && i > 0) );
                });
                this.settings.selected = false;
            }
            this.settings.callback.onload.call(null, _this);
        },
        // GET THE EXTENDED LI ELEMENT
        get_node : function (obj) {
            var obj = jQuery(obj);
            return obj.is("li") ? obj : obj.parents("li:eq(0)");
        },
        // GET THE TYPE OF THE NODE
        get_type : function (obj) {
            obj = !obj ? this.selected : this.get_node(obj);
            if(!obj) return;
            if(this.settings.rules.metadata) {
                jQuery.metadata.setType("attr", this.settings.rules.metadata);
                var tmp = obj.metadata().type;
                if(tmp) return tmp;
            }
            return obj.attr(this.settings.rules.type_attr);
        },
        // SCROLL CONTAINER WHILE DRAGGING
        scrollCheck : function (x,y) {
            var _this = this;
            var cnt = _this.container;
            var off = _this.offset;

            var st = cnt.scrollTop();
            var sl = cnt.scrollLeft();
            // DETECT HORIZONTAL SCROLL
            var h_cor = (cnt.get(0).scrollWidth > cnt.width()) ? 40 : 20;

            if(y - off.top < 20)                        cnt.scrollTop(Math.max( (st - _this.settings.ui.scroll_spd) ,0));    // NEAR TOP
            if(cnt.height() - (y - off.top) < h_cor)    cnt.scrollTop(st + _this.settings.ui.scroll_spd);                    // NEAR BOTTOM
            if(x - off.left < 20)                        cnt.scrollLeft(Math.max( (sl - _this.settings.ui.scroll_spd),0));    // NEAR LEFT
            if(cnt.width() - (x - off.left) < 40)        cnt.scrollLeft(sl + _this.settings.ui.scroll_spd);                    // NEAR RIGHT

            if(cnt.scrollLeft() != sl || cnt.scrollTop() != st) {
                _this.moveType = false;
                _this.moveRef = false;
                jQuery("#marker").hide();
            }
            tree_component.sto = setTimeout( function() { _this.scrollCheck(x,y); }, 50);
        },
        check : function (rule, nodes) {
            if(this.locked) return this.error("LOCKED");
            // CHECK LOCAL RULES IF METADATA
            if(rule != "dragrules" && this.settings.rules.use_inline && this.settings.rules.metadata) {
                jQuery.metadata.setType("attr", this.settings.rules.metadata);
                if(typeof this.get_node(nodes).metadata()[rule] != "undefined") return this.get_node(nodes).metadata()[rule];
            }
            if(!this.settings.rules[rule])            return false;
            if(this.settings.rules[rule] == "none")    return false;
            if(this.settings.rules[rule] == "all")    return true;
            if(rule == "dragrules") {
                var nds = new Array();
                nds[0] = this.get_type(nodes[0]);
                nds[1] = nodes[1];
                nds[2] = this.get_type(nodes[2]);
                for(var i = 0; i < this.settings.rules.dragrules.length; i++) {
                    var r = this.settings.rules.dragrules[i];
                    var n = (r.indexOf("!") === 0) ? false : true;
                    if(!n) r = r.replace("!","");
                    var tmp = r.split(" ");
                    for(var j = 0; j < 3; j++) {
                        if(tmp[j] == nds[j] || tmp[j] == "*") tmp[j] = true;
                    }
                    if(tmp[0] === true && tmp[1] === true && tmp[2] === true) return n;
                }
                return false;
            }
            else
                return (jQuery.inArray(this.get_type(nodes),this.settings.rules[rule]) != -1) ? true : false;
        },
        hover_branch : function (obj) {
            if(this.locked) return this.error("LOCKED");
            if(this.settings.ui.hover_mode == false) return this.select_branch(obj);
            var _this = this;
            var obj = _this.get_node(obj);
            if(!obj.size()) return this.error("HOVER: NOT A VALID NODE");
            // CHECK AGAINST RULES FOR SELECTABLE NODES
            if(!_this.check("clickable", obj)) return this.error("SELECT: NODE NOT SELECTABLE");
            if(this.hovered) this.hovered.children("A").removeClass("hover");

            // SAVE NEWLY SELECTED
            this.hovered = obj;

            // FOCUS NEW NODE AND OPEN ALL PARENT NODES IF CLOSED
            this.hovered.children("a").removeClass("hover").addClass("hover");

            // SCROLL SELECTED NODE INTO VIEW
            var off_t = this.hovered.offset().top;
            var beg_t = this.container.offset().top;
            var end_t = beg_t + this.container.height();
            var h_cor = (this.container.get(0).scrollWidth > this.container.width()) ? 40 : 20;
            if(off_t + 5 < beg_t) this.container.scrollTop(this.container.scrollTop() - (beg_t - off_t + 5) );
            if(off_t + h_cor > end_t) this.container.scrollTop(this.container.scrollTop() + (off_t + h_cor - end_t) );
        },
        select_branch : function (obj, multiple) {
            if(this.locked) return this.error("LOCKED");
            if(!obj && this.hovered !== false) obj = this.hovered;
            var _this = this;
            obj = _this.get_node(obj);
            if(!obj.size()) return this.error("SELECT: NOT A VALID NODE");
            obj.children("a").removeClass("hover");
            // CHECK AGAINST RULES FOR SELECTABLE NODES
            if(!_this.check("clickable", obj)) return this.error("SELECT: NODE NOT SELECTABLE");
            if(_this.settings.callback.beforechange.call(null,obj.get(0),_this) === false) return this.error("SELECT: STOPPED BY USER");
            // IF multiple AND obj IS ALREADY SELECTED - DESELECT IT
            if(this.settings.rules.multiple != false && multiple && obj.children("a.clicked").size() > 0) {
                return this.deselect_branch(obj);
            }
            if(this.settings.rules.multiple != false && multiple) {
                this.selected_arr.push(obj);
            }
            if(this.settings.rules.multiple != false && !multiple) {
                for(i in this.selected_arr) {
                    this.selected_arr[i].children("A").removeClass("clicked");
                }
                this.selected_arr = [];
                this.selected_arr.push(obj);
                if(this.selected) this.selected.children("A").removeClass("clicked");
            }
            if(!this.settings.rules.multiple) {
                if(this.selected) this.selected.children("A").removeClass("clicked");
            }
            // SAVE NEWLY SELECTED
            this.selected = obj;
            if(this.settings.ui.hover_mode && this.hovered !== false) {
                this.hovered.children("A").removeClass("hover");
                this.hovered = obj;
            }

            // FOCUS NEW NODE AND OPEN ALL PARENT NODES IF CLOSED
            this.selected.children("a").removeClass("clicked").addClass("clicked").end().parents("li.closed").each( function () { _this.open_branch(this, true); });

            // SCROLL SELECTED NODE INTO VIEW
            var off_t = this.selected.offset().top;
            var beg_t = this.container.offset().top;
            var end_t = beg_t + this.container.height();
            var h_cor = (this.container.get(0).scrollWidth > this.container.width()) ? 40 : 20;
            if(off_t + 5 < beg_t) this.container.scrollTop(this.container.scrollTop() - (beg_t - off_t + 5) );
            if(off_t + h_cor > end_t) this.container.scrollTop(this.container.scrollTop() + (off_t + h_cor - end_t) );

            this.set_cookie("selected");
            this.settings.callback.onchange.call(null, this.selected.get(0), _this);
        },
        deselect_branch : function (obj) {
            if(this.locked) return this.error("LOCKED");
            var _this = this;
            var obj = this.get_node(obj);
            obj.children("a").removeClass("clicked");
            if(this.settings.rules.multiple != false && this.selected_arr.length > 1) {
                this.selected_arr = [];
                this.container.find("a.clicked").filter(":first-child").parent().each(function () {
                    _this.selected_arr.push(jQuery(this));
                });
                if(obj.get(0) == this.selected.get(0)) {
                    this.selected = this.selected_arr[0];
                    this.set_cookie("selected");
                }
            }
            else {
                if(this.settings.rules.multiple != false) this.selected_arr = [];
                this.selected = false;
                this.set_cookie("selected");
            }
            if(this.selected)    this.settings.callback.onchange.call(null, this.selected.get(0), _this);
            else                this.settings.callback.onchange.call(null, false, _this);
        },
        toggle_branch : function (obj) {
            if(this.locked) return this.error("LOCKED");
            var obj = this.get_node(obj);
            if(obj.hasClass("closed"))    return this.open_branch(obj);
            if(obj.hasClass("open"))    return this.close_branch(obj);
        },
        open_branch : function (obj, disable_animation, callback) {
            if(this.locked) return this.error("LOCKED");
            var obj = this.get_node(obj);
            if(!obj.size()) return this.error("OPEN: NO SUCH NODE");
            if(obj.hasClass("leaf")) return this.error("OPEN: OPENING LEAF NODE");

            if(this.settings.data.async && obj.find("li").size() == 0) {
                var _this = this;
                obj.children("ul:eq(0)").remove().end().append("<ul><li class='last'><a style='background-image:url(" + _this.settings.ui.theme_path + "default/throbber.gif)' href='#'>" + (_this.settings.lang.loading || "Loading ...") + "</a></li></ul>");
                obj.removeClass("closed").addClass("open");
                if(this.settings.data.type == "xml_flat" || this.settings.data.type == "xml_nested") {
                    var xsl = (this.settings.data.type == "xml_flat") ? "flat.xsl" : "nested.xsl";
                    var str = (this.settings.data.url.indexOf("?") == -1) ? "?id=" + encodeURIComponent(obj.attr("id")) : "&id=" + encodeURIComponent(obj.attr("id"));
                    obj.children("ul:eq(0)").getTransform(this.path + xsl, this.settings.data.url + str, { params : { theme_path : _this.theme }, meth : this.settings.data.method, repl : true, callback: function (str, json) {
                            if(str.length < 15) {
                                obj.removeClass("closed").removeClass("open").addClass("leaf").children("ul").remove();
                                if(callback) callback.call();
                                return;
                            }
                            _this.open_branch.apply(_this, [obj]);
                            if(callback) callback.call();
                        }
                    });
                }
                else {
                    jQuery.ajax({
                        type        : this.settings.data.method,
                        url            : this.settings.data.url,
                        data        : this.settings.data.async_data(obj),
                        dataType    : "json",
                        success        : function (data, textStatus) {
                            if(!data || data.length == 0) {
                                obj.removeClass("closed").removeClass("open").addClass("leaf").children("ul").remove();
                                if(callback) callback.call();
                                return;
                            }
                            var str = "";
                            if(data.length) {
                                for(var i = 0; i < data.length; i++) {
                                    str += _this.parseJSON(data[i]);
                                }
                            }
                            else str = _this.parseJSON(data);
                            obj.children("ul:eq(0)").replaceWith("<ul>" + str + "</ul>");
                            obj.find("li:last-child").addClass("last").end().find("li:has(ul)").not(".open").addClass("closed");
                            obj.find("li").not(".open").not(".closed").addClass("leaf");
                            _this.open_branch.apply(_this, [obj]);
                            if(callback) callback.call();
                        }
                    });
                }
                return true;
            }
            else {
                if(parseInt(this.settings.ui.animation) > 0 && !disable_animation && !(jQuery.browser.msie && jQuery.browser.version < 7) ) {
                    obj.children("ul:eq(0)").css("display","none");
                    obj.removeClass("closed").addClass("open");
                    obj.children("ul:eq(0)").slideDown(parseInt(this.settings.ui.animation), function() {
                        jQuery(this).css("display","");
                        if(callback) callback.call();
                    });
                } else {
                    obj.removeClass("closed").addClass("open");
                    if(callback) callback.call();
                }
                this.set_cookie("open");
                this.settings.callback.onopen.call(null, obj.get(0), this);
                return true;
            }
        },
        close_branch : function (obj, disable_animation) {
            if(this.locked) return this.error("LOCKED");
            var _this = this;
            var obj = this.get_node(obj);
            if(parseInt(this.settings.ui.animation) > 0 && !disable_animation && !(jQuery.browser.msie && jQuery.browser.version < 7) && obj.children("ul:eq(0)").size() == 1) {
                obj.children("ul:eq(0)").slideUp(parseInt(this.settings.ui.animation), function() {
                    obj.removeClass("open").addClass("closed");
                    _this.set_cookie("open");
                    jQuery(this).css("display","");
                });
            }
            else {
                obj.removeClass("open").addClass("closed");
                this.set_cookie("open");
            }
            if(this.selected && obj.children("ul:eq(0)").find("a.clicked").size() > 0) {
                obj.find("li:has(a.clicked)").each(function() {
                    _this.deselect_branch(this);
                });
                if(obj.children("a.clicked").size() == 0) this.select_branch(obj, (this.settings.rules.multiple != false && this.selected_arr.length > 0) );
            }
            this.settings.callback.onclose.call(null, obj.get(0), this);
        },
        open_all : function (obj) {
            if(this.locked) return this.error("LOCKED");
            var _this = this;
            obj = obj ? jQuery(obj) : this.container;
            obj.find("li.closed").each( function () { var __this = this; _this.open_branch.apply(_this, [this, true, function() { _this.open_all.apply(_this, [__this]); } ]); });
        },
        close_all : function () {
            if(this.locked) return this.error("LOCKED");
            var _this = this;
            jQuery(this.container).find("li.open").each( function () { _this.close_branch(this, true); });
        },
        show_lang : function (i) {
            if(this.locked) return this.error("LOCKED");
            if(this.settings.languages[i] == this.current_lang) return true;
            var st = false;
            var id = this.container.attr("id") ? "#" + this.container.attr("id") : ".tree";
            st = get_css(id + " ." + this.current_lang, this.sn);
            if(st !== false) st.style.display = "none";
            st = get_css(id + " ." + this.settings.languages[i], this.sn);
            if(st !== false) st.style.display = "block";
            this.current_lang = this.settings.languages[i];
            return true;
        },
        cycle_lang : function() {
            if(this.locked) return this.error("LOCKED");
            var i = jQuery.inArray(this.current_lang, this.settings.languages);
            i ++;
            if(i > this.settings.languages.length - 1) i = 0;
            this.show_lang(i);
        },
        create : function (type, obj, data, icon, id ) {
            if(this.locked) return this.error("LOCKED");
            // NOTHING SELECTED
            obj = obj ? this.get_node(obj) : this.selected;
            if(!obj || !obj.size()) return this.error("CREATE: NO NODE SELECTED");
            if(!this.check("creatable", obj)) return this.error("CREATE: CANNOT CREATE IN NODE");

            var t = type || this.get_type(obj) || "";
            if(this.settings.rules.use_inline && this.settings.rules.metadata) {
                jQuery.metadata.setType("attr", this.settings.rules.metadata);
                if(typeof obj.metadata()["valid_children"] != "undefined") {
                    if(jQuery.inArray(t, obj.metadata()["valid_children"]) == -1) return this.error("CREATE: NODE NOT A VALID CHILD");
                }
                if(typeof obj.metadata()["max_children"] != "undefined") {
                    if( (obj.children("ul:eq(0)").children("li").size() + 1) > obj.metadata().max_children) return this.error("CREATE: MAX_CHILDREN REACHED");
                }
                var ok = true;
                obj.parents("li").each(function(i) {
                    if(jQuery(this).metadata().max_depth) {
                        if( (i + 1) >= jQuery(this).metadata().max_depth) {
                            ok = false;
                        }
                    }
                });
                if(!ok) return this.error("CREATE: MAX_DEPTH REACHED");
            }
            if(obj.hasClass("closed")) {
                var _this = this;
                return this.open_branch(obj, true, function () { _this.create.apply(_this, [type, obj, data, icon, id]); } );
            }

            if(id)    $li = jQuery("<li id='" + id + "' />");
            else    $li = jQuery("<li />");
            // NEW NODE IS OF PASSED TYPE OR PARENT'S TYPE
            if(this.settings.rules.metadata) {
                jQuery.metadata.setType("attr", this.settings.rules.metadata);
                $li.attr(this.settings.rules.metadata, "type: '" + t + "'");
            }
            else {
                $li.attr(this.settings.rules.type_attr, t)
            }

            var icn = "";
            if((typeof icon).toLowerCase() == "string") {
                icn = icon;
                icn = icn.indexOf("/") == -1 ? this.theme + icn : icn;
            }
            if(this.settings.languages.length) {
                for(i = 0; i < this.settings.languages.length; i++) {
                    if((typeof data).toLowerCase() == "string") val = data;
                    else if(data && data[i]) {
                        val = data[i];
                    }
                    else if(this.settings.lang.new_node) {
                        if((typeof this.settings.lang.new_node).toLowerCase() != "string" && this.settings.lang.new_node[i])
                            val = this.settings.lang.new_node[i];
                        else
                            val = this.settings.lang.new_node;
                    }
                    else {
                        val = "New folder";
                    }
                    if((typeof icon).toLowerCase() != "string" && icon && icon[i]) {
                        icn = icon[i];
                        icn = icn.indexOf("/") == -1 ? this.theme + icn : icn;
                    }
                    $li.append("<a href='#'" + ( icn.length ? " style='background-image:url(\"" + icn + "\");' " : " ") + "class='" + this.settings.languages[i] + "'>" + val + "</a>");
                }
            }
            else { $li.append("<a href='#'" + ( icn.length ? " style='background-image:url(\"" + icn + "\");' " : " ") + ">" + (data || this.settings.lang.new_node || "New folder") + "</a>"); }
            $li.addClass("leaf");
            if(this.settings.rules.createat == "top" || obj.children("ul").size() == 0) {
                this.moved($li,obj.children("a:eq(0)"),"inside", true);
            }
            else {
                this.moved($li,obj.children("ul:eq(0)").children("li:last").children("a:eq(0)"),"after",true);
            }
            this.select_branch($li.children("a:eq(0)"));
            if(!data) this.rename();
            return $li;
        },
        rename : function () {
            if(this.locked) return this.error("LOCKED");
            if(this.selected) {
                var _this = this;
                if(!this.check("renameable", this.selected)) return this.error("RENAME: NODE NOT RENAMABLE");
                if(!this.settings.callback.beforerename.call(null,this.selected.get(0), _this.current_lang, _this)) return this.error("RENAME: STOPPED BY USER");
                var obj = this.selected;
                if(this.current_lang)    obj = obj.find("a." + this.current_lang).get(0);
                else                    obj = obj.find("a:first").get(0);
                last_value = obj.innerHTML;
                _this.inp = jQuery("<input type='text' />");
                _this.inp
                    .val(last_value)
                    .bind("pointerdown",        function (event) { event.stopPropagation(); })
                    .bind("pointerup",        function (event) { event.stopPropagation(); })
                    .bind("click",            function (event) { event.stopPropagation(); })
                    .bind("keyup",            function (event) {
                            var key = event.keyCode || event.which;
                            if(key == 27) { this.value = last_value; this.blur(); return }
                            if(key == 13) { this.blur(); return }
                        });
                _this.inp.blur(function(event) {
                        if(this.value == "") this.value == last_value;
                        jQuery(obj).html( jQuery(obj).parent().find("input").eq(0).attr("value") ).get(0).style.display = "";
                        jQuery(obj).prevAll("span").remove();
                        if(this.value != last_value) _this.settings.callback.onrename.call(null, _this.get_node(obj).get(0), _this.current_lang, _this);
                        _this.inp = false;
                    });
                var spn = jQuery("<span />").addClass(obj.className).append(_this.inp);
                spn.attr("style", jQuery(obj).attr("style"));
                obj.style.display = "none";
                jQuery(obj).parent().prepend(spn);
                _this.inp.get(0).focus();
                _this.inp.get(0).select();
            }
            else return this.error("RENAME: NO NODE SELECTED");
        },
        // REMOVE NODES
        remove : function(obj) {
            if(this.locked) return this.error("LOCKED");
            if(obj) {
                obj = this.get_node(obj);
                if(obj.size()) {
                    if(!this.check("deletable", obj)) return this.error("DELETE: NODE NOT DELETABLE");
                    if(!this.settings.callback.beforedelete.call(null,obj.get(0), _this)) return this.error("DELETE: STOPPED BY USER");
                    $parent = obj.parent();
                    obj = obj.remove();
                    $parent.children("li:last").addClass("last");
                    if($parent.children("li").size() == 0) {
                        $li = $parent.parents("li:eq(0)");
                        $li.removeClass("open").removeClass("closed").addClass("leaf").children("ul").remove();
                        this.set_cookie("open");
                    }
                    this.settings.callback.ondelete.call(null, obj, this);
                }
            }
            else if(this.selected) {
                if(!this.check("deletable", this.selected)) return this.error("DELETE: NODE NOT DELETABLE");
                if(!this.settings.callback.beforedelete.call(null,this.selected.get(0), _this)) return this.error("DELETE: STOPPED BY USER");
                $parent = this.selected.parent();
                var obj = this.selected;
                if(this.settings.rules.multiple == false || this.selected_arr.length == 1) {
                    var stop = true;
                    var tmp = (this.selected.prev("li:eq(0)").size()) ? this.selected.prev("li:eq(0)") : this.selected.parents("li:eq(0)");
                    // this.get_prev(true);
                }
                obj = obj.remove();
                $parent.children("li:last").addClass("last");
                if($parent.children("li").size() == 0) {
                    $li = $parent.parents("li:eq(0)");
                    $li.removeClass("open").removeClass("closed").addClass("leaf").children("ul").remove();
                    this.set_cookie("open");
                }
                //this.selected = false;
                this.settings.callback.ondelete.call(null, obj, this);
                if(stop && tmp) this.select_branch(tmp);
                if(this.settings.rules.multiple != false && !stop) {
                    var _this = this;
                    this.selected_arr = [];
                    this.container.find("a.clicked").filter(":first-child").parent().each(function () {
                        _this.selected_arr.push(jQuery(this));
                    });
                    if(this.selected_arr.length > 0) {
                        this.selected = this.selected_arr[0];
                        this.remove();
                    }
                }
            }
            else return this.error("DELETE: NO NODE SELECTED");
        },
        // FOR EXPLORER-LIKE KEYBOARD SHORTCUTS
        get_next : function(force) {
            var obj = this.hovered || this.selected;
            if(obj) {
                if(obj.hasClass("open"))                        return force ? this.select_branch(obj.find("li:eq(0)")) : this.hover_branch(obj.find("li:eq(0)"));
                else if(jQuery(obj).nextAll("li").size() > 0)    return force ? this.select_branch(obj.nextAll("li:eq(0)")) : this.hover_branch(obj.nextAll("li:eq(0)"));
                else                                            return force ? this.select_branch(obj.parents("li").next("li").eq(0)) : this.hover_branch(obj.parents("li").next("li").eq(0));
            }
        },
        get_prev : function(force) {
            var obj = this.hovered || this.selected;
            if(obj) {
                if(obj.prev("li").size()) {
                    var obj = obj.prev("li").eq(0);
                    while(obj.hasClass("open")) obj = obj.children("ul:eq(0)").children("li:last");
                    return force ? this.select_branch(obj) : this.hover_branch(obj);
                }
                else { return force ? this.select_branch(obj.parents("li:eq(0)")) : this.hover_branch(obj.parents("li:eq(0)")); }
            }
        },
        get_left : function(force, rtl) {
            if(this.settings.ui.rtl && !rtl) return this.get_right(force, true);
            var obj = this.hovered || this.selected;
            if(obj) {
                if(obj.hasClass("open"))    this.close_branch(obj);
                else {
                    return force ? this.select_branch(obj.parents("li:eq(0)")) : this.hover_branch(obj.parents("li:eq(0)"));
                }
            }
        },
        get_right : function(force, rtl) {
            if(this.settings.ui.rtl && !rtl) return this.get_left(force, true);
            var obj = this.hovered || this.selected;
            if(obj) {
                if(obj.hasClass("closed"))    this.open_branch(obj);
                else {
                    return force ? this.select_branch(obj.find("li:eq(0)")) : this.hover_branch(obj.find("li:eq(0)"));
                }
            }
        },
        toggleDots : function () {
            this.container.toggleClass("no_dots");
        },
        set_cookie : function (type) {
            if(this.settings.cookies === false) return false;
            switch(type) {
                /*case "selected":
                    if(this.settings.rules.multiple != false && this.selected_arr.length > 1) {
                        var val = Array();
                        jQuery.each(this.selected_arr, function () {
                            val.push(this.attr("id"));
                        });
                        val = val.join(",");
                    }
                    else var val = this.selected ? this.selected.attr("id") : false;
                    jQuery.cookie(this.settings.cookies.prefix + '_selected',val,this.settings.cookies.opts);
                    break;*/
                case "open":
                    var str = "";
                    this.container.find("li.open").each(function (i) { str += this.id + ","; });
                    jQuery.cookie(this.settings.cookies.prefix + '_open',str.replace(/,$/ig,""),this.settings.cookies.opts);
                    break;
            }
        },
        moved : function (what, where, how, is_new, is_copy) {
            var what    = jQuery(what);
            var $parent    = jQuery(what).parents("ul:eq(0)");
            var $where    = jQuery(where);
            // IF MULTIPLE
            if(what.size() > 1) {
                var _this = this;
                var tmp = this.moved(what.eq(0),where,how, false, is_copy);
                what.each(function (i) {
                    if(i == 0) return;
                    tmp = _this.moved(this, tmp.children("a:eq(0)"), "after", false, is_copy);
                })
                return;
            }
            if(is_copy) {
                what = what.clone();
                what.each(function (i) {
                    this.id = this.id + "_copy";
                    jQuery(this).find("li").each(function () {
                        this.id = this.id + "_copy";
                    })
                    jQuery(this).find("a.clicked").removeClass("clicked");
                });
            }
            if(is_new) {
                if(!this.settings.callback.beforecreate.call(null,this.get_node(what).get(0), this.get_node(where).get(0),how,this)) return;
            }
            else {
                if(!this.settings.callback.beforemove.call(null,this.get_node(what).get(0), this.get_node(where).get(0),how,this)) return;
            }

            if(!is_new) {
                var tmp = jQuery(what).parents(".tree:eq(0)");
                // if different trees
                if(tmp.get(0) != this.container.get(0)) {
                    tmp = tree_component.inst[tmp.attr("id")];
                    // if there are languages - otherwise - no cleanup needed
                    if(tmp.settings.languages.length) {
                        var res = [];
                        // if new tree has no languages - use current visible
                        if(this.settings.languages.length == 0) res.push("." + tmp.current_lang);
                        else {
                            for(i in this.settings.languages) {
                                for(j in tmp.settings.languages) {
                                    if(this.settings.languages[i] == tmp.settings.languages[j]) res.push("." + this.settings.languages[i]);
                                }
                            }
                        }
                        if(res.length == 0) return this.error("MOVE: NO COMMON LANGUAGES");
                        what.find("a").removeClass("clicked").not(res.join(",")).remove();
                    }
                }
            }

            // ADD NODE TO NEW PLACE
            switch(how) {
                case "before":
                    $where.parents("ul:eq(0)").children("li.last").removeClass("last");
                    $where.parents("li:eq(0)").before(what.removeClass("last"));
                    $where.parents("ul:eq(0)").children("li:last").addClass("last");
                    break;
                case "after":
                    $where.parents("ul:eq(0)").children("li.last").removeClass("last");
                    $where.parents("li:eq(0)").after(what.removeClass("last"));
                    $where.parents("ul:eq(0)").children("li:last").addClass("last");
                    break;
                case "inside":
                    if(this.settings.data.async) {
                        var obj = this.get_node($where);
                        if(obj.hasClass("closed")) {
                            var _this = this;
                            return this.open_branch(obj, true, function () { _this.moved.apply(_this, [what, where, how, is_new, is_copy]); })
                        }
                    }
                    if($where.parents("li:eq(0)").children("ul:first").size()) {
                        if(this.settings.rules.createat == "top")    $where.parents("li:eq(0)").children("ul:first").prepend(what.removeClass("last")).children("li:last").addClass("last");
                        else                                        $where.parents("li:eq(0)").children("ul:first").children(".last").removeClass("last").end().append(what.removeClass("last")).children("li:last").addClass("last");
                    }
                    else {
                        what.addClass("last");
                        $where.parents("li:eq(0)").append("<ul/>").removeClass("leaf").addClass("closed");
                        $where.parents("li:eq(0)").children("ul:first").prepend(what);
                    }
                    if(!this.settings.data.async) {
                        this.open_branch($where);
                    }
                    break;
                default:
                    break;
            }
            // CLEANUP OLD PARENT
            if($parent.find("li").size() == 0) {
                var $li = $parent.parent();
                $li.removeClass("open").removeClass("closed").addClass("leaf").children("ul").remove();
                $li.parents("ul:eq(0)").children("li.last").removeClass("last").end().children("li:last").addClass("last");
                this.set_cookie("open");
            }
            else {
                $parent.children("li.last").removeClass("last");
                $parent.children("li:last").addClass("last");
            }
            if(is_new && how != "inside") where = this.get_node(where).parents("li:eq(0)");
            if(is_copy)        this.settings.callback.oncopy.call(null, this.get_node(what).get(0), this.get_node(where).get(0), how, this)
            else if(is_new)    this.settings.callback.oncreate.call(null, this.get_node(what).get(0), this.get_node(where).get(0), this.settings.insertAt, this);
            else            this.settings.callback.onmove.call(null, this.get_node(what).get(0), this.get_node(where).get(0), how, this);
            return what;
        },
        error : function (code) {
            this.settings.callback.error.call(null,code,this);
            return false;
        },
        lock : function (state) {
            this.locked = state;
            if(this.locked)    this.container.addClass("locked");
            else            this.container.removeClass("locked");
        },
        cut : function () {
            if(this.locked) return this.error("LOCKED");
            if(!this.selected) return this.error("CUT: NO NODE SELECTED");
            this.copy_nodes = false;
            this.cut_nodes = this.container.find("a.clicked").filter(":first-child").parent();
        },
        copy : function () {
            if(this.locked) return this.error("LOCKED");
            if(!this.selected) return this.error("COPY: NO NODE SELECTED");
            this.copy_nodes = this.container.find("a.clicked").filter(":first-child").parent();
            this.cut_nodes = false;
        },
        paste : function () {
            if(this.locked) return this.error("LOCKED");
            if(!this.selected) return this.error("PASTE: NO NODE SELECTED");
            if(!this.copy_nodes && !this.cut_nodes) return this.error("PASTE: NOTHING TO DO");
            if(this.copy_nodes && this.copy_nodes.size()) {
                if(!this.checkMove(this.copy_nodes, this.selected.children("a:eq(0)"), "inside")) return false;
                this.moved(this.copy_nodes, this.selected.children("a:eq(0)"), "inside", false, true);
                this.copy_nodes = false;
            }
            if(this.cut_nodes && this.cut_nodes.size()) {
                if(!this.checkMove(this.cut_nodes, this.selected.children("a:eq(0)"), "inside")) return false;
                this.moved(this.cut_nodes, this.selected.children("a:eq(0)"), "inside");
                this.cut_nodes = false;
            }
        },
        search : function(str) {
            var _this = this;
            if(!str || (this.srch && str != this.srch) ) {
                this.srch = "";
                this.srch_opn = false;
                this.container.find("a.search").removeClass("search");
            }
            this.srch = str;
            if(!str) return;
            if(this.settings.data.async) {
                if(!this.srch_opn) {
                    var dd = jQuery.extend( { "search" : str } , this.settings.data.async_data(false) );
                    jQuery.ajax({
                        type        : this.settings.data.method,
                        url            : this.settings.data.url,
                        data        : dd,
                        dataType    : "text",
                        success        : function (data) {
                            _this.srch_opn = jQuery.unique(data.split(","));
                            _this.search.apply(_this,[str]);
                        }
                    });
                }
                else if(this.srch_opn.length) {
                    if(this.srch_opn && this.srch_opn.length) {
                        var opn = false;
                        for(var j = 0; j < this.srch_opn.length; j++) {
                            if(this.get_node("#" + this.srch_opn[j]).size() > 0) {
                                opn = true;
                                var tmp = "#" + this.srch_opn[j];
                                delete this.srch_opn[j];
                                this.open_branch(tmp, true, function () { _this.search.apply(_this,[str]); } );
                            }
                        }
                        if(!opn) {
                            this.srch_opn = [];
                             _this.search.apply(_this,[str]);
                        }
                    }
                }
                else {
                    var selector = "a";
                    // IF LANGUAGE VERSIONS
                    if(this.settings.languages.length) selector += "." + this.current_lang;
                    this.container.find(selector + ":contains('" + str + "')").addClass("search");
                    this.srch_opn = false;
                }
            }
            else {
                var selector = "a";
                // IF LANGUAGE VERSIONS
                if(this.settings.languages.length) selector += "." + this.current_lang;
                this.container.find(selector + ":contains('" + str + "')").addClass("search").parents("li.closed").each( function () { _this.open_branch(this, true); });
            }
        },

        destroy : function() {
            try {
                var evts = ["click","dblclick","contextmenu","pointerover","pointerdown"];
                for(i in evts) {
                    var idxer = this.container.indexer(evts[i]);
                    idxer.stop();
                    jQuery.removeData( idxer.listener, idxer.event + '.indexer' );
                }
            } catch(err) { }
            this.container.unbind();

            this.container.removeClass("tree").children("ul").removeClass("tree-" + this.settings.ui.theme_name).find("li").removeClass("leaf").removeClass("open").removeClass("closed").removeClass("last").children("a").removeClass("clicked");

            if(this.cntr == tree_component.focused) {
                for(i in tree_component.inst) {
                    if(i != this.cntr && i != this.container.attr("id")) {
                        tree_component.inst[i].focus();
                        break;
                    }
                }
            }
            delete tree_component.inst[this.cntr];
            delete tree_component.inst[this.container.attr("id")];
            tree_component.cntr --;
        }
    }
};

//# sourceMappingURL=data:application/json;base64,