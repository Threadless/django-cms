Django CMS Tutorial
===================

Installation
-------------

I am working on Ubuntu 9.10 here, not windows or mac...sorry, although I don't
expect things will be much different for mac at least...if I get a chance i'll
run through this process on windows too and update the article but no
promises.

I'm assuming that Python, Django and sqlite3 are installed already. For
reference, I am currently using Python 2.6.4 and Django (trunk version) 1.2.

If you don't already have one, create a new folder for your code to live in. My
folder lives in my home directory and is named "django_apps". This will pop up
throughout this guide so if you're following along and you call yours
something else, remember to replace "django_apps" with the name of your own
folder when the time comes.

In a terminal, move into your code directory::

	CD ~/django_apps

Create a new Django project (call this whatever you like but remember to
change it if you're following along and have called it something else)::

	django-admin.py startproject project-name

No harm in making sure that all is indeed well with Django at this early stage so::

	CD project-name

And... ::

	python manage.py runserver

Head on over to http://127.0.0.1:8000 and if you see "it worked" then well, its working.

Here comes the science...

If you dont happen to know your Python location then issue the following command::

	which python

(my one is "/usr/local/lib/python2.6" for example)

Go to your Python dist-packages directory "your-python-path/dist-packages"

Download the latest and greatest Django CMS from here: http://www.django-cms.org/en/downloads/

Unzip the downloaded file into the "dist-packages" directory...you will need to do this as "sudo" unless you have your system set up wrongly ;)

Make copies of the following directories like so::

	sudo cp -R divio-django-cms-c0288a1/cms/ cms
	sudo cp -R divio-django-cms-c0288a1/mptt/ mptt
	sudo cp -R divio-django-cms-c0288a1/publisher/ publisher

Do a bit of house cleaning to get rid of all the files you don't need::

	sudo rm -rf divio-django-cms-c0288a1.zip
	sudo rm -rf divio-django-cms-c0288a1/

Head back to the project you created previously::

	cd ~/django_apps/project-name

In your editor, edit "settings.py" like so:

On lines 1+2 put the following before anything else::

	import os
	PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))

Then, after the import statements, add this::

	gettext = lambda s: s

Set up the remainder of the file with the following changes/additions::

	DATABASE_ENGINE = 'sqlite3'
	DATABASE_NAME = '/path/to/your/data/your-db-name.db/

	MEDIA_ROOT = os.path.join(PROJECT_PATH, 'media')
	MEDIA_URL = '/media/'

	ADMIN_MEDIA_PREFIX = '/media/admin/'

	INSTALLED_APPS = (
	    'django.contrib.auth',
	    'django.contrib.admin',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.sites',
	    'django.contrib.messages',
	    'cms',
	    'cms.plugins.text',
	    'cms.plugins.picture',
	    'cms.plugins.link',
	    'cms.plugins.file',
	    'cms.plugins.snippet',
	    'cms.plugins.googlemap',
	    'mptt',
	    'publisher',
		'menus',
	)

	MIDDLEWARE_CLASSES = (
		'django.middleware.cache.UpdateCacheMiddleware',
	    'django.contrib.sessions.middleware.SessionMiddleware',
	    'django.contrib.auth.middleware.AuthenticationMiddleware',
	    'django.middleware.common.CommonMiddleware',
	    'django.middleware.doc.XViewMiddleware',
	    'django.middleware.csrf.CsrfViewMiddleware',
	    'cms.middleware.page.CurrentPageMiddleware',
	    'cms.middleware.user.CurrentUserMiddleware',
		'cms.middleware.toolbar.ToolbarMiddleware',
		'cms.middleware.media.PlaceholderMediaMiddleware',
		'django.middleware.cache.FetchFromCacheMiddleware',
	)

	TEMPLATE_DIRS = os.path.join(PROJECT_PATH, 'templates')
	# (templates being the name of my template dir within project-name)

	TEMPLATE_CONTEXT_PROCESSORS = (
	    'django.core.context_processors.auth',
	    'django.core.context_processors.i18n',
	    'django.core.context_processors.request',
	    'django.core.context_processors.media',
	    'cms.context_processors.media',
	)

(I didn't have a ``TEMPLATE_CONTEXT_PROCESSORS`` specified so had to add all of the above anew.)

Set up your available templates (don't worry that they don't actually exist yet)::

	CMS_TEMPLATES = (
	    ('base.html', gettext('default')),
	    ('2col.html', gettext('2 Column')),
	    ('3col.html', gettext('3 Column')),
	    ('extra.html', gettext('Some extra fancy template')),
	)

Next, Edit your ``urls.py`` file like this::

	from django.conf.urls.defaults import *
	from django.contrib import admin
	from django.conf import settings

	admin.autodiscover()

	urlpatterns = patterns('',
	    (r'^admin/', include(admin.site.urls)),
	)

	if settings.DEBUG:
	    urlpatterns += patterns('',
	        url(r'^media/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT, 'show_indexes': True})
	    )

	urlpatterns += patterns('',
	    url(r'^', include('cms.urls')),
	)

Create a folder called 'media' in your project root (that's "project-name" for me), this means you create a symbolic link from the "cms/media/cms" folder in "dist-packages" to your new "media" folder::

	ln -s /usr/local/lib/python2.6/dist-packages/cms/media/cms cms

Now for the magic...if you're not already there::

	cd ~/django_apps/project-name

and... ::

	python manage.py syncdb

If all goes well, you'll be asked if you want to set up your superuser account...which of course you do so just follow the instructions in the terminal.

That should hopefully be that. If your development server is still running in your terminal stop it, then restart it again just to be sure. ::

	cmd c
	python manage.py runserver

Visit http://127.0.0.1:8000/ to make sure all is well, you'll be greeted with
appropriate text and if you can see the django-cms logo then your media folder
is cool also.

log in via the admin link (http://127.0.0.1:8000/admin/) and enjoy :)

This is your development enviroment. On how to deploy django projects on real
webservers you may want to head over to http://www.django-project.com/


Templates
---------

My First Plugin
---------------

There are a few plugins within the CMS that let you put basic content into the
placeholders of a page. To be able to put a custom content into a placeholder,
you need to write a CMS Plugin. A Plugin consists of two things. A Model that
holds the actual data you want to store and a Plugin Class that tells the CMS
how to render it. Lets write a Plugin that displays a title and some text.

Create a django application and install it in settings.py. As you want to save
data to the Database you need to write a model in your models.py. ::

  from cms.models import CMSPlugin
  class TextWithTitle(CMSPlugin):
      title = models.CharField(max_length=50)
      text =  models.TextField()

Note that the model does not inherit from django.db.models.Model but from
cms.models.CMSPlugin.

Run syncdb to create the according database tables. ::

  python manage.py syncdb

Now that you have a model that stores your plugin data you need to tell django-cms
about your plugin. For that you need to write the plugin class that inherits from
CMSPluginBase. Do this in a file called **cms_plugins.py** in your application
folder. ::

  from cms.plugin_base import CMSPluginBase
  from cms.plugin_pool import plugin_pool
  from models import TextWithTitle
  from django.utils.translation import ugettext as _

  class TextWithTitlePlugin(CMSPluginBase):
      model = TextWithTitle
      name = _("Text with Title")
      render_template = "textwithtitle.html"

      def render(self, context, instance, placeholder):
          context.update({'instance':instance,
                          'placeholder':placeholder})
          return context

The TextWithTitlePlugin class inherits from CMSPluginBase. It holds information
about its name, the model its associated with and the Template to render it with.

Finaly you have to register this plugin (in cms_plugins.py) to actually tell
the CMS about your plugin. This happens with: ::

  plugin_pool.register_plugin(TextWithTitlePlugin)

**Attributes**

These are the attributes you have to provide for the plugin to work.

:model:
  Specify the Model this Plugin uses to save Data. You dont have to write a
  custom Model if you plugin just wants to display some HTML for example. If
  doing so you should just Provide the CMSPlugin Class as this Plugins Model

:name:
  The Name of this plugin in the admin.

:render_template:
  The Template that is being use to render this plugin. This is not the template
  beeing used to render the plugin in the admin backend or frontend editing parts.

CMSPluginBase inherits from django.contrib.admin.ModelAdmin which gives you
the possibility to further customize behaviour in the admin backend. For example
provide a new change form for this plugin using **the change_form_template**
attribute. See http://docs.djangoproject.com/en/1.2/ref/contrib/admin/

**The render Function**

The render Function is called when the plugin is rendered on a page. Modify the
context given and set additional data you want while rendering with the
template from render_template. This function is only called when rendering the
plugin on a page. Set change_form_template if you want to modify the form
that lets you edit its data.

:context:
  The Context with which the plugin gets rendered.

:instance:
  The instance of the model specified by model.

:placeholder:
  The placeholder this plugin gets rendered in.


The Template for this Plugin could look like this: ::

  <h1>{{ instance.title }}</h1>
  <p>{{ instance.text }}</p>

The context while rendering the plugin is the one you return in the render
function. In our example we passed 'instance' and now can access all our
pluginmodel's fields through this variable.

You should now be able to select this plugin under its name in any placeholder
on any page. The Template is searched with normal django template lookup mechanisms
so you may need to alter the setting of render_template to appropriatly meet your
needs.

My First App
------------

My First Menu
-------------

My First Attach Menu
--------------------

My First Apphook
----------------

