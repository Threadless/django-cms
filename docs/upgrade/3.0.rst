#################
3.0 release notes
#################

*****************
What's new in 3.0
*****************


.. _upgrade-to-3.0:

.. warning:: Upgrading from previous versions

    3.0 introduces some changes that **require** action if you are upgrading
    from a previous version.



New Frontend Editing
====================

Django CMS 3.0 introduces a new Frontend Editing. We now have a edit and build mode. In edit mode you can only edit
plugins and in build mode you can rearrange and add plugins.


New Toolbar
===========

The Toolbar code has been simplified. Toolbar now allows for adding and changing entries.

To add a toolbar for you app create a `cms_toolbar.py` in your app.

Example::

    from cms.toolbar.items import List, Item
    from cms.toolbar_base import CMSToolbar
    from cms.toolbar_pool import toolbar_pool
    from django.core.urlresolvers import reverse
    from django.utils.translation import ugettext_lazy as _


    class CategoryToolbar(CMSToolbar):
        def insert_items(self, items, toolbar, request, is_app):
            if request.user.is_staff:
                items[0].items = [Item(reverse('admin:sampleapp_category_changelist'), _('Categories'),
                                       load_side_frame=True)] + items[0].items
                if is_app:
                    cat_list = List(reverse('admin:sampleapp_category_changelist'), _('Category'))
                    cat_list.items.append(Item(reverse('admin:sampleapp_category_add'), _("Add Category")))
                    items.append(cat_list)


    toolbar_pool.register(CategoryToolbar)


You extend CMSToolbar and register it with the toolbar_pool.
In the `insert_items()` function you recieve some parameters:

- items

    The current toolbar items. Add new items to this list that extend `cms.toolbar.items.BaseItem`. You can find most
    used item types in `cms.toolbar.items`.

- toolbar

    The instance of the toolbar.

- request

    The current request

- is_app

    Is the current url mapped to this app? True if yes.

If you want to add items based on the current view you can do this in the view itself.

Example::

    def category_view(request, id):
        cat = Category.objects.get(pk=id)
        if request.user.is_staff:
            request.toolbar.items[1].items.append(
                Item(reverse('admin:sampleapp_category_change', args=[cat.pk]), "Change Category"))
        return render_to_response('sampleapp/category_view.html',
                                  RequestContext(request, {'category': cat}))


CMS_SEO_FIELDS
==============

Was removed. ``meta_description`` fields max_length was changed to 155 for optimal Google integration.
``page_title`` is default on top. SEO fieldset in admin removed. ``meta_keywords`` field removed as not relevant
anymore.

CMS_MENU_TITLE_OVERWRITE
========================

New default is True.
