#################
3.0 release notes
#################

*****************
What's new in 3.0
*****************


.. _upgrade-to-3.0:

.. warning:: Upgrading from previous versions

    3.0 introduces some changes that **require** action if you are upgrading
    from a previous version.


New Frontend Editing
====================

django CMS 3.0 introduces a new Frontend Editing system. 

In the new system, Placeholders and their Plugins are no longer managed in the
Admin site, but only from the Frontend.

In addition, the system now offer two editing views: 

* **content** view, for editing the configuration and content of plugins
* **structure** view, in which plugins can be added and rearranged


New Toolbar
===========

The Toolbar's code has been simplified and its appearance refreshed. 

The Toolbar is now a more consistent management tool for adding and changing
objects in a django CMS-based system.

Creating Toolbar items for your own application
-----------------------------------------------

You'll need to create a `cms_toolbar.py` in your app.

Example::

    from cms.toolbar.items import List, Item
    from cms.toolbar_base import CMSToolbar
    from cms.toolbar_pool import toolbar_pool
    from django.core.urlresolvers import reverse
    from django.utils.translation import ugettext_lazy as _


    class CategoryToolbar(CMSToolbar):
        def insert_items(self, items, toolbar, request, is_app):
            if request.user.is_staff:
                items[0].items = [Item(reverse('admin:sampleapp_category_changelist'), _('Categories'),
                                       load_side_frame=True)] + items[0].items
                if is_app:
                    cat_list = List(reverse('admin:sampleapp_category_changelist'), _('Category'))
                    cat_list.items.append(Item(reverse('admin:sampleapp_category_add'), _("Add Category")))
                    items.append(cat_list)


    toolbar_pool.register(CategoryToolbar)


You extend CMSToolbar and register it with the toolbar_pool.
In the `insert_items()` function you receive some parameters:

- items

    The current toolbar items. Add new items to this list that extend `cms.toolbar.items.BaseItem`. You can find most
    used item types in `cms.toolbar.items`.

- toolbar

    The instance of the toolbar.

- request

    The current request

- is_app

    Is the current url mapped to this app? True if yes.

If you want to add items based on the current view you can do this in the view itself.

Example::

    def category_view(request, id):
        cat = Category.objects.get(pk=id)
        if request.user.is_staff:
            request.toolbar.items[1].items.append(
                Item(reverse('admin:sampleapp_category_change', args=[cat.pk]), "Change Category"))
        return render_to_response('sampleapp/category_view.html',
                                  RequestContext(request, {'category': cat}))
 

Better multilingual editing
===========================

Improvements in the environment django CMS provides for managing a multi-lingual site include:

* a built-in language chooser for languages that are not public yet 
* configurable behaviour of the Admin site's language when switching between
  languages of edited content


CMS_SEO_FIELDS
==============

**Removed**, along with the SEO fieldset in admin. 

* ``meta_description`` field's max_length is now 155 for optimal Google integration.
* ``page_title`` is default on top
* ``meta_keywords`` field has been removed, as it no longer serves any purpose
            

CMS_MENU_TITLE_OVERWRITE
========================

New default is ``True``.
          

language_chooser
================

The ``language_chooser`` templatetag now only displays languages that are
public. Use the toolbar language chooser to change the language to non-public
languages.
       

Undo and Redo
=============

If you have ``django-reversion`` installed you now have **undo** and **redo**
options available directly in the toolbar. These can now revert *plugin*
content as well as *page* content.


show_editable_page_title
========================

New ``show_editable_page_title`` to edit page title from the frontend.
                 

Plugins removed
===============

We have removed plugins from the core. This is not because you are not
expected to use them, but because django CMS should not impose unnecessary
choices about what to install upon its adopters.

The most significant of these removals is ``cms.plugins.text``.

We provide ``djangocms-text-ckeditor``, a CKEditor-based Text Plugin. It's
available from https://github.com/djangocms-text-ckeditor. You may of course
use your preferred editor; others are available.  
                        

Plugin Context Processors take a new argument
=============================================

:ref:`plugin-context-processors` have had an argument added so that the rest
of the context is available to them. So if you have existing Plugin Context
Processors you will need to change their function signature to add the extra
argument.
